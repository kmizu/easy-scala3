{"config":{"lang":["ja"],"separator":"[\\s\\-\u3000\u3001\u3002\uff0c\uff0e]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"\u3084\u3055\u3057\u3044Scala 3\u5165\u9580","text":"<p>\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u5b8c\u5168\u521d\u5fc3\u8005\u306e\u305f\u3081\u306eScala 3\u5165\u9580\u66f8\u3078\u3088\u3046\u3053\u305d\uff01</p>"},{"location":"#_1","title":"\u3053\u306e\u672c\u306b\u3064\u3044\u3066","text":"<p>\u3053\u306e\u672c\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u7d4c\u9a13\u304c\u307e\u3063\u305f\u304f\u306a\u3044\u65b9\u3067\u3082\u3001Scala 3\u3092\u4f7f\u3063\u305f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u57fa\u790e\u304b\u3089\u5fdc\u7528\u307e\u3067\u5b66\u3079\u308b\u3088\u3046\u306b\u8a2d\u8a08\u3055\u308c\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"#_2","title":"\u3053\u306e\u672c\u306e\u7279\u5fb4","text":"<ul> <li>\u5b8c\u5168\u521d\u5fc3\u8005\u5411\u3051: \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u7d4c\u9a13\u30bc\u30ed\u304b\u3089\u59cb\u3081\u3089\u308c\u307e\u3059</li> <li>\u578b\u5b89\u5168\u6027\u3092\u91cd\u8996: Scala\u306e\u5f37\u529b\u306a\u578b\u30b7\u30b9\u30c6\u30e0\u3092\u6d3b\u7528\u3057\u305f\u5b89\u5168\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u5b66\u3073\u307e\u3059</li> <li>\u5b9f\u8df5\u7684\u306a\u4f8b\u984c: \u8c4a\u5bcc\u306a\u30b3\u30fc\u30c9\u4f8b\u3068\u7df4\u7fd2\u554f\u984c\u3067\u7406\u89e3\u3092\u6df1\u3081\u307e\u3059</li> <li>\u6bb5\u968e\u7684\u306a\u5b66\u7fd2: \u57fa\u790e\u304b\u3089\u5f90\u3005\u306b\u30b9\u30c6\u30c3\u30d7\u30a2\u30c3\u30d7\u3057\u3066\u3044\u304d\u307e\u3059</li> <li>\u30a8\u30e9\u30fc\u304b\u3089\u5b66\u3076: \u3088\u304f\u3042\u308b\u30a8\u30e9\u30fc\u3068\u305d\u306e\u5bfe\u51e6\u6cd5\u3092\u8a73\u3057\u304f\u89e3\u8aac\u3057\u307e\u3059</li> </ul>"},{"location":"#_3","title":"\u5bfe\u8c61\u8aad\u8005","text":"<ul> <li>\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u521d\u3081\u3066\u5b66\u3076\u65b9</li> <li>\u4ed6\u306e\u8a00\u8a9e\u304b\u3089\u79fb\u884c\u3057\u3066Scala\u3092\u5b66\u3073\u305f\u3044\u65b9</li> <li>\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306b\u8208\u5473\u304c\u3042\u308b\u65b9</li> <li>\u578b\u5b89\u5168\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u8eab\u306b\u3064\u3051\u305f\u3044\u65b9</li> </ul>"},{"location":"#_4","title":"\u672c\u66f8\u306e\u69cb\u6210","text":"<p>\u672c\u66f8\u306f9\u3064\u306e\u30d1\u30fc\u30c8\u30686\u3064\u306e\u4ed8\u9332\u304b\u3089\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\uff1a</p> <ol> <li>\u7b2cI\u90e8: \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u4e16\u754c\u3078\u3088\u3046\u3053\u305d</li> <li>\u7b2cII\u90e8: \u30c7\u30fc\u30bf\u3068\u578b\u306e\u57fa\u672c\u3092\u7406\u89e3\u3057\u3088\u3046</li> <li>\u7b2cIII\u90e8: \u578b\u3092\u610f\u8b58\u3057\u3066\u30c7\u30fc\u30bf\u3092\u307e\u3068\u3081\u3088\u3046</li> <li>\u7b2cIV\u90e8: \u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u5224\u65ad\u529b\u3092\u6301\u305f\u305b\u3088\u3046</li> <li>\u7b2cV\u90e8: \u975e\u540c\u671f\u51e6\u7406\u3068\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0</li> <li>\u7b2cVI\u90e8: \u578b\u3067\u8a2d\u8a08\u3059\u308b\u30c7\u30fc\u30bf\u69cb\u9020</li> <li>\u7b2cVII\u90e8: \u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u57fa\u790e</li> <li>\u7b2cVIII\u90e8: \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u4f7f\u3044\u3053\u306a\u3057</li> <li>\u7b2cIX\u90e8: \u5b9f\u7528\u7684\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u6280\u8853</li> </ol>"},{"location":"#_5","title":"\u5fc5\u8981\u306a\u74b0\u5883","text":"<ul> <li>Scala 3.3.1\u4ee5\u4e0a</li> <li>JDK 11\u4ee5\u4e0a</li> <li>\u304a\u597d\u307f\u306e\u30c6\u30ad\u30b9\u30c8\u30a8\u30c7\u30a3\u30bf\uff08VS Code\u3084IntelliJ IDEA\u306a\u3069\uff09</li> </ul>"},{"location":"#_6","title":"\u3053\u306e\u672c\u306e\u4f7f\u3044\u65b9","text":"<ol> <li>\u5404\u7ae0\u3092\u9806\u756a\u306b\u8aad\u307f\u9032\u3081\u3066\u304f\u3060\u3055\u3044</li> <li>\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u5fc5\u305a\u81ea\u5206\u3067\u5165\u529b\u3057\u3066\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u3087\u3046</li> <li>\u7df4\u7fd2\u554f\u984c\u306b\u6311\u6226\u3057\u3066\u7406\u89e3\u3092\u6df1\u3081\u307e\u3057\u3087\u3046</li> <li>\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u3082\u614c\u3066\u305a\u306b\u3001\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8aad\u3093\u3067\u5bfe\u51e6\u3057\u307e\u3057\u3087\u3046</li> <li>\u4ed8\u9332\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u6d3b\u7528\u3057\u307e\u3057\u3087\u3046</li> </ol> <p>\u305d\u308c\u3067\u306f\u3001Scala\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u4e16\u754c\u3078\u4e00\u7dd2\u306b\u8e0f\u307f\u51fa\u3057\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"appendix/appendixA/","title":"\u4ed8\u9332A \u3088\u304f\u3042\u308b\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u5b8c\u5168\u30ac\u30a4\u30c9","text":""},{"location":"appendix/appendixA/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u5b66\u3093\u3067\u3044\u308b\u3068\u3001\u5fc5\u305a\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306b\u51fa\u4f1a\u3044\u307e\u3059\u3002\u6700\u521d\u306f\u6016\u304f\u611f\u3058\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u300c\u4f55\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u304b\u300d\u3092\u6559\u3048\u3066\u304f\u308c\u308b\u89aa\u5207\u306a\u30ac\u30a4\u30c9\u306a\u3093\u3067\u3059\u3002\u3053\u306e\u4ed8\u9332\u3067\u306f\u3001Scala\u3067\u3088\u304f\u898b\u308b\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3068\u305d\u306e\u89e3\u6c7a\u65b9\u6cd5\u3092\u8a73\u3057\u304f\u8aac\u660e\u3057\u307e\u3059\u3002</p>"},{"location":"appendix/appendixA/#_2","title":"\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc","text":""},{"location":"appendix/appendixA/#_3","title":"\u578b\u306e\u4e0d\u4e00\u81f4","text":"<pre><code>// \u30a8\u30e9\u30fc\u4f8b1\uff1a\u578b\u306e\u4e0d\u4e00\u81f4\nval number: Int = \"123\"\n// error: type mismatch;\n//  found   : String(\"123\")\n//  required: Int\n\n// \u89e3\u6c7a\u65b9\u6cd5\nval number: Int = 123\n// \u307e\u305f\u306f\nval number: Int = \"123\".toInt\n</code></pre> <p>\u30a8\u30e9\u30fc\u306e\u610f\u5473: \u671f\u5f85\u3055\u308c\u3066\u3044\u308b\u578b\u3068\u7570\u306a\u308b\u578b\u306e\u5024\u3092\u4ee3\u5165\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u307e\u3059\u3002</p> <p>\u3088\u304f\u3042\u308b\u539f\u56e0: - \u6587\u5b57\u5217\u3092\u6570\u5024\u578b\u306e\u5909\u6570\u306b\u4ee3\u5165 - \u7570\u306a\u308b\u578b\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u6df7\u5728 - \u623b\u308a\u5024\u306e\u578b\u304c\u5ba3\u8a00\u3068\u7570\u306a\u308b</p> <pre><code>// \u30a8\u30e9\u30fc\u4f8b2\uff1a\u95a2\u6570\u306e\u623b\u308a\u5024\ndef add(a: Int, b: Int): Int = {\n  s\"$a + $b = ${a + b}\"  // String\u3092\u8fd4\u3057\u3066\u3044\u308b\n}\n// error: type mismatch;\n//  found   : String\n//  required: Int\n\n// \u89e3\u6c7a\u65b9\u6cd5\ndef add(a: Int, b: Int): Int = {\n  a + b\n}\n// \u307e\u305f\u306f\u578b\u3092\u4fee\u6b63\ndef addWithMessage(a: Int, b: Int): String = {\n  s\"$a + $b = ${a + b}\"\n}\n</code></pre>"},{"location":"appendix/appendixA/#_4","title":"\u672a\u5b9a\u7fa9\u306e\u8b58\u5225\u5b50","text":"<pre><code>// \u30a8\u30e9\u30fc\u4f8b\nprintln(messge)  // \u30bf\u30a4\u30dd\n// error: not found: value messge\n\n// \u89e3\u6c7a\u65b9\u6cd5\nval message = \"Hello\"\nprintln(message)\n</code></pre> <p>\u30a8\u30e9\u30fc\u306e\u610f\u5473: \u4f7f\u7528\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u5909\u6570\u3001\u95a2\u6570\u3001\u30af\u30e9\u30b9\u306a\u3069\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002</p> <p>\u3088\u304f\u3042\u308b\u539f\u56e0: - \u30bf\u30a4\u30d7\u30df\u30b9 - \u30a4\u30f3\u30dd\u30fc\u30c8\u5fd8\u308c - \u30b9\u30b3\u30fc\u30d7\u5916\u3067\u306e\u53c2\u7167</p> <pre><code>// \u30a8\u30e9\u30fc\u4f8b\uff1a\u30b9\u30b3\u30fc\u30d7\u306e\u554f\u984c\ndef example(): Unit = {\n  if (true) {\n    val localVar = 42\n  }\n  println(localVar)  // \u30b9\u30b3\u30fc\u30d7\u5916\n}\n// error: not found: value localVar\n\n// \u89e3\u6c7a\u65b9\u6cd5\ndef example(): Unit = {\n  val localVar = if (true) {\n    42\n  } else {\n    0\n  }\n  println(localVar)\n}\n</code></pre>"},{"location":"appendix/appendixA/#_5","title":"\u30e1\u30bd\u30c3\u30c9\u304c\u898b\u3064\u304b\u3089\u306a\u3044","text":"<pre><code>// \u30a8\u30e9\u30fc\u4f8b\nval numbers = List(1, 2, 3)\nnumbers.push(4)\n// error: value push is not a member of List[Int]\n\n// \u89e3\u6c7a\u65b9\u6cd5\nval numbers = List(1, 2, 3)\nval updated = numbers :+ 4  // \u307e\u305f\u306f numbers.appended(4)\n</code></pre> <p>\u30a8\u30e9\u30fc\u306e\u610f\u5473: \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5b58\u5728\u3057\u306a\u3044\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u305d\u3046\u3068\u3057\u3066\u3044\u307e\u3059\u3002</p> <p>\u3088\u304f\u3042\u308b\u539f\u56e0: - \u4ed6\u306e\u8a00\u8a9e\u306e\u30e1\u30bd\u30c3\u30c9\u540d\u3092\u4f7f\u7528 - \u30bf\u30a4\u30d7\u30df\u30b9 - \u7570\u306a\u308b\u578b\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528</p>"},{"location":"appendix/appendixA/#_6","title":"\u30a2\u30af\u30bb\u30b9\u4fee\u98fe\u5b50\u30a8\u30e9\u30fc","text":"<pre><code>// \u30a8\u30e9\u30fc\u4f8b\nclass MyClass {\n  private val secret = \"\u79d8\u5bc6\"\n}\n\nval obj = new MyClass\nprintln(obj.secret)\n// error: value secret cannot be accessed as a member of MyClass\n\n// \u89e3\u6c7a\u65b9\u6cd5\nclass MyClass {\n  private val secret = \"\u79d8\u5bc6\"\n  def getSecret: String = secret\n}\n</code></pre> <p>\u30a8\u30e9\u30fc\u306e\u610f\u5473: private\u3084protected\u306a\u30e1\u30f3\u30d0\u30fc\u306b\u5916\u90e8\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"appendix/appendixA/#_7","title":"\u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u306e\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30a8\u30e9\u30fc","text":"<pre><code>// \u30a8\u30e9\u30fc\u4f8b\nsealed trait Animal\ncase class Dog(name: String) extends Animal\ncase class Cat(name: String) extends Animal\n\ndef speak(animal: Animal): String = animal match {\n  case Dog(name) =&gt; s\"$name says Woof!\"\n}\n// warning: match may not be exhaustive.\n// It would fail on the following input: Cat(_)\n\n// \u89e3\u6c7a\u65b9\u6cd5\ndef speak(animal: Animal): String = animal match {\n  case Dog(name) =&gt; s\"$name says Woof!\"\n  case Cat(name) =&gt; s\"$name says Meow!\"\n}\n</code></pre> <p>\u30a8\u30e9\u30fc\u306e\u610f\u5473: \u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u3067\u3059\u3079\u3066\u306e\u30b1\u30fc\u30b9\u3092\u7db2\u7f85\u3057\u3066\u3044\u307e\u305b\u3093\u3002</p>"},{"location":"appendix/appendixA/#_8","title":"\u5b9f\u884c\u6642\u30a8\u30e9\u30fc","text":""},{"location":"appendix/appendixA/#nullpointerexception","title":"NullPointerException","text":"<pre><code>// \u30a8\u30e9\u30fc\u4f8b\nvar message: String = null\nprintln(message.length)\n// java.lang.NullPointerException\n\n// \u89e3\u6c7a\u65b9\u6cd51\uff1aOption\u578b\u3092\u4f7f\u3046\nvar message: Option[String] = None\nprintln(message.map(_.length).getOrElse(0))\n\n// \u89e3\u6c7a\u65b9\u6cd52\uff1anull\u30c1\u30a7\u30c3\u30af\nvar message: String = null\nif (message != null) {\n  println(message.length)\n}\n</code></pre> <p>\u30a8\u30e9\u30fc\u306e\u610f\u5473: null\u5024\u306b\u5bfe\u3057\u3066\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u305d\u3046\u3068\u3057\u3066\u3044\u307e\u3059\u3002</p> <p>\u4e88\u9632\u65b9\u6cd5: - Option\u578b\u306e\u4f7f\u7528 - \u521d\u671f\u5024\u306e\u8a2d\u5b9a - null\u30c1\u30a7\u30c3\u30af\u306e\u5b9f\u65bd</p>"},{"location":"appendix/appendixA/#arrayindexoutofboundsexception","title":"ArrayIndexOutOfBoundsException","text":"<pre><code>// \u30a8\u30e9\u30fc\u4f8b\nval array = Array(1, 2, 3)\nprintln(array(5))\n// java.lang.ArrayIndexOutOfBoundsException: Index 5 out of bounds for length 3\n\n// \u89e3\u6c7a\u65b9\u6cd51\uff1a\u7bc4\u56f2\u30c1\u30a7\u30c3\u30af\nval array = Array(1, 2, 3)\nval index = 5\nif (index &gt;= 0 &amp;&amp; index &lt; array.length) {\n  println(array(index))\n} else {\n  println(s\"\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 $index \u306f\u7bc4\u56f2\u5916\u3067\u3059\")\n}\n\n// \u89e3\u6c7a\u65b9\u6cd52\uff1alift\u30e1\u30bd\u30c3\u30c9\nval array = Array(1, 2, 3)\nprintln(array.lift(5).getOrElse(\"\u8981\u7d20\u306a\u3057\"))\n</code></pre> <p>\u30a8\u30e9\u30fc\u306e\u610f\u5473: \u914d\u5217\u3084\u30ea\u30b9\u30c8\u306e\u7bc4\u56f2\u5916\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"appendix/appendixA/#numberformatexception","title":"NumberFormatException","text":"<pre><code>// \u30a8\u30e9\u30fc\u4f8b\nval number = \"abc\".toInt\n// java.lang.NumberFormatException: For input string: \"abc\"\n\n// \u89e3\u6c7a\u65b9\u6cd51\uff1aTry \u3092\u4f7f\u3046\nimport scala.util.Try\n\nval number = Try(\"abc\".toInt).getOrElse(0)\n\n// \u89e3\u6c7a\u65b9\u6cd52\uff1a\u72ec\u81ea\u306e\u5b89\u5168\u306a\u5909\u63db\u95a2\u6570\ndef parseIntSafe(s: String): Option[Int] = {\n  try {\n    Some(s.toInt)\n  } catch {\n    case _: NumberFormatException =&gt; None\n  }\n}\n</code></pre> <p>\u30a8\u30e9\u30fc\u306e\u610f\u5473: \u6587\u5b57\u5217\u3092\u6570\u5024\u306b\u5909\u63db\u3067\u304d\u307e\u305b\u3093\u3002</p>"},{"location":"appendix/appendixA/#matcherror","title":"MatchError","text":"<pre><code>// \u30a8\u30e9\u30fc\u4f8b\nval value: Any = 3.14\n\nval result = value match {\n  case i: Int =&gt; s\"\u6574\u6570: $i\"\n  case s: String =&gt; s\"\u6587\u5b57\u5217: $s\"\n}\n// scala.MatchError: 3.14 (of class java.lang.Double)\n\n// \u89e3\u6c7a\u65b9\u6cd5\uff1a\u30c7\u30d5\u30a9\u30eb\u30c8\u30b1\u30fc\u30b9\u3092\u8ffd\u52a0\nval result = value match {\n  case i: Int =&gt; s\"\u6574\u6570: $i\"\n  case s: String =&gt; s\"\u6587\u5b57\u5217: $s\"\n  case other =&gt; s\"\u305d\u306e\u4ed6: $other\"\n}\n</code></pre> <p>\u30a8\u30e9\u30fc\u306e\u610f\u5473: \u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u3067\u8a72\u5f53\u3059\u308b\u30b1\u30fc\u30b9\u304c\u3042\u308a\u307e\u305b\u3093\u3002</p>"},{"location":"appendix/appendixA/#_9","title":"\u4e26\u884c\u51e6\u7406\u306e\u30a8\u30e9\u30fc","text":""},{"location":"appendix/appendixA/#timeoutexception","title":"TimeoutException","text":"<pre><code>// \u30a8\u30e9\u30fc\u4f8b\nimport scala.concurrent.Future\nimport scala.concurrent.ExecutionContext.Implicits.global\nimport scala.concurrent.duration._\n\nval future = Future {\n  Thread.sleep(5000)\n  \"\u5b8c\u4e86\"\n}\n\nval result = Await.result(future, 1.second)\n// java.util.concurrent.TimeoutException: Future timed out after [1 second]\n\n// \u89e3\u6c7a\u65b9\u6cd51\uff1a\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u5ef6\u9577\nval result = Await.result(future, 10.seconds)\n\n// \u89e3\u6c7a\u65b9\u6cd52\uff1a\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u6642\u306e\u51e6\u7406\nval resultOption = Try(Await.result(future, 1.second)).toOption\n</code></pre> <p>\u30a8\u30e9\u30fc\u306e\u610f\u5473: \u975e\u540c\u671f\u51e6\u7406\u304c\u6307\u5b9a\u6642\u9593\u5185\u306b\u5b8c\u4e86\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u3002</p>"},{"location":"appendix/appendixA/#_10","title":"\u5171\u6709\u72b6\u614b\u306e\u7af6\u5408","text":"<pre><code>// \u30a8\u30e9\u30fc\u304c\u8d77\u304d\u3084\u3059\u3044\u4f8b\nvar counter = 0\n\nval futures = (1 to 1000).map { _ =&gt;\n  Future {\n    counter += 1  // \u7af6\u5408\u72b6\u614b\n  }\n}\n\n// \u89e3\u6c7a\u65b9\u6cd5\uff1aAtomicInteger\u3092\u4f7f\u7528\nimport java.util.concurrent.atomic.AtomicInteger\n\nval counter = new AtomicInteger(0)\n\nval futures = (1 to 1000).map { _ =&gt;\n  Future {\n    counter.incrementAndGet()\n  }\n}\n</code></pre>"},{"location":"appendix/appendixA/#_11","title":"\u3088\u304f\u3042\u308b\u8b66\u544a","text":""},{"location":"appendix/appendixA/#_12","title":"\u672a\u4f7f\u7528\u306e\u5909\u6570","text":"<pre><code>// \u8b66\u544a\u4f8b\ndef example(): Unit = {\n  val unused = 42  // warning: local val unused in method example is never used\n  println(\"Hello\")\n}\n\n// \u89e3\u6c7a\u65b9\u6cd51\uff1a\u4f7f\u7528\u3059\u308b\ndef example(): Unit = {\n  val number = 42\n  println(s\"Number is $number\")\n}\n\n// \u89e3\u6c7a\u65b9\u6cd52\uff1a\u30a2\u30f3\u30c0\u30fc\u30b9\u30b3\u30a2\u3092\u4f7f\u3046\ndef example(): Unit = {\n  val _ = expensiveComputation()  // \u623b\u308a\u5024\u3092\u660e\u793a\u7684\u306b\u7121\u8996\n  println(\"Hello\")\n}\n</code></pre>"},{"location":"appendix/appendixA/#_13","title":"\u975e\u63a8\u5968\u306e\u6a5f\u80fd","text":"<pre><code>// \u8b66\u544a\u4f8b\nval list = List(1, 2, 3)\nlist./::(0)  // warning: method /:: in trait SeqOps is deprecated\n\n// \u89e3\u6c7a\u65b9\u6cd5\uff1a\u65b0\u3057\u3044API\u3092\u4f7f\u7528\nval list = List(1, 2, 3)\n0 +: list  // \u307e\u305f\u306f list.prepended(0)\n</code></pre>"},{"location":"appendix/appendixA/#_14","title":"\u30c7\u30d0\u30c3\u30b0\u306e\u30d2\u30f3\u30c8","text":""},{"location":"appendix/appendixA/#_15","title":"\u30b9\u30bf\u30c3\u30af\u30c8\u30ec\u30fc\u30b9\u306e\u8aad\u307f\u65b9","text":"<pre><code>Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: 10\n    at com.example.MyApp$.main(MyApp.scala:15)  // \u2190 \u3053\u3053\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\n    at com.example.MyApp.main(MyApp.scala)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n</code></pre> <p>\u8aad\u307f\u65b9: 1. \u4e00\u756a\u4e0a\u304c\u30a8\u30e9\u30fc\u306e\u7a2e\u985e\u3068\u30e1\u30c3\u30bb\u30fc\u30b8 2. at\u3067\u59cb\u307e\u308b\u884c\u304c\u547c\u3073\u51fa\u3057\u5c65\u6b74 3. \u6700\u521d\u306eat\u304c\u30a8\u30e9\u30fc\u767a\u751f\u7b87\u6240</p>"},{"location":"appendix/appendixA/#_16","title":"\u3088\u304f\u3042\u308b\u30c7\u30d0\u30c3\u30b0\u30c6\u30af\u30cb\u30c3\u30af","text":"<pre><code>// 1. println \u30c7\u30d0\u30c3\u30b0\ndef complexCalculation(x: Int): Int = {\n  println(s\"Input: $x\")\n  val step1 = x * 2\n  println(s\"After step1: $step1\")\n  val step2 = step1 + 10\n  println(s\"After step2: $step2\")\n  step2\n}\n\n// 2. assert \u3092\u4f7f\u3063\u305f\u524d\u63d0\u6761\u4ef6\u30c1\u30a7\u30c3\u30af\ndef divide(a: Int, b: Int): Int = {\n  assert(b != 0, \"\u9664\u6570\u306f0\u4ee5\u5916\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\")\n  a / b\n}\n\n// 3. \u30ed\u30b0\u3092\u4f7f\u3063\u305f\u30c7\u30d0\u30c3\u30b0\nimport scala.util.{Try, Success, Failure}\n\ndef riskyOperation(): Try[String] = {\n  Try {\n    // \u5371\u967a\u306a\u64cd\u4f5c\n    \"\u6210\u529f\"\n  } match {\n    case Success(value) =&gt;\n      println(s\"\u64cd\u4f5c\u6210\u529f: $value\")\n      Success(value)\n    case Failure(exception) =&gt;\n      println(s\"\u64cd\u4f5c\u5931\u6557: ${exception.getMessage}\")\n      exception.printStackTrace()\n      Failure(exception)\n  }\n}\n</code></pre>"},{"location":"appendix/appendixA/#_17","title":"\u30a8\u30e9\u30fc\u5bfe\u51e6\u306e\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9","text":""},{"location":"appendix/appendixA/#1","title":"1. \u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8aad\u3080","text":"<pre><code>// \u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u53cb\u9054\u3067\u3059\uff01\n// found   : String(\"123\")  \u2190 \u5b9f\u969b\u306e\u578b\n// required: Int            \u2190 \u671f\u5f85\u3055\u308c\u308b\u578b\n</code></pre>"},{"location":"appendix/appendixA/#2","title":"2. \u5c0f\u3055\u304f\u5206\u5272\u3057\u3066\u78ba\u8a8d","text":"<pre><code>// \u8907\u96d1\u306a\u5f0f\u3067\u30a8\u30e9\u30fc\u304c\u51fa\u305f\u3089...\nval result = list.map(_.toString).filter(_.length &gt; 3).flatMap(_.split(\",\"))\n\n// \u6bb5\u968e\u7684\u306b\u78ba\u8a8d\nval step1 = list.map(_.toString)\nprintln(s\"step1: $step1\")\n\nval step2 = step1.filter(_.length &gt; 3)\nprintln(s\"step2: $step2\")\n\nval step3 = step2.flatMap(_.split(\",\"))\nprintln(s\"step3: $step3\")\n</code></pre>"},{"location":"appendix/appendixA/#3","title":"3. \u578b\u3092\u660e\u793a\u3059\u308b","text":"<pre><code>// \u578b\u63a8\u8ad6\u3067\u30a8\u30e9\u30fc\u304c\u5206\u304b\u308a\u306b\u304f\u3044\u5834\u5408\ndef process(data: ???) = ???  // \u4f55\u3092\u8fd4\u3059\u304b\u4e0d\u660e\n\n// \u578b\u3092\u660e\u793a\ndef process(data: List[String]): Map[String, Int] = {\n  // \u5b9f\u88c5\n}\n</code></pre>"},{"location":"appendix/appendixA/#4-ide","title":"4. IDE\u3092\u6d3b\u7528\u3059\u308b","text":"<ul> <li>\u8d64\u3044\u6ce2\u7dda\uff1a\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc</li> <li>\u9ec4\u8272\u3044\u6ce2\u7dda\uff1a\u8b66\u544a</li> <li>\u30db\u30d0\u30fc\u3067\u30a8\u30e9\u30fc\u8a73\u7d30\u8868\u793a</li> <li>Quick Fix\u3067\u81ea\u52d5\u4fee\u6b63</li> </ul>"},{"location":"appendix/appendixA/#_18","title":"\u307e\u3068\u3081","text":"<p>\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306f\u6575\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u6b63\u3057\u304f\u66f8\u304f\u305f\u3081\u306e\u5473\u65b9\u3067\u3059\u3002\u6700\u521d\u306f\u96e3\u3057\u304f\u611f\u3058\u3066\u3082\u3001\u30d1\u30bf\u30fc\u30f3\u3092\u899a\u3048\u308c\u3070\u5fc5\u305a\u7406\u89e3\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u30a8\u30e9\u30fc\u304c\u51fa\u305f\u3089\uff1a</p> <ol> <li>\u843d\u3061\u7740\u3044\u3066\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8aad\u3080</li> <li>\u30a8\u30e9\u30fc\u306e\u5834\u6240\u3092\u7279\u5b9a\u3059\u308b</li> <li>\u30a8\u30e9\u30fc\u306e\u7a2e\u985e\u3092\u7406\u89e3\u3059\u308b</li> <li>\u89e3\u6c7a\u65b9\u6cd5\u3092\u8a66\u3059</li> <li>\u305d\u308c\u3067\u3082\u5206\u304b\u3089\u306a\u3051\u308c\u3070\u691c\u7d22\u3059\u308b</li> </ol> <p>\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306f\u8a66\u884c\u932f\u8aa4\u306e\u9023\u7d9a\u3067\u3059\u3002\u30a8\u30e9\u30fc\u3068\u53cb\u9054\u306b\u306a\u3063\u3066\u3001\u697d\u3057\u304fScala\u3092\u5b66\u3093\u3067\u3044\u304d\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"appendix/appendixB/","title":"\u4ed8\u9332B REPL\u5b8c\u5168\u6d3b\u7528\u6cd5","text":""},{"location":"appendix/appendixB/#repl","title":"REPL\u3068\u306f\uff1f","text":"<p>REPL\uff08Read-Eval-Print Loop\uff09\u306f\u3001Scala\u30b3\u30fc\u30c9\u3092\u5bfe\u8a71\u7684\u306b\u5b9f\u884c\u3067\u304d\u308b\u74b0\u5883\u3067\u3059\u3002\u30b3\u30fc\u30c9\u30921\u884c\u305a\u3064\u8a66\u3057\u306a\u304c\u3089\u5b66\u7fd2\u3067\u304d\u308b\u3001\u6700\u9ad8\u306e\u7df4\u7fd2\u5834\u3067\u3059\uff01</p>"},{"location":"appendix/appendixB/#repl_1","title":"REPL\u306e\u8d77\u52d5\u3068\u57fa\u672c\u64cd\u4f5c","text":""},{"location":"appendix/appendixB/#_1","title":"\u8d77\u52d5\u65b9\u6cd5","text":"<pre><code># Scala 3\u306eREPL\u3092\u8d77\u52d5\n$ scala\n\n# \u307e\u305f\u306f\uff08sbt\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u5185\u3067\uff09\n$ sbt console\n\nWelcome to Scala 3.3.1 (11.0.20, Java OpenJDK 64-Bit Server VM).\nType in expressions for evaluation. Or try :help.\n\nscala&gt;\n</code></pre>"},{"location":"appendix/appendixB/#_2","title":"\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9","text":"<pre><code>scala&gt; 1 + 1\nval res0: Int = 2\n\nscala&gt; val message = \"Hello, REPL!\"\nval message: String = Hello, REPL!\n\nscala&gt; println(message)\nHello, REPL!\n\nscala&gt; def greet(name: String) = s\"\u3053\u3093\u306b\u3061\u306f\u3001$name \u3055\u3093\uff01\"\ndef greet(name: String): String\n\nscala&gt; greet(\"\u592a\u90ce\")\nval res1: String = \u3053\u3093\u306b\u3061\u306f\u3001\u592a\u90ce \u3055\u3093\uff01\n</code></pre>"},{"location":"appendix/appendixB/#repl_2","title":"REPL\u30b3\u30de\u30f3\u30c9","text":""},{"location":"appendix/appendixB/#_3","title":"\u30d8\u30eb\u30d7\u3068\u60c5\u5831\u8868\u793a","text":"<pre><code>// \u5229\u7528\u53ef\u80fd\u306a\u30b3\u30de\u30f3\u30c9\u4e00\u89a7\nscala&gt; :help\n:type &lt;expression&gt;      \u5f0f\u306e\u578b\u3092\u8868\u793a\n:kind &lt;type&gt;           \u578b\u306e\u7a2e\u985e\u3092\u8868\u793a\n:imports               \u73fe\u5728\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3092\u8868\u793a\n:reset                 REPL\u3092\u30ea\u30bb\u30c3\u30c8\n:quit                  REPL\u3092\u7d42\u4e86\n// ... \u305d\u306e\u4ed6\u591a\u6570\n\n// \u5f0f\u306e\u578b\u3092\u78ba\u8a8d\nscala&gt; :type List(1, 2, 3)\nList[Int]\n\nscala&gt; :type (x: Int) =&gt; x * 2\nInt =&gt; Int\n\n// \u578b\u306e\u7a2e\u985e\u3092\u78ba\u8a8d\nscala&gt; :kind List\nList's kind is F[+A]\n\nscala&gt; :kind Map\nMap's kind is F[K, +V]\n</code></pre>"},{"location":"appendix/appendixB/#_4","title":"\u5c65\u6b74\u3068\u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3","text":"<pre><code>// \u5c65\u6b74\u306e\u8868\u793a\nscala&gt; :history\n\n// \u524d\u306e\u7d50\u679c\u3092\u53c2\u7167\nscala&gt; 10 * 20\nval res0: Int = 200\n\nscala&gt; res0 + 50\nval res1: Int = 250\n\n// \u5c65\u6b74\u306e\u691c\u7d22\uff08Ctrl+R\uff09\n// \u4e0a\u4e0b\u77e2\u5370\u30ad\u30fc\u3067\u5c65\u6b74\u3092\u30ca\u30d3\u30b2\u30fc\u30c8\n</code></pre>"},{"location":"appendix/appendixB/#_5","title":"\u9ad8\u5ea6\u306a\u4f7f\u3044\u65b9","text":""},{"location":"appendix/appendixB/#_6","title":"\u8907\u6570\u884c\u5165\u529b","text":"<pre><code>// \u8907\u6570\u884c\u306e\u5165\u529b\uff08\u81ea\u52d5\u691c\u51fa\uff09\nscala&gt; def factorial(n: Int): Int =\n     |   if n &lt;= 1 then 1\n     |   else n * factorial(n - 1)\ndef factorial(n: Int): Int\n\n// \u660e\u793a\u7684\u306a\u8907\u6570\u884c\u30e2\u30fc\u30c9\nscala&gt; :paste\n// Entering paste mode (ctrl-D to finish)\n\ncase class Person(name: String, age: Int) {\n  def greet(): String = s\"Hello, I'm $name\"\n  def isAdult: Boolean = age &gt;= 18\n}\n\nval people = List(\n  Person(\"Alice\", 25),\n  Person(\"Bob\", 17),\n  Person(\"Charlie\", 30)\n)\n\n// Exiting paste mode, now interpreting.\n</code></pre>"},{"location":"appendix/appendixB/#_7","title":"\u30a4\u30f3\u30dd\u30fc\u30c8\u3068\u30af\u30e9\u30b9\u30d1\u30b9","text":"<pre><code>// \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\nscala&gt; import scala.concurrent._\nimport scala.concurrent._\n\nscala&gt; import scala.concurrent.duration._\nimport scala.concurrent.duration._\n\nscala&gt; import ExecutionContext.Implicits.global\nimport ExecutionContext.Implicits.global\n\n// \u73fe\u5728\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u3092\u78ba\u8a8d\nscala&gt; :imports\nimport java.lang._\nimport scala._\nimport scala.Predef._\nimport scala.concurrent._\nimport scala.concurrent.duration._\nimport scala.concurrent.ExecutionContext.Implicits.global\n\n// \u5916\u90e8JAR\u306e\u8ffd\u52a0\uff08\u8d77\u52d5\u6642\uff09\n$ scala -cp /path/to/library.jar\n</code></pre>"},{"location":"appendix/appendixB/#repl_3","title":"REPL\u3067\u306e\u30c7\u30d0\u30c3\u30b0","text":"<pre><code>// \u5024\u306e\u691c\u67fb\nscala&gt; val numbers = List(1, 2, 3, 4, 5)\nval numbers: List[Int] = List(1, 2, 3, 4, 5)\n\nscala&gt; numbers.map { x =&gt;\n     |   println(s\"Processing: $x\")\n     |   x * 2\n     | }\nProcessing: 1\nProcessing: 2\nProcessing: 3\nProcessing: 4\nProcessing: 5\nval res0: List[Int] = List(2, 4, 6, 8, 10)\n\n// \u4e2d\u9593\u7d50\u679c\u306e\u78ba\u8a8d\nscala&gt; val result = for {\n     |   x &lt;- List(1, 2, 3)\n     |   _ = println(s\"x = $x\")\n     |   y &lt;- List(10, 20)\n     |   _ = println(s\"  y = $y\")\n     | } yield x * y\nx = 1\n  y = 10\n  y = 20\nx = 2\n  y = 10\n  y = 20\nx = 3\n  y = 10\n  y = 20\nval result: List[Int] = List(10, 20, 20, 40, 30, 60)\n</code></pre>"},{"location":"appendix/appendixB/#repl_4","title":"\u5b9f\u8df5\u7684\u306aREPL\u6d3b\u7528\u6cd5","text":""},{"location":"appendix/appendixB/#_8","title":"\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u5b9f\u9a13","text":"<pre><code>// \u30bd\u30fc\u30c8\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u5b9f\u88c5\u3068\u691c\u8a3c\nscala&gt; def bubbleSort(arr: Array[Int]): Array[Int] = {\n     |   val n = arr.length\n     |   for {\n     |     i &lt;- 0 until n - 1\n     |     j &lt;- 0 until n - i - 1\n     |     if arr(j) &gt; arr(j + 1)\n     |   } {\n     |     val temp = arr(j)\n     |     arr(j) = arr(j + 1)\n     |     arr(j + 1) = temp\n     |   }\n     |   arr\n     | }\n\nscala&gt; val test = Array(64, 34, 25, 12, 22, 11, 90)\nscala&gt; bubbleSort(test)\nval res0: Array[Int] = Array(11, 12, 22, 25, 34, 64, 90)\n\n// \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6e2c\u5b9a\nscala&gt; def time[T](block: =&gt; T): T = {\n     |   val start = System.nanoTime()\n     |   val result = block\n     |   val end = System.nanoTime()\n     |   println(s\"\u5b9f\u884c\u6642\u9593: ${(end - start) / 1000000.0} ms\")\n     |   result\n     | }\n\nscala&gt; time { (1 to 1000000).sum }\n\u5b9f\u884c\u6642\u9593: 12.345 ms\nval res1: Int = 500000500000\n</code></pre>"},{"location":"appendix/appendixB/#_9","title":"\u30c7\u30fc\u30bf\u63a2\u7d22","text":"<pre><code>// CSV\u30c7\u30fc\u30bf\u306e\u7c21\u6613\u89e3\u6790\nscala&gt; val csvData = \"\"\"\n     | name,age,city\n     | Alice,25,Tokyo\n     | Bob,30,Osaka\n     | Charlie,22,Kyoto\n     | \"\"\".trim\n\nscala&gt; val lines = csvData.split(\"\\n\").toList\nscala&gt; val header = lines.head.split(\",\").toList\nscala&gt; val data = lines.tail.map(_.split(\",\").toList)\n\nscala&gt; case class Person(name: String, age: Int, city: String)\n\nscala&gt; val people = data.map { row =&gt;\n     |   Person(row(0), row(1).toInt, row(2))\n     | }\n\nscala&gt; people.filter(_.age &gt; 24)\nval res0: List[Person] = List(Person(Alice,25,Tokyo), Person(Bob,30,Osaka))\n\nscala&gt; people.groupBy(_.city).mapValues(_.length)\nval res1: Map[String, Int] = Map(Tokyo -&gt; 1, Osaka -&gt; 1, Kyoto -&gt; 1)\n</code></pre>"},{"location":"appendix/appendixB/#api","title":"API\u306e\u5b9f\u9a13","text":"<pre><code>// \u30b3\u30ec\u30af\u30b7\u30e7\u30f3API\u306e\u5b9f\u9a13\nscala&gt; val numbers = 1 to 10\n\nscala&gt; numbers.filter(_ % 2 == 0)\nval res0: IndexedSeq[Int] = Vector(2, 4, 6, 8, 10)\n\nscala&gt; numbers.partition(_ % 2 == 0)\nval res1: (IndexedSeq[Int], IndexedSeq[Int]) = (Vector(2, 4, 6, 8, 10),Vector(1, 3, 5, 7, 9))\n\nscala&gt; numbers.grouped(3).toList\nval res2: List[IndexedSeq[Int]] = List(Range(1, 2, 3), Range(4, 5, 6), Range(7, 8, 9), Range(10))\n\nscala&gt; numbers.sliding(3).toList\nval res3: List[IndexedSeq[Int]] = List(Range(1, 2, 3), Range(2, 3, 4), Range(3, 4, 5), ...)\n</code></pre>"},{"location":"appendix/appendixB/#repl_5","title":"REPL\u306e\u30ab\u30b9\u30bf\u30de\u30a4\u30ba","text":""},{"location":"appendix/appendixB/#_10","title":"\u521d\u671f\u5316\u30d5\u30a1\u30a4\u30eb","text":"<pre><code>// ~/.scala/init.scala\n// REPl\u8d77\u52d5\u6642\u306b\u81ea\u52d5\u7684\u306b\u5b9f\u884c\u3055\u308c\u308b\u30b3\u30fc\u30c9\n\nimport scala.concurrent._\nimport scala.concurrent.duration._\nimport scala.util.{Try, Success, Failure}\nimport ExecutionContext.Implicits.global\n\n// \u4fbf\u5229\u306a\u95a2\u6570\u3092\u5b9a\u7fa9\ndef time[T](label: String = \"\u5b9f\u884c\u6642\u9593\")(block: =&gt; T): T = {\n  val start = System.nanoTime()\n  val result = block\n  val end = System.nanoTime()\n  println(s\"$label: ${(end - start) / 1000000.0} ms\")\n  result\n}\n\n// \u3088\u304f\u4f7f\u3046\u5024\nval numbers = List(1, 2, 3, 4, 5)\nval words = List(\"scala\", \"java\", \"python\", \"ruby\")\n\nprintln(\"\u30ab\u30b9\u30bf\u30e0\u521d\u671f\u5316\u5b8c\u4e86\uff01\")\n</code></pre>"},{"location":"appendix/appendixB/#repl_6","title":"REPL\u306e\u8a2d\u5b9a","text":"<pre><code>// \u30d7\u30ed\u30f3\u30d7\u30c8\u306e\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\nscala&gt; :power\nscala&gt; settings.prompt = \"\u03bb&gt; \"\n\u03bb&gt; println(\"\u65b0\u3057\u3044\u30d7\u30ed\u30f3\u30d7\u30c8\uff01\")\n\u65b0\u3057\u3044\u30d7\u30ed\u30f3\u30d7\u30c8\uff01\n\n// \u7d50\u679c\u8868\u793a\u306e\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\n\u03bb&gt; settings.maxPrintString = 1000  // \u9577\u3044\u6587\u5b57\u5217\u3082\u8868\u793a\n</code></pre>"},{"location":"appendix/appendixB/#_11","title":"\u30c8\u30e9\u30d6\u30eb\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0","text":""},{"location":"appendix/appendixB/#_12","title":"\u30e1\u30e2\u30ea\u4e0d\u8db3","text":"<pre><code>// \u5927\u304d\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u3067OutOfMemoryError\nscala&gt; val huge = (1 to 10000000).toList.map(x =&gt; x.toString * 100)\n\n// \u89e3\u6c7a\u7b56\uff1aJVM\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3057\u3066\u8d77\u52d5\n$ scala -J-Xmx2g  # \u30d2\u30fc\u30d7\u30b5\u30a4\u30ba\u30922GB\u306b\n</code></pre>"},{"location":"appendix/appendixB/#_13","title":"\u7121\u9650\u30eb\u30fc\u30d7\u304b\u3089\u306e\u8131\u51fa","text":"<pre><code>scala&gt; while(true) { }  // Ctrl+C \u3067\u4e2d\u65ad\n\n// \u3088\u308a\u5b89\u5168\u306a\u65b9\u6cd5\nscala&gt; def loop(n: Int): Unit = if (n &gt; 0) {\n     |   println(n)\n     |   Thread.sleep(1000)\n     |   loop(n - 1)\n     | }\nscala&gt; loop(5)  // 5\u79d2\u3067\u7d42\u4e86\n</code></pre>"},{"location":"appendix/appendixB/#repl_7","title":"REPL\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9","text":""},{"location":"appendix/appendixB/#1","title":"1. \u5b9f\u9a13\u7684\u306a\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","text":"<pre><code>// \u30a2\u30a4\u30c7\u30a2\u3092\u7d20\u65e9\u304f\u8a66\u3059\nscala&gt; List(1, 2, 3).zip(List('a', 'b', 'c'))\nval res0: List[(Int, Char)] = List((1,a), (2,b), (3,c))\n\nscala&gt; res0.map { case (n, c) =&gt; s\"$n-$c\" }\nval res1: List[String] = List(1-a, 2-b, 3-c)\n</code></pre>"},{"location":"appendix/appendixB/#2","title":"2. \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u5b66\u7fd2","text":"<pre><code>// \u65b0\u3057\u3044\u30e9\u30a4\u30d6\u30e9\u30ea\u306eAPI\u3092\u63a2\u7d22\nscala&gt; import java.time._\n\nscala&gt; LocalDate.now()\nval res0: java.time.LocalDate = 2024-01-15\n\nscala&gt; res0.plusDays(7)\nval res1: java.time.LocalDate = 2024-01-22\n\nscala&gt; Period.between(res0, res1)\nval res2: java.time.Period = P7D\n</code></pre>"},{"location":"appendix/appendixB/#3","title":"3. \u30c7\u30d0\u30c3\u30b0\u3068\u30c6\u30b9\u30c8","text":"<pre><code>// \u95a2\u6570\u306e\u52d5\u4f5c\u78ba\u8a8d\nscala&gt; def factorial(n: Int): BigInt = {\n     |   println(s\"factorial($n)\")\n     |   if (n &lt;= 1) 1 else n * factorial(n - 1)\n     | }\n\nscala&gt; factorial(5)\nfactorial(5)\nfactorial(4)\nfactorial(3)\nfactorial(2)\nfactorial(1)\nval res0: BigInt = 120\n</code></pre>"},{"location":"appendix/appendixB/#4","title":"4. \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u78ba\u8a8d","text":"<pre><code>// Scaladoc\u3092\u53c2\u7167\uff08IDE\u3068\u4f75\u7528\uff09\nscala&gt; :type List\nList.type\n\nscala&gt; List.\n!=   ##   $asInstanceOf   $isInstanceOf   ==   apply   canBuildFrom   \nconcat   empty   equals   fill   from   getClass   hashCode   iterate   \nnewBuilder   range   tabulate   toString   unapplySeq\n</code></pre>"},{"location":"appendix/appendixB/#_14","title":"\u9ad8\u5ea6\u306a\u30c6\u30af\u30cb\u30c3\u30af","text":""},{"location":"appendix/appendixB/#_15","title":"\u30de\u30af\u30ed\u3068\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0","text":"<pre><code>// inline\u95a2\u6570\u306e\u5b9f\u9a13\uff08Scala 3\uff09\nscala&gt; inline def power(x: Double, inline n: Int): Double =\n     |   inline if n == 0 then 1.0\n     |   else if n % 2 == 0 then power(x * x, n / 2)\n     |   else x * power(x, n - 1)\n\nscala&gt; power(2.0, 10)\nval res0: Double = 1024.0\n</code></pre>"},{"location":"appendix/appendixB/#_16","title":"\u578b\u30ec\u30d9\u30eb\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0","text":"<pre><code>// \u578b\u306e\u5b9f\u9a13\nscala&gt; type Age = Int\nscala&gt; type Name = String\n\nscala&gt; case class Person(name: Name, age: Age)\n\nscala&gt; summon[Ordering[Int]]\nval res0: Ordering[Int] = scala.math.Ordering$Int$@12345678\n</code></pre>"},{"location":"appendix/appendixB/#_17","title":"\u307e\u3068\u3081","text":"<p>REPL\u306f\u5358\u306a\u308b\u96fb\u5353\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u5f37\u529b\u306a\u5b66\u7fd2\u30c4\u30fc\u30eb\u3067\u3042\u308a\u3001\u5b9f\u9a13\u5834\u3067\u3042\u308a\u3001\u30c7\u30d0\u30c3\u30ac\u30fc\u3067\u3059\u3002REPL\u3092\u4f7f\u3044\u3053\u306a\u3059\u3053\u3068\u3067\uff1a</p> <ol> <li>\u5373\u5ea7\u306b\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u304c\u5f97\u3089\u308c\u308b</li> <li>\u5b89\u5168\u306b\u5b9f\u9a13\u3067\u304d\u308b</li> <li>\u6bb5\u968e\u7684\u306b\u5b66\u7fd2\u3067\u304d\u308b</li> <li>\u5b9f\u969b\u306e\u52d5\u4f5c\u3092\u78ba\u8a8d\u3067\u304d\u308b</li> </ol> <p>\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u4e0a\u9054\u306b\u306f\u3001\u305f\u304f\u3055\u3093\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u8a66\u3059\u3053\u3068\u304c\u5927\u5207\u3067\u3059\u3002REPL\u3092\u6d3b\u7528\u3057\u3066\u3001\u697d\u3057\u304fScala\u3092\u5b66\u3093\u3067\u3044\u304d\u307e\u3057\u3087\u3046\uff01</p> <p>REPL\u306f\u6700\u9ad8\u306e\u5148\u751f\u3067\u3059\u3002\u5206\u304b\u3089\u306a\u3044\u3053\u3068\u304c\u3042\u3063\u305f\u3089\u3001\u307e\u305aREPL\u3067\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"appendix/appendixC/","title":"\u4ed8\u9332C \u4fbf\u5229\u306a\u30e1\u30bd\u30c3\u30c9\u30fb\u95a2\u6570\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9","text":""},{"location":"appendix/appendixC/#_1","title":"\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u64cd\u4f5c","text":""},{"location":"appendix/appendixC/#list","title":"List\uff08\u30ea\u30b9\u30c8\uff09","text":"<pre><code>// \u4f5c\u6210\u3068\u57fa\u672c\u64cd\u4f5c\nval list = List(1, 2, 3, 4, 5)\nval empty = List.empty[Int]\nval filled = List.fill(5)(0)         // List(0, 0, 0, 0, 0)\nval range = List.range(1, 6)         // List(1, 2, 3, 4, 5)\nval tabulated = List.tabulate(5)(i =&gt; i * i)  // List(0, 1, 4, 9, 16)\n\n// \u8981\u7d20\u306e\u8ffd\u52a0\n0 :: list                             // List(0, 1, 2, 3, 4, 5)\nlist :+ 6                             // List(1, 2, 3, 4, 5, 6)\nlist ++ List(6, 7)                    // List(1, 2, 3, 4, 5, 6, 7)\n\n// \u8981\u7d20\u306e\u53d6\u5f97\nlist.head                             // 1\nlist.tail                             // List(2, 3, 4, 5)\nlist.last                             // 5\nlist.init                             // List(1, 2, 3, 4)\nlist(2)                               // 3\nlist.apply(2)                         // 3\nlist.lift(10)                         // None\uff08\u5b89\u5168\u306a\u30a2\u30af\u30bb\u30b9\uff09\n\n// \u5909\u63db\nlist.map(_ * 2)                       // List(2, 4, 6, 8, 10)\nlist.flatMap(x =&gt; List(x, x))        // List(1, 1, 2, 2, 3, 3, 4, 4, 5, 5)\nlist.collect { case x if x % 2 == 0 =&gt; x * x }  // List(4, 16)\n\n// \u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\nlist.filter(_ % 2 == 0)               // List(2, 4)\nlist.filterNot(_ % 2 == 0)            // List(1, 3, 5)\nlist.partition(_ % 2 == 0)            // (List(2, 4), List(1, 3, 5))\nlist.find(_ &gt; 3)                      // Some(4)\nlist.takeWhile(_ &lt; 4)                 // List(1, 2, 3)\nlist.dropWhile(_ &lt; 4)                 // List(4, 5)\n\n// \u96c6\u7d04\nlist.sum                              // 15\nlist.product                          // 120\nlist.min                              // 1\nlist.max                              // 5\nlist.reduce(_ + _)                    // 15\nlist.fold(0)(_ + _)                   // 15\nlist.scan(0)(_ + _)                   // List(0, 1, 3, 6, 10, 15)\n\n// \u305d\u306e\u4ed6\u306e\u4fbf\u5229\u306a\u30e1\u30bd\u30c3\u30c9\nlist.reverse                          // List(5, 4, 3, 2, 1)\nlist.sorted                           // List(1, 2, 3, 4, 5)\nlist.distinct                         // \u91cd\u8907\u3092\u524a\u9664\nlist.take(3)                          // List(1, 2, 3)\nlist.drop(3)                          // List(4, 5)\nlist.slice(1, 4)                      // List(2, 3, 4)\nlist.grouped(2).toList                // List(List(1, 2), List(3, 4), List(5))\nlist.sliding(3).toList                // List(List(1, 2, 3), List(2, 3, 4), List(3, 4, 5))\nlist.zip(List('a', 'b', 'c'))         // List((1,a), (2,b), (3,c))\nlist.zipWithIndex                     // List((1,0), (2,1), (3,2), (4,3), (5,4))\n</code></pre>"},{"location":"appendix/appendixC/#set","title":"Set\uff08\u30bb\u30c3\u30c8\uff09","text":"<pre><code>// \u4f5c\u6210\u3068\u57fa\u672c\u64cd\u4f5c\nval set = Set(1, 2, 3, 4, 5)\nval empty = Set.empty[Int]\n\n// \u8981\u7d20\u306e\u64cd\u4f5c\nset + 6                               // Set(1, 2, 3, 4, 5, 6)\nset - 3                               // Set(1, 2, 4, 5)\nset ++ Set(6, 7)                      // Set(1, 2, 3, 4, 5, 6, 7)\nset -- Set(3, 4)                      // Set(1, 2, 5)\n\n// \u96c6\u5408\u6f14\u7b97\nval set1 = Set(1, 2, 3)\nval set2 = Set(2, 3, 4)\nset1 &amp; set2                           // Set(2, 3) - \u7a4d\u96c6\u5408\nset1 | set2                           // Set(1, 2, 3, 4) - \u548c\u96c6\u5408\nset1 &amp;~ set2                          // Set(1) - \u5dee\u96c6\u5408\nset1.diff(set2)                       // Set(1) - \u5dee\u96c6\u5408\n\n// \u5224\u5b9a\nset.contains(3)                       // true\nset(3)                                // true\uff08\u95a2\u6570\u3068\u3057\u3066\u547c\u3073\u51fa\u3057\uff09\nset.subsetOf(Set(1, 2, 3, 4, 5, 6))  // true\n</code></pre>"},{"location":"appendix/appendixC/#map","title":"Map\uff08\u30de\u30c3\u30d7\uff09","text":"<pre><code>// \u4f5c\u6210\u3068\u57fa\u672c\u64cd\u4f5c\nval map = Map(\"a\" -&gt; 1, \"b\" -&gt; 2, \"c\" -&gt; 3)\nval empty = Map.empty[String, Int]\n\n// \u8981\u7d20\u306e\u64cd\u4f5c\nmap + (\"d\" -&gt; 4)                      // \u8981\u7d20\u3092\u8ffd\u52a0\nmap - \"b\"                             // \u30ad\u30fc\u3092\u524a\u9664\nmap ++ Map(\"d\" -&gt; 4, \"e\" -&gt; 5)       // \u8907\u6570\u8ffd\u52a0\nmap -- List(\"a\", \"b\")                 // \u8907\u6570\u524a\u9664\n\n// \u5024\u306e\u53d6\u5f97\nmap(\"a\")                              // 1\uff08\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u4f8b\u5916\uff09\nmap.get(\"a\")                          // Some(1)\nmap.getOrElse(\"z\", 0)                 // 0\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\uff09\nmap.withDefaultValue(0)(\"z\")          // 0\n\n// \u5909\u63db\nmap.map { case (k, v) =&gt; (k, v * 2) } // Map(a -&gt; 2, b -&gt; 4, c -&gt; 6)\nmap.mapValues(_ * 2)                  // Map(a -&gt; 2, b -&gt; 4, c -&gt; 6)\uff08\u975e\u63a8\u5968\uff09\nmap.view.mapValues(_ * 2).toMap      // Map(a -&gt; 2, b -&gt; 4, c -&gt; 6)\n\n// \u305d\u306e\u4ed6\nmap.keys                              // Set(a, b, c)\nmap.values                            // Iterable(1, 2, 3)\nmap.keySet                            // Set(a, b, c)\nmap.contains(\"a\")                     // true\nmap.filter { case (k, v) =&gt; v &gt; 1 }  // Map(b -&gt; 2, c -&gt; 3)\n</code></pre>"},{"location":"appendix/appendixC/#vector","title":"Vector\uff08\u30d9\u30af\u30bf\u30fc\uff09","text":"<pre><code>// List\u3068\u540c\u69d8\u306e\u64cd\u4f5c\u304c\u53ef\u80fd\u3067\u3001\u30e9\u30f3\u30c0\u30e0\u30a2\u30af\u30bb\u30b9\u304c\u9ad8\u901f\nval vec = Vector(1, 2, 3, 4, 5)\nvec(2)                                // 3\uff08O(log n)\uff09\nvec.updated(2, 10)                    // Vector(1, 2, 10, 4, 5)\nvec :+ 6                              // Vector(1, 2, 3, 4, 5, 6)\n0 +: vec                              // Vector(0, 1, 2, 3, 4, 5)\n</code></pre>"},{"location":"appendix/appendixC/#_2","title":"\u6587\u5b57\u5217\u64cd\u4f5c","text":"<pre><code>val str = \"Hello, Scala World!\"\n\n// \u57fa\u672c\u64cd\u4f5c\nstr.length                            // 18\nstr.isEmpty                           // false\nstr.nonEmpty                          // true\nstr.charAt(0)                         // 'H'\nstr(0)                                // 'H'\n\n// \u691c\u7d22\nstr.contains(\"Scala\")                 // true\nstr.startsWith(\"Hello\")               // true\nstr.endsWith(\"!\")                     // true\nstr.indexOf(\"Scala\")                  // 7\nstr.lastIndexOf(\"o\")                  // 15\n\n// \u5909\u63db\nstr.toLowerCase                       // \"hello, scala world!\"\nstr.toUpperCase                       // \"HELLO, SCALA WORLD!\"\nstr.trim                              // \u524d\u5f8c\u306e\u7a7a\u767d\u3092\u524a\u9664\nstr.replace(\"Scala\", \"Java\")          // \"Hello, Java World!\"\nstr.replaceAll(\"\\\\s+\", \"_\")           // \"Hello,_Scala_World!\"\n\n// \u5206\u5272\u3068\u7d50\u5408\nstr.split(\" \")                        // Array(\"Hello,\", \"Scala\", \"World!\")\nstr.split(\"\\\\s+\")                     // \u6b63\u898f\u8868\u73fe\u3067\u5206\u5272\nList(\"A\", \"B\", \"C\").mkString(\", \")   // \"A, B, C\"\nList(\"A\", \"B\", \"C\").mkString(\"[\", \", \", \"]\")  // \"[A, B, C]\"\n\n// \u90e8\u5206\u6587\u5b57\u5217\nstr.substring(7)                      // \"Scala World!\"\nstr.substring(7, 12)                  // \"Scala\"\nstr.take(5)                           // \"Hello\"\nstr.drop(7)                           // \"Scala World!\"\nstr.slice(7, 12)                      // \"Scala\"\n\n// \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n\"Name: %s, Age: %d\".format(\"\u592a\u90ce\", 25)  // \"Name: \u592a\u90ce, Age: 25\"\nf\"Pi: ${math.Pi}%.2f\"                // \"Pi: 3.14\"\ns\"1 + 1 = ${1 + 1}\"                   // \"1 + 1 = 2\"\n\n// \u4fbf\u5229\u306a\u30e1\u30bd\u30c3\u30c9\n\"  hello  \".trim                      // \"hello\"\n\"hello\".capitalize                    // \"Hello\"\n\"123\".toInt                           // 123\n\"3.14\".toDouble                       // 3.14\n\"true\".toBoolean                      // true\n</code></pre>"},{"location":"appendix/appendixC/#option","title":"Option\u64cd\u4f5c","text":"<pre><code>val some = Some(42)\nval none = None: Option[Int]\n\n// \u57fa\u672c\u64cd\u4f5c\nsome.get                              // 42\uff08None\u306e\u5834\u5408\u306f\u4f8b\u5916\uff09\nsome.getOrElse(0)                     // 42\nnone.getOrElse(0)                     // 0\nsome.orElse(Some(0))                  // Some(42)\nnone.orElse(Some(0))                  // Some(0)\n\n// \u5909\u63db\nsome.map(_ * 2)                       // Some(84)\nnone.map(_ * 2)                       // None\nsome.flatMap(x =&gt; Some(x * 2))       // Some(84)\nsome.filter(_ &gt; 30)                   // Some(42)\nsome.filter(_ &gt; 50)                   // None\n\n// \u5224\u5b9a\nsome.isDefined                        // true\nnone.isEmpty                          // true\nsome.contains(42)                     // true\nsome.exists(_ &gt; 30)                   // true\nsome.forall(_ &gt; 30)                   // true\n\n// \u305d\u306e\u4ed6\nsome.fold(0)(_ * 2)                   // 84\nnone.fold(0)(_ * 2)                   // 0\nsome.toList                           // List(42)\nnone.toList                           // List()\n</code></pre>"},{"location":"appendix/appendixC/#either","title":"Either\u64cd\u4f5c","text":"<pre><code>val right: Either[String, Int] = Right(42)\nval left: Either[String, Int] = Left(\"Error\")\n\n// \u57fa\u672c\u64cd\u4f5c\nright.isRight                         // true\nleft.isLeft                           // true\nright.getOrElse(0)                    // 42\nleft.getOrElse(0)                     // 0\n\n// \u5909\u63db\nright.map(_ * 2)                      // Right(84)\nleft.map(_ * 2)                       // Left(\"Error\")\nright.flatMap(x =&gt; Right(x * 2))     // Right(84)\nright.filterOrElse(_ &gt; 30, \"Too small\")  // Right(42)\n\n// \u5024\u306e\u53d6\u5f97\nright.toOption                        // Some(42)\nleft.toOption                         // None\nright.toTry                           // Success(42)\n\n// \u30a8\u30e9\u30fc\u51e6\u7406\nleft.swap                             // Right(\"Error\")\nright.fold(err =&gt; 0, value =&gt; value) // 42\n</code></pre>"},{"location":"appendix/appendixC/#try","title":"Try\u64cd\u4f5c","text":"<pre><code>import scala.util.{Try, Success, Failure}\n\nval success = Try(10 / 2)\nval failure = Try(10 / 0)\n\n// \u57fa\u672c\u64cd\u4f5c\nsuccess.isSuccess                     // true\nfailure.isFailure                     // true\nsuccess.get                           // 5\nsuccess.getOrElse(0)                  // 5\n\n// \u5909\u63db\nsuccess.map(_ * 2)                    // Success(10)\nfailure.map(_ * 2)                    // Failure(ArithmeticException)\nsuccess.flatMap(x =&gt; Try(x * 2))     // Success(10)\n\n// \u30a8\u30e9\u30fc\u51e6\u7406\nfailure.recover {\n  case _: ArithmeticException =&gt; 0\n}                                     // Success(0)\n\nfailure.recoverWith {\n  case _: ArithmeticException =&gt; Success(0)\n}                                     // Success(0)\n\n// \u5909\u63db\nsuccess.toOption                      // Some(5)\nfailure.toOption                      // None\nsuccess.toEither                      // Right(5)\nfailure.toEither                      // Left(ArithmeticException)\n</code></pre>"},{"location":"appendix/appendixC/#future","title":"Future\u64cd\u4f5c","text":"<pre><code>import scala.concurrent.Future\nimport scala.concurrent.ExecutionContext.Implicits.global\nimport scala.concurrent.duration._\nimport scala.util.{Success, Failure}\n\n// \u4f5c\u6210\nval future = Future { Thread.sleep(1000); 42 }\nval immediate = Future.successful(42)\nval failed = Future.failed(new Exception(\"Error\"))\n\n// \u5909\u63db\nfuture.map(_ * 2)                     // Future(84)\nfuture.flatMap(x =&gt; Future(x * 2))   // Future(84)\nfuture.filter(_ &gt; 30)                 // Future(42)\n\n// \u5408\u6210\nval f1 = Future(1)\nval f2 = Future(2)\nval f3 = Future(3)\n\nFuture.sequence(List(f1, f2, f3))     // Future(List(1, 2, 3))\nfor {\n  a &lt;- f1\n  b &lt;- f2\n  c &lt;- f3\n} yield a + b + c                      // Future(6)\n\n// \u30a8\u30e9\u30fc\u51e6\u7406\nfuture.recover {\n  case _: Exception =&gt; 0\n}\n\nfuture.recoverWith {\n  case _: Exception =&gt; Future.successful(0)\n}\n\n// \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\nfuture.onComplete {\n  case Success(value) =&gt; println(s\"\u6210\u529f: $value\")\n  case Failure(error) =&gt; println(s\"\u5931\u6557: $error\")\n}\n\n// \u5f85\u6a5f\uff08\u30c6\u30b9\u30c8\u7528\uff09\nimport scala.concurrent.Await\nAwait.result(future, 5.seconds)        // 42\n</code></pre>"},{"location":"appendix/appendixC/#_3","title":"\u6570\u5024\u64cd\u4f5c","text":"<pre><code>// \u57fa\u672c\u7684\u306a\u6570\u5b66\u95a2\u6570\nmath.abs(-5)                          // 5\nmath.max(3, 7)                        // 7\nmath.min(3, 7)                        // 3\nmath.pow(2, 3)                        // 8.0\nmath.sqrt(16)                         // 4.0\nmath.cbrt(27)                         // 3.0\n\n// \u4e38\u3081\nmath.round(3.7)                       // 4\nmath.floor(3.7)                       // 3.0\nmath.ceil(3.2)                        // 4.0\n\n// \u4e09\u89d2\u95a2\u6570\nmath.sin(math.Pi / 2)                 // 1.0\nmath.cos(0)                           // 1.0\nmath.tan(math.Pi / 4)                 // 1.0\n\n// \u4e71\u6570\nscala.util.Random.nextInt(100)        // 0\u301c99\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u6574\u6570\nscala.util.Random.nextDouble()        // 0.0\u301c1.0\u306e\u30e9\u30f3\u30c0\u30e0\u306a\u5c0f\u6570\nscala.util.Random.shuffle(List(1,2,3,4,5))  // \u30e9\u30f3\u30c0\u30e0\u306b\u4e26\u3073\u66ff\u3048\n\n// \u6570\u5024\u306e\u5909\u63db\n42.toString                           // \"42\"\n\"42\".toInt                            // 42\n\"3.14\".toDouble                       // 3.14\n42.toDouble                           // 42.0\n3.14.toInt                            // 3\n</code></pre>"},{"location":"appendix/appendixC/#_4","title":"\u65e5\u4ed8\u3068\u6642\u523b","text":"<pre><code>import java.time._\nimport java.time.format.DateTimeFormatter\n\n// \u73fe\u5728\u65e5\u6642\nval now = LocalDateTime.now()\nval today = LocalDate.now()\nval currentTime = LocalTime.now()\n\n// \u4f5c\u6210\nval date = LocalDate.of(2024, 1, 15)\nval time = LocalTime.of(14, 30, 0)\nval dateTime = LocalDateTime.of(date, time)\n\n// \u64cd\u4f5c\ndate.plusDays(7)                      // 1\u9031\u9593\u5f8c\ndate.minusMonths(1)                   // 1\u30f6\u6708\u524d\ndate.withYear(2025)                   // \u5e74\u3092\u5909\u66f4\n\n// \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\nval formatter = DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH:mm:ss\")\ndateTime.format(formatter)            // \"2024/01/15 14:30:00\"\n\n// \u30d1\u30fc\u30b9\nLocalDate.parse(\"2024-01-15\")\nLocalDateTime.parse(\"2024-01-15T14:30:00\")\n</code></pre>"},{"location":"appendix/appendixC/#_5","title":"\u30d5\u30a1\u30a4\u30eb\u64cd\u4f5c","text":"<pre><code>import java.nio.file._\nimport scala.io.Source\n\n// \u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\nval source = Source.fromFile(\"file.txt\")\nval lines = source.getLines().toList\nsource.close()\n\n// \u3088\u308a\u5b89\u5168\u306a\u65b9\u6cd5\nimport scala.util.Using\nUsing(Source.fromFile(\"file.txt\")) { source =&gt;\n  source.getLines().toList\n}\n\n// \u30d5\u30a1\u30a4\u30eb\u66f8\u304d\u8fbc\u307f\nFiles.write(Paths.get(\"output.txt\"), \"Hello, World!\".getBytes)\n\n// \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u64cd\u4f5c\nFiles.createDirectory(Paths.get(\"newdir\"))\nFiles.exists(Paths.get(\"file.txt\"))\nFiles.delete(Paths.get(\"file.txt\"))\n</code></pre>"},{"location":"appendix/appendixC/#_6","title":"\u307e\u3068\u3081","text":"<p>\u3053\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306f\u3001Scala\u3067\u3088\u304f\u4f7f\u3046\u30e1\u30bd\u30c3\u30c9\u3084\u95a2\u6570\u3092\u307e\u3068\u3081\u305f\u3082\u306e\u3067\u3059\u3002\u3053\u308c\u3089\u3092\u899a\u3048\u3066\u304a\u304f\u3068\u3001\u52b9\u7387\u7684\u306b\u30b3\u30fc\u30c9\u3092\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002</p> <p>\u30dd\u30a4\u30f3\u30c8\uff1a - \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306b\u306f\u8c4a\u5bcc\u306a\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308b - Option/Either/Try\u3067\u30a8\u30e9\u30fc\u3092\u5b89\u5168\u306b\u6271\u3048\u308b - \u6587\u5b57\u5217\u64cd\u4f5c\u306f\u76f4\u611f\u7684 - \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u5145\u5b9f\u3057\u3066\u3044\u308b</p> <p>\u8a73\u7d30\u306a\u4f7f\u3044\u65b9\u306f\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3084IDE\u306e\u88dc\u5b8c\u6a5f\u80fd\u3092\u6d3b\u7528\u3057\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"appendix/appendixD/","title":"\u4ed8\u9332D \u958b\u767a\u74b0\u5883\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u30ac\u30a4\u30c9","text":""},{"location":"appendix/appendixD/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u306e\u9053\u5177\u3067\u3042\u308b\u958b\u767a\u74b0\u5883\u3002\u6599\u7406\u4eba\u304c\u5305\u4e01\u3092\u5927\u5207\u306b\u3059\u308b\u3088\u3046\u306b\u3001\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u3082\u81ea\u5206\u306e\u958b\u767a\u74b0\u5883\u3092\u6574\u3048\u308b\u3053\u3068\u304c\u5927\u5207\u3067\u3059\u3002\u3053\u306e\u4ed8\u9332\u3067\u306f\u3001\u5feb\u9069\u306bScala\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u304c\u3067\u304d\u308b\u74b0\u5883\u306e\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002</p>"},{"location":"appendix/appendixD/#intellij-idea","title":"IntelliJ IDEA","text":""},{"location":"appendix/appendixD/#_2","title":"\u57fa\u672c\u8a2d\u5b9a","text":"<pre><code>// \u63a8\u5968\u8a2d\u5b9a\n\n// 1. \u30a8\u30c7\u30a3\u30bf\u30fc\u8a2d\u5b9a\n// File &gt; Settings &gt; Editor &gt; General\n- Show line numbers: ON\n- Show whitespaces: ON\uff08\u7a7a\u767d\u6587\u5b57\u3092\u8868\u793a\uff09\n- Show method separators: ON\n\n// 2. \u30b3\u30fc\u30c9\u30b9\u30bf\u30a4\u30eb\u8a2d\u5b9a\n// File &gt; Settings &gt; Editor &gt; Code Style &gt; Scala\n- Tab size: 2\n- Indent: 2\n- Continuation indent: 4\n\n// 3. \u30a4\u30f3\u30b9\u30da\u30af\u30b7\u30e7\u30f3\u8a2d\u5b9a\n// File &gt; Settings &gt; Editor &gt; Inspections &gt; Scala\n- Unused declarations: ON\n- Deprecated API usage: ON\n- Spelling: ON\uff08\u30bf\u30a4\u30dd\u691c\u51fa\uff09\n</code></pre>"},{"location":"appendix/appendixD/#_3","title":"\u4fbf\u5229\u306a\u30d7\u30e9\u30b0\u30a4\u30f3","text":"<pre><code>// \u5fc5\u9808\u30d7\u30e9\u30b0\u30a4\u30f3\n1. Scala Plugin\uff08\u516c\u5f0f\uff09\n    - Scala\u30b5\u30dd\u30fc\u30c8\u306e\u57fa\u672c\n\n2. sbt Plugin\n    - sbt\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u7d71\u5408\n\n// \u63a8\u5968\u30d7\u30e9\u30b0\u30a4\u30f3\n3. Rainbow Brackets\n    - \u62ec\u5f27\u306e\u5bfe\u5fdc\u3092\u8272\u5206\u3051\n    - \u30cd\u30b9\u30c8\u304c\u6df1\u3044\u30b3\u30fc\u30c9\u3067\u4fbf\u5229\n\n4. Key Promoter X\n    - \u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u30ad\u30fc\u3092\u5b66\u7fd2\n    - \u30de\u30a6\u30b9\u64cd\u4f5c\u6642\u306b\u30ad\u30fc\u30dc\u30fc\u30c9\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u3092\u8868\u793a\n\n5. GitToolBox\n    - Git\u7d71\u5408\u306e\u5f37\u5316\n    - \u30d6\u30e9\u30f3\u30c1\u60c5\u5831\u3001blame\u8868\u793a\n\n6. String Manipulation\n    - \u6587\u5b57\u5217\u64cd\u4f5c\u306e\u52b9\u7387\u5316\n    - CamelCase \u21d4 snake_case\u5909\u63db\n\n7. Scalafmt\n    - \u30b3\u30fc\u30c9\u30d5\u30a9\u30fc\u30de\u30c3\u30bf\u30fc\n    - \u4fdd\u5b58\u6642\u306b\u81ea\u52d5\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n</code></pre>"},{"location":"appendix/appendixD/#_4","title":"\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u30ad\u30fc","text":"<pre><code>// \u5fc5\u9808\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\uff08Windows/Linux\uff09\nCtrl + N          // \u30af\u30e9\u30b9\u691c\u7d22\nCtrl + Shift + N  // \u30d5\u30a1\u30a4\u30eb\u691c\u7d22\nCtrl + Alt + L    // \u30b3\u30fc\u30c9\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\nCtrl + Alt + O    // \u30a4\u30f3\u30dd\u30fc\u30c8\u6700\u9069\u5316\nAlt + Enter       // Quick Fix\nCtrl + Space      // \u57fa\u672c\u88dc\u5b8c\nCtrl + Shift + Space // \u30b9\u30de\u30fc\u30c8\u88dc\u5b8c\nCtrl + Q          // \u30af\u30a4\u30c3\u30af\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\nCtrl + P          // \u30d1\u30e9\u30e1\u30fc\u30bf\u60c5\u5831\nCtrl + B          // \u5b9a\u7fa9\u3078\u30b8\u30e3\u30f3\u30d7\nCtrl + Alt + B    // \u5b9f\u88c5\u3078\u30b8\u30e3\u30f3\u30d7\nShift + F6        // \u30ea\u30cd\u30fc\u30e0\nCtrl + /          // \u884c\u30b3\u30e1\u30f3\u30c8\nCtrl + Shift + /  // \u30d6\u30ed\u30c3\u30af\u30b3\u30e1\u30f3\u30c8\n\n// \u4fbf\u5229\u306a\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\nCtrl + W          // \u9078\u629e\u7bc4\u56f2\u3092\u62e1\u5927\nCtrl + Shift + W  // \u9078\u629e\u7bc4\u56f2\u3092\u7e2e\u5c0f\nAlt + J           // \u6b21\u306e\u540c\u3058\u5358\u8a9e\u3092\u9078\u629e\uff08\u30de\u30eb\u30c1\u30ab\u30fc\u30bd\u30eb\uff09\nCtrl + G          // \u884c\u756a\u53f7\u3078\u30b8\u30e3\u30f3\u30d7\nCtrl + E          // \u6700\u8fd1\u4f7f\u3063\u305f\u30d5\u30a1\u30a4\u30eb\nCtrl + Shift + E  // \u6700\u8fd1\u7de8\u96c6\u3057\u305f\u5834\u6240\nCtrl + F12        // \u30d5\u30a1\u30a4\u30eb\u69cb\u9020\nAlt + F7          // \u4f7f\u7528\u7b87\u6240\u3092\u691c\u7d22\n</code></pre>"},{"location":"appendix/appendixD/#_5","title":"\u30e9\u30a4\u30d6\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8","text":"<pre><code>// File &gt; Settings &gt; Editor &gt; Live Templates &gt; Scala\n\n// main - \u30e1\u30a4\u30f3\u95a2\u6570\n@main def $NAME$(): Unit = {\n  $END$\n}\n\n// test - \u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\ntest(\"$DESCRIPTION$\") {\n  $END$\n}\n\n// match - \u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\n$EXPR$ match {\n  case $PATTERN$ =&gt; $END$\n  case _ =&gt; \n}\n\n// for - for\u5f0f\nfor {\n  $VAR$ &lt;- $EXPR$\n} yield $END$\n\n// option - Option\u51e6\u7406\n$EXPR$ match {\n  case Some($VAR$) =&gt; $END$\n  case None =&gt; \n}\n\n// either - Either\u51e6\u7406\n$EXPR$ match {\n  case Right($VAR$) =&gt; $END$\n  case Left($ERR$) =&gt; \n}\n\n// try - Try\u51e6\u7406\nTry {\n  $END$\n} match {\n  case Success($VAR$) =&gt; \n  case Failure($EX$) =&gt; \n}\n</code></pre>"},{"location":"appendix/appendixD/#visual-studio-code","title":"Visual Studio Code","text":""},{"location":"appendix/appendixD/#_6","title":"\u57fa\u672c\u8a2d\u5b9a","text":"<pre><code>// settings.json\n{\n  // \u30a8\u30c7\u30a3\u30bf\u30fc\u8a2d\u5b9a\n  \"editor.fontSize\": 14,\n  \"editor.fontFamily\": \"'Fira Code', 'JetBrains Mono', monospace\",\n  \"editor.fontLigatures\": true,\n  \"editor.tabSize\": 2,\n  \"editor.detectIndentation\": false,\n  \"editor.renderWhitespace\": \"boundary\",\n  \"editor.rulers\": [80, 120],\n  \"editor.minimap.enabled\": true,\n  \"editor.bracketPairColorization.enabled\": true,\n\n  // Scala\u8a2d\u5b9a\n  \"files.watcherExclude\": {\n    \"**/target\": true,\n    \"**/.bsp\": true,\n    \"**/.metals\": true\n  },\n\n  // Metals\u8a2d\u5b9a\n  \"metals.serverVersion\": \"1.2.0\",\n  \"metals.showImplicitArguments\": true,\n  \"metals.showImplicitConversionsAndClasses\": true,\n  \"metals.showInferredType\": true,\n\n  // \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u8a2d\u5b9a\n  \"editor.formatOnSave\": true,\n  \"[scala]\": {\n    \"editor.defaultFormatter\": \"scalameta.metals\"\n  },\n\n  // \u30bf\u30fc\u30df\u30ca\u30eb\u8a2d\u5b9a\n  \"terminal.integrated.defaultProfile.windows\": \"Git Bash\",\n  \"terminal.integrated.fontSize\": 13\n}\n</code></pre>"},{"location":"appendix/appendixD/#_7","title":"\u5fc5\u9808\u62e1\u5f35\u6a5f\u80fd","text":"<pre><code>// 1. Scala (Metals)\n// - Scala\u8a00\u8a9e\u30b5\u30dd\u30fc\u30c8\n// - \u81ea\u52d5\u88dc\u5b8c\u3001\u5b9a\u7fa9\u30b8\u30e3\u30f3\u30d7\u3001\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\n\n// 2. Scala Syntax (official)\n// - \u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30cf\u30a4\u30e9\u30a4\u30c8\n\n// \u63a8\u5968\u62e1\u5f35\u6a5f\u80fd\n// 3. Error Lens\n// - \u30a8\u30e9\u30fc\u3092\u30a4\u30f3\u30e9\u30a4\u30f3\u3067\u8868\u793a\n\n// 4. GitLens\n// - Git\u5c65\u6b74\u306e\u53ef\u8996\u5316\n\n// 5. Bracket Pair Colorizer\n// - \u62ec\u5f27\u306e\u5bfe\u5fdc\u3092\u8272\u5206\u3051\n\n// 6. Better Comments\n// - \u30b3\u30e1\u30f3\u30c8\u306e\u7a2e\u985e\u3067\u8272\u5206\u3051\n// TODO: \u30bf\u30b9\u30af\n// FIXME: \u4fee\u6b63\u5fc5\u8981\n// NOTE: \u6ce8\u610f\u4e8b\u9805\n\n// 7. Code Runner\n// - \u7c21\u5358\u306b\u30b3\u30fc\u30c9\u5b9f\u884c\n\n// 8. indent-rainbow\n// - \u30a4\u30f3\u30c7\u30f3\u30c8\u30ec\u30d9\u30eb\u3092\u8272\u5206\u3051\n</code></pre>"},{"location":"appendix/appendixD/#_8","title":"\u30ad\u30fc\u30dc\u30fc\u30c9\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8","text":"<pre><code>// keybindings.json\n[\n  {\n    \"key\": \"ctrl+shift+o\",\n    \"command\": \"editor.action.organizeImports\",\n    \"when\": \"editorTextFocus &amp;&amp; !editorReadonly\"\n  },\n  {\n    \"key\": \"ctrl+shift+i\",\n    \"command\": \"editor.action.formatDocument\",\n    \"when\": \"editorTextFocus &amp;&amp; !editorReadonly\"\n  },\n  {\n    \"key\": \"f2\",\n    \"command\": \"editor.action.rename\",\n    \"when\": \"editorHasRenameProvider &amp;&amp; editorTextFocus &amp;&amp; !editorReadonly\"\n  },\n  {\n    \"key\": \"ctrl+`\",\n    \"command\": \"workbench.action.terminal.toggleTerminal\"\n  }\n]\n</code></pre>"},{"location":"appendix/appendixD/#_9","title":"\u30b9\u30cb\u30da\u30c3\u30c8","text":"<pre><code>// scala.json (User Snippets)\n{\n  \"Main Method\": {\n    \"prefix\": \"main\",\n    \"body\": [\n      \"@main def ${1:main}(): Unit = {\",\n      \"  $0\",\n      \"}\"\n    ],\n    \"description\": \"Main method\"\n  },\n\n  \"Case Class\": {\n    \"prefix\": \"cc\",\n    \"body\": [\n      \"case class ${1:Name}(\",\n      \"  ${2:field}: ${3:Type}\",\n      \")\"\n    ],\n    \"description\": \"Case class\"\n  },\n\n  \"Pattern Match\": {\n    \"prefix\": \"match\",\n    \"body\": [\n      \"${1:expr} match {\",\n      \"  case ${2:pattern} =&gt; $0\",\n      \"  case _ =&gt; \",\n      \"}\"\n    ],\n    \"description\": \"Pattern matching\"\n  },\n\n  \"For Comprehension\": {\n    \"prefix\": \"for\",\n    \"body\": [\n      \"for {\",\n      \"  ${1:x} &lt;- ${2:xs}\",\n      \"} yield $0\"\n    ],\n    \"description\": \"For comprehension\"\n  },\n\n  \"Test Case\": {\n    \"prefix\": \"test\",\n    \"body\": [\n      \"test(\\\"${1:description}\\\") {\",\n      \"  $0\",\n      \"}\"\n    ],\n    \"description\": \"ScalaTest test case\"\n  }\n}\n</code></pre>"},{"location":"appendix/appendixD/#_10","title":"\u30bf\u30fc\u30df\u30ca\u30eb\u74b0\u5883","text":""},{"location":"appendix/appendixD/#_11","title":"\u30b7\u30a7\u30eb\u8a2d\u5b9a","text":"<pre><code># ~/.bashrc \u307e\u305f\u306f ~/.zshrc\n\n# sbt \u30a8\u30a4\u30ea\u30a2\u30b9\nalias sbtc='sbt compile'\nalias sbtt='sbt test'\nalias sbtr='sbt run'\nalias sbtcc='sbt clean compile'\nalias sbtf='sbt scalafmtAll'\n\n# Scala REPL\nalias scala-repl='scala -Xprint:typer'\n\n# \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u4f5c\u6210\nnew-scala() {\n  mkdir -p \"$1\"/{src/{main,test}/scala,project}\n  cd \"$1\"\n  echo 'scalaVersion := \"3.3.1\"' &gt; build.sbt\n  echo 'sbt.version=1.9.7' &gt; project/build.properties\n  echo \"# $1\" &gt; README.md\n  git init\n}\n\n# sbt \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\nsbt-clean-all() {\n  find . -name target -type d -exec rm -rf {} + 2&gt;/dev/null\n  find . -name .bsp -type d -exec rm -rf {} + 2&gt;/dev/null\n  find . -name .metals -type d -exec rm -rf {} + 2&gt;/dev/null\n}\n</code></pre>"},{"location":"appendix/appendixD/#git","title":"Git\u8a2d\u5b9a","text":"<pre><code># .gitignore for Scala\ntarget/\n.bsp/\n.metals/\n.bloop/\n.idea/\n.vscode/\n*.class\n*.log\n.DS_Store\n\n# sbt specific\ndist/*\nlib_managed/\nsrc_managed/\nproject/boot/\nproject/plugins/project/\n.cache\n.lib/\n\n# Scala-IDE specific\n.scala_dependencies\n.worksheet\n.sc\n\n# VS Code specific\n.vscode/*\n!.vscode/settings.json\n!.vscode/tasks.json\n!.vscode/launch.json\n</code></pre>"},{"location":"appendix/appendixD/#repl","title":"REPL \u30ab\u30b9\u30bf\u30de\u30a4\u30ba","text":""},{"location":"appendix/appendixD/#_12","title":"\u521d\u671f\u5316\u30d5\u30a1\u30a4\u30eb","text":"<pre><code>// ~/.scala/init.scala\n\n// \u30a4\u30f3\u30dd\u30fc\u30c8\nimport scala.concurrent._\nimport scala.concurrent.duration._\nimport scala.util.{Try, Success, Failure}\nimport ExecutionContext.Implicits.global\nimport java.time._\nimport java.nio.file._\n\n// \u4fbf\u5229\u306a\u95a2\u6570\ndef time[T](label: String = \"Execution time\")(block: =&gt; T): T = {\n  val start = System.nanoTime()\n  val result = block\n  val end = System.nanoTime()\n  println(s\"$label: ${(end - start) / 1000000.0} ms\")\n  result\n}\n\ndef pp(x: Any): Unit = {\n  import pprint._\n  pprint.pprintln(x, height = 100)\n}\n\n// \u4fbf\u5229\u306a\u5024\nval now = LocalDateTime.now()\nval today = LocalDate.now()\n\n// \u8d77\u52d5\u30e1\u30c3\u30bb\u30fc\u30b8\nprintln(s\"\"\"\n|Welcome to Scala ${util.Properties.versionString}\n|JVM: ${System.getProperty(\"java.version\")}\n|Current time: $now\n|\n|Custom functions available:\n|  - time(label)(block): Measure execution time\n|  - pp(x): Pretty print any value\n|\"\"\".stripMargin)\n</code></pre>"},{"location":"appendix/appendixD/#repl_1","title":"REPL\u306e\u8d77\u52d5\u30aa\u30d7\u30b7\u30e7\u30f3","text":"<pre><code># ~/.sbtrc\nalias repl=\"console\"\nalias r=\"reload\"\nalias c=\"compile\" \nalias t=\"test\"\nalias to=\"testOnly\"\nalias tq=\"testQuick\"\nalias it=\"IntegrationTest/test\"\nalias fmt=\"scalafmtAll\"\n\n# \u30ab\u30b9\u30bf\u30e0REPL\u8d77\u52d5\nalias myrepl=\"set console / initialCommands := \\\"\\\"\\\"\n  |import scala.concurrent._\n  |import scala.concurrent.duration._\n  |import scala.util._\n  |import ExecutionContext.Implicits.global\n  |println(\\\"Custom REPL initialized!\\\")\n\\\"\\\"\\\"; console\"\n</code></pre>"},{"location":"appendix/appendixD/#_13","title":"\u30c7\u30d0\u30c3\u30b0\u8a2d\u5b9a","text":""},{"location":"appendix/appendixD/#intellij-idea_1","title":"IntelliJ IDEA\u306e\u30c7\u30d0\u30c3\u30b0","text":"<pre><code>// \u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u306e\u6761\u4ef6\u8a2d\u5b9a\n// \u53f3\u30af\u30ea\u30c3\u30af &gt; More &gt; Condition\n\n// \u4f8b\uff1a\u7279\u5b9a\u306e\u5024\u306e\u6642\u3060\u3051\u505c\u6b62\ni == 42\n\n// \u4f8b\uff1a\u8907\u96d1\u306a\u6761\u4ef6\nuser.age &gt; 18 &amp;&amp; user.name.startsWith(\"A\")\n\n// \u30ed\u30b0\u51fa\u529b\uff08\u505c\u6b62\u3057\u306a\u3044\uff09\n// \u53f3\u30af\u30ea\u30c3\u30af &gt; More &gt; Log evaluated expression\ns\"Current value: $value\"\n</code></pre>"},{"location":"appendix/appendixD/#_14","title":"\u30ea\u30e2\u30fc\u30c8\u30c7\u30d0\u30c3\u30b0","text":"<pre><code># sbt\u8d77\u52d5\u6642\u306e\u30c7\u30d0\u30c3\u30b0\u30aa\u30d7\u30b7\u30e7\u30f3\nsbt -jvm-debug 5005\n\n# \u307e\u305f\u306f build.sbt \u306b\u8a2d\u5b9a\nfork := true\njavaOptions += \"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005\"\n</code></pre>"},{"location":"appendix/appendixD/#_15","title":"\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0","text":""},{"location":"appendix/appendixD/#jvm","title":"JVM\u30aa\u30d7\u30b7\u30e7\u30f3","text":"<pre><code>// build.sbt\njavaOptions ++= Seq(\n  \"-Xmx2g\",                    // \u6700\u5927\u30d2\u30fc\u30d7\u30b5\u30a4\u30ba\n  \"-Xms1g\",                    // \u521d\u671f\u30d2\u30fc\u30d7\u30b5\u30a4\u30ba\n  \"-XX:+UseG1GC\",              // G1\u30ac\u30d9\u30fc\u30b8\u30b3\u30ec\u30af\u30bf\n  \"-XX:MaxGCPauseMillis=200\",  // GC\u505c\u6b62\u6642\u9593\u306e\u76ee\u6a19\n  \"-XX:+PrintGCDetails\",       // GC\u30ed\u30b0\u51fa\u529b\n  \"-XX:+PrintGCTimeStamps\",\n  \"-Xlog:gc:file=gc.log\"       // GC\u30ed\u30b0\u30d5\u30a1\u30a4\u30eb\n)\n\n// \u30b3\u30f3\u30d1\u30a4\u30e9\u30aa\u30d7\u30b7\u30e7\u30f3\nscalacOptions ++= Seq(\n  \"-opt:l:inline\",             // \u30a4\u30f3\u30e9\u30a4\u30f3\u6700\u9069\u5316\n  \"-opt-inline-from:**\",       // \u3059\u3079\u3066\u304b\u3089\u30a4\u30f3\u30e9\u30a4\u30f3\n  \"-opt-warnings\",             // \u6700\u9069\u5316\u306e\u8b66\u544a\n  \"-Ystatistics:typer\"         // \u30b3\u30f3\u30d1\u30a4\u30eb\u7d71\u8a08\n)\n</code></pre>"},{"location":"appendix/appendixD/#sbt","title":"sbt\u306e\u9ad8\u901f\u5316","text":"<pre><code>// project/build.properties\nsbt.version=1.9.7\n\n// ~/.sbt/1.0/global.sbt\nGlobal / onChangedBuildSource := ReloadOnSourceChanges\nGlobal / excludeLintKeys += evictionWarningOptions\n\n// \u30e1\u30e2\u30ea\u8a2d\u5b9a\n// ~/.sbtopts \u307e\u305f\u306f SBT_OPTS\u74b0\u5883\u5909\u6570\n-J-Xmx4g\n-J-Xms1g\n-J-XX:ReservedCodeCacheSize=512m\n-J-XX:+CMSClassUnloadingEnabled\n</code></pre>"},{"location":"appendix/appendixD/#_16","title":"\u7d71\u5408\u958b\u767a\u74b0\u5883\u306e\u6bd4\u8f03","text":""},{"location":"appendix/appendixD/#ide","title":"\u5404IDE\u306e\u7279\u5fb4","text":"<pre><code>/*\nIntelliJ IDEA\n\u9577\u6240\uff1a\n- \u6700\u3082\u9ad8\u6a5f\u80fd\u3067\u5b89\u5b9a\n- \u512a\u308c\u305f\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u6a5f\u80fd\n- \u30c7\u30d0\u30c3\u30ac\u30fc\u304c\u5f37\u529b\n- \u5927\u898f\u6a21\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u6700\u9069\n\n\u77ed\u6240\uff1a\n- \u91cd\u3044\uff08\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u5927\uff09\n- \u6709\u6599\u7248\u304c\u5fc5\u8981\u306a\u6a5f\u80fd\u3042\u308a\n\nVS Code + Metals\n\u9577\u6240\uff1a\n- \u8efd\u91cf\u3067\u9ad8\u901f\n- \u7121\u6599\n- \u62e1\u5f35\u6a5f\u80fd\u304c\u8c4a\u5bcc\n- \u30af\u30ed\u30b9\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\n\n\u77ed\u6240\uff1a\n- IntelliJ\u3088\u308a\u6a5f\u80fd\u304c\u5c11\u306a\u3044\n- \u8a2d\u5b9a\u304c\u5fc5\u8981\n\nVim/Neovim + Metals\n\u9577\u6240\uff1a\n- \u6700\u3082\u8efd\u91cf\n- \u30ad\u30fc\u30dc\u30fc\u30c9\u64cd\u4f5c\u52b9\u7387\u6700\u9ad8\n- \u30b5\u30fc\u30d0\u30fc\u3067\u3082\u4f7f\u3048\u308b\n\n\u77ed\u6240\uff1a\n- \u5b66\u7fd2\u66f2\u7dda\u304c\u6025\n- GUI\u6a5f\u80fd\u306a\u3057\n*/\n</code></pre>"},{"location":"appendix/appendixD/#_17","title":"\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8","text":""},{"location":"appendix/appendixD/#_18","title":"\u30ab\u30b9\u30bf\u30e0\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u4f5c\u6210","text":"<pre><code>// g8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8: src/main/g8/build.sbt\nThisBuild / scalaVersion := \"$scala_version$\"\nThisBuild / version := \"0.1.0-SNAPSHOT\"\nThisBuild / organization := \"$organization$\"\n\nlazy val root = (project in file(\".\"))\n  .settings(\n    name := \"$name$\",\n\n    libraryDependencies ++= Seq(\n      // \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\n      \"org.typelevel\" %% \"cats-core\" % \"$cats_version$\",\n      \"org.typelevel\" %% \"cats-effect\" % \"$cats_effect_version$\",\n\n      // JSON\n      \"io.circe\" %% \"circe-core\" % \"$circe_version$\",\n      \"io.circe\" %% \"circe-generic\" % \"$circe_version$\",\n      \"io.circe\" %% \"circe-parser\" % \"$circe_version$\",\n\n      // HTTP\n      \"com.softwaremill.sttp.client3\" %% \"core\" % \"$sttp_version$\",\n\n      // \u30ed\u30b0\n      \"ch.qos.logback\" % \"logback-classic\" % \"$logback_version$\",\n      \"com.typesafe.scala-logging\" %% \"scala-logging\" % \"$scala_logging_version$\",\n\n      // \u30c6\u30b9\u30c8\n      \"org.scalatest\" %% \"scalatest\" % \"$scalatest_version$\" % Test,\n      \"org.scalatestplus\" %% \"scalacheck-1-17\" % \"$scalatest_plus_version$\" % Test\n    ),\n\n    // \u30b9\u30ab\u30e9\u30b3\u30f3\u30d1\u30a4\u30e9\u8a2d\u5b9a\n    scalacOptions ++= Seq(\n      \"-deprecation\",\n      \"-feature\",\n      \"-unchecked\",\n      \"-language:higherKinds\",\n      \"-language:implicitConversions\",\n      \"-Xfatal-warnings\"\n    ),\n\n    // \u30c6\u30b9\u30c8\u8a2d\u5b9a\n    Test / testOptions += Tests.Argument(TestFrameworks.ScalaTest, \"-oDF\"),\n    Test / parallelExecution := false\n  )\n\n// default.properties\nscala_version=3.3.1\ncats_version=2.10.0\ncats_effect_version=3.5.2\ncirce_version=0.14.6\nsttp_version=3.9.1\nlogback_version=1.4.11\nscala_logging_version=3.9.5\nscalatest_version=3.2.17\nscalatest_plus_version=3.2.17.0\n</code></pre>"},{"location":"appendix/appendixD/#_19","title":"\u30c8\u30e9\u30d6\u30eb\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0","text":""},{"location":"appendix/appendixD/#_20","title":"\u3088\u304f\u3042\u308b\u554f\u984c\u3068\u89e3\u6c7a\u7b56","text":"<pre><code>// 1. \u30a4\u30f3\u30dd\u30fc\u30c8\u304c\u89e3\u6c7a\u3055\u308c\u306a\u3044\n// \u89e3\u6c7a\u7b56\uff1a\n// - sbt reload\n// - File &gt; Invalidate Caches and Restart (IntelliJ)\n// - Metals: Restart server (VS Code)\n\n// 2. \u30e1\u30e2\u30ea\u4e0d\u8db3\n// IntelliJ: Help &gt; Change Memory Settings\n// VS Code: metals.javaHome \u3067JVM\u30aa\u30d7\u30b7\u30e7\u30f3\u8a2d\u5b9a\n\n// 3. \u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u9045\u3044\n// - incremental compilation \u3092\u6709\u52b9\u5316\n// - \u4e26\u5217\u30b3\u30f3\u30d1\u30a4\u30eb\u3092\u8a2d\u5b9a\nGlobal / concurrentRestrictions := Seq(\n  Tags.limit(Tags.CPU, math.min(4, java.lang.Runtime.getRuntime.availableProcessors))\n)\n\n// 4. \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u7af6\u5408\n// - dependencyOverrides \u3092\u4f7f\u7528\n// - evictionWarningOptions \u3067\u8b66\u544a\u3092\u7ba1\u7406\n\n// 5. Metals\u304c\u52d5\u304b\u306a\u3044\n// - .metals/, .bloop/ \u3092\u524a\u9664\n// - metals.log \u3092\u78ba\u8a8d\n// - Java version \u3092\u78ba\u8a8d\uff0811\u4ee5\u4e0a\u63a8\u5968\uff09\n</code></pre>"},{"location":"appendix/appendixD/#_21","title":"\u307e\u3068\u3081","text":"<p>\u958b\u767a\u74b0\u5883\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u306e\u300c\u4f5c\u696d\u5834\u300d\u3067\u3059\u3002\u81ea\u5206\u306b\u5408\u3063\u305f\u74b0\u5883\u3092\u6574\u3048\u308b\u3053\u3068\u3067\u3001\u751f\u7523\u6027\u304c\u5927\u304d\u304f\u5411\u4e0a\u3057\u307e\u3059\u3002</p> <p>\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u306e\u30dd\u30a4\u30f3\u30c8\uff1a - \u57fa\u672c\u7684\u306a\u8a2d\u5b9a\u304b\u3089\u59cb\u3081\u308b - \u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u30ad\u30fc\u3092\u899a\u3048\u308b - \u5fc5\u8981\u306b\u5fdc\u3058\u3066\u62e1\u5f35\u6a5f\u80fd\u3092\u8ffd\u52a0 - \u5b9a\u671f\u7684\u306b\u8a2d\u5b9a\u3092\u898b\u76f4\u3059</p> <p>\u5feb\u9069\u306a\u958b\u767a\u74b0\u5883\u3067\u3001\u697d\u3057\u304fScala\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u7d9a\u3051\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"appendix/appendixE/","title":"\u4ed8\u9332E \u7df4\u7fd2\u554f\u984c\u89e3\u7b54\u96c6","text":""},{"location":"appendix/appendixE/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u5404\u7ae0\u306e\u7df4\u7fd2\u554f\u984c\u306e\u89e3\u7b54\u4f8b\u3067\u3059\u3002\u300c\u6b63\u89e3\u300d\u306f\u4e00\u3064\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u3053\u3053\u306b\u793a\u3059\u306e\u306f\u3001\u3042\u304f\u307e\u3067\u53c2\u8003\u4f8b\u3067\u3059\u3002\u81ea\u5206\u306a\u308a\u306e\u89e3\u6cd5\u3092\u898b\u3064\u3051\u308b\u3053\u3068\u3082\u3001\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u697d\u3057\u3055\u306e\u4e00\u3064\u3067\u3059\uff01</p>"},{"location":"appendix/appendixE/#1","title":"\u7b2c1\u7ae0\u306e\u89e3\u7b54","text":""},{"location":"appendix/appendixE/#1hello-world","title":"\u7df4\u7fd21\uff1aHello, World!\u3092\u6539\u9020","text":"<pre><code>// \u57fa\u672c\u306e\u6539\u9020\n@main def hello(): Unit = {\n  println(\"\u3053\u3093\u306b\u3061\u306f\u3001Scala\uff01\")\n  println(\"\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u4e16\u754c\u3078\u3088\u3046\u3053\u305d\uff01\")\n  println(\"\u4e00\u7dd2\u306b\u697d\u3057\u304f\u5b66\u3073\u307e\u3057\u3087\u3046\uff01\")\n}\n\n// \u540d\u524d\u3092\u53d7\u3051\u53d6\u308b\u30d0\u30fc\u30b8\u30e7\u30f3\n@main def helloWithName(name: String): Unit = {\n  println(s\"\u3053\u3093\u306b\u3061\u306f\u3001$name \u3055\u3093\uff01\")\n  println(s\"$name \u3055\u3093\u3001Scala\u306e\u4e16\u754c\u3078\u3088\u3046\u3053\u305d\uff01\")\n}\n\n// \u6642\u9593\u306b\u3088\u3063\u3066\u6328\u62f6\u3092\u5909\u3048\u308b\n@main def helloByTime(): Unit = {\n  val hour = java.time.LocalDateTime.now().getHour\n  val greeting = if (hour &lt; 12) \"\u304a\u306f\u3088\u3046\u3054\u3056\u3044\u307e\u3059\"\n                 else if (hour &lt; 18) \"\u3053\u3093\u306b\u3061\u306f\"\n                 else \"\u3053\u3093\u3070\u3093\u306f\"\n  println(s\"$greeting\u3001Scala\uff01\")\n}\n</code></pre>"},{"location":"appendix/appendixE/#2","title":"\u7df4\u7fd22\uff1a\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3068\u53cb\u9054\u306b\u306a\u308b","text":"<pre><code>// \u308f\u3056\u3068\u30a8\u30e9\u30fc\u3092\u8d77\u3053\u3057\u3066\u307f\u308b\n\n// 1. \u30bb\u30df\u30b3\u30ed\u30f3\u5fd8\u308c\uff08Scala 3\u3067\u306f\u554f\u984c\u306a\u3057\uff09\nval x = 10\nval y = 20  // OK\n\n// 2. \u62ec\u5f27\u306e\u4e0d\u4e00\u81f4\n// println(\"Hello\")  // \u6b63\u3057\u3044\n// println(\"Hello\"   // error: ')' expected but eof found\n\n// 3. \u30bf\u30a4\u30d7\u30df\u30b9\n// prntln(\"Hello\")   // error: not found: value prntln\n// println(\"Hello\")  // \u6b63\u3057\u3044\n\n// 4. \u6587\u5b57\u5217\u306e\u5f15\u7528\u7b26\n// println('Hello')  // error: unclosed character literal\n// println(\"Hello\")  // \u6b63\u3057\u3044\n</code></pre>"},{"location":"appendix/appendixE/#2_1","title":"\u7b2c2\u7ae0\u306e\u89e3\u7b54","text":""},{"location":"appendix/appendixE/#1_1","title":"\u7df4\u7fd21\uff1a\u8a08\u7b97\u6a5f\u3092\u4f5c\u308b","text":"<pre><code>@main def calculator(): Unit = {\n  // \u57fa\u672c\u7684\u306a\u56db\u5247\u6f14\u7b97\n  val a = 10\n  val b = 3\n\n  println(s\"$a + $b = ${a + b}\")\n  println(s\"$a - $b = ${a - b}\")\n  println(s\"$a * $b = ${a * b}\")\n  println(s\"$a / $b = ${a / b}\")\n  println(s\"$a % $b = ${a % b}\")\n\n  // \u8907\u96d1\u306a\u8a08\u7b97\n  val taxRate = 0.1\n  val price = 1000\n  val taxIncludedPrice = price * (1 + taxRate)\n  println(s\"\u7a0e\u8fbc\u4fa1\u683c: ${taxIncludedPrice.toInt}\u5186\")\n}\n</code></pre>"},{"location":"appendix/appendixE/#2_2","title":"\u7df4\u7fd22\uff1a\u6e29\u5ea6\u5909\u63db","text":"<pre><code>@main def temperatureConverter(): Unit = {\n  // \u6442\u6c0f\u304b\u3089\u83ef\u6c0f\u3078\n  def celsiusToFahrenheit(c: Double): Double = c * 9/5 + 32\n\n  // \u83ef\u6c0f\u304b\u3089\u6442\u6c0f\u3078\n  def fahrenheitToCelsius(f: Double): Double = (f - 32) * 5/9\n\n  val celsius = 25.0\n  val fahrenheit = celsiusToFahrenheit(celsius)\n  println(s\"${celsius}\u00b0C = ${fahrenheit}\u00b0F\")\n\n  val f = 77.0\n  val c = fahrenheitToCelsius(f)\n  println(f\"${f}\u00b0F = ${c}%.1f\u00b0C\")\n}\n</code></pre>"},{"location":"appendix/appendixE/#3","title":"\u7b2c3\u7ae0\u306e\u89e3\u7b54","text":""},{"location":"appendix/appendixE/#1_2","title":"\u7df4\u7fd21\uff1a\u5909\u6570\u3068\u5b9a\u6570","text":"<pre><code>@main def variablesPractice(): Unit = {\n  // \u5b9a\u6570\uff08\u5909\u66f4\u4e0d\u53ef\uff09\n  val pi = 3.14159\n  val myName = \"\u592a\u90ce\"\n\n  // \u5909\u6570\uff08\u5909\u66f4\u53ef\u80fd\uff09\n  var age = 20\n  var score = 0\n\n  println(s\"\u6700\u521d: \u5e74\u9f62=$age, \u30b9\u30b3\u30a2=$score\")\n\n  // 1\u5e74\u5f8c\n  age = age + 1\n  score = score + 100\n\n  println(s\"1\u5e74\u5f8c: \u5e74\u9f62=$age, \u30b9\u30b3\u30a2=$score\")\n\n  // val \u306f\u5909\u66f4\u3067\u304d\u306a\u3044\n  // pi = 3.14  // error: reassignment to val\n}\n</code></pre>"},{"location":"appendix/appendixE/#2_3","title":"\u7df4\u7fd22\uff1a\u578b\u3092\u610f\u8b58\u3059\u308b","text":"<pre><code>@main def typesPractice(): Unit = {\n  // \u660e\u793a\u7684\u306a\u578b\u6307\u5b9a\n  val name: String = \"Scala\"\n  val version: Double = 3.3\n  val isAwesome: Boolean = true\n  val releaseYear: Int = 2023\n\n  // \u578b\u63a8\u8ad6\n  val language = \"Scala\"  // String\u578b\u3068\u63a8\u8ad6\n  val pi = 3.14159        // Double\u578b\u3068\u63a8\u8ad6\n  val count = 42          // Int\u578b\u3068\u63a8\u8ad6\n\n  // \u578b\u306e\u78ba\u8a8d\uff08REPL\u3067\u8a66\u3059\u3068\u826f\u3044\uff09\n  println(s\"$name is version $version\")\n  println(s\"Released in $releaseYear\")\n  println(s\"Is it awesome? $isAwesome\")\n}\n</code></pre>"},{"location":"appendix/appendixE/#8","title":"\u7b2c8\u7ae0\u306e\u89e3\u7b54","text":""},{"location":"appendix/appendixE/#1_3","title":"\u7df4\u7fd21\uff1a\u30ea\u30b9\u30c8\u64cd\u4f5c","text":"<pre><code>@main def listOperations(): Unit = {\n  val numbers = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\n  // \u5076\u6570\u3060\u3051\u62bd\u51fa\n  val evens = numbers.filter(_ % 2 == 0)\n  println(s\"\u5076\u6570: $evens\")\n\n  // \u5404\u8981\u7d20\u30922\u500d\n  val doubled = numbers.map(_ * 2)\n  println(s\"2\u500d: $doubled\")\n\n  // \u5408\u8a08\u5024\n  val sum = numbers.sum\n  println(s\"\u5408\u8a08: $sum\")\n\n  // \u5e73\u5747\u5024\n  val average = sum.toDouble / numbers.length\n  println(f\"\u5e73\u5747: $average%.1f\")\n\n  // \u6700\u5927\u5024\u3068\u6700\u5c0f\u5024\n  println(s\"\u6700\u5927: ${numbers.max}, \u6700\u5c0f: ${numbers.min}\")\n}\n</code></pre>"},{"location":"appendix/appendixE/#2_4","title":"\u7df4\u7fd22\uff1a\u30b7\u30e7\u30c3\u30d4\u30f3\u30b0\u30ea\u30b9\u30c8","text":"<pre><code>@main def shoppingList(): Unit = {\n  case class Item(name: String, price: Int, quantity: Int)\n\n  val items = List(\n    Item(\"\u308a\u3093\u3054\", 150, 3),\n    Item(\"\u30d0\u30ca\u30ca\", 100, 2),\n    Item(\"\u30aa\u30ec\u30f3\u30b8\", 200, 1),\n    Item(\"\u3076\u3069\u3046\", 500, 1)\n  )\n\n  // \u5408\u8a08\u91d1\u984d\n  val total = items.map(item =&gt; item.price * item.quantity).sum\n  println(s\"\u5408\u8a08\u91d1\u984d: ${total}\u5186\")\n\n  // \u6700\u3082\u9ad8\u3044\u5546\u54c1\n  val mostExpensive = items.maxBy(_.price)\n  println(s\"\u6700\u3082\u9ad8\u3044\u5546\u54c1: ${mostExpensive.name} (${mostExpensive.price}\u5186)\")\n\n  // 200\u5186\u4ee5\u4e0b\u306e\u5546\u54c1\n  val affordable = items.filter(_.price &lt;= 200)\n  println(s\"200\u5186\u4ee5\u4e0b: ${affordable.map(_.name)}\")\n}\n</code></pre>"},{"location":"appendix/appendixE/#14","title":"\u7b2c14\u7ae0\u306e\u89e3\u7b54","text":""},{"location":"appendix/appendixE/#1_4","title":"\u7df4\u7fd21\uff1a\u6210\u7e3e\u5224\u5b9a","text":"<pre><code>@main def gradeChecker(): Unit = {\n  def getGrade(score: Int): String = {\n    if (score &gt;= 90) \"S\"\n    else if (score &gt;= 80) \"A\"\n    else if (score &gt;= 70) \"B\"\n    else if (score &gt;= 60) \"C\"\n    else \"D\"\n  }\n\n  val scores = List(95, 82, 73, 65, 45)\n  scores.foreach { score =&gt;\n    println(s\"\u70b9\u6570: $score \u2192 \u6210\u7e3e: ${getGrade(score)}\")\n  }\n}\n</code></pre>"},{"location":"appendix/appendixE/#2_5","title":"\u7df4\u7fd22\uff1a\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u3067\u66dc\u65e5","text":"<pre><code>@main def dayOfWeek(): Unit = {\n  def getDayType(day: String): String = day match {\n    case \"\u6708\u66dc\u65e5\" | \"\u706b\u66dc\u65e5\" | \"\u6c34\u66dc\u65e5\" | \"\u6728\u66dc\u65e5\" | \"\u91d1\u66dc\u65e5\" =&gt; \"\u5e73\u65e5\"\n    case \"\u571f\u66dc\u65e5\" | \"\u65e5\u66dc\u65e5\" =&gt; \"\u9031\u672b\"\n    case _ =&gt; \"\u4e0d\u660e\u306a\u66dc\u65e5\"\n  }\n\n  val days = List(\"\u6708\u66dc\u65e5\", \"\u571f\u66dc\u65e5\", \"\u65e5\u66dc\u65e5\", \"\u795d\u65e5\")\n  days.foreach { day =&gt;\n    println(s\"$day \u306f ${getDayType(day)}\")\n  }\n}\n</code></pre>"},{"location":"appendix/appendixE/#16","title":"\u7b2c16\u7ae0\u306e\u89e3\u7b54","text":""},{"location":"appendix/appendixE/#1_5","title":"\u7df4\u7fd21\uff1a\u95a2\u6570\u3092\u4f5c\u308b","text":"<pre><code>@main def functionsPractice(): Unit = {\n  // \u9762\u7a4d\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\n  def rectangleArea(width: Double, height: Double): Double = \n    width * height\n\n  def circleArea(radius: Double): Double = \n    math.Pi * radius * radius\n\n  def triangleArea(base: Double, height: Double): Double = \n    base * height / 2\n\n  // \u4f7f\u7528\u4f8b\n  println(f\"\u9577\u65b9\u5f62(5\u00d73): ${rectangleArea(5, 3)}%.2f\")\n  println(f\"\u5186(\u534a\u5f844): ${circleArea(4)}%.2f\")\n  println(f\"\u4e09\u89d2\u5f62(\u5e956\u00d7\u9ad84): ${triangleArea(6, 4)}%.2f\")\n}\n</code></pre>"},{"location":"appendix/appendixE/#2_6","title":"\u7df4\u7fd22\uff1a\u9ad8\u968e\u95a2\u6570","text":"<pre><code>@main def higherOrderFunctions(): Unit = {\n  // \u6f14\u7b97\u3092\u53d7\u3051\u53d6\u308b\u95a2\u6570\n  def calculate(a: Int, b: Int, op: (Int, Int) =&gt; Int): Int = \n    op(a, b)\n\n  val add = (x: Int, y: Int) =&gt; x + y\n  val multiply = (x: Int, y: Int) =&gt; x * y\n  val max = (x: Int, y: Int) =&gt; if (x &gt; y) x else y\n\n  println(s\"10 + 5 = ${calculate(10, 5, add)}\")\n  println(s\"10 * 5 = ${calculate(10, 5, multiply)}\")\n  println(s\"max(10, 5) = ${calculate(10, 5, max)}\")\n\n  // \u30ab\u30b9\u30bf\u30e0\u6f14\u7b97\n  val power = (x: Int, y: Int) =&gt; math.pow(x, y).toInt\n  println(s\"2^8 = ${calculate(2, 8, power)}\")\n}\n</code></pre>"},{"location":"appendix/appendixE/#19","title":"\u7b2c19\u7ae0\u306e\u89e3\u7b54","text":""},{"location":"appendix/appendixE/#1_6","title":"\u7df4\u7fd21\uff1a\u5b89\u5168\u306a\u9664\u7b97","text":"<pre><code>@main def safeDivision(): Unit = {\n  def divide(a: Double, b: Double): Option[Double] = \n    if (b == 0) None else Some(a / b)\n\n  val testCases = List((10.0, 2.0), (5.0, 0.0), (15.0, 3.0))\n\n  testCases.foreach { case (a, b) =&gt;\n    divide(a, b) match {\n      case Some(result) =&gt; println(f\"$a / $b = $result%.2f\")\n      case None =&gt; println(s\"$a / $b = \u30a8\u30e9\u30fc: \u30bc\u30ed\u9664\u7b97\")\n    }\n  }\n}\n</code></pre>"},{"location":"appendix/appendixE/#2either","title":"\u7df4\u7fd22\uff1aEither \u3067\u30a8\u30e9\u30fc\u51e6\u7406","text":"<pre><code>@main def errorHandling(): Unit = {\n  def parseInt(s: String): Either[String, Int] = \n    try {\n      Right(s.toInt)\n    } catch {\n      case _: NumberFormatException =&gt; \n        Left(s\"'$s' \u306f\u6570\u5024\u306b\u5909\u63db\u3067\u304d\u307e\u305b\u3093\")\n    }\n\n  val inputs = List(\"123\", \"abc\", \"45.6\", \"789\")\n\n  inputs.foreach { input =&gt;\n    parseInt(input) match {\n      case Right(n) =&gt; println(s\"\u6210\u529f: $input \u2192 $n\")\n      case Left(error) =&gt; println(s\"\u30a8\u30e9\u30fc: $error\")\n    }\n  }\n}\n</code></pre>"},{"location":"appendix/appendixE/#22","title":"\u7b2c22\u7ae0\u306e\u89e3\u7b54","text":""},{"location":"appendix/appendixE/#1_7","title":"\u7df4\u7fd21\uff1a\u30b1\u30fc\u30b9\u30af\u30e9\u30b9","text":"<pre><code>@main def caseClassPractice(): Unit = {\n  case class Book(\n    title: String,\n    author: String,\n    price: Int,\n    year: Int\n  ) {\n    def discountPrice(rate: Double): Int = \n      (price * (1 - rate)).toInt\n  }\n\n  val books = List(\n    Book(\"\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u5165\u9580\", \"\u5c71\u7530\u592a\u90ce\", 3000, 2023),\n    Book(\"Scala\u5b9f\u8df5\u30ac\u30a4\u30c9\", \"\u9234\u6728\u82b1\u5b50\", 3500, 2024),\n    Book(\"\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\", \"\u4f50\u85e4\u6b21\u90ce\", 4000, 2022)\n  )\n\n  // 2023\u5e74\u4ee5\u964d\u306e\u672c\n  val recentBooks = books.filter(_.year &gt;= 2023)\n  println(\"\u6700\u8fd1\u306e\u672c:\")\n  recentBooks.foreach(println)\n\n  // 20%\u5272\u5f15\u4fa1\u683c\n  println(\"\\n20%\u5272\u5f15\u5f8c:\")\n  books.foreach { book =&gt;\n    println(s\"${book.title}: ${book.discountPrice(0.2)}\u5186\")\n  }\n}\n</code></pre>"},{"location":"appendix/appendixE/#25","title":"\u7b2c25\u7ae0\u306e\u89e3\u7b54","text":""},{"location":"appendix/appendixE/#1_8","title":"\u7df4\u7fd21\uff1a\u95a2\u6570\u5408\u6210","text":"<pre><code>@main def functionComposition(): Unit = {\n  // \u6587\u5b57\u5217\u51e6\u7406\u306e\u95a2\u6570\n  val trim: String =&gt; String = _.trim\n  val toUpper: String =&gt; String = _.toUpperCase\n  val addExclamation: String =&gt; String = _ + \"!\"\n\n  // \u5408\u6210\n  val shout = trim andThen toUpper andThen addExclamation\n\n  val inputs = List(\n    \"  hello  \",\n    \" scala \",\n    \"  programming  \"\n  )\n\n  inputs.foreach { input =&gt;\n    println(s\"'$input' \u2192 '${shout(input)}'\")\n  }\n\n  // \u6570\u5024\u51e6\u7406\u306e\u5408\u6210\n  val double: Int =&gt; Int = _ * 2\n  val addTen: Int =&gt; Int = _ + 10\n  val square: Int =&gt; Int = x =&gt; x * x\n\n  val complexCalc = double andThen addTen andThen square\n\n  (1 to 5).foreach { n =&gt;\n    println(s\"f($n) = ${complexCalc(n)}\")\n  }\n}\n</code></pre>"},{"location":"appendix/appendixE/#30","title":"\u7b2c30\u7ae0\u306e\u89e3\u7b54","text":""},{"location":"appendix/appendixE/#1for","title":"\u7df4\u7fd21\uff1afor\u5f0f","text":"<pre><code>@main def forComprehension(): Unit = {\n  // \u4e5d\u4e5d\u306e\u8868\n  println(\"\u4e5d\u4e5d\u306e\u8868:\")\n  val multiplication = for {\n    i &lt;- 1 to 9\n    j &lt;- 1 to 9\n  } yield s\"$i \u00d7 $j = ${i * j}\"\n\n  multiplication.grouped(9).foreach { row =&gt;\n    println(row.mkString(\" | \"))\n  }\n\n  // \u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u4ed8\u304d\n  println(\"\\n\u5076\u6570\u306e\u7a4d\u306e\u307f:\")\n  val evenProducts = for {\n    i &lt;- 1 to 9\n    j &lt;- 1 to 9\n    if (i * j) % 2 == 0\n  } yield (i, j, i * j)\n\n  evenProducts.take(10).foreach { case (i, j, product) =&gt;\n    println(s\"$i \u00d7 $j = $product\")\n  }\n}\n</code></pre>"},{"location":"appendix/appendixE/#33","title":"\u7b2c33\u7ae0\u306e\u89e3\u7b54","text":""},{"location":"appendix/appendixE/#1_9","title":"\u7df4\u7fd21\uff1a\u4e26\u884c\u51e6\u7406","text":"<pre><code>import scala.concurrent._\nimport scala.concurrent.duration._\nimport ExecutionContext.Implicits.global\n\n@main def parallelProcessing(): Unit = {\n  def fetchData(id: Int): Future[String] = Future {\n    Thread.sleep(1000) // 1\u79d2\u306e\u9045\u5ef6\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\n    s\"\u30c7\u30fc\u30bf$id\"\n  }\n\n  val startTime = System.currentTimeMillis()\n\n  // \u4e26\u884c\u5b9f\u884c\n  val futures = (1 to 5).map(fetchData)\n  val combinedFuture = Future.sequence(futures)\n\n  val results = Await.result(combinedFuture, 10.seconds)\n  val endTime = System.currentTimeMillis()\n\n  println(s\"\u7d50\u679c: ${results.mkString(\", \")}\")\n  println(s\"\u5b9f\u884c\u6642\u9593: ${endTime - startTime}ms\")\n  // \u7d041\u79d2\u3067\u5b8c\u4e86\uff085\u79d2\u3067\u306f\u306a\u3044\uff09\n}\n</code></pre>"},{"location":"appendix/appendixE/#36","title":"\u7b2c36\u7ae0\u306e\u89e3\u7b54","text":""},{"location":"appendix/appendixE/#1_10","title":"\u7df4\u7fd21\uff1a\u96fb\u5353\u306e\u30c6\u30b9\u30c8","text":"<pre><code>import org.scalatest.funsuite.AnyFunSuite\nimport org.scalatest.matchers.should.Matchers\n\nclass Calculator {\n  def add(a: Double, b: Double): Double = a + b\n  def subtract(a: Double, b: Double): Double = a - b\n  def multiply(a: Double, b: Double): Double = a * b\n  def divide(a: Double, b: Double): Either[String, Double] = \n    if (b == 0) Left(\"\u30bc\u30ed\u9664\u7b97\u30a8\u30e9\u30fc\") \n    else Right(a / b)\n}\n\nclass CalculatorTest extends AnyFunSuite with Matchers {\n  val calc = new Calculator\n\n  test(\"\u52a0\u7b97\") {\n    calc.add(2, 3) shouldBe 5\n    calc.add(-1, 1) shouldBe 0\n    calc.add(0.1, 0.2) shouldBe 0.3 +- 0.01\n  }\n\n  test(\"\u6e1b\u7b97\") {\n    calc.subtract(5, 3) shouldBe 2\n    calc.subtract(0, 5) shouldBe -5\n  }\n\n  test(\"\u4e57\u7b97\") {\n    calc.multiply(3, 4) shouldBe 12\n    calc.multiply(-2, 3) shouldBe -6\n    calc.multiply(0, 100) shouldBe 0\n  }\n\n  test(\"\u9664\u7b97\") {\n    calc.divide(10, 2) shouldBe Right(5)\n    calc.divide(7, 2) shouldBe Right(3.5)\n    calc.divide(5, 0) shouldBe Left(\"\u30bc\u30ed\u9664\u7b97\u30a8\u30e9\u30fc\")\n  }\n}\n</code></pre>"},{"location":"appendix/appendixE/#2todo","title":"\u7df4\u7fd22\uff1aTODO\u30ea\u30b9\u30c8\u306e\u30c6\u30b9\u30c8","text":"<pre><code>case class Task(id: Int, title: String, completed: Boolean = false)\n\nclass TodoList {\n  private var tasks = Map[Int, Task]()\n  private var nextId = 1\n\n  def add(title: String): Task = {\n    val task = Task(nextId, title)\n    tasks = tasks + (nextId -&gt; task)\n    nextId += 1\n    task\n  }\n\n  def remove(id: Int): Boolean = {\n    if (tasks.contains(id)) {\n      tasks = tasks - id\n      true\n    } else false\n  }\n\n  def complete(id: Int): Boolean = {\n    tasks.get(id) match {\n      case Some(task) =&gt;\n        tasks = tasks.updated(id, task.copy(completed = true))\n        true\n      case None =&gt; false\n    }\n  }\n\n  def list(onlyIncomplete: Boolean = false): List[Task] = {\n    val allTasks = tasks.values.toList\n    if (onlyIncomplete) allTasks.filterNot(_.completed)\n    else allTasks\n  }\n}\n\nclass TodoListTest extends AnyFunSuite with Matchers {\n  test(\"\u30bf\u30b9\u30af\u306e\u8ffd\u52a0\") {\n    val todo = new TodoList\n    val task = todo.add(\"\u8cb7\u3044\u7269\")\n\n    task.title shouldBe \"\u8cb7\u3044\u7269\"\n    task.completed shouldBe false\n    todo.list() should have size 1\n  }\n\n  test(\"\u30bf\u30b9\u30af\u306e\u524a\u9664\") {\n    val todo = new TodoList\n    val task = todo.add(\"\u52c9\u5f37\")\n\n    todo.remove(task.id) shouldBe true\n    todo.list() shouldBe empty\n    todo.remove(999) shouldBe false\n  }\n\n  test(\"\u30bf\u30b9\u30af\u306e\u5b8c\u4e86\") {\n    val todo = new TodoList\n    val task = todo.add(\"\u904b\u52d5\")\n\n    todo.complete(task.id) shouldBe true\n    todo.list().head.completed shouldBe true\n  }\n\n  test(\"\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\") {\n    val todo = new TodoList\n    val task1 = todo.add(\"\u30bf\u30b9\u30af1\")\n    val task2 = todo.add(\"\u30bf\u30b9\u30af2\")\n    todo.complete(task1.id)\n\n    todo.list() should have size 2\n    todo.list(onlyIncomplete = true) should have size 1\n    todo.list(onlyIncomplete = true).head.id shouldBe task2.id\n  }\n}\n</code></pre>"},{"location":"appendix/appendixE/#_2","title":"\u30c7\u30d0\u30c3\u30b0\u306e\u30d2\u30f3\u30c8","text":""},{"location":"appendix/appendixE/#_3","title":"\u3088\u304f\u3042\u308b\u9593\u9055\u3044\u3068\u89e3\u6c7a\u65b9\u6cd5","text":"<pre><code>// 1. \u62ec\u5f27\u306e\u6570\u304c\u5408\u308f\u306a\u3044\n// \u9593\u9055\u3044\n// val result = list.map(x =&gt; x * 2).filter(_ &gt; 5\n// \u30a8\u30e9\u30fc: ')' expected but eof found\n\n// \u6b63\u89e3\nval result = list.map(x =&gt; x * 2).filter(_ &gt; 5)\n\n// 2. \u578b\u306e\u4e0d\u4e00\u81f4\n// \u9593\u9055\u3044\n// val numbers: List[Int] = List(1, 2, \"3\")\n// \u30a8\u30e9\u30fc: type mismatch\n\n// \u6b63\u89e3\nval numbers: List[Int] = List(1, 2, 3)\n// \u307e\u305f\u306f\nval mixed: List[Any] = List(1, 2, \"3\")\n\n// 3. \u5909\u6570\u540d\u306e\u30bf\u30a4\u30dd\n// \u9593\u9055\u3044\nval message = \"Hello\"\n// println(mesage)  // \u30a8\u30e9\u30fc: not found: value mesage\n\n// \u6b63\u89e3\nprintln(message)\n\n// 4. \u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u4e0d\u8db3\n// \u9593\u9055\u3044\n// List(1, 2, 3).map()  // \u30a8\u30e9\u30fc: missing argument\n\n// \u6b63\u89e3\nList(1, 2, 3).map(_ * 2)\n\n// 5. val\u306e\u518d\u4ee3\u5165\n// \u9593\u9055\u3044\nval x = 10\n// x = 20  // \u30a8\u30e9\u30fc: reassignment to val\n\n// \u6b63\u89e3\nvar x = 10\nx = 20\n</code></pre>"},{"location":"appendix/appendixE/#_4","title":"\u5b66\u7fd2\u306e\u30a2\u30c9\u30d0\u30a4\u30b9","text":""},{"location":"appendix/appendixE/#_5","title":"\u52b9\u679c\u7684\u306a\u7df4\u7fd2\u65b9\u6cd5","text":"<ol> <li> <p>\u5c0f\u3055\u304f\u59cb\u3081\u308b</p> <ul> <li>\u307e\u305a\u52d5\u304f\u30b3\u30fc\u30c9\u3092\u66f8\u304f</li> <li>\u5c11\u3057\u305a\u3064\u6a5f\u80fd\u3092\u8ffd\u52a0</li> <li>\u30a8\u30e9\u30fc\u304c\u51fa\u305f\u3089\u3059\u3050\u78ba\u8a8d</li> </ul> </li> <li> <p>\u305f\u304f\u3055\u3093\u8a66\u3059</p> <ul> <li>REPL\u3067\u5b9f\u9a13</li> <li>\u540c\u3058\u554f\u984c\u3092\u9055\u3046\u65b9\u6cd5\u3067\u89e3\u304f</li> <li>\u30a8\u30e9\u30fc\u3092\u6050\u308c\u306a\u3044</li> </ul> </li> <li> <p>\u30b3\u30fc\u30c9\u3092\u8aad\u3080</p> <ul> <li>\u4ed6\u306e\u4eba\u306e\u89e3\u7b54\u3092\u898b\u308b</li> <li>\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8abf\u3079\u308b</li> <li>\u3088\u308a\u826f\u3044\u66f8\u304d\u65b9\u3092\u5b66\u3076</li> </ul> </li> <li> <p>\u5b9a\u671f\u7684\u306b\u5fa9\u7fd2</p> <ul> <li>\u4ee5\u524d\u89e3\u3044\u305f\u554f\u984c\u3092\u518d\u6311\u6226</li> <li>\u5fd8\u308c\u305f\u6982\u5ff5\u3092\u78ba\u8a8d</li> <li>\u65b0\u3057\u3044\u77e5\u8b58\u3067\u6539\u5584</li> </ul> </li> </ol>"},{"location":"appendix/appendixE/#_6","title":"\u307e\u3068\u3081","text":"<p>\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306f\u300c\u7fd2\u3046\u3088\u308a\u6163\u308c\u308d\u300d\u3067\u3059\u3002\u305f\u304f\u3055\u3093\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3001\u305f\u304f\u3055\u3093\u30a8\u30e9\u30fc\u3092\u7d4c\u9a13\u3057\u3066\u3001\u5c11\u3057\u305a\u3064\u4e0a\u9054\u3057\u3066\u3044\u304d\u307e\u3059\u3002</p> <p>\u899a\u3048\u3066\u304a\u304d\u305f\u3044\u3053\u3068\uff1a - \u6b63\u89e3\u306f\u4e00\u3064\u3067\u306f\u306a\u3044 - \u30a8\u30e9\u30fc\u306f\u5b66\u7fd2\u306e\u30c1\u30e3\u30f3\u30b9 - \u52d5\u304f\u30b3\u30fc\u30c9\u304b\u3089\u59cb\u3081\u308b - \u697d\u3057\u307f\u306a\u304c\u3089\u7d9a\u3051\u308b</p> <p>\u304c\u3093\u3070\u3063\u3066\u7df4\u7fd2\u3092\u7d9a\u3051\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"appendix/appendixF/","title":"\u4ed8\u9332F \u6b21\u306b\u8aad\u3080\u3079\u304d\u66f8\u7c4d\u30fb\u8cc7\u6599","text":""},{"location":"appendix/appendixF/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>Scala 3\u306e\u57fa\u790e\u3092\u5b66\u3093\u3060\u3042\u306a\u305f\u3078\u3002\u3053\u3053\u304b\u3089\u304c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u672c\u5f53\u306e\u697d\u3057\u3055\u306e\u59cb\u307e\u308a\u3067\u3059\uff01\u3053\u306e\u4ed8\u9332\u3067\u306f\u3001\u3055\u3089\u306b\u5b66\u7fd2\u3092\u6df1\u3081\u308b\u305f\u3081\u306e\u66f8\u7c4d\u3084\u8cc7\u6599\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002</p>"},{"location":"appendix/appendixF/#_2","title":"\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8","text":""},{"location":"appendix/appendixF/#scala-3","title":"Scala 3 \u516c\u5f0f\u30b5\u30a4\u30c8","text":"<pre><code>// Scala 3 Documentation\n// https://docs.scala-lang.org/scala3/\n\n\u4e3b\u8981\u30b3\u30f3\u30c6\u30f3\u30c4\uff1a\n- Getting Started: \u74b0\u5883\u69cb\u7bc9\u3068\u6700\u521d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\n- Book: \u5305\u62ec\u7684\u306a\u5165\u9580\u66f8\uff08\u82f1\u8a9e\uff09\n- Reference: \u8a00\u8a9e\u4ed5\u69d8\u306e\u8a73\u7d30\n- API Documentation: \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\n- Migration Guide: Scala 2\u304b\u3089\u306e\u79fb\u884c\u30ac\u30a4\u30c9\n</code></pre>"},{"location":"appendix/appendixF/#scala-3-book","title":"Scala 3 Book\uff08\u65e5\u672c\u8a9e\u8a33\uff09","text":"<pre><code>// https://docs.scala-lang.org/ja/scala3/book/\n\n\u7279\u5fb4\uff1a\n- \u516c\u5f0f\u306e\u5165\u9580\u66f8\u306e\u65e5\u672c\u8a9e\u7248\n- \u5b9f\u8df5\u7684\u306a\u4f8b\u304c\u8c4a\u5bcc\n- \u6700\u65b0\u306e\u6a5f\u80fd\u3092\u7db2\u7f85\n- \u7121\u6599\u3067\u8aad\u3081\u308b\n</code></pre>"},{"location":"appendix/appendixF/#_3","title":"\u66f8\u7c4d\uff08\u65e5\u672c\u8a9e\uff09","text":""},{"location":"appendix/appendixF/#_4","title":"\u5165\u9580\u301c\u4e2d\u7d1a","text":"<pre><code>/*\n\u300cScala\u5b9f\u8df5\u5165\u9580\u300d\n\u8457\u8005: \u702c\u826f \u548c\u5f18\u3001\u6c34\u5cf6 \u5b8f\u592a\u3001\u6cb3\u5185 \u5d07\u3001\u9ebb\u690d \u6cf0\u8f14\u3001\u9752\u5c71 \u76f4\u7d00\n\u51fa\u7248\u793e: \u6280\u8853\u8a55\u8ad6\u793e\n\n\u7279\u5fb4:\n- \u5b9f\u8df5\u7684\u306aScala\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\n- \u65e5\u672c\u306eScala\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u306e\u77e5\u898b\n- \u5b9f\u52d9\u3067\u4f7f\u3048\u308b\u6280\u8853\u3092\u89e3\u8aac\n- \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u304c\u8c4a\u5bcc\n*/\n\n/*\n\u300cScala\u30d1\u30ba\u30eb\u300d\n\u8457\u8005: Andrew Phillips\u3001Nermin \u0160erifovi\u0107\n\u7ffb\u8a33: \u682a\u5f0f\u4f1a\u793e\u30c9\u30ef\u30f3\u30b4\n\u51fa\u7248\u793e: \u7fd4\u6cf3\u793e\n\n\u7279\u5fb4:\n- \u30d1\u30ba\u30eb\u5f62\u5f0f\u3067\u7406\u89e3\u3092\u6df1\u3081\u308b\n- Scala\u306e\u843d\u3068\u3057\u7a74\u3092\u5b66\u3079\u308b\n- \u4e2d\u7d1a\u8005\u3078\u306e\u6a4b\u6e21\u3057\n- \u697d\u3057\u307f\u306a\u304c\u3089\u5b66\u7fd2\n*/\n</code></pre>"},{"location":"appendix/appendixF/#_5","title":"\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0","text":"<pre><code>/*\n\u300c\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 in Scala\u300d\n\u8457\u8005: Paul Chiusano\u3001R\u00fanar Bjarnason\n\u7ffb\u8a33: \u682a\u5f0f\u4f1a\u793e\u30c9\u30ef\u30f3\u30b4\n\u51fa\u7248\u793e: \u30a4\u30f3\u30d7\u30ec\u30b9\n\n\u7279\u5fb4:\n- \u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u672c\u683c\u7684\u306a\u5165\u9580\n- \u5b9f\u88c5\u3092\u901a\u3058\u3066\u6982\u5ff5\u3092\u7406\u89e3\n- \u7df4\u7fd2\u554f\u984c\u304c\u5145\u5b9f\n- Scala\u306e\u95a2\u6570\u578b\u6a5f\u80fd\u3092\u6df1\u304f\u5b66\u3079\u308b\n*/\n\n/*\n\u300c\u306a\u3063\u3068\u304f\uff01\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u300d\n\u8457\u8005: Micha\u0142 P\u0142achta\n\u7ffb\u8a33: \u682a\u5f0f\u4f1a\u793e\u30af\u30a4\u30fc\u30d7\n\u51fa\u7248\u793e: \u7fd4\u6cf3\u793e\n\n\u7279\u5fb4:\n- \u56f3\u89e3\u3067\u5206\u304b\u308a\u3084\u3059\u3044\n- \u6bb5\u968e\u7684\u306b\u6982\u5ff5\u3092\u5c0e\u5165\n- \u5b9f\u7528\u7684\u306a\u4f8b\u304c\u8c4a\u5bcc\n- \u521d\u5fc3\u8005\u306b\u3084\u3055\u3057\u3044\n*/\n</code></pre>"},{"location":"appendix/appendixF/#_6","title":"\u66f8\u7c4d\uff08\u82f1\u8a9e\uff09","text":""},{"location":"appendix/appendixF/#scala-3_1","title":"Scala 3 \u5c02\u9580\u66f8","text":"<pre><code>/*\n\"Programming in Scala, 5th Edition\"\n\u8457\u8005: Martin Odersky, Lex Spoon, Bill Venners, Frank Sommers\n\n\u7279\u5fb4:\n- Scala\u4f5c\u8005\u306b\u3088\u308b\u6c7a\u5b9a\u7248\n- Scala 3\u5b8c\u5168\u5bfe\u5fdc\n- \u8a00\u8a9e\u8a2d\u8a08\u306e\u80cc\u666f\u3082\u5b66\u3079\u308b\n- \u6700\u3082\u5305\u62ec\u7684\u306a\u89e3\u8aac\u66f8\n*/\n\n/*\n\"Scala 3 Book\"\n\u8457\u8005: Dean Wampler\n\n\u7279\u5fb4:\n- O'Reilly\u306e\u5b9a\u756a\u30b7\u30ea\u30fc\u30ba\n- \u5b9f\u8df5\u7684\u306a\u30a2\u30d7\u30ed\u30fc\u30c1\n- \u8c4a\u5bcc\u306a\u30b3\u30fc\u30c9\u4f8b\n- \u30e2\u30c0\u30f3\u306aScala\u30b9\u30bf\u30a4\u30eb\n*/\n</code></pre>"},{"location":"appendix/appendixF/#_7","title":"\u7279\u5b9a\u5206\u91ce\u306e\u5c02\u9580\u66f8","text":"<pre><code>/*\n\"Functional Programming in Scala, 2nd Edition\"\n\u8457\u8005: Michael Pilquist, R\u00fanar Bjarnason, Paul Chiusano\n\n\u7279\u5fb4:\n- \u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u6df1\u3044\u7406\u89e3\n- Cats/FS2\u306a\u3069\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u89e3\u8aac\n- \u5b9f\u8df5\u7684\u306a\u8a2d\u8a08\u30d1\u30bf\u30fc\u30f3\n- \u4e0a\u7d1a\u8005\u5411\u3051\u306e\u5185\u5bb9\n*/\n\n/*\n\"Hands-on Scala Programming\"\n\u8457\u8005: Li Haoyi\n\n\u7279\u5fb4:\n- \u5b9f\u8df5\u91cd\u8996\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\n- Web\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u958b\u767a\n- \u30c4\u30fc\u30eb\u3084\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6d3b\u7528\n- \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u69cb\u7bc9\u306e\u5b9f\u4f8b\n*/\n</code></pre>"},{"location":"appendix/appendixF/#_8","title":"\u30aa\u30f3\u30e9\u30a4\u30f3\u30b3\u30fc\u30b9","text":""},{"location":"appendix/appendixF/#_9","title":"\u7121\u6599\u30b3\u30fc\u30b9","text":"<pre><code>// Coursera: Functional Programming in Scala\n// \u8b1b\u5e2b: Martin Odersky (Scala\u4f5c\u8005)\n// URL: https://www.coursera.org/specializations/scala\n\n\u5185\u5bb9\uff1a\n- Functional Programming Principles in Scala\n- Functional Program Design in Scala\n- Parallel Programming\n- Big Data Analysis with Scala and Spark\n- Functional Programming in Scala Capstone\n\n// Scala Exercises\n// URL: https://www.scala-exercises.org/\n\n\u7279\u5fb4\uff1a\n- \u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u306a\u7df4\u7fd2\u554f\u984c\n- \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u5b66\u7fd2\n- \u4eba\u6c17\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6f14\u7fd2\n- \u9032\u6357\u7ba1\u7406\u6a5f\u80fd\n</code></pre>"},{"location":"appendix/appendixF/#_10","title":"\u6709\u6599\u30b3\u30fc\u30b9","text":"<pre><code>// Rock the JVM\n// URL: https://rockthejvm.com/\n\n\u30b3\u30fc\u30b9\u4f8b\uff1a\n- Scala 3 Essentials\n- Advanced Scala 3\n- Cats/Cats Effect\n- ZIO\n- Akka\n\n// Udemy\n// \u69d8\u3005\u306a\u8b1b\u5e2b\u306b\u3088\u308b\u591a\u69d8\u306a\u30b3\u30fc\u30b9\n\n\u4eba\u6c17\u30b3\u30fc\u30b9\uff1a\n- Scala &amp; Functional Programming Essentials\n- Akka Essentials with Scala\n- Apache Spark with Scala\n</code></pre>"},{"location":"appendix/appendixF/#_11","title":"\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u3068\u30ea\u30bd\u30fc\u30b9","text":""},{"location":"appendix/appendixF/#_12","title":"\u65e5\u672c\u8a9e\u30b3\u30df\u30e5\u30cb\u30c6\u30a3","text":"<pre><code>// ScalaMatsuri\n// URL: https://scalamatsuri.org/\n// \u30a2\u30b8\u30a2\u6700\u5927\u7d1a\u306eScala\u30ab\u30f3\u30d5\u30a1\u30ec\u30f3\u30b9\n// \u5e741\u56de\u958b\u50ac\u3001\u767a\u8868\u8cc7\u6599\u304c\u516c\u958b\u3055\u308c\u308b\n\n// Japan Scala Association\n// URL: https://www.scala-js.org/\n// \u65e5\u672c\u306eScala\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\n// \u52c9\u5f37\u4f1a\u3084\u30a4\u30d9\u30f3\u30c8\u60c5\u5831\n\n// Scala\u52c9\u5f37\u4f1a\n// \u5404\u5730\u3067\u958b\u50ac\u3055\u308c\u308b\u52c9\u5f37\u4f1a\n// connpass\u3084Doorkeeper\u7b49\u3067\u691c\u7d22\n</code></pre>"},{"location":"appendix/appendixF/#_13","title":"\u30aa\u30f3\u30e9\u30a4\u30f3\u30ea\u30bd\u30fc\u30b9","text":"<pre><code>// Scala Times\n// URL: https://scalatimes.com/\n// \u9031\u520a\u30cb\u30e5\u30fc\u30b9\u30ec\u30bf\u30fc\n// \u6700\u65b0\u60c5\u5831\u3084\u30d6\u30ed\u30b0\u8a18\u4e8b\u306e\u7d39\u4ecb\n\n// Scala Reddit\n// URL: https://www.reddit.com/r/scala/\n// \u6d3b\u767a\u306a\u30c7\u30a3\u30b9\u30ab\u30c3\u30b7\u30e7\u30f3\n// \u8cea\u554f\u3084\u60c5\u5831\u5171\u6709\n\n// Scala Discord\n// \u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u30c1\u30e3\u30c3\u30c8\n// \u521d\u5fc3\u8005\u8cea\u554f\u30c1\u30e3\u30f3\u30cd\u30eb\u3042\u308a\n</code></pre>"},{"location":"appendix/appendixF/#_14","title":"\u4e3b\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af","text":""},{"location":"appendix/appendixF/#web","title":"Web\u958b\u767a","text":"<pre><code>// Play Framework\n// URL: https://www.playframework.com/\n// \u30d5\u30eb\u30b9\u30bf\u30c3\u30afWeb\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\n// \u8c4a\u5bcc\u306a\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\n\n// Akka HTTP\n// URL: https://doc.akka.io/docs/akka-http/\n// \u9ad8\u6027\u80fdHTTP\u30b5\u30fc\u30d0\u30fc/\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\n// \u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\n\n// http4s\n// URL: https://http4s.org/\n// \u7d14\u7c8b\u95a2\u6570\u578bWeb\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\n// Cats Effect\u30d9\u30fc\u30b9\n</code></pre>"},{"location":"appendix/appendixF/#_15","title":"\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0","text":"<pre><code>// Cats\n// URL: https://typelevel.org/cats/\n// \u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u57fa\u672c\u30e9\u30a4\u30d6\u30e9\u30ea\n// \u8c4a\u5bcc\u306a\u578b\u30af\u30e9\u30b9\u3068\u30c7\u30fc\u30bf\u578b\n\n// ZIO\n// URL: https://zio.dev/\n// \u975e\u540c\u671f\u30fb\u4e26\u884c\u51e6\u7406\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\n// \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u304c\u5f37\u529b\n\n// FS2\n// URL: https://fs2.io/\n// \u30b9\u30c8\u30ea\u30fc\u30e0\u51e6\u7406\u30e9\u30a4\u30d6\u30e9\u30ea\n// \u95a2\u6570\u578b\u3067\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\n</code></pre>"},{"location":"appendix/appendixF/#_16","title":"\u30c7\u30fc\u30bf\u51e6\u7406","text":"<pre><code>// Apache Spark\n// URL: https://spark.apache.org/\n// \u5927\u898f\u6a21\u30c7\u30fc\u30bf\u51e6\u7406\n// Scala\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\n\n// Slick\n// URL: https://scala-slick.org/\n// \u95a2\u6570\u578b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30a2\u30af\u30bb\u30b9\n// \u30bf\u30a4\u30d7\u30bb\u30fc\u30d5\u306a\u30af\u30a8\u30ea\n\n// Doobie\n// URL: https://tpolecat.github.io/doobie/\n// \u7d14\u7c8b\u95a2\u6570\u578bJDBC\n// Cats\u5bfe\u5fdc\n</code></pre>"},{"location":"appendix/appendixF/#_17","title":"\u5b9f\u8df5\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30a2\u30a4\u30c7\u30a2","text":""},{"location":"appendix/appendixF/#_18","title":"\u521d\u7d1a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8","text":"<pre><code>// 1. TODO\u30ea\u30b9\u30c8\u30a2\u30d7\u30ea\n// \u5b66\u7fd2\u30dd\u30a4\u30f3\u30c8\uff1a\n// - \u57fa\u672c\u7684\u306aCRUD\u64cd\u4f5c\n// - \u30d5\u30a1\u30a4\u30eb\u4fdd\u5b58\n// - \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\n\n// 2. \u96fb\u5353\u30a2\u30d7\u30ea\n// \u5b66\u7fd2\u30dd\u30a4\u30f3\u30c8\uff1a\n// - \u5f0f\u306e\u89e3\u6790\n// - \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\n// - \u30c6\u30b9\u30c8\u99c6\u52d5\u958b\u767a\n\n// 3. \u7c21\u5358\u306a\u30b2\u30fc\u30e0\uff08\u3058\u3083\u3093\u3051\u3093\u3001\u6570\u5f53\u3066\uff09\n// \u5b66\u7fd2\u30dd\u30a4\u30f3\u30c8\uff1a\n// - \u30e6\u30fc\u30b6\u30fc\u5165\u529b\n// - \u30e9\u30f3\u30c0\u30e0\u51e6\u7406\n// - \u72b6\u614b\u7ba1\u7406\n</code></pre>"},{"location":"appendix/appendixF/#_19","title":"\u4e2d\u7d1a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8","text":"<pre><code>// 1. REST API\u30b5\u30fc\u30d0\u30fc\n// \u4f7f\u7528\u6280\u8853\uff1a\n// - Akka HTTP or http4s\n// - JSON\u51e6\u7406 (Circe)\n// - \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9 (Slick/Doobie)\n\n// 2. Web\u30b9\u30af\u30ec\u30a4\u30d1\u30fc\n// \u4f7f\u7528\u6280\u8853\uff1a\n// - HTTP client (sttp)\n// - HTML\u89e3\u6790 (jsoup)\n// - \u4e26\u884c\u51e6\u7406 (Future/IO)\n\n// 3. \u30c1\u30e3\u30c3\u30c8\u30dc\u30c3\u30c8\n// \u4f7f\u7528\u6280\u8853\uff1a\n// - WebSocket\n// - Actor model (Akka)\n// - \u81ea\u7136\u8a00\u8a9e\u51e6\u7406\n</code></pre>"},{"location":"appendix/appendixF/#_20","title":"\u4e0a\u7d1a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8","text":"<pre><code>// 1. \u5206\u6563\u30b7\u30b9\u30c6\u30e0\n// \u4f7f\u7528\u6280\u8853\uff1a\n// - Akka Cluster\n// - Event Sourcing\n// - CQRS\n\n// 2. \u30b9\u30c8\u30ea\u30fc\u30e0\u51e6\u7406\u30b7\u30b9\u30c6\u30e0\n// \u4f7f\u7528\u6280\u8853\uff1a\n// - FS2/Akka Streams\n// - Kafka integration\n// - \u30d0\u30c3\u30af\u30d7\u30ec\u30c3\u30b7\u30e3\u30fc\u5236\u5fa1\n\n// 3. DSL\uff08\u30c9\u30e1\u30a4\u30f3\u7279\u5316\u8a00\u8a9e\uff09\n// \u4f7f\u7528\u6280\u8853\uff1a\n// - Parser Combinators\n// - Macros\n// - \u578b\u30ec\u30d9\u30eb\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\n</code></pre>"},{"location":"appendix/appendixF/#_21","title":"\u5b66\u7fd2\u306e\u30ed\u30fc\u30c9\u30de\u30c3\u30d7","text":""},{"location":"appendix/appendixF/#3","title":"3\u30f6\u6708\u76ee\u6a19","text":"<pre><code>1\u30f6\u6708\u76ee\uff1a\u57fa\u790e\u56fa\u3081\n- \u3053\u306e\u672c\u306e\u5185\u5bb9\u3092\u5b8c\u5168\u306b\u7406\u89e3\n- \u5c0f\u3055\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u305f\u304f\u3055\u3093\u66f8\u304f\n- ScalaTest\u3067\u30c6\u30b9\u30c8\u3092\u66f8\u304f\u7fd2\u6163\n\n2\u30f6\u6708\u76ee\uff1a\u5b9f\u8df5\u7684\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\n- Web\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308b\n- \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u4f7f\u3046\n- \u975e\u540c\u671f\u51e6\u7406\u3092\u7406\u89e3\n\n3\u30f6\u6708\u76ee\uff1a\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\n- Cats\u306e\u57fa\u672c\u3092\u5b66\u3076\n- Option/Either/Try\u3092\u4f7f\u3044\u3053\u306a\u3059\n- \u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u8a2d\u8a08\n</code></pre>"},{"location":"appendix/appendixF/#6","title":"6\u30f6\u6708\u76ee\u6a19","text":"<pre><code>4-5\u30f6\u6708\u76ee\uff1a\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u7fd2\u5f97\n- Play/Akka HTTP\u3067Web\u958b\u767a\n- JSON\u30e9\u30a4\u30d6\u30e9\u30ea\uff08Circe\uff09\n- \u30c6\u30b9\u30c8\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u62e1\u5f35\n\n6\u30f6\u6708\u76ee\uff1a\u5b9f\u52d9\u30ec\u30d9\u30eb\n- \u5b9f\u969b\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u53c2\u52a0\n- \u30b3\u30fc\u30c9\u30ec\u30d3\u30e5\u30fc\u3092\u53d7\u3051\u308b\n- \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\n</code></pre>"},{"location":"appendix/appendixF/#1","title":"1\u5e74\u76ee\u6a19","text":"<pre><code>7-9\u30f6\u6708\u76ee\uff1a\u9ad8\u5ea6\u306a\u6982\u5ff5\n- \u578b\u30af\u30e9\u30b9\n- Higher Kinded Types\n- \u30bf\u30b0\u30ec\u30b9\u30d5\u30a1\u30a4\u30ca\u30eb\n\n10-12\u30f6\u6708\u76ee\uff1a\u5c02\u9580\u5206\u91ce\n- \u5206\u6563\u30b7\u30b9\u30c6\u30e0\n- \u30d3\u30c3\u30b0\u30c7\u30fc\u30bf\u51e6\u7406\n- \u95a2\u6570\u578b\u8a2d\u8a08\u30d1\u30bf\u30fc\u30f3\n</code></pre>"},{"location":"appendix/appendixF/#_22","title":"\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u3078\u306e\u53c2\u52a0","text":""},{"location":"appendix/appendixF/#_23","title":"\u521d\u5fc3\u8005\u306e\u53c2\u52a0\u65b9\u6cd5","text":"<pre><code>// 1. \u52c9\u5f37\u4f1a\u306b\u53c2\u52a0\n// - \u805e\u304f\u3060\u3051\u3067\u3082OK\n// - \u8cea\u554f\u3092\u6e96\u5099\u3057\u3066\u3044\u304f\n// - \u61c7\u89aa\u4f1a\u3067\u4ea4\u6d41\n\n// 2. \u30aa\u30f3\u30e9\u30a4\u30f3\u3067\u8cea\u554f\n// - Stack Overflow\n// - Reddit\n// - Discord/Slack\n\n// 3. \u30d6\u30ed\u30b0\u3092\u66f8\u304f\n// - \u5b66\u7fd2\u8a18\u9332\n// - \u3064\u307e\u305a\u3044\u305f\u70b9\u3068\u89e3\u6c7a\u6cd5\n// - \u4f5c\u3063\u305f\u3082\u306e\u306e\u7d39\u4ecb\n</code></pre>"},{"location":"appendix/appendixF/#_24","title":"\u8ca2\u732e\u306e\u65b9\u6cd5","text":"<pre><code>// 1. \u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u3078\u306e\u8ca2\u732e\n// - \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u6539\u5584\n// - \u30d0\u30b0\u30ec\u30dd\u30fc\u30c8\n// - \u5c0f\u3055\u306a\u30d0\u30b0\u4fee\u6b63\n\n// 2. \u77e5\u8b58\u306e\u5171\u6709\n// - Qiita\u306a\u3069\u306b\u8a18\u4e8b\u6295\u7a3f\n// - \u52c9\u5f37\u4f1a\u3067\u767a\u8868\n// - \u521d\u5fc3\u8005\u306e\u8cea\u554f\u306b\u56de\u7b54\n\n// 3. \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u516c\u958b\n// - GitHub\u3067\u30b3\u30fc\u30c9\u516c\u958b\n// - \u30e9\u30a4\u30d6\u30e9\u30ea\u4f5c\u6210\n// - \u30b5\u30f3\u30d7\u30eb\u30a2\u30d7\u30ea\u63d0\u4f9b\n</code></pre>"},{"location":"appendix/appendixF/#_25","title":"\u6700\u5f8c\u306e\u30e1\u30c3\u30bb\u30fc\u30b8","text":"<p>\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u5b66\u7fd2\u306b\u7d42\u308f\u308a\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u65b0\u3057\u3044\u6280\u8853\u3001\u65b0\u3057\u3044\u30d1\u30e9\u30c0\u30a4\u30e0\u3001\u65b0\u3057\u3044\u554f\u984c\u89e3\u6c7a\u65b9\u6cd5\u304c\u6b21\u3005\u3068\u751f\u307e\u308c\u3066\u3044\u307e\u3059\u3002</p> <p>\u3067\u3082\u3001\u7126\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u4e00\u6b69\u305a\u3064\u3001\u7740\u5b9f\u306b\u9032\u3093\u3067\u3044\u3051\u3070\u3001\u5fc5\u305a\u6210\u9577\u3067\u304d\u307e\u3059\u3002</p> <p>\u5927\u5207\u306a\u3053\u3068\uff1a 1. \u697d\u3057\u307f\u306a\u304c\u3089\u5b66\u3076 2. \u624b\u3092\u52d5\u304b\u3057\u3066\u8a66\u3059 3. \u5206\u304b\u3089\u306a\u3044\u3053\u3068\u306f\u805e\u304f 4. \u5931\u6557\u3092\u6050\u308c\u306a\u3044 5. \u4ef2\u9593\u3092\u898b\u3064\u3051\u308b</p> <p>Scala\u306f\u7d20\u6674\u3089\u3057\u3044\u8a00\u8a9e\u3067\u3059\u3002\u8868\u73fe\u529b\u304c\u9ad8\u304f\u3001\u5b89\u5168\u3067\u3001\u5b9f\u7528\u7684\u3002\u305d\u3057\u3066\u4f55\u3088\u308a\u3001\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u697d\u3057\u3055\u3092\u6559\u3048\u3066\u304f\u308c\u307e\u3059\u3002</p> <p>\u3053\u306e\u672c\u3067\u5b66\u3093\u3060\u57fa\u790e\u3092\u571f\u53f0\u306b\u3001\u3055\u3089\u306b\u9ad8\u307f\u3092\u76ee\u6307\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3042\u306a\u305f\u306eScala\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u65c5\u304c\u3001\u5b9f\u308a\u591a\u3044\u3082\u306e\u306b\u306a\u308b\u3053\u3068\u3092\u9858\u3063\u3066\u3044\u307e\u3059\u3002</p> <p>Happy Scala Programming! \ud83d\ude80</p>"},{"location":"part1/chapter00/","title":"\u7b2c0\u7ae0 \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u306f\u3058\u3081\u308b\u524d\u306b","text":""},{"location":"part1/chapter00/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u3088\u3046\u3053\u305d\u3001\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u4e16\u754c\u3078\uff01</p> <p>\u3053\u306e\u7ae0\u3092\u8aad\u3093\u3067\u3044\u308b\u3042\u306a\u305f\u306f\u3001\u304d\u3063\u3068\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3067\u300c\u4f55\u304b\u304a\u3082\u3057\u308d\u3044\u3053\u3068\u300d\u3092\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3063\u3066\u3044\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\uff1f</p> <p>\u305d\u308c\u3068\u3082\u3001\u300c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3063\u3066\u96e3\u3057\u305d\u3046...\u300d\u3068\u5fc3\u914d\u3057\u3066\u3044\u307e\u3059\u304b\uff1f</p> <p>\u5927\u4e08\u592b\u3067\u3059\uff01\u3053\u306e\u672c\u306f\u3001\u300c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3063\u3066\u4f55\uff1f\u300d\u3068\u3044\u3046\u4eba\u306e\u305f\u3081\u306b\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002</p> <p>\u3044\u3063\u3057\u3087\u306b\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3068\u300c\u304a\u8a71\u300d\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part1/chapter00/#_2","title":"\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3063\u3066\u4f55\u3060\u308d\u3046\uff1f","text":""},{"location":"part1/chapter00/#_3","title":"\u30b9\u30de\u30db\u3092\u4f8b\u306b\u8003\u3048\u3066\u307f\u3088\u3046","text":"<p>\u3042\u306a\u305f\u304c\u6bce\u65e5\u4f7f\u3063\u3066\u3044\u308b\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u3002\u3053\u308c\u3082\u5b9f\u306f\u300c\u30d7\u30ed\u30b0\u30e9\u30e0\u300d\u306e\u304b\u305f\u307e\u308a\u3067\u3059\u3002</p> <p>\u4f8b\u3048\u3070\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u30a2\u30d7\u30ea\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308b\u3068\u304d\uff1a</p> <ol> <li>\u6587\u5b57\u3092\u5165\u529b\u3059\u308b</li> <li>\u9001\u4fe1\u30dc\u30bf\u30f3\u3092\u62bc\u3059</li> <li>\u76f8\u624b\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u5c4a\u304f</li> </ol> <p>\u3053\u306e\u3088\u3046\u306b\u300c\u3053\u3046\u3057\u305f\u3089\u3001\u3053\u3046\u306a\u308b\u300d\u3068\u3044\u3046\u6307\u793a\u304c\u3042\u3089\u304b\u3058\u3081\u6c7a\u3081\u3089\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u304c\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\uff01</p>"},{"location":"part1/chapter00/#_4","title":"\u6599\u7406\u306e\u30ec\u30b7\u30d4\u3082\u30d7\u30ed\u30b0\u30e9\u30e0\u307f\u305f\u3044","text":"<p>\u30ab\u30ec\u30fc\u3092\u4f5c\u308b\u3068\u304d\u306e\u30ec\u30b7\u30d4\uff1a</p> <ol> <li>\u91ce\u83dc\u3092\u5207\u308b</li> <li>\u8089\u3092\u7092\u3081\u308b</li> <li>\u30ab\u30ec\u30fc\u30eb\u30fc\u3092\u5165\u308c\u308b</li> <li>\u6c34\u3092\u52a0\u3048\u308b</li> <li>20\u5206\u716e\u8fbc\u3080</li> </ol> <p>\u3053\u308c\u3082\u300c\u9806\u756a\u306b\u5b9f\u884c\u3059\u308b\u6307\u793a\u300d\u3067\u3059\u306d\u3002\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3082\u540c\u3058\u3088\u3046\u306b\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306b\u300c\u3053\u308c\u3092\u3084\u3063\u3066\u3001\u6b21\u306b\u3042\u308c\u3092\u3084\u3063\u3066\u300d\u3068\u6307\u793a\u3092\u51fa\u3057\u307e\u3059\u3002</p>"},{"location":"part1/chapter00/#scala","title":"\u306a\u305c\u3053\u306e\u672c\u3067\u306fScala\u3092\u4f7f\u3046\u306e\uff1f","text":""},{"location":"part1/chapter00/#_5","title":"\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306f\u305f\u304f\u3055\u3093\u3042\u308b","text":"<p>\u65e5\u672c\u8a9e\u3001\u82f1\u8a9e\u3001\u4e2d\u56fd\u8a9e...\u4eba\u9593\u306e\u8a00\u8449\u304c\u305f\u304f\u3055\u3093\u3042\u308b\u3088\u3046\u306b\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306e\u8a00\u8a9e\u3082\u305f\u304f\u3055\u3093\u3042\u308a\u307e\u3059\u3002</p> <ul> <li>Python\uff08\u30d1\u30a4\u30bd\u30f3\uff09</li> <li>JavaScript\uff08\u30b8\u30e3\u30d0\u30b9\u30af\u30ea\u30d7\u30c8\uff09  </li> <li>Java\uff08\u30b8\u30e3\u30d0\uff09</li> <li>Scala\uff08\u30b9\u30ab\u30e9\uff09</li> <li>\u305d\u306e\u4ed6\u3001100\u4ee5\u4e0a\uff01</li> </ul>"},{"location":"part1/chapter00/#scala_1","title":"Scala\u306e\u3044\u3044\u3068\u3053\u308d","text":"<p>1. \u9593\u9055\u3044\u3092\u3059\u3050\u306b\u6559\u3048\u3066\u304f\u308c\u308b</p> <p>\u4f8b\u3048\u3070\u3001\u300c\u308a\u3093\u3054\u300d\u3068\u300c3\u300d\u3092\u8db3\u305d\u3046\u3068\u3059\u308b\u3068...</p> <pre><code>\"\u308a\u3093\u3054\" + 3  // \u30a8\u30e9\u30fc\uff01\u300c\u6587\u5b57\u3068\u6570\u5b57\u306f\u8db3\u305b\u307e\u305b\u3093\u300d\n</code></pre> <p>Scala\u306f\u3059\u3050\u306b\u300c\u305d\u308c\u306f\u3067\u304d\u307e\u305b\u3093\u3088\u300d\u3068\u6559\u3048\u3066\u304f\u308c\u307e\u3059\u3002</p> <p>2. \u30b9\u30c6\u30c3\u30d7\u30a2\u30c3\u30d7\u3057\u3084\u3059\u3044</p> <p>\u7c21\u5358\u306a\u3053\u3068\u304b\u3089\u59cb\u3081\u3066\u3001\u3060\u3093\u3060\u3093\u8907\u96d1\u306a\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002</p> <p>3. \u4ed5\u4e8b\u3067\u3082\u4f7f\u3048\u308b</p> <p>Twitter\u3001Netflix\u3001LinkedIn\u306a\u3069\u3001\u6709\u540d\u306a\u4f1a\u793e\u3067\u3082\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002\u8da3\u5473\u3060\u3051\u3067\u306a\u304f\u3001\u5c06\u6765\u306e\u4ed5\u4e8b\u306b\u3082\u5f79\u7acb\u3061\u307e\u3059\uff01</p>"},{"location":"part1/chapter00/#_6","title":"\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u5b66\u3076\u3068\u304d\u306e\u5927\u4e8b\u306a\u3053\u3068","text":""},{"location":"part1/chapter00/#1","title":"1. \u30a8\u30e9\u30fc\u306f\u6016\u304f\u306a\u3044\uff01","text":"<p>\u8eca\u306e\u904b\u8ee2\u3092\u601d\u3044\u51fa\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u6700\u521d\u306f\u30a8\u30f3\u30b9\u30c8\u3057\u305f\u308a\u3001\u30a6\u30a4\u30f3\u30ab\u30fc\u3092\u51fa\u3057\u5fd8\u308c\u305f\u308a\u3057\u307e\u3057\u305f\u3088\u306d\uff1f\u3067\u3082\u3001\u6559\u7fd2\u6240\u306e\u5148\u751f\u306f\u6012\u3089\u305a\u306b\u300c\u3053\u3046\u3084\u308b\u3093\u3060\u3088\u300d\u3068\u6559\u3048\u3066\u304f\u308c\u307e\u3057\u305f\u3002</p> <p>\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u30a8\u30e9\u30fc\u3082\u540c\u3058\u3067\u3059\u3002\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u304c\u300c\u3053\u3053\u304c\u9593\u9055\u3063\u3066\u3044\u307e\u3059\u3088\u300d\u3068\u512a\u3057\u304f\u6559\u3048\u3066\u304f\u308c\u308b\u3060\u3051\u3067\u3059\u3002</p> <p>\u30d7\u30ed\u306e\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u3082\u6bce\u65e5\u30a8\u30e9\u30fc\u3092\u51fa\u3057\u3066\u3044\u307e\u3059\uff01</p>"},{"location":"part1/chapter00/#2","title":"2. \u300c\u5199\u7d4c\u300d\u3067\u4e0a\u9054\u3057\u3088\u3046","text":"<p>\u300c\u5199\u7d4c\u300d\u3068\u306f\u3001\u304a\u624b\u672c\u3092\u305d\u306e\u307e\u307e\u5199\u3057\u3066\u66f8\u304f\u3053\u3068\u3067\u3059\u3002</p> <p>\u4f8b\u3048\u3070\u3001\u6f22\u5b57\u306e\u7df4\u7fd2\u3092\u601d\u3044\u51fa\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u6700\u521d\u306f\u304a\u624b\u672c\u3092\u898b\u306a\u304c\u3089\u66f8\u304d\u307e\u3057\u305f\u3088\u306d\uff1f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3082\u540c\u3058\u3067\u3059\u3002</p> <p>\u307e\u305a\u306f\u30b3\u30d4\u30fc\uff06\u30da\u30fc\u30b9\u30c8\u3067OK\uff01\u305d\u306e\u5f8c\u3001\u81ea\u5206\u3067\u5165\u529b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p>"},{"location":"part1/chapter00/#3","title":"3. \u4e00\u6b69\u305a\u3064\u3001\u30b3\u30c4\u30b3\u30c4\u3068","text":"<p>\u30de\u30e9\u30bd\u30f3\u3092\u8d70\u308b\u3068\u304d\u3001\u3044\u304d\u306a\u308a42.195km\u3092\u8d70\u308a\u307e\u305b\u3093\u3088\u306d\uff1f</p> <p>\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3082\u540c\u3058\u3067\u3059\u3002 - \u4eca\u65e5\u306f\u300c\u753b\u9762\u306b\u6587\u5b57\u3092\u51fa\u3059\u300d\u3060\u3051 - \u660e\u65e5\u306f\u300c\u8a08\u7b97\u3092\u3059\u308b\u300d\u3060\u3051 - \u660e\u5f8c\u65e5\u306f\u300c\u5909\u6570\u3092\u4f7f\u3046\u300d\u3060\u3051</p> <p>\u3053\u3046\u3057\u3066\u5c11\u3057\u305a\u3064\u9032\u3081\u3070\u3001\u3044\u3064\u306e\u9593\u306b\u304b\u3059\u3054\u3044\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff01</p>"},{"location":"part1/chapter00/#4","title":"4. \u300c\u3053\u3046\u3057\u305f\u3089\u3069\u3046\u306a\u308b\uff1f\u300d\u3092\u697d\u3057\u3082\u3046","text":"<p>\u5b50\u4f9b\u306e\u9803\u3001\u3053\u3093\u306a\u3053\u3068\u3092\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u304b\uff1f - \u300c\u3053\u306e\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u305f\u3089\u3069\u3046\u306a\u308b\u3093\u3060\u308d\u3046\uff1f\u300d - \u300c\u3053\u306e\u7bb1\u306e\u4e2d\u306b\u306f\u4f55\u304c\u5165\u3063\u3066\u3044\u308b\u3093\u3060\u308d\u3046\uff1f\u300d</p> <p>\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3082\u540c\u3058\u597d\u5947\u5fc3\u3067\u697d\u3057\u3081\u307e\u3059\uff01</p> <p>\u300c\u3053\u306e\u6587\u5b57\u3092\u8d64\u8272\u306b\u3057\u305f\u3089\uff1f\u300d\u300c\u3053\u306e\u6570\u5b57\u30921000\u500d\u306b\u3057\u305f\u3089\uff1f\u300d</p> <p>\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306f\u58ca\u308c\u307e\u305b\u3093\u3002\u5b89\u5fc3\u3057\u3066\u5b9f\u9a13\u3057\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part1/chapter00/#_7","title":"\u3053\u306e\u672c\u306e\u4f7f\u3044\u65b9","text":""},{"location":"part1/chapter00/#_8","title":"\u30b3\u30fc\u30c9\uff08\u30d7\u30ed\u30b0\u30e9\u30e0\uff09\u306e\u898b\u65b9","text":"<p>\u3053\u306e\u672c\u3067\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u3053\u3093\u306a\u98a8\u306b\u66f8\u304d\u307e\u3059\uff1a</p> <pre><code>// \u3053\u308c\u306f\u30e1\u30e2\u3067\u3059\uff08\u5b9f\u884c\u3055\u308c\u307e\u305b\u3093\uff09\nprintln(\"Hello, World!\")  // \u753b\u9762\u306b\u300cHello, World!\u300d\u3068\u8868\u793a\n</code></pre> <p>\u8272\u304c\u3064\u3044\u3066\u3044\u308b\u90e8\u5206\u304c\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002 - <code>//</code> \u306e\u5f8c\u308d\u306f\u300c\u30e1\u30e2\u300d\uff08\u4eba\u9593\u7528\u306e\u8aac\u660e\uff09 - \u305d\u308c\u4ee5\u5916\u304c\u5b9f\u969b\u306b\u52d5\u304f\u90e8\u5206</p>"},{"location":"part1/chapter00/#_9","title":"\u5b9f\u884c\u7d50\u679c\u306e\u898b\u65b9","text":"<p>\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u3053\u3093\u306a\u7d50\u679c\u304c\u51fa\u307e\u3059\uff1a</p> <pre><code>Hello, World!\n</code></pre> <p>\u3053\u308c\u304c\u300c\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u304c\u8868\u793a\u3057\u305f\u3082\u306e\u300d\u3067\u3059\u3002</p>"},{"location":"part1/chapter00/#_10","title":"\u7df4\u7fd2\u554f\u984c\u306b\u3064\u3044\u3066","text":"<p>\u5404\u7ae0\u306e\u6700\u5f8c\u306b\u300c\u7df4\u7fd2\u554f\u984c\u300d\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u91cd\u8981\uff1a\u7df4\u7fd2\u554f\u984c\u306f\u300c\u30c6\u30b9\u30c8\u300d\u3067\u306f\u3042\u308a\u307e\u305b\u3093\uff01 - \u308f\u304b\u3089\u306a\u304f\u3066\u3082OK - \u9593\u9055\u3048\u3066\u3082OK - \u7b54\u3048\u3092\u898b\u3066\u3082OK</p> <p>\u5927\u4e8b\u306a\u306e\u306f\u300c\u3084\u3063\u3066\u307f\u308b\u300d\u3053\u3068\u3067\u3059\u3002</p>"},{"location":"part1/chapter00/#_11","title":"\u30a8\u30e9\u30fc\u306e\u4f8b","text":"<p>\u3053\u306e\u672c\u3067\u306f\u300c\u3088\u304f\u3042\u308b\u30a8\u30e9\u30fc\u300d\u3082\u7d39\u4ecb\u3057\u307e\u3059\uff1a</p> <pre><code>// \u3053\u308c\u306f\u30a8\u30e9\u30fc\u306b\u306a\u308b\u4f8b\nprintln(\"Hello World!)  // \" \u304c1\u3064\u8db3\u308a\u306a\u3044\uff01\n</code></pre> <p>\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\uff1a <pre><code>error: unclosed string literal\n(\u610f\u5473\uff1a\u6587\u5b57\u5217\u304c\u9589\u3058\u3089\u308c\u3066\u3044\u307e\u305b\u3093)\n</code></pre></p> <p>\u89e3\u6c7a\u65b9\u6cd5\uff1a<code>\"</code> \u3092\u6700\u5f8c\u306b\u8db3\u3059</p> <p>\u3053\u3046\u3057\u3066\u300c\u30a8\u30e9\u30fc\u306b\u614c\u3066\u306a\u3044\u300d\u7df4\u7fd2\u3082\u3057\u307e\u3059\uff01</p>"},{"location":"part1/chapter00/#_12","title":"\u5fc5\u8981\u306a\u3082\u306e\u3092\u6e96\u5099\u3057\u3088\u3046","text":""},{"location":"part1/chapter00/#1_1","title":"1. \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf","text":"<p>\u5f53\u305f\u308a\u524d\u3067\u3059\u304c\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u304c\u5fc5\u8981\u3067\u3059\u3002 - Windows\u30d1\u30bd\u30b3\u30f3 - Mac - Linux\u30d1\u30bd\u30b3\u30f3</p> <p>\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u3084\u30bf\u30d6\u30ec\u30c3\u30c8\u3067\u306f\u3001\u3061\u3087\u3063\u3068\u96e3\u3057\u3044\u3067\u3059\u3002</p>"},{"location":"part1/chapter00/#2_1","title":"2. \u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u63a5\u7d9a","text":"<p>\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u3067\u3059\u3002</p>"},{"location":"part1/chapter00/#3-30","title":"3. 30\u5206\u304f\u3089\u3044\u306e\u6642\u9593","text":"<p>\u6700\u521d\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u306b\u306f\u5c11\u3057\u6642\u9593\u304c\u304b\u304b\u308a\u307e\u3059\u3002\u30b3\u30fc\u30d2\u30fc\u3067\u3082\u98f2\u307f\u306a\u304c\u3089\u3001\u306e\u3093\u3073\u308a\u3084\u308a\u307e\u3057\u3087\u3046\u3002</p>"},{"location":"part1/chapter00/#_13","title":"\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u306b\u3064\u3044\u3066","text":"<p>\u7b2c1\u7ae0\u3067\u8a73\u3057\u304f\u8aac\u660e\u3057\u307e\u3059\u304c\u3001\u4ee5\u4e0b\u306e\u30bd\u30d5\u30c8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\uff1a</p> <ol> <li> <p>Java\uff08\u30b8\u30e3\u30d0\uff09</p> <ul> <li>Scala\u3092\u52d5\u304b\u3059\u305f\u3081\u306e\u571f\u53f0</li> <li>\u7121\u6599\u3067\u3059</li> </ul> </li> <li> <p>Scala\uff08\u30b9\u30ab\u30e9\uff09</p> <ul> <li>\u3053\u308c\u304b\u3089\u5b66\u3076\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e</li> <li>\u3082\u3061\u308d\u3093\u7121\u6599\u3067\u3059</li> </ul> </li> <li> <p>\u30c6\u30ad\u30b9\u30c8\u30a8\u30c7\u30a3\u30bf</p> <ul> <li>\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u305f\u3081\u306e\u300c\u5c02\u7528\u30e1\u30e2\u5e33\u300d</li> <li>\u6700\u521d\u306f\u666e\u901a\u306e\u30e1\u30e2\u5e33\u3067\u3082OK\uff01</li> </ul> </li> </ol> <p>\u5fc3\u914d\u3057\u306a\u3044\u3067\uff01\u3059\u3079\u3066\u7b2c1\u7ae0\u3067\u3001\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u4ed8\u304d\u3067\u8aac\u660e\u3057\u307e\u3059\u3002</p>"},{"location":"part1/chapter00/#_14","title":"\u3088\u304f\u51fa\u3066\u304f\u308b\u300c\u5c02\u9580\u7528\u8a9e\u300d","text":"<p>\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u4e16\u754c\u306b\u306f\u5c02\u9580\u7528\u8a9e\u304c\u3042\u308a\u307e\u3059\u3002\u3067\u3082\u96e3\u3057\u304f\u306a\u3044\u3067\u3059\u3088\uff01</p>"},{"location":"part1/chapter00/#_15","title":"\u65e5\u5e38\u751f\u6d3b\u306b\u7f6e\u304d\u63db\u3048\u308b\u3068...","text":"\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u7528\u8a9e \u65e5\u5e38\u751f\u6d3b\u3067\u306e\u4f8b \u30b3\u30fc\u30c9 \u6599\u7406\u306e\u30ec\u30b7\u30d4 \u5b9f\u884c \u5b9f\u969b\u306b\u6599\u7406\u3092\u4f5c\u308b \u30c7\u30d0\u30c3\u30b0 \u5473\u898b\u3057\u3066\u8abf\u6574\u3059\u308b \u5909\u6570 \u30bf\u30c3\u30d1\u30fc\uff08\u4fdd\u5b58\u5bb9\u5668\uff09 \u95a2\u6570 \u300c\u5375\u3092\u5272\u308b\u300d\u3068\u3044\u3046\u4f5c\u696d \u30a8\u30e9\u30fc \u300c\u5869\u3068\u7802\u7cd6\u3092\u9593\u9055\u3048\u305f\uff01\u300d"},{"location":"part1/chapter00/#_16","title":"\u4f8b\u3048\u3070\u3053\u3093\u306a\u611f\u3058","text":"<p>\u30b3\u30fc\u30c9\u3092\u66f8\u304f\uff1a <pre><code>1. \u5375\u30922\u500b\u5272\u308b\n2. \u5869\u3092\u5c11\u3057\u5165\u308c\u308b\n3. \u304b\u304d\u6df7\u305c\u308b\n</code></pre></p> <p>\u5b9f\u884c\u3059\u308b\uff1a \u5b9f\u969b\u306b\u4f5c\u3063\u3066\u307f\u308b</p> <p>\u30c7\u30d0\u30c3\u30b0\u3059\u308b\uff1a \u300c\u3042\u308c\uff1f\u3057\u3087\u3063\u3071\u3044...\u5869\u5165\u308c\u3059\u304e\u305f\u304b\u306a\uff1f\u300d</p> <p>\u3053\u3093\u306a\u611f\u3058\u3067\u3001\u5b9f\u306f\u666e\u6bb5\u304b\u3089\u300c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u7684\u306a\u8003\u3048\u65b9\u300d\u3092\u3057\u3066\u3044\u308b\u3093\u3067\u3059\uff01</p>"},{"location":"part1/chapter00/#_17","title":"\u3053\u306e\u672c\u306e\u9032\u3081\u65b9","text":""},{"location":"part1/chapter00/#3_1","title":"3\u3064\u306e\u30b9\u30c6\u30c3\u30d7","text":"<p>\u3053\u306e\u672c\u306f\u300c3\u3064\u306e\u5927\u304d\u306a\u30b9\u30c6\u30c3\u30d7\u300d\u3067\u9032\u307f\u307e\u3059\uff1a</p> <p>\ud83c\udf31 \u30b9\u30c6\u30c3\u30d71\uff1a\u57fa\u790e\u3092\u56fa\u3081\u3088\u3046\uff08\u7b2c1\u90e8\uff5e\u7b2c3\u90e8\uff09 - \u307e\u305a\u306fScala\u3068\u4ef2\u826f\u304f\u306a\u308b - \u6570\u5b57\u3084\u6587\u5b57\u3092\u6271\u3046 - \u30c7\u30fc\u30bf\u3092\u307e\u3068\u3081\u308b\u65b9\u6cd5\u3092\u5b66\u3076</p> <p>\ud83c\udf33 \u30b9\u30c6\u30c3\u30d72\uff1a\u30d7\u30ed\u30b0\u30e9\u30e0\u3089\u3057\u304f\uff08\u7b2c4\u90e8\uff5e\u7b2c6\u90e8\uff09 - \u300c\u3082\u3057\u301c\u306a\u3089\u300d\u306e\u51e6\u7406 - \u30a8\u30e9\u30fc\u3078\u306e\u5bfe\u51e6\u6cd5 - \u3082\u3063\u3068\u8cde\u304f\u3044\u30c7\u30fc\u30bf\u306e\u6271\u3044\u65b9</p> <p>\ud83c\udf32 \u30b9\u30c6\u30c3\u30d73\uff1a\u3082\u3063\u3068\u6df1\u304f\uff08\u7b2c7\u90e8\uff5e\u7b2c9\u90e8\uff09 - \u30d7\u30ed\u3063\u307d\u3044\u30c6\u30af\u30cb\u30c3\u30af - \u3088\u308a\u5b89\u5168\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u66f8\u304d\u65b9 - \u5b9f\u969b\u306e\u4ed5\u4e8b\u3067\u4f7f\u3046\u6280\u8853</p>"},{"location":"part1/chapter00/#_18","title":"\u3069\u3053\u307e\u3067\u8aad\u3081\u3070\u3044\u3044\uff1f","text":"<ul> <li>\u8da3\u5473\u3067\u59cb\u3081\u308b\u4eba\uff1a\u30b9\u30c6\u30c3\u30d71\u3060\u3051\u3067\u3082\u5341\u5206\u697d\u3057\u3081\u307e\u3059</li> <li>\u3082\u3063\u3068\u5b66\u3073\u305f\u3044\u4eba\uff1a\u30b9\u30c6\u30c3\u30d72\u307e\u3067\u9032\u3080\u3068\u3001\u304b\u306a\u308a\u3067\u304d\u308b\u3053\u3068\u304c\u5897\u3048\u307e\u3059</li> <li>\u4ed5\u4e8b\u306b\u3057\u305f\u3044\u4eba\uff1a\u30b9\u30c6\u30c3\u30d73\u307e\u3067\u9811\u5f35\u308a\u307e\u3057\u3087\u3046\uff01</li> </ul> <p>\u5927\u4e08\u592b\u3001\u7121\u7406\u306f\u3057\u306a\u3044\u3067\uff01\u81ea\u5206\u306e\u30da\u30fc\u30b9\u3067\u9032\u3081\u307e\u3057\u3087\u3046\u3002</p>"},{"location":"part1/chapter00/#_19","title":"\u3088\u304f\u3042\u308b\u8cea\u554f\u306b\u7b54\u3048\u307e\u3059","text":""},{"location":"part1/chapter00/#q","title":"Q: \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3063\u3066\u96e3\u3057\u305d\u3046...\u79c1\u306b\u3067\u304d\u308b\u304b\u306a\uff1f","text":"<p>A: \u3067\u304d\u307e\u3059\uff01</p> <p>\u3042\u306a\u305f\u306f\u3053\u308c\u307e\u3067\u306b\uff1a - \u30b9\u30de\u30db\u3092\u4f7f\u3063\u305f\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u304b\uff1f - \u30ec\u30b7\u30d4\u3092\u898b\u3066\u6599\u7406\u3092\u4f5c\u3063\u305f\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u304b\uff1f - \u30b2\u30fc\u30e0\u3092\u30d7\u30ec\u30a4\u3057\u305f\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u304b\uff1f</p> <p>\u3069\u308c\u304b1\u3064\u3067\u3082\u300c\u306f\u3044\u300d\u306a\u3089\u3001\u3042\u306a\u305f\u306f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u304c\u3067\u304d\u307e\u3059\uff01</p>"},{"location":"part1/chapter00/#q_1","title":"Q: \u6570\u5b66\u304c\u82e6\u624b\u3067\u3059...","text":"<p>A: \u5c0f\u5b66\u6821\u306e\u7b97\u6570\u304c\u3067\u304d\u308c\u3070OK\uff01</p> <p>\u5fc5\u8981\u306a\u306e\u306f\uff1a - \u8db3\u3057\u7b97\uff1a5 + 3 = 8 - \u5f15\u304d\u7b97\uff1a10 - 4 = 6 - \u304b\u3051\u7b97\uff1a3 \u00d7 4 = 12 - \u308f\u308a\u7b97\uff1a20 \u00f7 5 = 4</p> <p>\u3053\u308c\u3060\u3051\u3067\u3059\u3002\u5fae\u5206\u7a4d\u5206\u3084\u96e3\u3057\u3044\u6570\u5f0f\u306f\u4e00\u5207\u51fa\u3066\u304d\u307e\u305b\u3093\uff01</p>"},{"location":"part1/chapter00/#q_2","title":"Q: \u82f1\u8a9e\u304c\u3067\u304d\u307e\u305b\u3093...","text":"<p>A: \u30ed\u30fc\u30de\u5b57\u304c\u8aad\u3081\u308c\u3070OK\uff01</p> <p>\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u4f7f\u3046\u82f1\u5358\u8a9e\u306f\u305f\u3063\u305f50\u500b\u304f\u3089\u3044\u3002\u3057\u304b\u3082\uff1a - print\uff08\u30d7\u30ea\u30f3\u30c8\uff09= \u5370\u5237\u3059\u308b - if\uff08\u30a4\u30d5\uff09= \u3082\u3057 - true\uff08\u30c8\u30a5\u30eb\u30fc\uff09= \u6b63\u3057\u3044</p> <p>\u3053\u3093\u306a\u7c21\u5358\u306a\u5358\u8a9e\u3070\u304b\u308a\u3067\u3059\u3002\u3053\u306e\u672c\u3067\u306f\u5168\u90e8\u65e5\u672c\u8a9e\u3067\u8aac\u660e\u3057\u307e\u3059\uff01</p>"},{"location":"part1/chapter00/#q_3","title":"Q: \u30d1\u30bd\u30b3\u30f3\u306b\u8a73\u3057\u304f\u306a\u3044\u3051\u3069...","text":"<p>A: \u30e1\u30fc\u30eb\u304c\u9001\u308c\u308b\u7a0b\u5ea6\u3067OK\uff01</p> <p>\u5fc5\u8981\u306a\u30d1\u30bd\u30b3\u30f3\u30b9\u30ad\u30eb\uff1a - \u30de\u30a6\u30b9\u3067\u30af\u30ea\u30c3\u30af\u3067\u304d\u308b - \u30ad\u30fc\u30dc\u30fc\u30c9\u3067\u6587\u5b57\u304c\u6253\u3066\u308b - \u30d5\u30a1\u30a4\u30eb\u3092\u4fdd\u5b58\u3067\u304d\u308b</p> <p>\u3053\u308c\u3060\u3051\u3067\u3059\u3002\u30d1\u30bd\u30b3\u30f3\u306e\u4e2d\u8eab\u3084\u4ed5\u7d44\u307f\u306f\u77e5\u3089\u306a\u304f\u3066\u3082\u5927\u4e08\u592b\uff01</p>"},{"location":"part1/chapter00/#q_4","title":"Q: \u3069\u306e\u304f\u3089\u3044\u3067\u300c\u3067\u304d\u308b\u300d\u3088\u3046\u306b\u306a\u308b\uff1f","text":"<p>A: \u4eba\u305d\u308c\u305e\u308c\u3067\u3059\u304c...</p> <ul> <li>1\u9031\u9593\uff1a\u300c\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u52d5\u3044\u305f\uff01\u300d\u3068\u3044\u3046\u559c\u3073\u3092\u5473\u308f\u3048\u307e\u3059</li> <li>1\u30f6\u6708\uff1a\u7c21\u5358\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u81ea\u5206\u3067\u66f8\u3051\u308b\u3088\u3046\u306b</li> <li>3\u30f6\u6708\uff1a\u300c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u304c\u3067\u304d\u308b\u300d\u3068\u8a00\u3048\u308b\u30ec\u30d9\u30eb\u306b</li> <li>6\u30f6\u6708\uff1a\u7c21\u5358\u306a\u30a2\u30d7\u30ea\u304c\u4f5c\u308c\u308b\u3088\u3046\u306b</li> </ul> <p>\u6bce\u65e515\u5206\u3067\u3082OK\u3067\u3059\u3002\u5927\u4e8b\u306a\u306e\u306f\u7d9a\u3051\u308b\u3053\u3068\uff01</p>"},{"location":"part1/chapter00/#_20","title":"\u3053\u306e\u7ae0\u306e\u307e\u3068\u3081","text":"<p>\u3055\u3042\u3001\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u4e16\u754c\u3078\u306e\u6e96\u5099\u306f\u3067\u304d\u307e\u3057\u305f\u304b\uff1f</p>"},{"location":"part1/chapter00/#_21","title":"\u4eca\u65e5\u5b66\u3093\u3060\u3053\u3068","text":"<p>\u2705 \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306f\u7279\u5225\u306a\u3082\u306e\u3058\u3083\u306a\u3044 - \u6599\u7406\u306e\u30ec\u30b7\u30d4\u3068\u540c\u3058\u3088\u3046\u306a\u3082\u306e - \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3078\u306e\u300c\u304a\u9858\u3044\u30ea\u30b9\u30c8\u300d</p> <p>\u2705 \u30a8\u30e9\u30fc\u306f\u5148\u751f - \u9593\u9055\u3048\u305f\u3068\u304d\u306b\u6559\u3048\u3066\u304f\u308c\u308b - \u30d7\u30ed\u3082\u6bce\u65e5\u30a8\u30e9\u30fc\u3092\u51fa\u3057\u3066\u3044\u308b</p> <p>\u2705 \u5fc5\u8981\u306a\u3082\u306e\u306f\u30b7\u30f3\u30d7\u30eb - \u30d1\u30bd\u30b3\u30f3\u3068\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8 - \u5c0f\u5b66\u6821\u306e\u7b97\u6570\u30ec\u30d9\u30eb\u306e\u77e5\u8b58 - \u300c\u3084\u3063\u3066\u307f\u3088\u3046\u300d\u3068\u3044\u3046\u6c17\u6301\u3061</p>"},{"location":"part1/chapter00/#_22","title":"\u6b21\u306e\u7ae0\u3067\u306f...","text":"<p>\u3044\u3088\u3044\u3088\u5b9f\u969b\u306b\uff1a 1. Scala\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066 2. \u6700\u521d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066 3. \u300c\u52d5\u3044\u305f\uff01\u300d\u3068\u3044\u3046\u559c\u3073\u3092\u5473\u308f\u3044\u307e\u3057\u3087\u3046</p> <p>\u30ef\u30af\u30ef\u30af\u3057\u3066\u304d\u307e\u3057\u305f\u304b\uff1f</p>"},{"location":"part1/chapter00/#_23","title":"\u6700\u5f8c\u306b\u3072\u3068\u3053\u3068","text":"<p>\u300c\u3067\u304d\u308b\u304b\u306a...\u300d\u3068\u601d\u3063\u3066\u3044\u308b\u3042\u306a\u305f\u3078</p> <p>\u79c1\u305f\u3061\u306f\u307f\u3093\u306a\u3001\u6700\u521d\u306f\u521d\u5fc3\u8005\u3067\u3057\u305f\u3002</p> <p>\u6709\u540d\u306a\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u3082\u3001\u6700\u521d\u306f\u300cHello, World!\u300d\u3068\u3044\u3046\u7c21\u5358\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089\u59cb\u3081\u307e\u3057\u305f\u3002</p> <p>\u5927\u4e08\u592b\u3002\u3042\u306a\u305f\u306b\u3082\u3067\u304d\u307e\u3059\u3002</p> <p>\u4e00\u7dd2\u306b\u4e00\u6b69\u305a\u3064\u9032\u3093\u3067\u3044\u304d\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part1/chapter00/#_24","title":"\u7df4\u7fd2\u554f\u984c\uff08\u3084\u3063\u3066\u307f\u3088\u3046\uff01\uff09","text":""},{"location":"part1/chapter00/#1_2","title":"\u554f\u984c1\uff1a\u81ea\u5206\u306e\u8a00\u8449\u3067","text":"<p>\u300c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u300d\u3092\u3001\u5c0f\u5b66\u751f\u306b\u8aac\u660e\u3059\u308b\u3064\u3082\u308a\u3067\u66f8\u3044\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"part1/chapter00/#2_2","title":"\u554f\u984c2\uff1a\u65e5\u5e38\u306e\u300c\u30d7\u30ed\u30b0\u30e9\u30e0\u300d","text":"<p>\u3042\u306a\u305f\u306e\u4e00\u65e5\u306e\u4e2d\u3067\u3001\u300c\u9806\u756a\u306b\u4f55\u304b\u3092\u3059\u308b\u300d\u3053\u3068\u30923\u3064\u66f8\u3044\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002</p> <p>\u4f8b\uff1a\u671d\u306e\u6e96\u5099\u3001\u30b3\u30fc\u30d2\u30fc\u3092\u5165\u308c\u308b\u3001\u306a\u3069</p>"},{"location":"part1/chapter00/#3_2","title":"\u554f\u984c3\uff1a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u4f5c\u308a\u305f\u3044\u3082\u306e","text":"<p>\u3082\u3057\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3089\u3001\u4f55\u3092\u4f5c\u3063\u3066\u307f\u305f\u3044\u3067\u3059\u304b\uff1f</p> <p>\u4f8b\uff1a - \u5bb6\u8a08\u7c3f\u30a2\u30d7\u30ea - \u30b2\u30fc\u30e0 - \u81ea\u5206\u306e\u30db\u30fc\u30e0\u30da\u30fc\u30b8 - \u4fbf\u5229\u306a\u30c4\u30fc\u30eb</p> <p>\u30d2\u30f3\u30c8\uff1a\u300c\u3053\u3093\u306a\u306e\u304c\u3042\u3063\u305f\u3089\u4fbf\u5229\u3060\u306a\u300d\u3068\u601d\u3046\u3082\u306e\u3092\u8003\u3048\u3066\u307f\u3066\uff01</p>"},{"location":"part1/chapter01/","title":"\u7b2c1\u7ae0 Scala\u3068\u51fa\u4f1a\u304a\u3046","text":""},{"location":"part1/chapter01/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u4e16\u754c\u3078\u3001\u3088\u3046\u3053\u305d\uff01</p> <p>\u3053\u306e\u7ae0\u3067\u306f\u3001\u3042\u306a\u305f\u304c\u751f\u307e\u308c\u3066\u521d\u3081\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3068\u3053\u308d\u304b\u3089\u59cb\u3081\u307e\u3059\u3002\u300c\u30d7\u30ed\u30b0\u30e9\u30e0\u3063\u3066\u4f55\uff1f\u300d\u300c\u3069\u3046\u3084\u3063\u3066\u52d5\u304b\u3059\u306e\uff1f\u300d\u3068\u3044\u3063\u305f\u7591\u554f\u306b\u4e00\u3064\u4e00\u3064\u7b54\u3048\u306a\u304c\u3089\u3001\u3086\u3063\u304f\u308a\u3068\u9032\u3093\u3067\u3044\u304d\u307e\u3057\u3087\u3046\u3002</p> <p>\u6700\u521d\u306f\u8ab0\u3067\u3082\u521d\u5fc3\u8005\u3067\u3059\u3002\u7126\u3089\u305a\u3001\u697d\u3057\u307f\u306a\u304c\u3089\u5b66\u3093\u3067\u3044\u304d\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part1/chapter01/#_2","title":"\u30d7\u30ed\u30b0\u30e9\u30e0\u3063\u3066\u4f55\u3060\u308d\u3046\uff1f","text":""},{"location":"part1/chapter01/#_3","title":"\u8eab\u8fd1\u306a\u4f8b\u3067\u8003\u3048\u3066\u307f\u3088\u3046","text":"<p>\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3078\u306e\u300c\u304a\u9858\u3044\u30ea\u30b9\u30c8\u300d\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002</p> <p>\u4f8b\u3048\u3070\u3001\u53cb\u9054\u306b\u300c\u30b3\u30f3\u30d3\u30cb\u3067\u304a\u8336\u3092\u8cb7\u3063\u3066\u304d\u3066\u300d\u3068\u304a\u9858\u3044\u3059\u308b\u3068\u304d\u3001\u3053\u3093\u306a\u98a8\u306b\u4f1d\u3048\u307e\u3059\u3088\u306d\uff1a</p> <ol> <li>\u30b3\u30f3\u30d3\u30cb\u306b\u884c\u3063\u3066</li> <li>\u98f2\u307f\u7269\u30b3\u30fc\u30ca\u30fc\u3092\u63a2\u3057\u3066</li> <li>\u304a\u8336\u3092\u9078\u3093\u3067</li> <li>\u30ec\u30b8\u3067\u304a\u91d1\u3092\u6255\u3063\u3066</li> <li>\u8cb7\u3063\u305f\u304a\u8336\u3092\u6301\u3063\u3066\u5e30\u3063\u3066\u304d\u3066</li> </ol> <p>\u30d7\u30ed\u30b0\u30e9\u30e0\u3082\u540c\u3058\u3067\u3059\u3002\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306b\u300c\u3053\u308c\u3092\u3084\u3063\u3066\u3001\u6b21\u306b\u3042\u308c\u3092\u3084\u3063\u3066\u300d\u3068\u9806\u756a\u306b\u6307\u793a\u3092\u51fa\u3057\u3066\u3044\u304d\u307e\u3059\u3002</p>"},{"location":"part1/chapter01/#scala","title":"\u306a\u305cScala\u3092\u9078\u3076\u306e\uff1f","text":"<p>\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306f\u305f\u304f\u3055\u3093\u3042\u308a\u307e\u3059\uff08\u65e5\u672c\u8a9e\u3001\u82f1\u8a9e\u3001\u4e2d\u56fd\u8a9e\u306e\u3088\u3046\u306b\uff01\uff09\u3002\u305d\u306e\u4e2d\u3067Scala\u3092\u9078\u3076\u7406\u7531\u306f\uff1a</p> <ul> <li>\u9593\u9055\u3044\u3092\u898b\u3064\u3051\u3084\u3059\u3044\uff1a\u66f8\u3044\u3066\u3044\u308b\u9014\u4e2d\u3067\u300c\u3053\u3053\u3001\u304a\u304b\u3057\u3044\u3088\u300d\u3068\u6559\u3048\u3066\u304f\u308c\u307e\u3059</li> <li>\u65e5\u672c\u8a9e\u304c\u4f7f\u3048\u308b\uff1a\u5909\u6570\u540d\uff08\u5f8c\u3067\u8aac\u660e\u3057\u307e\u3059\uff09\u306b\u65e5\u672c\u8a9e\u304c\u4f7f\u3048\u308b\u306e\u3067\u3001\u6700\u521d\u306f\u65e5\u672c\u8a9e\u3067\u66f8\u3044\u3066\u3082OK</li> <li>\u30b9\u30c6\u30c3\u30d7\u30a2\u30c3\u30d7\u3057\u3084\u3059\u3044\uff1a\u7c21\u5358\u306a\u3053\u3068\u304b\u3089\u59cb\u3081\u3066\u3001\u5f90\u3005\u306b\u9ad8\u5ea6\u306a\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059</li> </ul>"},{"location":"part1/chapter01/#scala_1","title":"Scala\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u3057\u3088\u3046","text":""},{"location":"part1/chapter01/#_4","title":"\u307e\u305a\u6700\u521d\u306b\uff1a\u300c\u30bf\u30fc\u30df\u30ca\u30eb\u300d\u3063\u3066\u4f55\uff1f","text":"<p>\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u52d5\u304b\u3059\u306b\u306f\u300c\u30bf\u30fc\u30df\u30ca\u30eb\u300d\uff08\u9ed2\u3044\u753b\u9762\uff09\u3092\u4f7f\u3044\u307e\u3059\u3002</p> <p>Windows\u306e\u5834\u5408\uff1a 1. \u30ad\u30fc\u30dc\u30fc\u30c9\u306e\u300cWindows\u30ad\u30fc\u300d\u3092\u62bc\u3059 2. \u300ccmd\u300d\u3068\u5165\u529b 3. \u300c\u30b3\u30de\u30f3\u30c9\u30d7\u30ed\u30f3\u30d7\u30c8\u300d\u3092\u30af\u30ea\u30c3\u30af</p> <p>Mac\u306e\u5834\u5408\uff1a 1. \u300c\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u300d\u30d5\u30a9\u30eb\u30c0\u3092\u958b\u304f 2. \u300c\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u300d\u30d5\u30a9\u30eb\u30c0\u3092\u958b\u304f 3. \u300c\u30bf\u30fc\u30df\u30ca\u30eb\u300d\u3092\u30c0\u30d6\u30eb\u30af\u30ea\u30c3\u30af</p> <p>\u9ed2\u3044\u753b\u9762\uff08\u307e\u305f\u306f\u767d\u3044\u753b\u9762\uff09\u304c\u51fa\u3066\u304d\u307e\u3057\u305f\u304b\uff1f\u3053\u308c\u304c\u30bf\u30fc\u30df\u30ca\u30eb\u3067\u3059\uff01</p>"},{"location":"part1/chapter01/#java-1","title":"Java\u306e\u78ba\u8a8d\uff08\u5fc5\u8981\u306a\u3082\u306e \u305d\u306e1\uff09","text":"<p>Scala\u3092\u52d5\u304b\u3059\u306b\u306f\u300cJava\u300d\u3068\u3044\u3046\u30bd\u30d5\u30c8\u304c\u5fc5\u8981\u3067\u3059\u3002\u307e\u305a\u3001Java\u304c\u5165\u3063\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002</p> <p>\u30bf\u30fc\u30df\u30ca\u30eb\u306b\u4ee5\u4e0b\u306e\u6587\u5b57\u3092\u305d\u306e\u307e\u307e\u5165\u529b\u3057\u3066\u3001Enter\u30ad\u30fc\u3092\u62bc\u3057\u3066\u304f\u3060\u3055\u3044\uff1a</p> <pre><code>java -version\n</code></pre> <p>\u4f55\u304b\u82f1\u8a9e\u304c\u305f\u304f\u3055\u3093\u51fa\u3066\u304d\u307e\u3057\u305f\u304b\uff1f</p> <p>\u3053\u3093\u306a\u611f\u3058\u306e\u8868\u793a\u304c\u51fa\u305f\u3089OK\uff1a <pre><code>java version \"11.0.19\" \n\uff08\u4ee5\u4e0b\u3001\u82f1\u8a9e\u304c\u7d9a\u304f...\uff09\n</code></pre></p> <p>\u300c\u30b3\u30de\u30f3\u30c9\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u300d\u3068\u51fa\u305f\u5834\u5408\uff1a Java\u304c\u307e\u3060\u5165\u3063\u3066\u3044\u307e\u305b\u3093\u3002\u6b21\u306e\u624b\u9806\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3057\u3087\u3046\u3002</p>"},{"location":"part1/chapter01/#java","title":"Java\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\uff08\u5fc5\u8981\u306a\u5834\u5408\u306e\u307f\uff09","text":"<p>Windows\u306e\u5834\u5408\uff1a 1. \u30d6\u30e9\u30a6\u30b6\u3067\u300cJava 11 \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u300d\u3068\u691c\u7d22 2. \u300cOracle JDK 11\u300d\u307e\u305f\u306f\u300cOpenJDK 11\u300d\u306e\u30da\u30fc\u30b8\u3092\u958b\u304f 3. \u300cWindows x64 Installer\u300d\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 4. \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30d6\u30eb\u30af\u30ea\u30c3\u30af 5. \u300c\u6b21\u3078\u300d\u3092\u4f55\u56de\u304b\u30af\u30ea\u30c3\u30af\u3057\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb</p> <p>Mac\u306e\u5834\u5408\uff1a 1. \u30bf\u30fc\u30df\u30ca\u30eb\u306b\u4ee5\u4e0b\u3092\u5165\u529b\u3057\u3066Enter\uff1a <pre><code>/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre> 2. \u3057\u3070\u3089\u304f\u5f85\u3064\uff085\u5206\u304f\u3089\u3044\u304b\u304b\u308b\u304b\u3082\uff09 3. \u7d42\u308f\u3063\u305f\u3089\u3001\u3053\u308c\u3092\u5165\u529b\u3057\u3066Enter\uff1a <pre><code>brew install openjdk@11\n</code></pre></p> <p>\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u5834\u5408\uff1a \u8a73\u3057\u3044\u4eba\u306b\u805e\u304f\u304b\u3001\u300cJava 11 \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5 [\u3042\u306a\u305f\u306eOS\u540d]\u300d\u3067\u691c\u7d22\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"part1/chapter01/#scala_2","title":"Scala\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":""},{"location":"part1/chapter01/#windows","title":"Windows\u306e\u5834\u5408","text":"<ol> <li>\u30d6\u30e9\u30a6\u30b6\u3067\u300cScala \u516c\u5f0f\u30b5\u30a4\u30c8\u300d\u3068\u691c\u7d22</li> <li>\u300cDownload\u300d\u307e\u305f\u306f\u300c\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u300d\u3092\u30af\u30ea\u30c3\u30af  </li> <li>\u300cDownload for Windows\u300d\u3092\u30af\u30ea\u30c3\u30af</li> <li>\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u30d5\u30a1\u30a4\u30eb\uff08scala-3-...-.msi \u307f\u305f\u3044\u306a\u540d\u524d\uff09\u3092\u30c0\u30d6\u30eb\u30af\u30ea\u30c3\u30af</li> <li>\u300cNext\u300d\u3092\u4f55\u56de\u304b\u30af\u30ea\u30c3\u30af\u3057\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb</li> </ol>"},{"location":"part1/chapter01/#mac","title":"Mac\u306e\u5834\u5408","text":"<p>\u30bf\u30fc\u30df\u30ca\u30eb\u306b\u4ee5\u4e0b\u30921\u884c\u305a\u3064\u5165\u529b\u3057\u3066Enter\uff08\u30b3\u30d4\u30fc&amp;\u30da\u30fc\u30b9\u30c8\u3067\u3082OK\uff09\uff1a</p> <pre><code>brew install coursier/formulas/coursier\n</code></pre> <p>\u3057\u3070\u3089\u304f\u5f85\u3063\u3066\u304b\u3089\uff1a</p> <pre><code>cs setup\n</code></pre> <p>\u300cPress Enter\u300d\u3068\u51fa\u305f\u3089Enter\u30ad\u30fc\u3092\u62bc\u3059\u3002</p>"},{"location":"part1/chapter01/#_5","title":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u305f\u304b\u78ba\u8a8d\u3057\u3088\u3046","text":"<p>\u91cd\u8981\uff1a\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u4e00\u5ea6\u9589\u3058\u3066\u3001\u65b0\u3057\u304f\u958b\u304d\u76f4\u3057\u3066\u304f\u3060\u3055\u3044\uff01</p> <p>\u65b0\u3057\u3044\u30bf\u30fc\u30df\u30ca\u30eb\u3067\u4ee5\u4e0b\u3092\u5165\u529b\u3057\u3066Enter\uff1a</p> <pre><code>scala --version\n</code></pre> <p>\u3053\u3093\u306a\u8868\u793a\u304c\u51fa\u305f\u3089\u6210\u529f\u3067\u3059\uff01 <pre><code>Scala 3.3.1\n</code></pre></p> <p>\u6570\u5b57\u304c\u5c11\u3057\u9055\u3063\u3066\u3082\uff083.2.0\u3068\u304b3.4.0\u3068\u304b\uff09\u5927\u4e08\u592b\u3067\u3059\u3002</p>"},{"location":"part1/chapter01/#scala-","title":"\u306f\u3058\u3081\u3066\u306eScala - \u96fb\u5353\u3068\u3057\u3066\u4f7f\u3063\u3066\u307f\u3088\u3046\uff01","text":""},{"location":"part1/chapter01/#scala_3","title":"Scala\u3092\u8d77\u52d5\u3059\u308b","text":"<p>\u30bf\u30fc\u30df\u30ca\u30eb\u3067\u3001\u4ee5\u4e0b\u306e5\u6587\u5b57\u3092\u5165\u529b\u3057\u3066Enter\u30ad\u30fc\u3092\u62bc\u3057\u3066\u304f\u3060\u3055\u3044\uff1a</p> <pre><code>scala\n</code></pre> <p>\u3059\u308b\u3068\u3001\u3053\u3093\u306a\u753b\u9762\u306b\u306a\u308a\u307e\u3059\uff1a</p> <pre><code>Welcome to Scala 3.3.1 ...\n\uff08\u82f1\u8a9e\u304c\u3044\u308d\u3044\u308d\u66f8\u3044\u3066\u3042\u308b\uff09\n\nscala&gt; \n</code></pre> <p><code>scala&gt;</code> \u306e\u5f8c\u308d\u3067\u30ab\u30fc\u30bd\u30eb\u304c\u70b9\u6ec5\u3057\u3066\u3044\u307e\u3059\u306d\uff1f\u3053\u3053\u306b\u8a08\u7b97\u5f0f\u3092\u66f8\u3051\u307e\u3059\uff01</p>"},{"location":"part1/chapter01/#_6","title":"\u6700\u521d\u306e\u8a08\u7b97\u3092\u3057\u3066\u307f\u3088\u3046","text":"<p><code>scala&gt;</code> \u306e\u5f8c\u308d\u306b <code>1 + 1</code> \u3068\u5165\u529b\u3057\u3066\u3001Enter\u30ad\u30fc\u3092\u62bc\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\uff1a</p> <pre><code>scala&gt; 1 + 1\n</code></pre> <p>Enter\u3092\u62bc\u3059\u3068...</p> <pre><code>val res0: Int = 2\n</code></pre> <p>\u3084\u3063\u305f\uff01\u7b54\u3048\u304c\u51fa\u307e\u3057\u305f\u3002<code>2</code> \u3067\u3059\u306d\u3002</p> <p>\u4f55\u304c\u8d77\u304d\u305f\u306e\uff1f - \u3042\u306a\u305f\u304c\u300c1 + 1\u3092\u8a08\u7b97\u3057\u3066\u300d\u3068\u304a\u9858\u3044\u3057\u305f - Scala\u304c\u8a08\u7b97\u3057\u3066\u300c\u7b54\u3048\u306f2\u3060\u3088\u300d\u3068\u6559\u3048\u3066\u304f\u308c\u305f - \u3064\u3044\u3067\u306b <code>res0</code> \u3068\u3044\u3046\u540d\u524d\u3067\u7b54\u3048\u3092\u899a\u3048\u3066\u304a\u3044\u3066\u304f\u308c\u305f</p>"},{"location":"part1/chapter01/#_7","title":"\u3082\u3063\u3068\u8a08\u7b97\u3057\u3066\u307f\u3088\u3046","text":"<p>\u4ee5\u4e0b\u30921\u3064\u305a\u3064\u5165\u529b\u3057\u3066Enter\u3092\u62bc\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\uff1a</p> <pre><code>scala&gt; 5 * 3\nval res1: Int = 15\n\nscala&gt; 10 - 7  \nval res2: Int = 3\n\nscala&gt; 20 / 4\nval res3: Int = 5\n</code></pre> <p>\u96fb\u5353\u307f\u305f\u3044\u306b\u4f7f\u3048\u307e\u3059\u306d\uff01 - <code>*</code> \u306f\u300c\u304b\u3051\u308b\u300d - <code>-</code> \u306f\u300c\u3072\u304f\u300d - <code>/</code> \u306f\u300c\u308f\u308b\u300d</p>"},{"location":"part1/chapter01/#_8","title":"\u6587\u5b57\u3082\u8868\u793a\u3067\u304d\u308b\uff01","text":"<p>\u6570\u5b57\u3060\u3051\u3058\u3083\u306a\u304f\u3001\u6587\u5b57\uff08\u6587\u5b57\u5217\uff09\u3082\u6271\u3048\u307e\u3059\u3002</p> <p>\u6ce8\u610f\uff1a\u6587\u5b57\u3092\u66f8\u304f\u3068\u304d\u306f <code>\"\"</code> \uff08\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\uff09\u3067\u56f2\u307f\u307e\u3059\uff01</p> <pre><code>scala&gt; \"Hello!\"\nval res4: String = Hello!\n\nscala&gt; \"\u3053\u3093\u306b\u3061\u306f\"\nval res5: String = \u3053\u3093\u306b\u3061\u306f\n</code></pre>"},{"location":"part1/chapter01/#_9","title":"\u753b\u9762\u306b\u6587\u5b57\u3092\u51fa\u3057\u3066\u307f\u3088\u3046","text":"<p><code>println</code> \u3092\u4f7f\u3046\u3068\u3001\u753b\u9762\u306b\u6587\u5b57\u3092\u8868\u793a\u3067\u304d\u307e\u3059\uff1a</p> <pre><code>scala&gt; println(\"\u3053\u3093\u306b\u3061\u306f\u3001Scala\uff01\")\n\u3053\u3093\u306b\u3061\u306f\u3001Scala\uff01\n</code></pre> <p>println \u3063\u3066\u4f55\uff1f - print = \u5370\u5237\u3059\u308b\u3001\u8868\u793a\u3059\u308b - ln = line\uff08\u884c\uff09 - \u3064\u307e\u308a\u300c1\u884c\u8868\u793a\u3057\u3066\u300d\u3068\u3044\u3046\u547d\u4ee4\u3067\u3059</p>"},{"location":"part1/chapter01/#scala_4","title":"Scala\u3092\u7d42\u4e86\u3059\u308b","text":"<p>Scala\u3092\u7d42\u4e86\u3059\u308b\u306b\u306f <code>:quit</code> \u3068\u5165\u529b\u3057\u3066Enter\uff1a</p> <pre><code>scala&gt; :quit\n</code></pre> <p>\u30bf\u30fc\u30df\u30ca\u30eb\u306e\u6700\u521d\u306e\u753b\u9762\u306b\u623b\u308a\u307e\u3057\u305f\u306d\u3002\u304a\u75b2\u308c\u3055\u307e\u3067\u3057\u305f\uff01</p>"},{"location":"part1/chapter01/#_10","title":"\u521d\u3081\u3066\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u308d\u3046\uff01","text":"<p>\u4eca\u5ea6\u306f\u300c\u30d5\u30a1\u30a4\u30eb\u300d\u306b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p>"},{"location":"part1/chapter01/#1","title":"\u30b9\u30c6\u30c3\u30d71\uff1a\u30e1\u30e2\u5e33\u3092\u958b\u304f","text":"<p>Windows\u306e\u5834\u5408\uff1a 1. Windows\u30ad\u30fc\u3092\u62bc\u3059 2. \u300c\u30e1\u30e2\u5e33\u300d\u3068\u5165\u529b 3. \u300c\u30e1\u30e2\u5e33\u300d\u3092\u30af\u30ea\u30c3\u30af</p> <p>Mac\u306e\u5834\u5408\uff1a 1. \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3 \u2192 \u30c6\u30ad\u30b9\u30c8\u30a8\u30c7\u30a3\u30c3\u30c8 2. \u300c\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u300d\u30e1\u30cb\u30e5\u30fc \u2192 \u300c\u6a19\u6e96\u30c6\u30ad\u30b9\u30c8\u306b\u3059\u308b\u300d\u3092\u30af\u30ea\u30c3\u30af</p>"},{"location":"part1/chapter01/#2","title":"\u30b9\u30c6\u30c3\u30d72\uff1a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f","text":"<p>\u4ee5\u4e0b\u306e4\u884c\u3092\u305d\u306e\u307e\u307e\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\uff08\u30b3\u30d4\u30fc&amp;\u30da\u30fc\u30b9\u30c8\u3067\u3082OK\uff09\uff1a</p> <pre><code>// \u306f\u3058\u3081\u3066\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\n@main def hello(): Unit = {\n  println(\"Hello, World!\")\n  println(\"\u306f\u3058\u3081\u3066\u306eScala\u30d7\u30ed\u30b0\u30e9\u30e0\")\n}\n</code></pre> <p>\u91cd\u8981\u306a\u6ce8\u610f\u70b9\uff1a - 2\u884c\u76ee\u306e <code>@main</code> \u306e\u524d\u306b\u30b9\u30da\u30fc\u30b9\u3092\u5165\u308c\u306a\u3044 - 3\u884c\u76ee\u30684\u884c\u76ee\u306e\u6700\u521d\u306b\u30b9\u30da\u30fc\u30b92\u500b\u3092\u5165\u308c\u308b\uff08\u91cd\u8981\uff01\uff09 - <code>\"\"</code> \u306f\u5fc5\u305a\u534a\u89d2\u3067\u5165\u529b</p>"},{"location":"part1/chapter01/#3","title":"\u30b9\u30c6\u30c3\u30d73\uff1a\u30d5\u30a1\u30a4\u30eb\u3092\u4fdd\u5b58","text":"<ol> <li>\u300c\u30d5\u30a1\u30a4\u30eb\u300d\u2192\u300c\u540d\u524d\u3092\u4ed8\u3051\u3066\u4fdd\u5b58\u300d</li> <li>\u30d5\u30a1\u30a4\u30eb\u540d\uff1a<code>HelloWorld.scala</code>\uff08\u6700\u5f8c\u306e<code>.scala</code>\u304c\u5927\u4e8b\uff01\uff09</li> <li>\u4fdd\u5b58\u5834\u6240\uff1a\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\uff08\u5f8c\u3067\u898b\u3064\u3051\u3084\u3059\u3044\u3088\u3046\u306b\uff09</li> <li>\u300c\u4fdd\u5b58\u300d\u3092\u30af\u30ea\u30c3\u30af</li> </ol>"},{"location":"part1/chapter01/#4","title":"\u30b9\u30c6\u30c3\u30d74\uff1a\u4fdd\u5b58\u3057\u305f\u5834\u6240\u306b\u79fb\u52d5","text":"<p>\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u958b\u3044\u3066\u3001\u4ee5\u4e0b\u3092\u5165\u529b\uff1a</p> <p>Windows\u306e\u5834\u5408\uff1a <pre><code>cd Desktop\n</code></pre></p> <p>Mac\u306e\u5834\u5408\uff1a <pre><code>cd ~/Desktop\n</code></pre></p> <p>\u3053\u308c\u3067\u300c\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u300d\u30d5\u30a9\u30eb\u30c0\u306b\u79fb\u52d5\u3057\u307e\u3057\u305f\u3002</p>"},{"location":"part1/chapter01/#5","title":"\u30b9\u30c6\u30c3\u30d75\uff1a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\uff01","text":"<p>\u3044\u3088\u3044\u3088\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u52d5\u304b\u3057\u307e\u3059\u3002\u30bf\u30fc\u30df\u30ca\u30eb\u3067\u4ee5\u4e0b\u3092\u5165\u529b\u3057\u3066Enter\uff1a</p> <pre><code>scala HelloWorld.scala\n</code></pre> <p>\u6570\u79d2\u5f85\u3064\u3068...</p> <pre><code>Hello, World!\n\u306f\u3058\u3081\u3066\u306eScala\u30d7\u30ed\u30b0\u30e9\u30e0\n</code></pre> <p>\u304a\u3081\u3067\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff01 \ud83c\udf89</p> <p>\u3042\u306a\u305f\u306f\u4eca\u3001\u4eba\u751f\u3067\u521d\u3081\u3066\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u307e\u3057\u305f\uff01</p>"},{"location":"part1/chapter01/#_11","title":"\u4f55\u304c\u8d77\u304d\u305f\u306e\uff1f","text":"<ol> <li>\u3042\u306a\u305f\u304c\u66f8\u3044\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092Scala\u304c\u8aad\u3093\u3060</li> <li><code>println(\"Hello, World!\")</code> \u3092\u898b\u3066\u3001\u300cHello, World!\u300d\u3092\u8868\u793a\u3057\u305f</li> <li><code>println(\"\u306f\u3058\u3081\u3066\u306eScala\u30d7\u30ed\u30b0\u30e9\u30e0\")</code> \u3092\u898b\u3066\u3001\u300c\u306f\u3058\u3081\u3066\u306eScala\u30d7\u30ed\u30b0\u30e9\u30e0\u300d\u3092\u8868\u793a\u3057\u305f</li> <li>\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u7d42\u4e86\u3057\u305f</li> </ol>"},{"location":"part1/chapter01/#_12","title":"\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u4e2d\u8eab\u3092\u7406\u89e3\u3057\u3088\u3046","text":"<pre><code>// \u306f\u3058\u3081\u3066\u306e\u30d7\u30ed\u30b0\u30e9\u30e0         \u2190 \u3053\u308c\u306f\u300c\u30b3\u30e1\u30f3\u30c8\u300d\u3002\u30e1\u30e2\u307f\u305f\u3044\u306a\u3082\u306e\n@main def hello(): Unit = {    \u2190 \u300c\u3053\u3053\u304b\u3089\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u59cb\u307e\u308b\u3088\u300d\u3068\u3044\u3046\u5370\n  println(\"Hello, World!\")     \u2190 \u300cHello, World!\u300d\u3092\u8868\u793a\u3057\u3066\n  println(\"\u306f\u3058\u3081\u3066\u306eScala\u30d7\u30ed\u30b0\u30e9\u30e0\") \u2190 \u300c\u306f\u3058\u3081\u3066\u306eScala\u30d7\u30ed\u30b0\u30e9\u30e0\u300d\u3092\u8868\u793a\u3057\u3066\n}\n</code></pre> <ul> <li><code>//</code> \u3067\u59cb\u307e\u308b\u884c\u306f\u300c\u30b3\u30e1\u30f3\u30c8\u300d\u3002\u4eba\u9593\u7528\u306e\u30e1\u30e2\u3067\u3001\u5b9f\u884c\u3055\u308c\u307e\u305b\u3093</li> <li><code>@main</code> \u306f\u300c\u30b9\u30bf\u30fc\u30c8\u5730\u70b9\u300d\u3092\u8868\u3059\u9b54\u6cd5\u306e\u8a00\u8449</li> <li><code>println</code> \u306f\u300c\u753b\u9762\u306b\u8868\u793a\u3057\u3066\u300d\u3068\u3044\u3046\u547d\u4ee4</li> </ul>"},{"location":"part1/chapter01/#_13","title":"\u3082\u3046\u5c11\u3057\u9762\u767d\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u308d\u3046","text":""},{"location":"part1/chapter01/#_14","title":"\u300c\u5909\u6570\u300d\u3092\u4f7f\u3063\u3066\u307f\u3088\u3046","text":"<p>\u5909\u6570\u306f\u300c\u540d\u524d\u4ed8\u304d\u306e\u7bb1\u300d\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002\u30c7\u30fc\u30bf\u3092\u5165\u308c\u3066\u304a\u3044\u3066\u3001\u5f8c\u3067\u4f7f\u3048\u307e\u3059\u3002</p> <p>\u65b0\u3057\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u308a\u307e\u3057\u3087\u3046\u3002\u30e1\u30e2\u5e33\u3067\u65b0\u3057\u3044\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u308a\u3001\u4ee5\u4e0b\u3092\u5165\u529b\uff1a</p> <pre><code>// \u3042\u3044\u3055\u3064\u30d7\u30ed\u30b0\u30e9\u30e0\n@main def greeting(): Unit = {\n  val name = \"\u592a\u90ce\"\n  val age = 20\n\n  println(s\"\u3053\u3093\u306b\u3061\u306f\u3001${name}\u3055\u3093\uff01\")\n  println(s\"\u3042\u306a\u305f\u306f${age}\u6b73\u3067\u3059\u306d\u3002\")\n  println(s\"\u6765\u5e74\u306f${age + 1}\u6b73\u306b\u306a\u308a\u307e\u3059\u306d\u3002\")\n}\n</code></pre> <p>\u3053\u308c\u3092 <code>Greeting.scala</code> \u3068\u3044\u3046\u540d\u524d\u3067\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u306b\u4fdd\u5b58\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"part1/chapter01/#_15","title":"\u5b9f\u884c\u3057\u3066\u307f\u3088\u3046","text":"<p>\u30bf\u30fc\u30df\u30ca\u30eb\u3067\uff1a</p> <pre><code>scala Greeting.scala\n</code></pre> <p>\u7d50\u679c\uff1a</p> <pre><code>\u3053\u3093\u306b\u3061\u306f\u3001\u592a\u90ce\u3055\u3093\uff01\n\u3042\u306a\u305f\u306f20\u6b73\u3067\u3059\u306d\u3002\n\u6765\u5e74\u306f21\u6b73\u306b\u306a\u308a\u307e\u3059\u306d\u3002\n</code></pre>"},{"location":"part1/chapter01/#_16","title":"\u4f55\u304c\u8d77\u304d\u305f\u306e\uff1f","text":"<pre><code>val name = \"\u592a\u90ce\"    // \u300cname\u300d\u3068\u3044\u3046\u7bb1\u306b\u300c\u592a\u90ce\u300d\u3092\u5165\u308c\u305f\nval age = 20         // \u300cage\u300d\u3068\u3044\u3046\u7bb1\u306b\u300c20\u300d\u3092\u5165\u308c\u305f\n</code></pre> <ul> <li><code>val</code> \u306f\u300c\u5909\u6570\u3092\u4f5c\u308b\u3088\u300d\u3068\u3044\u3046\u610f\u5473</li> <li><code>name</code> \u306f\u5909\u6570\u306e\u540d\u524d\uff08\u7bb1\u306e\u540d\u524d\uff09</li> <li><code>=</code> \u306f\u300c\u5165\u308c\u308b\u300d\u3068\u3044\u3046\u610f\u5473</li> <li><code>\"\u592a\u90ce\"</code> \u306f\u5165\u308c\u308b\u30c7\u30fc\u30bf</li> </ul> <pre><code>println(s\"\u3053\u3093\u306b\u3061\u306f\u3001${name}\u3055\u3093\uff01\")\n</code></pre> <ul> <li><code>s\"...\"</code> \u306f\u300c\u3053\u306e\u4e2d\u3067\u5909\u6570\u3092\u4f7f\u3046\u3088\u300d\u3068\u3044\u3046\u5370</li> <li><code>${name}</code> \u306f\u300cname\u306e\u4e2d\u8eab\u3092\u3053\u3053\u306b\u5165\u308c\u3066\u300d\u3068\u3044\u3046\u610f\u5473</li> <li>\u7d50\u679c\uff1a\u300c\u3053\u3093\u306b\u3061\u306f\u3001\u592a\u90ce\u3055\u3093\uff01\u300d</li> </ul>"},{"location":"part1/chapter01/#_17","title":"\u81ea\u5206\u306e\u540d\u524d\u306b\u5909\u3048\u3066\u307f\u3088\u3046\uff01","text":"<ol> <li><code>Greeting.scala</code> \u3092\u30e1\u30e2\u5e33\u3067\u958b\u304f</li> <li><code>\"\u592a\u90ce\"</code> \u3092\u81ea\u5206\u306e\u540d\u524d\u306b\u5909\u3048\u308b</li> <li><code>20</code> \u3092\u81ea\u5206\u306e\u5e74\u9f62\u306b\u5909\u3048\u308b  </li> <li>\u4fdd\u5b58\u3057\u3066\u3001\u3082\u3046\u4e00\u5ea6\u5b9f\u884c</li> </ol> <p>\u81ea\u5206\u306e\u540d\u524d\u304c\u8868\u793a\u3055\u308c\u307e\u3057\u305f\u304b\uff1f\u3053\u308c\u304c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u7b2c\u4e00\u6b69\u3067\u3059\uff01</p>"},{"location":"part1/chapter01/#_18","title":"\u30a8\u30e9\u30fc\u304c\u51fa\u305f\u3089\uff1f\u5fc3\u914d\u3057\u306a\u3044\u3067\uff01","text":"<p>\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u306f\u3001\u30a8\u30e9\u30fc\u306f\u300c\u666e\u901a\u306e\u3053\u3068\u300d\u3067\u3059\u3002\u30d7\u30ed\u3067\u3082\u6bce\u65e5\u30a8\u30e9\u30fc\u3068\u4ed8\u304d\u5408\u3063\u3066\u3044\u307e\u3059\u3002</p>"},{"location":"part1/chapter01/#1_1","title":"\u3088\u304f\u3042\u308b\u30a8\u30e9\u30fc1\uff1a\u30d5\u30a1\u30a4\u30eb\u304c\u898b\u3064\u304b\u3089\u306a\u3044","text":"<pre><code>scala HelloWrold.scala  # \u3042\u308c\uff1f\u300cWorld\u300d\u306e\u30b9\u30da\u30eb\u304c...\n</code></pre> <p>\u3053\u3093\u306a\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059\uff1a <pre><code>Error: Source file not found: HelloWrold.scala\n</code></pre></p> <p>\u610f\u5473\uff1a\u300cHelloWrold.scala\u3063\u3066\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u3088\u300d</p> <p>\u89e3\u6c7a\u65b9\u6cd5\uff1a 1. \u30d5\u30a1\u30a4\u30eb\u540d\u306e\u30b9\u30da\u30eb\u3092\u78ba\u8a8d\uff08HelloWorld.scala \u304c\u6b63\u3057\u3044\uff09 2. \u4eca\u3044\u308b\u5834\u6240\u304c\u6b63\u3057\u3044\u304b\u78ba\u8a8d\uff08\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u306b\u3044\u308b\uff1f\uff09</p>"},{"location":"part1/chapter01/#2_1","title":"\u3088\u304f\u3042\u308b\u30a8\u30e9\u30fc2\uff1a\u65e5\u672c\u8a9e\u5165\u529b\u306e\u307e\u307e\u3060\u3063\u305f","text":"<pre><code>@main def hello(): Unit = {\n\u3000println(\"Hello, World!\")  // \u3042\u3063\u3001\u5168\u89d2\u30b9\u30da\u30fc\u30b9\u304c...\n}\n</code></pre> <p>\u3053\u3093\u306a\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059\uff1a <pre><code>error: illegal character '\\u3000'\n</code></pre></p> <p>\u610f\u5473\uff1a\u300c\u5909\u306a\u6587\u5b57\uff08\u5168\u89d2\u30b9\u30da\u30fc\u30b9\uff09\u304c\u5165\u3063\u3066\u308b\u3088\u300d</p> <p>\u89e3\u6c7a\u65b9\u6cd5\uff1a 1. \u65e5\u672c\u8a9e\u5165\u529b\u3092OFF\u306b\u3059\u308b 2. \u30b9\u30da\u30fc\u30b9\u3092\u524a\u9664\u3057\u3066\u3001\u534a\u89d2\u30b9\u30da\u30fc\u30b9\u3092\u5165\u308c\u76f4\u3059</p> <p>\u30b3\u30c4\uff1a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3068\u304d\u306f\u3001\u57fa\u672c\u7684\u306b\u300c\u534a\u89d2\u82f1\u6570\u300d\u30e2\u30fc\u30c9\u3067\uff01</p>"},{"location":"part1/chapter01/#3_1","title":"\u3088\u304f\u3042\u308b\u30a8\u30e9\u30fc3\uff1a\u30ab\u30c3\u30b3\u3092\u9589\u3058\u5fd8\u308c\u305f","text":"<pre><code>@main def hello(): Unit = {\n  println(\"Hello, World!\"  // ) \u3092\u5fd8\u308c\u305f\uff01\n}\n</code></pre> <p>\u3053\u3093\u306a\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059\uff1a <pre><code>error: ')' expected but end of file found\n</code></pre></p> <p>\u610f\u5473\uff1a\u300c)\uff08\u9589\u3058\u30ab\u30c3\u30b3\uff09\u304c\u5fc5\u8981\u306a\u306e\u306b\u3001\u30d5\u30a1\u30a4\u30eb\u304c\u7d42\u308f\u3063\u3061\u3083\u3063\u305f\u300d</p> <p>\u89e3\u6c7a\u65b9\u6cd5\uff1a <code>(</code> \u304c\u3042\u3063\u305f\u3089\u5fc5\u305a <code>)</code> \u3067\u9589\u3058\u308b\u3002<code>\"</code> \u3082\u540c\u3058\u304f\u5bfe\u3067\u4f7f\u3046\u3002</p>"},{"location":"part1/chapter01/#_19","title":"\u30a8\u30e9\u30fc\u304c\u51fa\u305f\u3068\u304d\u306e\u5fc3\u69cb\u3048","text":"<ol> <li>\u614c\u3066\u306a\u3044\uff1a\u30a8\u30e9\u30fc\u306f\u6575\u3058\u3083\u306a\u3044\u3001\u5148\u751f\u3067\u3059</li> <li>\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8aad\u3080\uff1a\u82f1\u8a9e\u3060\u3051\u3069\u3001\u5927\u4e8b\u306a\u30d2\u30f3\u30c8\u304c\u66f8\u3044\u3066\u3042\u308b</li> <li>1\u6587\u5b57\u305a\u3064\u78ba\u8a8d\uff1a\u30b9\u30da\u30eb\u3001\u30b9\u30da\u30fc\u30b9\u3001\u30ab\u30c3\u30b3\u3092\u30c1\u30a7\u30c3\u30af</li> <li>\u305d\u308c\u3067\u3082\u30c0\u30e1\u306a\u3089\uff1a\u6700\u521d\u304b\u3089\u3082\u3046\u4e00\u5ea6\u66f8\u3044\u3066\u307f\u308b</li> </ol>"},{"location":"part1/chapter01/#_20","title":"\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u300c\u5f62\u300d\u3092\u899a\u3048\u3088\u3046","text":""},{"location":"part1/chapter01/#_21","title":"\u4e00\u756a\u30b7\u30f3\u30d7\u30eb\u306a\u5f62","text":"<p>Scala\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u3053\u306e\u5f62\u304c\u57fa\u672c\u3067\u3059\uff1a</p> <pre><code>@main def \u30d7\u30ed\u30b0\u30e9\u30e0\u540d(): Unit = {\n  // \u3053\u3053\u306b\u300c\u3084\u308a\u305f\u3044\u3053\u3068\u300d\u3092\u66f8\u304f\n  // \u597d\u304d\u306a\u3060\u3051\u66f8\u3051\u308b\n}\n</code></pre> <p>\u4f8b\uff1a <pre><code>@main def myProgram(): Unit = {\n  println(\"\u79c1\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\")\n  println(\"2\u884c\u76ee\u3082\u66f8\u3051\u308b\")\n  println(\"3\u884c\u76ee\u3082\uff01\")\n}\n</code></pre></p>"},{"location":"part1/chapter01/#_22","title":"\u30b3\u30e1\u30f3\u30c8\uff08\u30e1\u30e2\uff09\u306e\u66f8\u304d\u65b9","text":"<p>\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u4e2d\u306b\u30e1\u30e2\u3092\u6b8b\u305b\u307e\u3059\uff1a</p> <pre><code>// \u3053\u308c\u306f\u30b3\u30e1\u30f3\u30c8\u3002\u5b9f\u884c\u3055\u308c\u307e\u305b\u3093\n@main def test(): Unit = {\n  println(\"Hello\")  // \u884c\u306e\u5f8c\u308d\u306b\u3082\u66f8\u3051\u308b\n  // println(\"\u3053\u308c\u306f\u5b9f\u884c\u3055\u308c\u306a\u3044\")\n}\n</code></pre>"},{"location":"part1/chapter01/#_23","title":"\u5927\u4e8b\uff01\u30a4\u30f3\u30c7\u30f3\u30c8\uff08\u5b57\u4e0b\u3052\uff09","text":"<p>Scala\u3067\u306f\u300c\u30b9\u30da\u30fc\u30b9\u306e\u6570\u300d\u306b\u610f\u5473\u304c\u3042\u308a\u307e\u3059\uff1a</p> <pre><code>@main def indentExample(): Unit = {\nprintln(\"\u3053\u308c\u306f\u30a8\u30e9\u30fc\uff01\")        // \u30b9\u30da\u30fc\u30b9\u306a\u3057 = \u30a8\u30e9\u30fc\n  println(\"\u3053\u308c\u306fOK\")            // \u30b9\u30da\u30fc\u30b92\u500b = \u6b63\u3057\u3044\n    println(\"\u3053\u308c\u3082\u30a8\u30e9\u30fc\uff01\")     // \u30b9\u30da\u30fc\u30b94\u500b = \u30a8\u30e9\u30fc\n}\n</code></pre> <p>\u30eb\u30fc\u30eb\uff1a - <code>@main def ... {</code> \u306e\u5f8c\u3001\u6ce2\u62ec\u5f27\u306e\u4e2d\u3067 - \u5fc5\u305a\u30b9\u30da\u30fc\u30b92\u500b\u3092\u5165\u308c\u308b - \u3059\u3079\u3066\u306e\u884c\u3067\u540c\u3058\u6570\u306e\u30b9\u30da\u30fc\u30b9</p> <p>\u306a\u305c\uff1f \u6ce2\u62ec\u5f27 <code>{</code> \u3068 <code>}</code> \u3067\u300c\u3053\u3053\u304b\u3089\u3053\u3053\u307e\u3067\u304c\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u4e2d\u8eab\u3060\u3088\u300d\u3068\u660e\u78ba\u306b\u793a\u3057\u3001\u30b9\u30da\u30fc\u30b9\u3067\u8aad\u307f\u3084\u3059\u304f\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u3002</p>"},{"location":"part1/chapter01/#_24","title":"\u3082\u3063\u3068\u4fbf\u5229\u306b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u65b9\u6cd5","text":"<p>\u30e1\u30e2\u5e33\u3067\u3082\u5341\u5206\u3067\u3059\u304c\u3001\u3082\u3063\u3068\u4fbf\u5229\u306a\u300c\u30d7\u30ed\u30b0\u30e9\u30e0\u5c02\u7528\u306e\u30e1\u30e2\u5e33\u300d\u304c\u3042\u308a\u307e\u3059\u3002</p>"},{"location":"part1/chapter01/#visual-studio-code","title":"Visual Studio Code\uff08\u304a\u3059\u3059\u3081\uff09","text":"<p>\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\uff1a 1. \u300cVS Code\u300d\u3067\u691c\u7d22 2. \u516c\u5f0f\u30b5\u30a4\u30c8\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 3. \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\uff08\u5168\u90e8\u300c\u6b21\u3078\u300d\u3067OK\uff09</p> <p>Scala\u7528\u306e\u8a2d\u5b9a\uff1a 1. VS Code\u3092\u8d77\u52d5 2. \u5de6\u5074\u306e\u56db\u89d2\u3044\u30a2\u30a4\u30b3\u30f3\uff08\u62e1\u5f35\u6a5f\u80fd\uff09\u3092\u30af\u30ea\u30c3\u30af 3. \u300cMetals\u300d\u3068\u691c\u7d22 4. \u300cInstall\u300d\u3092\u30af\u30ea\u30c3\u30af</p> <p>\u4f55\u304c\u4fbf\u5229\uff1f - \u8272\u304c\u3064\u3044\u3066\u898b\u3084\u3059\u3044 - \u30a8\u30e9\u30fc\u306b\u8d64\u3044\u6ce2\u7dda\u304c\u51fa\u308b - \u5165\u529b\u306e\u88dc\u52a9\u3092\u3057\u3066\u304f\u308c\u308b</p>"},{"location":"part1/chapter01/#ok","title":"\u4eca\u306f\u30e1\u30e2\u5e33\u3067OK\uff01","text":"<p>\u6700\u521d\u306f\u30e1\u30e2\u5e33\u3067\u5341\u5206\u3067\u3059\u3002\u6163\u308c\u3066\u304d\u305f\u3089\u4fbf\u5229\u306a\u30c4\u30fc\u30eb\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002</p>"},{"location":"part1/chapter01/#_25","title":"\u7df4\u7fd2\u3057\u3066\u307f\u3088\u3046\uff01","text":""},{"location":"part1/chapter01/#1_2","title":"\u7df4\u7fd21\uff1a\u81ea\u5df1\u7d39\u4ecb\u30d7\u30ed\u30b0\u30e9\u30e0","text":"<p>\u81ea\u5206\u3060\u3051\u306e\u81ea\u5df1\u7d39\u4ecb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <p>\u3084\u308b\u3053\u3068\uff1a 1. \u65b0\u3057\u3044\u30d5\u30a1\u30a4\u30eb <code>Introduction.scala</code> \u3092\u4f5c\u308b 2. \u4ee5\u4e0b\u3092\u53c2\u8003\u306b\u3001\u81ea\u5206\u306e\u60c5\u5831\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\uff1a</p> <pre><code>@main def introduction(): Unit = {\n  val name = \"\u3042\u306a\u305f\u306e\u540d\u524d\"\n  val food = \"\u597d\u304d\u306a\u98df\u3079\u7269\"\n\n  println(s\"\u79c1\u306e\u540d\u524d\u306f${name}\u3067\u3059\u3002\")\n  println(s\"\u597d\u304d\u306a\u98df\u3079\u7269\u306f${food}\u3067\u3059\u3002\")\n}\n</code></pre> <ol> <li>\u4fdd\u5b58\u3057\u3066\u5b9f\u884c</li> </ol> <p>\u3067\u304d\u305f\u304b\u306a\uff1f \u81ea\u5206\u306e\u540d\u524d\u3068\u597d\u304d\u306a\u98df\u3079\u7269\u304c\u8868\u793a\u3055\u308c\u308c\u3070\u6210\u529f\uff01</p>"},{"location":"part1/chapter01/#2_2","title":"\u7df4\u7fd22\uff1a\u8a08\u7b97\u30d7\u30ed\u30b0\u30e9\u30e0","text":"<p>\u96fb\u5353\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <p>\u3084\u308b\u3053\u3068\uff1a 1. \u65b0\u3057\u3044\u30d5\u30a1\u30a4\u30eb <code>Calculator.scala</code> \u3092\u4f5c\u308b 2. \u4ee5\u4e0b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b8c\u6210\u3055\u305b\u308b\uff1a</p> <pre><code>@main def calculator(): Unit = {\n  println(\"=== \u8a08\u7b97\u7d50\u679c ===\")\n  println(s\"100 + 200 = ${100 + 200}\")\n  println(s\"50 \u00d7 4 = ${50 * 4}\")\n  println(s\"1000 \u00f7 8 = ${1000 / 8}\")\n}\n</code></pre> <p>\u30d2\u30f3\u30c8\uff1a - \u304b\u3051\u7b97\u306f <code>*</code> - \u308f\u308a\u7b97\u306f <code>/</code></p>"},{"location":"part1/chapter01/#3_2","title":"\u7df4\u7fd23\uff1a\u30a8\u30e9\u30fc\u3092\u898b\u3064\u3051\u3088\u3046","text":"<p>\u4ee5\u4e0b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u306f3\u3064\u306e\u30a8\u30e9\u30fc\u304c\u3042\u308a\u307e\u3059\u3002\u898b\u3064\u3051\u3066\u76f4\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>@main def broken(): Unit = {\n  val message = \"Hello, Scala!\n  println(message)\n  println(\"\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306f\u697d\u3057\u3044\"\uff09\n}\n</code></pre> <p>\u30d2\u30f3\u30c8\uff1a 1. 2\u884c\u76ee\u306e\u6700\u5f8c\u306b\u4f55\u304b\u8db3\u308a\u306a\u3044\uff1f 2. 3\u884c\u76ee\u306e\u6700\u521d\u306e\u30b9\u30da\u30fc\u30b9\u306f\uff1f 3. 4\u884c\u76ee\u306e\u6700\u5f8c\u306e\u300c\uff09\u300d\u306f\u534a\u89d2\uff1f\u5168\u89d2\uff1f</p> <p>\u7b54\u3048\u5408\u308f\u305b\uff1a \u6b63\u3057\u304f\u76f4\u305b\u305f\u3089\u3001\u30a8\u30e9\u30fc\u306a\u304f\u5b9f\u884c\u3067\u304d\u308b\u306f\u305a\u3067\u3059\u3002</p>"},{"location":"part1/chapter01/#_26","title":"\u3053\u306e\u7ae0\u306e\u307e\u3068\u3081","text":"<p>\u4eca\u65e5\u3001\u3042\u306a\u305f\u306f\u5927\u304d\u306a\u4e00\u6b69\u3092\u8e0f\u307f\u51fa\u3057\u307e\u3057\u305f\uff01</p>"},{"location":"part1/chapter01/#_27","title":"\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3053\u3068","text":"<p>\u2705 \u30bf\u30fc\u30df\u30ca\u30eb\uff08\u9ed2\u3044\u753b\u9762\uff09\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u305f \u2705 Scala\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u305f \u2705 \u96fb\u5353\u307f\u305f\u3044\u306b\u8a08\u7b97\u304c\u3067\u304d\u305f \u2705 \u30d7\u30ed\u30b0\u30e9\u30e0\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u3063\u3066\u5b9f\u884c\u3067\u304d\u305f \u2705 \u5909\u6570\uff08\u30c7\u30fc\u30bf\u3092\u5165\u308c\u308b\u7bb1\uff09\u3092\u4f7f\u3048\u305f \u2705 \u30a8\u30e9\u30fc\u304c\u51fa\u3066\u3082\u614c\u3066\u306a\u304f\u306a\u3063\u305f</p>"},{"location":"part1/chapter01/#_28","title":"\u899a\u3048\u3066\u304a\u304f\u3053\u3068","text":"<ol> <li> <p>\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u57fa\u672c\u5f62\uff1a <pre><code>@main def \u540d\u524d(): Unit = {\n  // \u3053\u3053\u306b\u51e6\u7406\u3092\u66f8\u304f\uff08\u30b9\u30da\u30fc\u30b92\u500b\uff01\uff09\n}\n</code></pre></p> </li> <li> <p>\u753b\u9762\u306b\u8868\u793a\uff1a <pre><code>println(\"\u8868\u793a\u3057\u305f\u3044\u6587\u5b57\")\n</code></pre></p> </li> <li> <p>\u5909\u6570\u3092\u4f5c\u308b\uff1a <pre><code>val \u540d\u524d = \"\u30c7\u30fc\u30bf\"\n</code></pre></p> </li> <li> <p>\u30a8\u30e9\u30fc\u304c\u51fa\u305f\u3089\uff1a</p> </li> <li>\u30b9\u30da\u30eb\u3092\u78ba\u8a8d</li> <li>\u534a\u89d2/\u5168\u89d2\u3092\u78ba\u8a8d</li> <li>\u30ab\u30c3\u30b3\u306e\u5bfe\u5fdc\u3092\u78ba\u8a8d</li> </ol>"},{"location":"part1/chapter01/#_29","title":"\u6b21\u306e\u7ae0\u3067\u306f...","text":"<p>\u6570\u306e\u8a08\u7b97\u3092\u3082\u3063\u3068\u8a73\u3057\u304f\u5b66\u3073\u307e\u3059\u3002 - \u3082\u3063\u3068\u8907\u96d1\u306a\u8a08\u7b97 - \u8a08\u7b97\u7d50\u679c\u3092\u4fdd\u5b58\u3059\u308b\u65b9\u6cd5 - \u4fbf\u5229\u306a\u8a08\u7b97\u6a5f\u80fd</p> <p>\u697d\u3057\u307f\u306b\u3057\u3066\u3044\u3066\u304f\u3060\u3055\u3044\uff01</p>"},{"location":"part1/chapter01/#_30","title":"\u6700\u5f8c\u306b","text":"<p>\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306f\u300c\u6163\u308c\u300d\u3067\u3059\u3002</p> <p>\u6700\u521d\u306f\u96e3\u3057\u304f\u611f\u3058\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u305d\u308c\u306f\u666e\u901a\u306e\u3053\u3068\u3067\u3059\u3002\u81ea\u8ee2\u8eca\u306b\u4e57\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3068\u304d\u306e\u3053\u3068\u3092\u601d\u3044\u51fa\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u6700\u521d\u306f\u8ee2\u3093\u3067\u3070\u304b\u308a\u3067\u3082\u3001\u7df4\u7fd2\u3059\u308c\u3070\u5fc5\u305a\u4e57\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3088\u306d\uff1f</p> <p>\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3082\u540c\u3058\u3067\u3059\u3002\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u3082\u3001\u5206\u304b\u3089\u306a\u3044\u3053\u3068\u304c\u3042\u3063\u3066\u3082\u3001\u305d\u308c\u306f\u6210\u9577\u306e\u8a3c\u3002\u4e00\u6b69\u305a\u3064\u9032\u3093\u3067\u3044\u304d\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part1/chapter01/#scala_5","title":"\u304a\u307e\u3051\uff1aScala\u3092\u3082\u3063\u3068\u4fbf\u5229\u306b\u4f7f\u3046\u30b3\u30c4","text":""},{"location":"part1/chapter01/#repl","title":"REPL\u3067\u306e\u4fbf\u5229\u306a\u6a5f\u80fd","text":"<p>\u524d\u306b\u5165\u529b\u3057\u305f\u3082\u306e\u3092\u547c\u3073\u51fa\u3059\uff1a - \u4e0a\u77e2\u5370\u30ad\u30fc\uff08\u2191\uff09\uff1a\u524d\u306e\u5165\u529b\u3092\u8868\u793a - \u4e0b\u77e2\u5370\u30ad\u30fc\uff08\u2193\uff09\uff1a\u6b21\u306e\u5165\u529b\u3092\u8868\u793a</p> <p>\u540c\u3058\u8a08\u7b97\u3092\u5c11\u3057\u5909\u3048\u3066\u3084\u308a\u76f4\u3059\u3068\u304d\u306b\u4fbf\u5229\uff01</p> <p>\u5165\u529b\u306e\u88dc\u52a9\uff08\u307e\u3060\u96e3\u3057\u3044\u304b\u3082\uff09\uff1a</p> <pre><code>scala&gt; \"Hello\".to  // \u3053\u3053\u3067Tab\u30ad\u30fc\u3092\u62bc\u3059\u3068...\ntoCharArray   toLowerCase   toString   toUpperCase\n</code></pre> <p>\u4f7f\u3048\u308b\u547d\u4ee4\u306e\u5019\u88dc\u3092\u8868\u793a\u3057\u3066\u304f\u308c\u307e\u3059\u3002</p>"},{"location":"part1/chapter01/#_31","title":"\u56f0\u3063\u305f\u3068\u304d\u306e\u30b3\u30de\u30f3\u30c9","text":"<ul> <li><code>:help</code> \u2192 \u30d8\u30eb\u30d7\u3092\u8868\u793a\uff08\u82f1\u8a9e\u3060\u3051\u3069...\uff09</li> <li><code>:reset</code> \u2192 \u6700\u521d\u304b\u3089\u3084\u308a\u76f4\u3057</li> <li><code>:quit</code> \u2192 Scala\u3092\u7d42\u4e86</li> </ul>"},{"location":"part1/chapter01/#_32","title":"\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u304f\u3068\u304d\u306e\u30b3\u30c4","text":"<ol> <li> <p>\u307e\u305a\u52d5\u304f\u3082\u306e\u3092\u4f5c\u308b</p> <ul> <li>\u5b8c\u74a7\u3058\u3083\u306a\u304f\u3066\u3044\u3044</li> <li>\u5c11\u3057\u305a\u3064\u6539\u826f\u3059\u308b</li> </ul> </li> <li> <p>\u30a8\u30e9\u30fc\u3092\u6050\u308c\u306a\u3044</p> <ul> <li>\u30a8\u30e9\u30fc = \u5b66\u7fd2\u306e\u30c1\u30e3\u30f3\u30b9</li> <li>\u307f\u3093\u306a\u6700\u521d\u306f\u30a8\u30e9\u30fc\u3060\u3089\u3051</li> </ul> </li> <li> <p>\u30b3\u30d4\u30da\u3082\u6d3b\u7528</p> <ul> <li>\u6700\u521d\u306f\u4f8b\u3092\u30b3\u30d4\u30fc\u3057\u3066\u6539\u9020</li> <li>\u6163\u308c\u305f\u3089\u81ea\u5206\u3067\u66f8\u304f</li> </ul> </li> <li> <p>\u697d\u3057\u3080\u3053\u3068\u304c\u4e00\u756a\u5927\u4e8b\uff01</p> <ul> <li>\u3067\u304d\u305f\u3068\u304d\u306e\u559c\u3073\u3092\u5927\u5207\u306b</li> <li>\u5206\u304b\u3089\u306a\u3044\u3053\u3068\u304c\u3042\u3063\u3066\u5f53\u7136</li> </ul> </li> </ol> <p>\u3055\u3042\u3001\u6b21\u306e\u7ae0\u3078\u9032\u307f\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part1/chapter02/","title":"\u7b2c2\u7ae0 \u6570\u5024\u3067\u904a\u3093\u3067\u307f\u3088\u3046","text":""},{"location":"part1/chapter02/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u524d\u306e\u7ae0\u3067\u306f\u3001\u521d\u3081\u3066\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\u4eca\u5ea6\u306f\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306e\u5f97\u610f\u6280\u300c\u8a08\u7b97\u300d\u3092\u5b66\u3073\u307e\u3057\u3087\u3046\uff01</p> <p>\u96fb\u5353\u3092\u4f7f\u3063\u305f\u3053\u3068\u306f\u3042\u308a\u307e\u3059\u3088\u306d\uff1fScala\u306f\u3001\u3068\u3066\u3082\u8ce2\u3044\u96fb\u5353\u306e\u3088\u3046\u306b\u4f7f\u3048\u307e\u3059\u3002\u3057\u304b\u3082\u3001\u8a08\u7b97\u7d50\u679c\u3092\u899a\u3048\u3066\u304a\u3044\u305f\u308a\u3001\u8907\u96d1\u306a\u8a08\u7b97\u3092\u7c21\u5358\u306b\u3057\u305f\u308a\u3067\u304d\u308b\u3093\u3067\u3059\u3002</p> <p>\u3053\u306e\u7ae0\u3067\u5b66\u3076\u3053\u3068\uff1a - \ud83d\udd22 \u57fa\u672c\u7684\u306a\u8a08\u7b97\uff08\u8db3\u3057\u7b97\u3001\u5f15\u304d\u7b97\u3001\u639b\u3051\u7b97\u3001\u5272\u308a\u7b97\uff09 - \ud83d\udce6 \u8a08\u7b97\u7d50\u679c\u3092\u4fdd\u5b58\u3059\u308b\u65b9\u6cd5 - \ud83c\udfaf \u3082\u3063\u3068\u4fbf\u5229\u306a\u8a08\u7b97\u65b9\u6cd5 - \ud83d\udca1 \u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u8a08\u7b97\u3092\u6d3b\u7528\u3059\u308b\u65b9\u6cd5</p>"},{"location":"part1/chapter02/#_2","title":"\u57fa\u672c\u7684\u306a\u8a08\u7b97","text":""},{"location":"part1/chapter02/#_3","title":"\u56db\u5247\u6f14\u7b97\u3063\u3066\u4f55\uff1f","text":"<p>\u300c\u56db\u5247\u6f14\u7b97\u300d\u306f\u3001\u7b97\u6570\u3067\u7fd2\u3063\u305f4\u3064\u306e\u8a08\u7b97\u306e\u3053\u3068\u3067\u3059\uff1a - \u8db3\u3057\u7b97\uff08\u305f\u3059\uff09: + - \u5f15\u304d\u7b97\uff08\u3072\u304f\uff09: - - \u639b\u3051\u7b97\uff08\u304b\u3051\u308b\uff09: \u00d7\uff08\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f * \u3092\u4f7f\u3044\u307e\u3059\uff09 - \u5272\u308a\u7b97\uff08\u308f\u308b\uff09: \u00f7\uff08\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f / \u3092\u4f7f\u3044\u307e\u3059\uff09</p>"},{"location":"part1/chapter02/#repl","title":"REPL\u3067\u8a08\u7b97\u3057\u3066\u307f\u3088\u3046","text":"<p>\u307e\u305a\u306fREPL\u3092\u8d77\u52d5\u3057\u307e\u3057\u3087\u3046\u3002\u30bf\u30fc\u30df\u30ca\u30eb\u3067\uff1a</p> <pre><code>scala\n</code></pre> <p><code>scala&gt;</code> \u304c\u8868\u793a\u3055\u308c\u305f\u3089\u3001\u8a08\u7b97\u3067\u304d\u308b\u6e96\u5099\u5b8c\u4e86\u3067\u3059\uff01</p>"},{"location":"part1/chapter02/#-","title":"\u8db3\u3057\u7b97\uff08\u52a0\u7b97\uff09- \u30d7\u30e9\u30b9\u8a18\u53f7\u3092\u4f7f\u304a\u3046","text":"<pre><code>scala&gt; 10 + 20\nval res0: Int = 30\n</code></pre> <p>\u4f55\u304c\u8d77\u304d\u305f\u306e\uff1f 1. <code>10 + 20</code> \u3068\u5165\u529b\u3057\u305f 2. Scala\u304c\u8a08\u7b97\u3057\u3066 <code>30</code> \u3068\u3044\u3046\u7b54\u3048\u3092\u51fa\u3057\u305f 3. \u305d\u306e\u7b54\u3048\u3092 <code>res0</code> \u3068\u3044\u3046\u540d\u524d\u3067\u899a\u3048\u3066\u304f\u308c\u305f 4. <code>Int</code> \u306f\u300c\u6574\u6570\u300d\u3068\u3044\u3046\u610f\u5473\uff08Integer \u306e\u7565\uff09</p> <p>\u3082\u3046\u5c11\u3057\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>scala&gt; 123 + 456\nval res1: Int = 579\n\nscala&gt; 1 + 2 + 3 + 4 + 5  // \u4f55\u500b\u3067\u3082\u8db3\u305b\u307e\u3059\uff01\nval res2: Int = 15\n</code></pre> <p>\ud83d\udca1 \u30dd\u30a4\u30f3\u30c8\uff1a\u30b9\u30da\u30fc\u30b9\u306f\u5165\u308c\u3066\u3082\u5165\u308c\u306a\u304f\u3066\u3082\u5927\u4e08\u592b\u3067\u3059 - <code>10+20</code> \u3067\u3082OK - <code>10 + 20</code> \u3067\u3082OK\uff08\u898b\u3084\u3059\u3044\u306e\u3067\u30aa\u30b9\u30b9\u30e1\uff09</p>"},{"location":"part1/chapter02/#-_1","title":"\u5f15\u304d\u7b97\uff08\u6e1b\u7b97\uff09- \u30de\u30a4\u30ca\u30b9\u8a18\u53f7\u3092\u4f7f\u304a\u3046","text":"<pre><code>scala&gt; 100 - 30\nval res2: Int = 70\n</code></pre> <p>\u666e\u901a\u306e\u5f15\u304d\u7b97\u3067\u3059\u306d\u3002\u3067\u306f\u3001\u5c0f\u3055\u3044\u6570\u304b\u3089\u5927\u304d\u3044\u6570\u3092\u5f15\u304f\u3068\u3069\u3046\u306a\u308b\u3067\u3057\u3087\u3046\uff1f</p> <pre><code>scala&gt; 50 - 80\nval res3: Int = -30  // \u30de\u30a4\u30ca\u30b9\u306e\u7d50\u679c\u3082\u6271\u3048\u307e\u3059\n</code></pre> <p>\u30de\u30a4\u30ca\u30b9\u306e\u6570\u3082\u5927\u4e08\u592b\uff01 - <code>-30</code> \u306f\u300c\u30de\u30a4\u30ca\u30b930\u300d - \u6e29\u5ea6\u8a08\u3067\u300c\u30de\u30a4\u30ca\u30b95\u5ea6\u300d\u3068\u3044\u3046\u306e\u3068\u540c\u3058\u8003\u3048\u65b9\u3067\u3059</p> <pre><code>scala&gt; 0 - 100      // \u30bc\u30ed\u304b\u3089100\u3092\u5f15\u304f\nval res4: Int = -100\n\nscala&gt; -20 - 10     // \u30de\u30a4\u30ca\u30b9\u306e\u6570\u304b\u3089\u3082\u5f15\u3051\u308b\nval res5: Int = -30\n</code></pre>"},{"location":"part1/chapter02/#-_2","title":"\u639b\u3051\u7b97\uff08\u4e57\u7b97\uff09- \u30a2\u30b9\u30bf\u30ea\u30b9\u30af\uff08*\uff09\u3092\u4f7f\u304a\u3046","text":"<p>\u5b66\u6821\u3067\u306f\u300c\u00d7\u300d\u3092\u4f7f\u3044\u307e\u3059\u304c\u3001\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u306f <code>*</code>\uff08\u30a2\u30b9\u30bf\u30ea\u30b9\u30af\uff09\u3092\u4f7f\u3044\u307e\u3059\u3002</p> <pre><code>scala&gt; 5 * 6\nval res4: Int = 30\n</code></pre> <p>\u306a\u305c * \u3092\u4f7f\u3046\u306e\uff1f - \u30ad\u30fc\u30dc\u30fc\u30c9\u306b\u300c\u00d7\u300d\u304c\u306a\u3044\u304b\u3089 - \u4e16\u754c\u4e2d\u306e\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u304c <code>*</code> \u3092\u4f7f\u3046\u7d04\u675f\u3092\u3057\u3066\u3044\u308b\u304b\u3089</p> <pre><code>scala&gt; 12 * 12\nval res5: Int = 144\n\nscala&gt; 2 * 3 * 4    // \u9023\u7d9a\u3067\u304b\u3051\u7b97\u3082\u3067\u304d\u308b\nval res6: Int = 24\n\nscala&gt; 100 * 0      // \u30bc\u30ed\u3092\u304b\u3051\u308b\u3068...\nval res7: Int = 0   // \u3084\u3063\u3071\u308a\u30bc\u30ed\uff01\n</code></pre>"},{"location":"part1/chapter02/#-_3","title":"\u5272\u308a\u7b97\uff08\u9664\u7b97\uff09- \u30b9\u30e9\u30c3\u30b7\u30e5\uff08/\uff09\u3092\u4f7f\u304a\u3046","text":"<p>\u5272\u308a\u7b97\u306f <code>/</code>\uff08\u30b9\u30e9\u30c3\u30b7\u30e5\uff09\u3092\u4f7f\u3044\u307e\u3059\u3002</p> <pre><code>scala&gt; 20 / 4\nval res6: Int = 5\n\nscala&gt; 17 / 5\nval res7: Int = 3  // \u6574\u6570\u540c\u58eb\u306e\u5272\u308a\u7b97\u306f\u6574\u6570\u306b\u306a\u308a\u307e\u3059\uff08\u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\uff09\n</code></pre> <p>\u91cd\u8981\u306a\u6ce8\u610f\u70b9\uff1a17 \u00f7 5 = 3.4 \u3067\u3059\u304c\u3001\u7b54\u3048\u306f <code>3</code> \u306b\u306a\u308a\u307e\u3059 - \u6574\u6570\uff08Int\uff09\u540c\u58eb\u306e\u5272\u308a\u7b97\u306f\u3001\u5c0f\u6570\u70b9\u4ee5\u4e0b\u304c\u6d88\u3048\u3061\u3083\u3044\u307e\u3059 - 3.4 \u306e <code>.4</code> \u306e\u90e8\u5206\u304c\u306a\u304f\u306a\u3063\u3066 <code>3</code> \u3060\u3051\u6b8b\u308b - \u3053\u308c\u3092\u300c\u5207\u308a\u6368\u3066\u300d\u3068\u8a00\u3044\u307e\u3059</p>"},{"location":"part1/chapter02/#-_4","title":"\u4f59\u308a\u306e\u8a08\u7b97 - \u30d1\u30fc\u30bb\u30f3\u30c8\u8a18\u53f7\uff08%\uff09\u3092\u4f7f\u304a\u3046","text":"<p>\u5272\u308a\u7b97\u306e\u300c\u4f59\u308a\u300d\u3092\u77e5\u308a\u305f\u3044\u3068\u304d\u306f <code>%</code>\uff08\u30d1\u30fc\u30bb\u30f3\u30c8\u8a18\u53f7\uff09\u3092\u4f7f\u3044\u307e\u3059\u3002</p> <p>\u4f59\u308a\u3063\u3066\u4f55\uff1f \u4f8b\uff1a17\u500b\u306e\u304a\u83d3\u5b50\u30925\u4eba\u3067\u5206\u3051\u308b\u3068\u30011\u4eba3\u500b\u305a\u3064\u3082\u3089\u3048\u3066\u30012\u500b\u4f59\u308a\u307e\u3059\u3002 \u3053\u306e\u300c2\u500b\u300d\u304c\u4f59\u308a\u3067\u3059\u3002</p> <pre><code>scala&gt; 17 % 5\nval res8: Int = 2  // 17 \u00f7 5 = 3 \u4f59\u308a 2\n</code></pre> <p>\u4ed6\u306e\u4f8b\u3082\u898b\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>scala&gt; 10 % 3\nval res9: Int = 1  // 10 \u00f7 3 = 3 \u4f59\u308a 1\n// 10\u500b\u306e\u308a\u3093\u3054\u30923\u4eba\u3067\u5206\u3051\u308b\u3068\u30011\u4eba3\u500b\u30671\u500b\u4f59\u308b\n\nscala&gt; 20 % 4\nval res10: Int = 0  // 20 \u00f7 4 = 5 \u4f59\u308a 0\uff08\u5272\u308a\u5207\u308c\u308b\uff09\n// 20\u500b\u306e\u30af\u30c3\u30ad\u30fc\u30924\u4eba\u3067\u5206\u3051\u308b\u3068\u3001\u3061\u3087\u3046\u30691\u4eba5\u500b\uff08\u4f59\u308a\u306a\u3057\uff09\n</code></pre> <p>\ud83d\udca1 \u4f59\u308a\u306f\u3044\u3064\u4f7f\u3046\u306e\uff1f - \u5076\u6570\u30fb\u5947\u6570\u306e\u5224\u5b9a\uff1a<code>\u6570 % 2</code> \u304c0\u306a\u3089\u5076\u6570\u30011\u306a\u3089\u5947\u6570 - \u66dc\u65e5\u306e\u8a08\u7b97\uff1a\u65e5\u6570\u30927\u3067\u5272\u3063\u305f\u4f59\u308a\u3067\u66dc\u65e5\u304c\u308f\u304b\u308b - \u30b0\u30eb\u30fc\u30d7\u5206\u3051\uff1a\u4eba\u6570\u3092\u73ed\u306e\u6570\u3067\u5272\u3063\u305f\u4f59\u308a\u3067\u3001\u3069\u306e\u73ed\u306b\u5165\u308b\u304b\u6c7a\u3081\u308b</p>"},{"location":"part1/chapter02/#_4","title":"\u8a08\u7b97\u306e\u512a\u5148\u9806\u4f4d","text":""},{"location":"part1/chapter02/#_5","title":"\u901a\u5e38\u306e\u6570\u5b66\u3068\u540c\u3058\u30eb\u30fc\u30eb","text":"<p>\u7b97\u6570\u3067\u7fd2\u3063\u305f\u300c\u304b\u3051\u7b97\u30fb\u308f\u308a\u7b97\u306f\u3001\u305f\u3057\u7b97\u30fb\u3072\u304d\u7b97\u3088\u308a\u5148\u300d\u306e\u30eb\u30fc\u30eb\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u3082\u540c\u3058\u3067\u3059\uff01</p> <pre><code>scala&gt; 2 + 3 * 4\nval res11: Int = 14  // 3 * 4\u304c\u5148\u306b\u8a08\u7b97\u3055\u308c\u308b\uff082 + 12 = 14\uff09\n</code></pre> <p>\u8a08\u7b97\u306e\u9806\u756a\uff1a 1. \u307e\u305a <code>3 * 4 = 12</code> 2. \u6b21\u306b <code>2 + 12 = 14</code></p> <p>\u3082\u3046\u4e00\u3064\u306e\u4f8b\uff1a</p> <pre><code>scala&gt; 10 - 6 / 2\nval res12: Int = 7   // 6 / 2\u304c\u5148\u306b\u8a08\u7b97\u3055\u308c\u308b\uff0810 - 3 = 7\uff09\n</code></pre> <p>\u8a08\u7b97\u306e\u9806\u756a\uff1a 1. \u307e\u305a <code>6 / 2 = 3</code> 2. \u6b21\u306b <code>10 - 3 = 7</code></p>"},{"location":"part1/chapter02/#_6","title":"\u62ec\u5f27\u3092\u4f7f\u3063\u305f\u512a\u5148\u9806\u4f4d\u306e\u5909\u66f4","text":"<p>\u300c\u305f\u3057\u7b97\u3092\u5148\u306b\u3057\u305f\u3044\uff01\u300d\u3068\u3044\u3046\u3068\u304d\u306f\u3001\u62ec\u5f27 <code>()</code> \u3092\u4f7f\u3044\u307e\u3059\u3002</p> <pre><code>scala&gt; (2 + 3) * 4\nval res13: Int = 20  // \u62ec\u5f27\u5185\u304c\u5148\u306b\u8a08\u7b97\u3055\u308c\u308b\uff085 * 4 = 20\uff09\n</code></pre> <p>\u8a08\u7b97\u306e\u9806\u756a\uff1a 1. \u307e\u305a\u62ec\u5f27\u306e\u4e2d <code>(2 + 3) = 5</code> 2. \u6b21\u306b <code>5 * 4 = 20</code></p> <p>\u62ec\u5f27\u304c\u3042\u308b\u3068\u304d\u3068\u306a\u3044\u3068\u304d\u3092\u6bd4\u3079\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>scala&gt; 2 + 3 * 4    // \u62ec\u5f27\u306a\u3057\nval res11: Int = 14  // 2 + 12 = 14\n\nscala&gt; (2 + 3) * 4  // \u62ec\u5f27\u3042\u308a\nval res13: Int = 20  // 5 * 4 = 20\n</code></pre> <p>\u5168\u7136\u9055\u3046\u7b54\u3048\u306b\u306a\u308a\u307e\u3057\u305f\u306d\uff01</p>"},{"location":"part1/chapter02/#_7","title":"\u8907\u96d1\u306a\u8a08\u7b97\u306e\u4f8b","text":"<p>\u62ec\u5f27\u304c\u4f55\u91cd\u306b\u3082\u306a\u3063\u3066\u3044\u308b\u8a08\u7b97\u3082\u3001\u5185\u5074\u304b\u3089\u9806\u756a\u306b\u8a08\u7b97\u3057\u307e\u3059\uff1a</p> <pre><code>scala&gt; ((5 + 3) * 2 - 10) / 3\nval res15: Int = 2\n</code></pre> <p>\u8a08\u7b97\u306e\u6d41\u308c\u3092\u8ffd\u3063\u3066\u307f\u307e\u3057\u3087\u3046\uff1a <pre><code>((5 + 3) * 2 - 10) / 3\n    \u2193 \u307e\u305a\u4e00\u756a\u5185\u5074\u306e\u62ec\u5f27\n(  8    * 2 - 10) / 3\n    \u2193 \u6b21\u306b\u304b\u3051\u7b97\n(    16     - 10) / 3\n    \u2193 \u5f15\u304d\u7b97\n(        6      ) / 3\n    \u2193 \u6700\u5f8c\u306b\u5272\u308a\u7b97\n         2\n</code></pre></p> <p>\ud83d\udca1 \u30b3\u30c4\uff1a\u8907\u96d1\u306a\u8a08\u7b97\u306f\u3001\u7d19\u306b\u66f8\u3044\u3066\u9806\u756a\u3092\u78ba\u8a8d\u3059\u308b\u3068\u9593\u9055\u3048\u306b\u304f\u3044\u3067\u3059\uff01</p>"},{"location":"part1/chapter02/#_8","title":"\u5c0f\u6570\u3092\u4f7f\u3063\u305f\u8a08\u7b97","text":""},{"location":"part1/chapter02/#double","title":"Double\u578b\uff08\u5c0f\u6570\uff09\u3063\u3066\u4f55\uff1f","text":"<p>\u4eca\u307e\u3067\u4f7f\u3063\u3066\u3044\u305f <code>Int</code> \u306f\u6574\u6570\uff081, 2, 3...\uff09\u3067\u3057\u305f\u304c\u3001 <code>Double</code> \u306f\u5c0f\u6570\u70b9\u304c\u3042\u308b\u6570\uff081.5, 3.14...\uff09\u3092\u8868\u3057\u307e\u3059\u3002</p> <p>Int \u3068 Double \u306e\u9055\u3044\uff1a - <code>Int</code>\uff08Integer = \u6574\u6570\uff09: 1, 42, -100 \u306a\u3069 - <code>Double</code>\uff08\u500d\u7cbe\u5ea6\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\uff09: 3.14, 0.5, -2.7 \u306a\u3069</p> <pre><code>scala&gt; 3.14\nval res16: Double = 3.14  // \u300cDouble\u300d\u3068\u8868\u793a\u3055\u308c\u308b\uff01\n\nscala&gt; 10.5 + 2.3\nval res17: Double = 12.8\n\nscala&gt; 7.0 / 2.0\nval res18: Double = 3.5  // \u5c0f\u6570\u540c\u58eb\u306e\u5272\u308a\u7b97\u306f\u5c0f\u6570\u306b\u306a\u308b\n</code></pre> <p>\u6574\u6570\u306e\u5272\u308a\u7b97\u3068\u6bd4\u3079\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>scala&gt; 7 / 2        // \u6574\u6570\u540c\u58eb\nval res19: Int = 3   // \u5c0f\u6570\u70b9\u4ee5\u4e0b\u304c\u6d88\u3048\u308b\n\nscala&gt; 7.0 / 2.0    // \u5c0f\u6570\u540c\u58eb\nval res20: Double = 3.5  // \u3061\u3083\u3093\u30683.5\u306b\u306a\u308b\uff01\n</code></pre>"},{"location":"part1/chapter02/#_9","title":"\u6574\u6570\u3068\u5c0f\u6570\u306e\u6df7\u5728","text":"<p>\u6574\u6570\u3068\u5c0f\u6570\u3092\u4e00\u7dd2\u306b\u8a08\u7b97\u3059\u308b\u3068\u3001\u7d50\u679c\u306f\u81ea\u52d5\u7684\u306b\u5c0f\u6570\uff08Double\uff09\u306b\u306a\u308a\u307e\u3059\uff1a</p> <pre><code>scala&gt; 10 + 2.5\nval res19: Double = 12.5  // \u7d50\u679c\u306f\u81ea\u52d5\u7684\u306bDouble\u306b\u306a\u308b\n</code></pre> <p>\u306a\u305cDouble\u306b\u306a\u308b\u306e\uff1f - 10\uff08\u6574\u6570\uff09\u3068 2.5\uff08\u5c0f\u6570\uff09\u3092\u8db3\u3059\u3068 12.5 - 12.5 \u306f\u5c0f\u6570\u306a\u306e\u3067\u3001Int\u3067\u306f\u8868\u305b\u306a\u3044 - \u3060\u304b\u3089\u81ea\u52d5\u7684\u306bDouble\u306b\u306a\u308b\uff01</p> <p>\u5272\u308a\u7b97\u3067\u3082\u540c\u3058\u3067\u3059\uff1a</p> <pre><code>scala&gt; 15 / 2      // \u6574\u6570\u540c\u58eb\nval res20: Int = 7  // \u5207\u308a\u6368\u3066\u3089\u308c\u308b\n\nscala&gt; 15 / 2.0    // \u7247\u65b9\u304c\u5c0f\u6570\nval res21: Double = 7.5   // \u3061\u3083\u3093\u30687.5\u306b\u306a\u308b\uff01\n</code></pre> <p>\ud83d\udca1 \u30c6\u30af\u30cb\u30c3\u30af\uff1a\u6b63\u78ba\u306a\u5272\u308a\u7b97\u3092\u3057\u305f\u3044\u3068\u304d\u306f\u3001<code>.0</code> \u3092\u3064\u3051\u3066\u5c0f\u6570\u306b\u3057\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part1/chapter02/#_10","title":"\u5909\u6570\u3092\u4f7f\u3063\u305f\u8a08\u7b97","text":""},{"location":"part1/chapter02/#_11","title":"\u30d7\u30ed\u30b0\u30e9\u30e0\u30d5\u30a1\u30a4\u30eb\u3067\u306e\u8a08\u7b97","text":"<p>\u5b9f\u969b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u8a08\u7b97\u7d50\u679c\u3092\u5909\u6570\u306b\u4fdd\u5b58\u3057\u3066\u4f7f\u3044\u307e\u3059\u3002 \u304a\u8cb7\u3044\u7269\u306e\u8a08\u7b97\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u3087\u3046\uff01</p> <p><code>Calculator.scala</code>\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\uff1a</p> <pre><code>// Calculator.scala\n@main def calculate(): Unit = {\n  // \u5546\u54c1\u306e\u4fa1\u683c\u8a08\u7b97\n  val price = 1200        // \u5546\u54c1\u306e\u5358\u4fa1\n  val quantity = 3        // \u500b\u6570\n  val total = price * quantity\n\n  println(s\"\u5358\u4fa1: ${price}\u5186\")\n  println(s\"\u500b\u6570: ${quantity}\u500b\")\n  println(s\"\u5408\u8a08: ${total}\u5186\")\n\n  // \u6d88\u8cbb\u7a0e\u306e\u8a08\u7b97\n  val taxRate = 0.1       // \u6d88\u8cbb\u7a0e\u738710%\n  val tax = total * taxRate\n  val totalWithTax = total + tax\n\n  println(s\"\u6d88\u8cbb\u7a0e: ${tax}\u5186\")\n  println(s\"\u7a0e\u8fbc\u307f\u5408\u8a08: ${totalWithTax}\u5186\")\n}\n</code></pre> <p>\u30b3\u30fc\u30c9\u306e\u8a73\u3057\u3044\u8aac\u660e\uff1a</p> <ol> <li> <p>\u5909\u6570\u306e\u5b9a\u7fa9 <pre><code>val price = 1200        // \u300cprice\u300d\u3068\u3044\u3046\u7bb1\u306b1200\u3092\u5165\u308c\u308b\nval quantity = 3        // \u300cquantity\u300d\u3068\u3044\u3046\u7bb1\u306b3\u3092\u5165\u308c\u308b\n</code></pre></p> </li> <li> <p>\u8a08\u7b97 <pre><code>val total = price * quantity  // 1200 \u00d7 3 = 3600\n</code></pre></p> </li> <li><code>price</code> \u306e\u4e2d\u8eab\uff081200\uff09\u3068 <code>quantity</code> \u306e\u4e2d\u8eab\uff083\uff09\u3092\u304b\u3051\u7b97</li> <li> <p>\u7d50\u679c\u306e3600\u3092 <code>total</code> \u3068\u3044\u3046\u65b0\u3057\u3044\u7bb1\u306b\u5165\u308c\u308b</p> </li> <li> <p>\u6d88\u8cbb\u7a0e\u306e\u8a08\u7b97 <pre><code>val taxRate = 0.1       // 10% = 0.1\nval tax = total * taxRate  // 3600 \u00d7 0.1 = 360.0\n</code></pre></p> </li> <li> <p>\u30d1\u30fc\u30bb\u30f3\u30c8\u306f\u5c0f\u6570\u3067\u8868\u3059\uff0810% = 0.1\u30018% = 0.08\uff09</p> </li> <li> <p>\u6700\u7d42\u7684\u306a\u5408\u8a08 <pre><code>val totalWithTax = total + tax  // 3600 + 360.0 = 3960.0\n</code></pre></p> </li> </ol> <p>\u5b9f\u884c\u7d50\u679c\uff1a</p> <pre><code>\u5358\u4fa1: 1200\u5186\n\u500b\u6570: 3\u500b\n\u5408\u8a08: 3600\u5186\n\u6d88\u8cbb\u7a0e: 360.0\u5186\n\u7a0e\u8fbc\u307f\u5408\u8a08: 3960.0\u5186\n</code></pre>"},{"location":"part1/chapter02/#_12","title":"\u4fbf\u5229\u306a\u6570\u5b66\u95a2\u6570","text":""},{"location":"part1/chapter02/#math","title":"Math \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3063\u3066\u4f55\uff1f","text":"<p>Scala\u306b\u306f\u300cMath\u300d\u3068\u3044\u3046\u4fbf\u5229\u306a\u9053\u5177\u7bb1\u304c\u3042\u308a\u307e\u3059\u3002 \u96e3\u3057\u3044\u8a08\u7b97\u3092\u3084\u3063\u3066\u304f\u308c\u308b\u95a2\u6570\uff08\u6a5f\u80fd\uff09\u304c\u305f\u304f\u3055\u3093\u5165\u3063\u3066\u3044\u307e\u3059\uff01</p>"},{"location":"part1/chapter02/#_13","title":"\u3079\u304d\u4e57\uff08\u7d2f\u4e57\uff09\u306e\u8a08\u7b97","text":"<p>\u300c2\u306e3\u4e57\u300d\uff082\u00d72\u00d72\uff09\u306e\u3088\u3046\u306a\u8a08\u7b97\u3092\u300c\u3079\u304d\u4e57\u300d\u3068\u8a00\u3044\u307e\u3059\uff1a</p> <pre><code>// PowerAndSqrt.scala\n@main def mathFunctions(): Unit = {\n  // \u3079\u304d\u4e57\uff082\u306e3\u4e57\uff09\n  val power = Math.pow(2, 3)\n  println(s\"2\u306e3\u4e57 = ${power}\")\n</code></pre> <p>Math.pow \u306e\u4f7f\u3044\u65b9\uff1a - <code>Math.pow(\u57fa\u6570, \u6307\u6570)</code> - <code>Math.pow(2, 3)</code> = 2\u00b3 = 2\u00d72\u00d72 = 8 - <code>Math.pow(5, 2)</code> = 5\u00b2 = 5\u00d75 = 25</p> <p>// \u5e73\u65b9\u6839   val sqrt = Math.sqrt(16)   println(s\"16\u306e\u5e73\u65b9\u6839 = ${sqrt}\")</p> <p>// \u7d76\u5bfe\u5024   val abs1 = Math.abs(-10)   val abs2 = Math.abs(10)   println(s\"|-10| = ${abs1}\")   println(s\"|10| = ${abs2}\")</p> <p>// \u6700\u5927\u5024\u3068\u6700\u5c0f\u5024   val max = Math.max(15, 23)   val min = Math.min(15, 23)   println(s\"15\u306823\u306e\u5927\u304d\u3044\u65b9: ${max}\")   println(s\"15\u306823\u306e\u5c0f\u3055\u3044\u65b9: ${min}\") } <pre><code>\u5b9f\u884c\u7d50\u679c\uff1a\n</code></pre> 2\u306e3\u4e57 = 8.0 16\u306e\u5e73\u65b9\u6839 = 4.0 |-10| = 10 |10| = 10 15\u306823\u306e\u5927\u304d\u3044\u65b9: 23 15\u306823\u306e\u5c0f\u3055\u3044\u65b9: 15 <pre><code>### \u56db\u6368\u4e94\u5165\u3001\u5207\u308a\u4e0a\u3052\u3001\u5207\u308a\u6368\u3066\n\n```scala\n// Rounding.scala\n@main def rounding(): Unit = {\n  val number = 3.7\n\n  // \u56db\u6368\u4e94\u5165\n  val rounded = Math.round(number)\n  println(s\"${number}\u306e\u56db\u6368\u4e94\u5165: ${rounded}\")\n\n  // \u5207\u308a\u4e0a\u3052\n  val ceiling = Math.ceil(number)\n  println(s\"${number}\u306e\u5207\u308a\u4e0a\u3052: ${ceiling}\")\n\n  // \u5207\u308a\u6368\u3066\n  val floor = Math.floor(number)\n  println(s\"${number}\u306e\u5207\u308a\u6368\u3066: ${floor}\")\n\n  // \u5225\u306e\u4f8b\n  val number2 = 3.2\n  println(s\"\\n${number2}\u306e\u5834\u5408:\")\n  println(s\"\u56db\u6368\u4e94\u5165: ${Math.round(number2)}\")\n  println(s\"\u5207\u308a\u4e0a\u3052: ${Math.ceil(number2)}\")\n  println(s\"\u5207\u308a\u6368\u3066: ${Math.floor(number2)}\")\n}\n</code></pre></p> <p>\u5b9f\u884c\u7d50\u679c\uff1a</p> <pre><code>3.7\u306e\u56db\u6368\u4e94\u5165: 4\n3.7\u306e\u5207\u308a\u4e0a\u3052: 4.0\n3.7\u306e\u5207\u308a\u6368\u3066: 3.0\n\n3.2\u306e\u5834\u5408:\n\u56db\u6368\u4e94\u5165: 3\n\u5207\u308a\u4e0a\u3052: 4.0\n\u5207\u308a\u6368\u3066: 3.0\n</code></pre>"},{"location":"part1/chapter02/#_14","title":"\u5927\u304d\u306a\u6570\u5024\u306e\u6271\u3044","text":""},{"location":"part1/chapter02/#long","title":"Long\u578b\uff08\u5927\u304d\u306a\u6574\u6570\uff09","text":"<p>Int\u578b\u3067\u306f\u7d0421\u5104\u307e\u3067\u3057\u304b\u6271\u3048\u307e\u305b\u3093\u304c\u3001Long\u578b\u306a\u3089\u3082\u3063\u3068\u5927\u304d\u306a\u6570\u3092\u6271\u3048\u307e\u3059\uff1a</p> <pre><code>// BigNumbers.scala\n@main def bigNumbers(): Unit = {\n  val population = 7_800_000_000L  // \u4e16\u754c\u4eba\u53e3\uff08\u7d0478\u5104\uff09\n  val distance = 384_400L          // \u5730\u7403\u304b\u3089\u6708\u307e\u3067\u306e\u8ddd\u96e2\uff08km\uff09\n\n  println(s\"\u4e16\u754c\u4eba\u53e3: ${population}\u4eba\")\n  println(s\"\u5730\u7403\u304b\u3089\u6708\u307e\u3067: ${distance}km\")\n\n  // \u5927\u304d\u306a\u8a08\u7b97\n  val totalDistance = distance * 2  // \u5f80\u5fa9\n  println(s\"\u5730\u7403-\u6708\u5f80\u5fa9: ${totalDistance}km\")\n}\n</code></pre> <p>\u6ce8\u610f\uff1a - \u6570\u5024\u306b\u30a2\u30f3\u30c0\u30fc\u30b9\u30b3\u30a2<code>_</code>\u3092\u5165\u308c\u3066\u8aad\u307f\u3084\u3059\u304f\u3067\u304d\u307e\u3059 - Long\u578b\u306e\u6570\u5024\u306b\u306f\u6700\u5f8c\u306b<code>L</code>\u3092\u3064\u3051\u307e\u3059</p>"},{"location":"part1/chapter02/#_15","title":"\u578b\u306e\u5909\u63db","text":""},{"location":"part1/chapter02/#_16","title":"\u81ea\u52d5\u7684\u306a\u578b\u5909\u63db","text":"<pre><code>scala&gt; val intNum: Int = 10\nscala&gt; val doubleNum: Double = intNum  // Int\u304b\u3089Double\u3078\u81ea\u52d5\u5909\u63db\nval doubleNum: Double = 10.0\n</code></pre>"},{"location":"part1/chapter02/#_17","title":"\u660e\u793a\u7684\u306a\u578b\u5909\u63db","text":"<pre><code>// TypeConversion.scala\n@main def typeConversion(): Unit = {\n  val doubleValue = 3.9\n  val intValue = doubleValue.toInt  // \u5c0f\u6570\u70b9\u4ee5\u4e0b\u5207\u308a\u6368\u3066\n\n  println(s\"\u5143\u306e\u5024: ${doubleValue}\")\n  println(s\"Int\u578b\u306b\u5909\u63db: ${intValue}\")\n\n  // \u6587\u5b57\u5217\u304b\u3089\u6570\u5024\u3078\u306e\u5909\u63db\n  val str1 = \"123\"\n  val num1 = str1.toInt\n  println(s\"\\\"${str1}\\\" \u2192 ${num1}\")\n\n  val str2 = \"45.67\"\n  val num2 = str2.toDouble\n  println(s\"\\\"${str2}\\\" \u2192 ${num2}\")\n}\n</code></pre>"},{"location":"part1/chapter02/#_18","title":"\u3088\u304f\u3042\u308b\u30a8\u30e9\u30fc\u3068\u5bfe\u51e6\u6cd5","text":""},{"location":"part1/chapter02/#1","title":"\u30a8\u30e9\u30fc\u4f8b1\uff1a\u30bc\u30ed\u9664\u7b97","text":"<p>\u30bc\u30ed\u3067\u5272\u308b\u3068\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\uff1a</p> <pre><code>scala&gt; 10 / 0\njava.lang.ArithmeticException: / by zero\n</code></pre> <p>\u30a8\u30e9\u30fc\u306e\u610f\u5473\uff1a - <code>ArithmeticException</code> = \u7b97\u8853\u4f8b\u5916\uff08\u8a08\u7b97\u3067\u304d\u306a\u3044\uff01\uff09 - <code>/ by zero</code> = \u30bc\u30ed\u3067\u5272\u3063\u305f</p> <p>\u306a\u305c\u30a8\u30e9\u30fc\uff1f 10\u500b\u306e\u30ea\u30f3\u30b4\u30920\u4eba\u3067\u5206\u3051\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3088\u306d\uff1f</p> <p>\u5bfe\u51e6\u6cd5: \u5272\u308b\u524d\u306b\u30c1\u30a7\u30c3\u30af\u3059\u308b</p> <pre><code>@main def safeDivision(): Unit = {\n  val a = 10\n  val b = 0\n\n  if (b != 0) {  // b\u304c0\u3058\u3083\u306a\u3044\u3068\u304d\u3060\u3051\u5272\u308a\u7b97\u3059\u308b\n    println(s\"${a} / ${b} = ${a / b}\")\n  } else {       // b\u304c0\u306e\u3068\u304d\n    println(\"\u30a8\u30e9\u30fc: \u30bc\u30ed\u3067\u5272\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\")\n  }\n}\n</code></pre> <p>\u30dd\u30a4\u30f3\u30c8\uff1a<code>if</code> \u6587\u3092\u4f7f\u3063\u3066\u300c\u3082\u3057\uff5e\u306a\u3089\u300d\u3068\u3044\u3046\u6761\u4ef6\u3092\u4f5c\u308a\u307e\u3059\uff08\u8a73\u3057\u304f\u306f\u7b2c14\u7ae0\u3067\uff01\uff09</p>"},{"location":"part1/chapter02/#2_1","title":"\u30a8\u30e9\u30fc\u4f8b2\uff1a\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\uff08\u6841\u3042\u3075\u308c\uff09","text":"<p>Int\u578b\u306b\u306f\u300c\u6700\u5927\u5024\u300d\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u308c\u3092\u8d85\u3048\u308b\u3068\u5909\u306a\u3053\u3068\u304c\u8d77\u304d\u307e\u3059\uff1a</p> <pre><code>scala&gt; val big: Int = 2_000_000_000  // 20\u5104\nscala&gt; val result = big + big         // 20\u5104 + 20\u5104 = 40\u5104\u306e\u306f\u305a\u304c...\nval result: Int = -294967296          // \u30de\u30a4\u30ca\u30b9\u306b\u306a\u3063\u305f\uff01\uff1f\n</code></pre> <p>\u306a\u305c\u3053\u3046\u306a\u308b\u306e\uff1f Int\u578b\u306f\u7d04-21\u5104\uff5e+21\u5104\u307e\u3067\u3057\u304b\u6271\u3048\u307e\u305b\u3093\u3002 \u305d\u308c\u3092\u8d85\u3048\u308b\u3068\u300c\u4e00\u5468\u3057\u3066\u300d\u30de\u30a4\u30ca\u30b9\u304b\u3089\u59cb\u307e\u308a\u307e\u3059\u3002</p> <p>\u5bfe\u51e6\u6cd5: \u5927\u304d\u306a\u6570\u306b\u306fLong\u578b\u3092\u4f7f\u3046</p> <pre><code>val big: Long = 2_000_000_000L  // \u6700\u5f8c\u306b\u300cL\u300d\u3092\u3064\u3051\u308b\nval result = big + big           // 4000000000L\uff08\u6b63\u3057\u3044\uff01\uff09\n</code></pre> <p>\ud83d\udca1 \u8c46\u77e5\u8b58\uff1aLong\u578b\u306f\u7d04-900\u4eac\uff5e+900\u4eac\u307e\u3067\u6271\u3048\u307e\u3059\uff01</p>"},{"location":"part1/chapter02/#3","title":"\u30a8\u30e9\u30fc\u4f8b3\uff1a\u6587\u5b57\u5217\u304b\u3089\u6570\u5024\u3078\u306e\u5909\u63db\u30a8\u30e9\u30fc","text":"<p>\u6570\u5b57\u3058\u3083\u306a\u3044\u6587\u5b57\u5217\u3092\u6570\u5024\u306b\u5909\u63db\u3057\u3088\u3046\u3068\u3059\u308b\u3068\uff1a</p> <pre><code>scala&gt; \"abc\".toInt\njava.lang.NumberFormatException: For input string: \"abc\"\n</code></pre> <p>\u30a8\u30e9\u30fc\u306e\u610f\u5473\uff1a - <code>NumberFormatException</code> = \u6570\u5024\u306e\u5f62\u5f0f\u4f8b\u5916 - <code>For input string: \"abc\"</code> = \u300cabc\u300d\u3068\u3044\u3046\u6587\u5b57\u5217\u306b\u5bfe\u3057\u3066</p> <p>\u3064\u307e\u308a\uff1a\u300cabc\u300d\u3092\u6570\u5b57\u306b\u5909\u63db\u3067\u304d\u307e\u305b\u3093\uff01</p> <p>\u6b63\u3057\u3044\u4f8b\uff1a <pre><code>\"123\".toInt    // OK\uff1a123\u306b\u306a\u308b\n\"45.6\".toDouble // OK\uff1a45.6\u306b\u306a\u308b\n\"100\u5186\".toInt   // \u30a8\u30e9\u30fc\uff1a\u300c\u5186\u300d\u304c\u5165\u3063\u3066\u308b\n</code></pre></p> <p>\u5bfe\u51e6\u6cd5: \u4eca\u306f\u300c\u6570\u5b57\u3060\u3051\u306e\u6587\u5b57\u5217\u300d\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\uff08\u5f8c\u306e\u7ae0\u3067\u30a8\u30e9\u30fc\u51e6\u7406\u3092\u5b66\u3073\u307e\u3059\uff09</p>"},{"location":"part1/chapter02/#bmi","title":"\u5b9f\u8df5\u7684\u306a\u4f8b\uff1aBMI\u8a08\u7b97\u30d7\u30ed\u30b0\u30e9\u30e0","text":"<p>\u4eca\u307e\u3067\u5b66\u3093\u3060\u3053\u3068\u3092\u4f7f\u3063\u3066\u3001\u5065\u5eb7\u7ba1\u7406\u306b\u5f79\u7acb\u3064BMI\u8a08\u7b97\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u308a\u307e\u3057\u3087\u3046\uff01</p> <p>BMI\u3063\u3066\u4f55\uff1f Body Mass Index\uff08\u30dc\u30c7\u30a3\u30fb\u30de\u30b9\u6307\u6570\uff09\u306e\u7565\u3067\u3001\u8eab\u9577\u3068\u4f53\u91cd\u304b\u3089\u8a08\u7b97\u3059\u308b\u80a5\u6e80\u5ea6\u306e\u6307\u6a19\u3067\u3059\u3002</p> <pre><code>// BMICalculator.scala\n@main def calculateBMI(): Unit = {\n  // \u8eab\u9577\u3068\u4f53\u91cd\u306e\u8a2d\u5b9a\n  val heightCm = 170.0    // \u8eab\u9577\uff08\u30bb\u30f3\u30c1\u30e1\u30fc\u30c8\u30eb\uff09\n  val weight = 65.0       // \u4f53\u91cd\uff08\u30ad\u30ed\u30b0\u30e9\u30e0\uff09\n\n  // BMI\u306e\u8a08\u7b97\n  // BMI = \u4f53\u91cd(kg) \u00f7 \u8eab\u9577(m) \u00f7 \u8eab\u9577(m)\n  val heightM = heightCm / 100.0  // cm\u3092m\u306b\u5909\u63db\uff08170cm \u2192 1.7m\uff09\n  val bmi = weight / (heightM * heightM)\n\n  // \u7d50\u679c\u306e\u8868\u793a\n  println(\"=== BMI\u8a08\u7b97\u7d50\u679c ===\")\n  println(s\"\u8eab\u9577: ${heightCm}cm\")\n  println(s\"\u4f53\u91cd: ${weight}kg\")\n  println(s\"BMI: ${Math.round(bmi * 10) / 10.0}\")  // \u5c0f\u6570\u7b2c1\u4f4d\u307e\u3067\u8868\u793a\n\n  // BMI\u306e\u5224\u5b9a\uff08\u7c21\u6613\u7248\uff09\n  if (bmi &lt; 18.5) {\n    println(\"\u5224\u5b9a: \u3084\u305b\u578b\")\n  } else if (bmi &lt; 25) {\n    println(\"\u5224\u5b9a: \u6a19\u6e96\")\n  } else {\n    println(\"\u5224\u5b9a: \u80a5\u6e80\")\n  }\n}\n</code></pre> <p>\u30b3\u30fc\u30c9\u306e\u8a73\u3057\u3044\u8aac\u660e\uff1a</p> <ol> <li>\u5c0f\u6570\u7b2c1\u4f4d\u307e\u3067\u8868\u793a\u3059\u308b\u30c6\u30af\u30cb\u30c3\u30af <pre><code>Math.round(bmi * 10) / 10.0\n</code></pre></li> <li>\u4f8b\uff1abmi = 22.4567 \u306e\u5834\u5408</li> <li>22.4567 \u00d7 10 = 224.567</li> <li>Math.round(224.567) = 225</li> <li> <p>225 \u00f7 10.0 = 22.5</p> </li> <li> <p>if-else if-else \u306e\u4f7f\u3044\u65b9</p> </li> <li>\u6700\u521d\u306e\u6761\u4ef6\u304b\u3089\u9806\u756a\u306b\u30c1\u30a7\u30c3\u30af</li> <li>\u3069\u308c\u304b\u4e00\u3064\u306b\u5f53\u3066\u306f\u307e\u3063\u305f\u3089\u3001\u305d\u3053\u3067\u7d42\u4e86</li> </ol> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>=== BMI\u8a08\u7b97\u7d50\u679c ===\n\u8eab\u9577: 170.0cm\n\u4f53\u91cd: 65.0kg\nBMI: 22.5\n\u5224\u5b9a: \u6a19\u6e96\n</code></pre></p>"},{"location":"part1/chapter02/#_19","title":"\u7df4\u7fd2\u554f\u984c","text":""},{"location":"part1/chapter02/#1_1","title":"\u554f\u984c1\uff1a\u6e29\u5ea6\u5909\u63db","text":"<p>\u6442\u6c0f\u6e29\u5ea6\u3092\u83ef\u6c0f\u6e29\u5ea6\u306b\u5909\u63db\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\u3002 - \u5909\u63db\u5f0f\uff1a\u83ef\u6c0f = \u6442\u6c0f \u00d7 9/5 + 32 - \u6442\u6c0f20\u5ea6\u306e\u5834\u5408\u306e\u83ef\u6c0f\u6e29\u5ea6\u3092\u8868\u793a</p>"},{"location":"part1/chapter02/#2_2","title":"\u554f\u984c2\uff1a\u5186\u306e\u8a08\u7b97","text":"<p>\u534a\u5f8410\u306e\u5186\u306b\u3064\u3044\u3066\u3001\u4ee5\u4e0b\u3092\u8a08\u7b97\u3057\u3066\u8868\u793a\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - \u5186\u5468\uff082 \u00d7 \u03c0 \u00d7 \u534a\u5f84\uff09 - \u9762\u7a4d\uff08\u03c0 \u00d7 \u534a\u5f84\u00b2\uff09 - \u03c0\u306b\u306f<code>Math.PI</code>\u3092\u4f7f\u7528</p>"},{"location":"part1/chapter02/#3_1","title":"\u554f\u984c3\uff1a\u304a\u3064\u308a\u306e\u8a08\u7b97","text":"<p>1000\u5186\u672d\u3067678\u5186\u306e\u8cb7\u3044\u7269\u3092\u3057\u305f\u6642\u306e\u304a\u3064\u308a\u3092\u8a08\u7b97\u3057\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8868\u793a\u3057\u3066\u304f\u3060\u3055\u3044\uff1a <pre><code>\u652f\u6255\u3044: 1000\u5186\n\u8cfc\u5165\u91d1\u984d: 678\u5186\n\u304a\u3064\u308a: 322\u5186\n</code></pre></p>"},{"location":"part1/chapter02/#4","title":"\u554f\u984c4\uff1a\u5272\u308a\u52d8\u8a08\u7b97","text":"<p>\u5408\u8a08\u91d1\u984d4980\u5186\u30923\u4eba\u3067\u5272\u308a\u52d8\u3059\u308b\u5834\u5408\uff1a - \u4e00\u4eba\u3042\u305f\u308a\u306e\u91d1\u984d\uff081\u5186\u672a\u6e80\u5207\u308a\u4e0a\u3052\uff09 - \u5408\u8a08\u3067\u96c6\u3081\u308b\u91d1\u984d - \u4f59\u308b\u91d1\u984d</p>"},{"location":"part1/chapter02/#5","title":"\u554f\u984c5\uff1a\u30a8\u30e9\u30fc\u3092\u4fee\u6b63","text":"<p>\u4ee5\u4e0b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30a8\u30e9\u30fc\u3092\u4fee\u6b63\u3057\u3066\u304f\u3060\u3055\u3044\uff1a</p> <pre><code>@main def broken(): Unit = {\n  val x = 10\n  val y = 3.5\n  val result = x / 0\n  println(s\"\u7d50\u679c: ${result}\")\n}\n</code></pre>"},{"location":"part1/chapter02/#_20","title":"\u307e\u3068\u3081","text":"<p>\u3053\u306e\u7ae0\u3067\u306f\u4ee5\u4e0b\u306e\u3053\u3068\u3092\u5b66\u3073\u307e\u3057\u305f\uff1a</p> <ol> <li> <p>\u57fa\u672c\u7684\u306a\u56db\u5247\u6f14\u7b97</p> <ul> <li>\u8db3\u3057\u7b97\u3001\u5f15\u304d\u7b97\u3001\u639b\u3051\u7b97\u3001\u5272\u308a\u7b97</li> <li>\u4f59\u308a\u306e\u8a08\u7b97\uff08<code>%</code>\uff09</li> </ul> </li> <li> <p>\u8a08\u7b97\u306e\u512a\u5148\u9806\u4f4d</p> <ul> <li>\u901a\u5e38\u306e\u6570\u5b66\u3068\u540c\u3058\u30eb\u30fc\u30eb</li> <li>\u62ec\u5f27\u306b\u3088\u308b\u512a\u5148\u9806\u4f4d\u306e\u5909\u66f4</li> </ul> </li> <li> <p>\u6570\u5024\u306e\u578b</p> <ul> <li>Int\u578b\uff08\u6574\u6570\uff09</li> <li>Double\u578b\uff08\u5c0f\u6570\uff09</li> <li>Long\u578b\uff08\u5927\u304d\u306a\u6574\u6570\uff09</li> </ul> </li> <li> <p>\u4fbf\u5229\u306a\u6570\u5b66\u95a2\u6570</p> <ul> <li>Math.pow\uff08\u3079\u304d\u4e57\uff09</li> <li>Math.sqrt\uff08\u5e73\u65b9\u6839\uff09</li> <li>Math.round\uff08\u56db\u6368\u4e94\u5165\uff09</li> </ul> </li> <li> <p>\u578b\u306e\u5909\u63db</p> <ul> <li>\u81ea\u52d5\u5909\u63db\u3068\u660e\u793a\u7684\u306a\u5909\u63db</li> <li>\u6587\u5b57\u5217\u304b\u3089\u6570\u5024\u3078\u306e\u5909\u63db</li> </ul> </li> </ol> <p>\u6b21\u306e\u7ae0\u3067\u306f\u3001\u5024\u3068\u5909\u6570\u306b\u3064\u3044\u3066\u3088\u308a\u8a73\u3057\u304f\u5b66\u3073\u307e\u3059\u3002\u5909\u6570\u306e\u547d\u540d\u898f\u5247\u3084\u3001\u5024\u3092\u5909\u66f4\u3067\u304d\u308b\u5909\u6570\u3068\u5909\u66f4\u3067\u304d\u306a\u3044\u5909\u6570\u306e\u9055\u3044\u306a\u3069\u3092\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part1/chapter02/#_21","title":"\u88dc\u8db3\uff1a\u6570\u5024\u30ea\u30c6\u30e9\u30eb\u306e\u8868\u8a18\u6cd5","text":"<p>Scala\u3067\u306f\u6570\u5024\u3092\u898b\u3084\u3059\u304f\u66f8\u304f\u305f\u3081\u306e\u5de5\u592b\u304c\u3042\u308a\u307e\u3059\uff1a</p> <pre><code>// \u30a2\u30f3\u30c0\u30fc\u30b9\u30b3\u30a2\u3067\u533a\u5207\u308b\nval million = 1_000_000\nval binary = 0b1010_1010  // 2\u9032\u6570\nval hex = 0xFF_FF        // 16\u9032\u6570\n\n// \u6307\u6570\u8868\u8a18\nval scientific = 1.23e4   // 1.23 \u00d7 10^4 = 12300.0\nval tiny = 1.5e-3        // 1.5 \u00d7 10^-3 = 0.0015\n</code></pre>"},{"location":"part2/chapter03/","title":"\u7b2c3\u7ae0 \u5024\u3068\u5909\u6570\u306e\u57fa\u672c","text":""},{"location":"part2/chapter03/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u524d\u306e\u7ae0\u3067\u306f\u3001\u8a08\u7b97\u7d50\u679c\u3092 <code>val</code> \u3067\u4fdd\u5b58\u3057\u307e\u3057\u305f\u306d\u3002\u4eca\u5ea6\u306f\u3001\u3053\u306e\u300c\u30c7\u30fc\u30bf\u3092\u4fdd\u5b58\u3059\u308b\u65b9\u6cd5\u300d\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u5b66\u3073\u307e\u3057\u3087\u3046\uff01</p> <p>\u5909\u6570\u3063\u3066\u4f55\uff1f \u5909\u6570\u306f\u30c7\u30fc\u30bf\u3092\u5165\u308c\u308b\u300c\u540d\u524d\u4ed8\u304d\u306e\u7bb1\u300d\u3067\u3059\u3002</p> <p>\u4f8b\u3048\u3070\u3001\u304a\u5f01\u5f53\u7bb1\u3092\u60f3\u50cf\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - \ud83c\udf71 \u300c\u304a\u304b\u305a\u300d\u3068\u3044\u3046\u7bb1 \u2192 \u300c\u30cf\u30f3\u30d0\u30fc\u30b0\u300d\u304c\u5165\u3063\u3066\u3044\u308b - \ud83c\udf59 \u300c\u3054\u306f\u3093\u300d\u3068\u3044\u3046\u7bb1 \u2192 \u300c\u767d\u7c73\u300d\u304c\u5165\u3063\u3066\u3044\u308b - \ud83e\udd64 \u300c\u98f2\u307f\u7269\u300d\u3068\u3044\u3046\u7bb1 \u2192 \u300c\u304a\u8336\u300d\u304c\u5165\u3063\u3066\u3044\u308b</p> <p>\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u3082\u540c\u3058\u3067\u3059\uff1a <pre><code>val \u304a\u304b\u305a = \"\u30cf\u30f3\u30d0\u30fc\u30b0\"\nval \u3054\u306f\u3093 = \"\u767d\u7c73\"\nval \u98f2\u307f\u7269 = \"\u304a\u8336\"\n</code></pre></p>"},{"location":"part2/chapter03/#valvar","title":"\u5024\uff08val\uff09\u3068\u5909\u6570\uff08var\uff09","text":"<p>Scala\u306b\u306f\u3001\u30c7\u30fc\u30bf\u3092\u4fdd\u5b58\u3059\u308b\u65b9\u6cd5\u304c2\u3064\u3042\u308a\u307e\u3059\uff1a</p>"},{"location":"part2/chapter03/#val-","title":"\ud83d\udd12 val\uff08\u30d0\u30eb\uff09- \u9375\u4ed8\u304d\u306e\u7bb1","text":"<p>\u4e00\u5ea6\u5165\u308c\u305f\u3089\u3001\u4e2d\u8eab\u3092\u5909\u3048\u3089\u308c\u306a\u3044\u7bb1</p>"},{"location":"part2/chapter03/#var-","title":"\ud83d\udd13 var\uff08\u30d0\u30fc\uff09- \u9375\u306a\u3057\u306e\u7bb1","text":"<p>\u4f55\u5ea6\u3067\u3082\u4e2d\u8eab\u3092\u5165\u308c\u66ff\u3048\u3089\u308c\u308b\u7bb1</p> <p>\u899a\u3048\u65b9\u306e\u30b3\u30c4\uff1a - value\uff08\u5024\uff09\u306e\u7565 \u2192 \u5909\u3048\u3089\u308c\u306a\u3044 - variable\uff08\u5909\u6570\uff09\u306e\u7565 \u2192 \u5909\u3048\u3089\u308c\u308b</p>"},{"location":"part2/chapter03/#val-_1","title":"val - \u5909\u66f4\u3067\u304d\u306a\u3044\u5024","text":"<pre><code>// ValExample.scala\n@main def valExample(): Unit = {\n  val name = \"\u592a\u90ce\"     // \u300cname\u300d\u3068\u3044\u3046\u7bb1\u306b\u300c\u592a\u90ce\u300d\u3092\u5165\u308c\u308b\n  val age = 20          // \u300cage\u300d\u3068\u3044\u3046\u7bb1\u306b\u300c20\u300d\u3092\u5165\u308c\u308b\n\n  println(s\"\u540d\u524d: ${name}\")\n  println(s\"\u5e74\u9f62: ${age}\")\n\n  // val \u306f\u5909\u66f4\u3067\u304d\u307e\u305b\u3093\n  // name = \"\u6b21\u90ce\"  // \u3053\u308c\u306f\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\uff01\n}\n</code></pre> <p>\u30a8\u30e9\u30fc\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff1a <pre><code>@main def valError(): Unit = {\n  val favoriteFood = \"\u30e9\u30fc\u30e1\u30f3\"\n  println(s\"\u597d\u304d\u306a\u98df\u3079\u7269: ${favoriteFood}\")\n\n  // \u6c17\u304c\u5909\u308f\u3063\u3066\u30ab\u30ec\u30fc\u306b\u3057\u305f\u3044\uff01\n  favoriteFood = \"\u30ab\u30ec\u30fc\"  // \u30a8\u30e9\u30fc\uff01\n}\n</code></pre></p> <p>\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\uff1a <pre><code>error: reassignment to val\n</code></pre></p> <p>\u610f\u5473\uff1a\u300cval\u306b\u518d\u4ee3\u5165\u3057\u3088\u3046\u3068\u3057\u3066\u308b\u3088\uff01\u300d</p> <p>\ud83d\udca1 \u30dd\u30a4\u30f3\u30c8\uff1a<code>val</code> \u306f\u300c\u6c7a\u3081\u305f\u3089\u5909\u3048\u306a\u3044\u300d\u3068\u3044\u3046\u7d04\u675f\u3067\u3059</p>"},{"location":"part2/chapter03/#var-_1","title":"var - \u5909\u66f4\u53ef\u80fd\u306a\u5909\u6570","text":"<pre><code>// VarExample.scala\n@main def varExample(): Unit = {\n  var count = 0\n  println(s\"\u6700\u521d\u306ecount: ${count}\")\n\n  count = 5              // \u7bb1\u306e\u4e2d\u8eab\u30920\u304b\u30895\u306b\u5909\u3048\u308b\n  println(s\"\u5909\u66f4\u5f8c\u306ecount: ${count}\")\n\n  count = count + 1      // \u4eca\u306e\u5024\uff085\uff09\u306b1\u3092\u8db3\u3057\u3066\u3001\u7bb1\u306b\u623b\u3059\n  println(s\"1\u5897\u3084\u3057\u305f\u5f8c\u306ecount: ${count}\")\n}\n</code></pre> <p>\u52d5\u304d\u3092\u8ffd\u3063\u3066\u307f\u307e\u3057\u3087\u3046\uff1a 1. <code>var count = 0</code> \u2192 count\u306e\u7bb1\u306b0\u3092\u5165\u308c\u308b 2. <code>count = 5</code> \u2192 count\u306e\u7bb1\u306e\u4e2d\u8eab\u30920\u304b\u30895\u306b\u5909\u3048\u308b 3. <code>count = count + 1</code> \u2192     - \u307e\u305acount\u306e\u5024\uff085\uff09\u3092\u53d6\u308a\u51fa\u3059    - 5 + 1 = 6 \u3092\u8a08\u7b97    - 6\u3092count\u306e\u7bb1\u306b\u623b\u3059</p> <p>\u5b9f\u884c\u7d50\u679c\uff1a <pre><code>\u6700\u521d\u306ecount: 0\n\u5909\u66f4\u5f8c\u306ecount: 5\n1\u5897\u3084\u3057\u305f\u5f8c\u306ecount: 6\n</code></pre></p> <p>\u4fbf\u5229\u306a\u66f8\u304d\u65b9\uff1a <pre><code>var score = 100\nscore += 10    // score = score + 10 \u3068\u540c\u3058\nscore -= 5     // score = score - 5 \u3068\u540c\u3058\nscore *= 2     // score = score * 2 \u3068\u540c\u3058\n</code></pre></p>"},{"location":"part2/chapter03/#val","title":"\u306a\u305cval\u3092\u4f7f\u3046\u306e\u304b\uff1f","text":""},{"location":"part2/chapter03/#val_1","title":"val\u306e\u5229\u70b9\u3092\u5b9f\u4f8b\u3067\u7406\u89e3\u3057\u3088\u3046","text":"<p>\u304a\u8cb7\u3044\u7269\u306e\u8a08\u7b97\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\uff1a</p> <pre><code>// WhyVal.scala\n@main def whyVal(): Unit = {\n  // \u5546\u54c1\u306e\u4fa1\u683c\u8a08\u7b97\n  val basePrice = 1000      // \u5b9a\u4fa1\u306f\u5909\u308f\u3089\u306a\u3044\n  val taxRate = 0.1         // \u7a0e\u7387\u3082\u5909\u308f\u3089\u306a\u3044\n  val discount = 100        // \u5272\u5f15\u984d\u3082\u6c7a\u307e\u3063\u3066\u3044\u308b\n\n  // \u8a08\u7b97\u904e\u7a0b\u304c\u660e\u78ba\n  val priceAfterDiscount = basePrice - discount    // 1000 - 100 = 900\n  val tax = priceAfterDiscount * taxRate           // 900 * 0.1 = 90\n  val finalPrice = priceAfterDiscount + tax        // 900 + 90 = 990\n\n  println(s\"\u5b9a\u4fa1: ${basePrice}\u5186\")\n  println(s\"\u5272\u5f15: ${discount}\u5186\")\n  println(s\"\u5272\u5f15\u5f8c: ${priceAfterDiscount}\u5186\")\n  println(s\"\u7a0e\u984d: ${tax}\u5186\")\n  println(s\"\u6700\u7d42\u4fa1\u683c: ${finalPrice}\u5186\")\n}\n</code></pre> <p>val\u3092\u4f7f\u3046\u30e1\u30ea\u30c3\u30c8\uff1a</p>"},{"location":"part2/chapter03/#1","title":"1\ufe0f\u20e3 \u30d0\u30b0\u304c\u5c11\u306a\u3044","text":"<pre><code>// \u60aa\u3044\u4f8b\uff08var\u3092\u4f7f\u3063\u305f\u5834\u5408\uff09\nvar price = 1000\nprice = price - 100   // \u5272\u5f15\n// ... \u305f\u304f\u3055\u3093\u306e\u30b3\u30fc\u30c9 ...\nprice = 2000         // \u3046\u3063\u304b\u308a\u5024\u3092\u5909\u3048\u3066\u3057\u307e\u3063\u305f\uff01\n// ... \u3055\u3089\u306b\u30b3\u30fc\u30c9 ...\nval tax = price * 0.1 // \u3042\u308c\uff1fprice\u306f\u4eca\u3044\u304f\u3089\uff1f\n</code></pre>"},{"location":"part2/chapter03/#2","title":"2\ufe0f\u20e3 \u8aad\u307f\u3084\u3059\u3044","text":"<pre><code>// val\u3092\u4f7f\u3046\u3068\u3001\u305d\u308c\u305e\u308c\u306e\u5024\u306e\u610f\u5473\u304c\u660e\u78ba\nval originalPrice = 1000\nval memberDiscount = 100\nval finalPrice = originalPrice - memberDiscount\n// finalPrice\u306f\u3053\u3053\u3067\u6c7a\u307e\u308a\u3001\u3082\u3046\u5909\u308f\u3089\u306a\u3044\uff01\n</code></pre>"},{"location":"part2/chapter03/#3_1","title":"3\ufe0f\u20e3 \u4e26\u884c\u51e6\u7406\u306b\u5f37\u3044\uff08\u3061\u3087\u3063\u3068\u96e3\u3057\u3044\u8a71\uff09","text":"<p>\u8907\u6570\u306e\u51e6\u7406\u304c\u540c\u6642\u306b\u52d5\u3044\u3066\u3082\u3001val\u306a\u3089\u5024\u304c\u5909\u308f\u3089\u306a\u3044\u306e\u3067\u5b89\u5fc3\uff01</p>"},{"location":"part2/chapter03/#var","title":"var\u304c\u5fc5\u8981\u306a\u5834\u9762","text":"<p>\u3067\u306f\u3001var\u306f\u3069\u3093\u306a\u3068\u304d\u306b\u4f7f\u3046\u306e\u3067\u3057\u3087\u3046\u304b\uff1f</p> <pre><code>// WhenToUseVar.scala\n@main def whenToUseVar(): Unit = {\n  // \ud83c\udfae \u30b2\u30fc\u30e0\u306e\u30b9\u30b3\u30a2\u306e\u3088\u3046\u306b\u3001\u5024\u304c\u5897\u3048\u3066\u3044\u304f\u3082\u306e\n  var total = 0\n\n  println(\"\u6570\u5024\u3092\u8db3\u3057\u3066\u3044\u304d\u307e\u3059\")\n\n  total = total + 10\n  println(s\"10\u3092\u8db3\u3057\u3066: ${total}\")\n\n  total = total + 20\n  println(s\"20\u3092\u8db3\u3057\u3066: ${total}\")\n\n  total = total + 30\n  println(s\"30\u3092\u8db3\u3057\u3066: ${total}\")\n}\n</code></pre> <p>var\u304c\u9069\u3057\u3044\u30b1\u30fc\u30b9\uff1a 1. \ud83d\udd04 \u30eb\u30fc\u30d7\u3067\u5024\u3092\u66f4\u65b0\uff08\u5f8c\u306e\u7ae0\u3067\u5b66\u3073\u307e\u3059\uff09 2. \ud83c\udfae \u30b2\u30fc\u30e0\u306e\u30b9\u30b3\u30a2\u3084HP 3. \ud83d\udd22 \u30ab\u30a6\u30f3\u30bf\u30fc 4. \ud83d\udcc8 \u7d2f\u7a4d\u5024\u306e\u8a08\u7b97   total = total + 30   println(s\"30\u3092\u8db3\u3057\u3066: ${total}\")</p> <p>println(s\"\u5408\u8a08: ${total}\") <pre><code>## \u5909\u6570\u306e\u547d\u540d\u898f\u5247\n\n### \u57fa\u672c\u7684\u306a\u30eb\u30fc\u30eb\n\n```scala\n// NamingRules.scala\n@main def namingRules(): Unit = {\n  // \u826f\u3044\u5909\u6570\u540d\u306e\u4f8b\n  val firstName = \"\u592a\u90ce\"       // \u30ad\u30e3\u30e1\u30eb\u30b1\u30fc\u30b9\uff08\u63a8\u5968\uff09\n  val lastName = \"\u5c71\u7530\"\n  val userAge = 25\n  val isStudent = true\n\n  // \u6570\u5b57\u304b\u3089\u59cb\u307e\u308b\u5909\u6570\u540d\u306f\u30a8\u30e9\u30fc\n  // val 1stName = \"\u592a\u90ce\"  // \u30a8\u30e9\u30fc\uff01\n\n  // \u30a2\u30f3\u30c0\u30fc\u30b9\u30b3\u30a2\u306f\u4f7f\u3048\u308b\n  val user_name = \"\u82b1\u5b50\"\n  val MAX_SIZE = 100\n\n  // \u65e5\u672c\u8a9e\u3082\u4f7f\u3048\u308b\uff08\u975e\u63a8\u5968\uff09\n  val \u540d\u524d = \"\u592a\u90ce\"\n  println(s\"\u540d\u524d: ${\u540d\u524d}\")\n}\n</code></pre></p>"},{"location":"part2/chapter03/#_2","title":"\u547d\u540d\u306e\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9","text":"<pre><code>// GoodNaming.scala\n@main def goodNaming(): Unit = {\n  // \u610f\u5473\u306e\u3042\u308b\u540d\u524d\u3092\u4f7f\u3046\n  val totalPrice = 1500      // \u826f\u3044: \u4f55\u306e\u5024\u304b\u5206\u304b\u308b\n  val tp = 1500              // \u60aa\u3044: \u610f\u5473\u304c\u4e0d\u660e\n\n  // \u9069\u5207\u306a\u9577\u3055\n  val age = 20                                        // \u826f\u3044\n  val userAgeInYearsAsInteger = 20                  // \u60aa\u3044: \u9577\u3059\u304e\u308b\n\n  // \u4e00\u8cab\u6027\u306e\u3042\u308b\u547d\u540d\n  val userName = \"\u592a\u90ce\"       // \u30ad\u30e3\u30e1\u30eb\u30b1\u30fc\u30b9\n  val userEmail = \"taro@example.com\"\n  val userPhone = \"090-1234-5678\"\n}\n</code></pre>"},{"location":"part2/chapter03/#_3","title":"\u578b\u306e\u660e\u793a\u7684\u306a\u6307\u5b9a","text":""},{"location":"part2/chapter03/#_4","title":"\u578b\u63a8\u8ad6","text":"<p>Scala\u306f\u8ce2\u3044\u306e\u3067\u3001\u591a\u304f\u306e\u5834\u5408\u3001\u578b\u3092\u81ea\u52d5\u7684\u306b\u5224\u65ad\u3057\u3066\u304f\u308c\u307e\u3059\uff1a</p> <pre><code>// TypeInference.scala\n@main def typeInference(): Unit = {\n  val number = 42           // Scala\u304c\u81ea\u52d5\u7684\u306bInt\u3068\u5224\u65ad\n  val decimal = 3.14        // Double\u3068\u5224\u65ad\n  val text = \"Hello\"        // String\u3068\u5224\u65ad\n  val flag = true           // Boolean\u3068\u5224\u65ad\n\n  println(s\"number is ${number.getClass.getSimpleName}\")\n  println(s\"decimal is ${decimal.getClass.getSimpleName}\")\n  println(s\"text is ${text.getClass.getSimpleName}\")\n  println(s\"flag is ${flag.getClass.getSimpleName}\")\n}\n</code></pre>"},{"location":"part2/chapter03/#_5","title":"\u578b\u3092\u660e\u793a\u7684\u306b\u66f8\u304f","text":"<p>\u6642\u306b\u306f\u578b\u3092\u660e\u793a\u7684\u306b\u66f8\u3044\u305f\u65b9\u304c\u826f\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059\uff1a</p> <pre><code>// ExplicitTypes.scala\n@main def explicitTypes(): Unit = {\n  // \u578b\u3092\u660e\u793a\u7684\u306b\u6307\u5b9a\n  val count: Int = 10\n  val price: Double = 99.99\n  val name: String = \"\u5546\u54c1A\"\n  val available: Boolean = true\n\n  // \u578b\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u610f\u56f3\u3092\u660e\u78ba\u306b\u3067\u304d\u308b\n  val age: Int = 25          // \u5e74\u9f62\u306f\u6574\u6570\n  val weight: Double = 65.5  // \u4f53\u91cd\u306f\u5c0f\u6570\u3092\u542b\u3080\n\n  // \u578b\u304c\u5408\u308f\u306a\u3044\u5834\u5408\u306f\u30a8\u30e9\u30fc\n  // val wrong: Int = 3.14   // \u30a8\u30e9\u30fc\uff01Double\u3092Int\u306b\u5165\u308c\u3089\u308c\u306a\u3044\n}\n</code></pre>"},{"location":"part2/chapter03/#_6","title":"\u5b9a\u6570\u306e\u6271\u3044","text":""},{"location":"part2/chapter03/#_7","title":"\u5927\u6587\u5b57\u306e\u5b9a\u6570","text":"<p>\u6163\u7fd2\u3068\u3057\u3066\u3001\u5909\u66f4\u3055\u308c\u306a\u3044\u5b9a\u6570\u306f\u5927\u6587\u5b57\u3067\u66f8\u304d\u307e\u3059\uff1a</p> <pre><code>// Constants.scala\n@main def constants(): Unit = {\n  // \u5b9a\u6570\u306f\u5927\u6587\u5b57\u3068\u30a2\u30f3\u30c0\u30fc\u30b9\u30b3\u30a2\u3067\u547d\u540d\n  val MAX_USERS = 1000\n  val MIN_AGE = 18\n  val DEFAULT_TIMEOUT = 30\n  val PI = 3.14159\n\n  println(s\"\u6700\u5927\u30e6\u30fc\u30b6\u30fc\u6570: ${MAX_USERS}\")\n  println(s\"\u6700\u5c0f\u5e74\u9f62: ${MIN_AGE}\")\n  println(s\"\u30c7\u30d5\u30a9\u30eb\u30c8\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8: ${DEFAULT_TIMEOUT}\u79d2\")\n\n  // \u8a08\u7b97\u3067\u4f7f\u7528\n  val radius = 10\n  val circumference = 2 * PI * radius\n  println(s\"\u534a\u5f84${radius}\u306e\u5186\u5468: ${circumference}\")\n}\n</code></pre>"},{"location":"part2/chapter03/#_8","title":"\u30b9\u30b3\u30fc\u30d7\uff08\u5909\u6570\u306e\u6709\u52b9\u7bc4\u56f2\uff09","text":""},{"location":"part2/chapter03/#_9","title":"\u30d6\u30ed\u30c3\u30af\u30b9\u30b3\u30fc\u30d7","text":"<pre><code>// Scope.scala\n@main def scopeExample(): Unit = {\n  val outer = \"\u5916\u5074\u306e\u5909\u6570\"\n\n  // \u65b0\u3057\u3044\u30d6\u30ed\u30c3\u30af\n  {\n    val inner = \"\u5185\u5074\u306e\u5909\u6570\"\n    println(outer)  // \u5916\u5074\u306e\u5909\u6570\u306f\u898b\u3048\u308b\n    println(inner)  // \u5185\u5074\u306e\u5909\u6570\u3082\u898b\u3048\u308b\n  }\n\n  println(outer)  // \u5916\u5074\u306e\u5909\u6570\u306f\u898b\u3048\u308b\n  // println(inner)  // \u30a8\u30e9\u30fc\uff01\u5185\u5074\u306e\u5909\u6570\u306f\u898b\u3048\u306a\u3044\n\n  // if\u6587\u306e\u30b9\u30b3\u30fc\u30d7\n  val score = 85\n  if (score &gt;= 80) {\n    val grade = \"A\"\n    println(s\"\u6210\u7e3e: ${grade}\")\n  }\n  // println(grade)  // \u30a8\u30e9\u30fc\uff01if\u6587\u306e\u5916\u3067\u306f\u898b\u3048\u306a\u3044\n}\n</code></pre>"},{"location":"part2/chapter03/#_10","title":"\u30b7\u30e3\u30c9\u30fc\u30a4\u30f3\u30b0\uff08\u5909\u6570\u306e\u96a0\u853d\uff09","text":"<pre><code>// Shadowing.scala\n@main def shadowingExample(): Unit = {\n  val x = 10\n  println(s\"\u5916\u5074\u306ex: ${x}\")\n\n  {\n    val x = 20  // \u5185\u5074\u3067\u540c\u3058\u540d\u524d\u306e\u5909\u6570\u3092\u5b9a\u7fa9\n    println(s\"\u5185\u5074\u306ex: ${x}\")\n  }\n\n  println(s\"\u5916\u5074\u306ex\u306f\u5909\u308f\u3089\u306a\u3044: ${x}\")\n}\n</code></pre>"},{"location":"part2/chapter03/#_11","title":"\u5b9f\u8df5\u7684\u306a\u4f8b\uff1a\u8cb7\u3044\u7269\u30ea\u30b9\u30c8","text":"<pre><code>// ShoppingList.scala\n@main def shoppingList(): Unit = {\n  // \u5546\u54c1\u60c5\u5831\n  val item1Name = \"\u308a\u3093\u3054\"\n  val item1Price = 150\n  val item1Quantity = 3\n\n  val item2Name = \"\u725b\u4e73\"\n  val item2Price = 200\n  val item2Quantity = 2\n\n  val item3Name = \"\u30d1\u30f3\"\n  val item3Price = 120\n  val item3Quantity = 1\n\n  // \u5c0f\u8a08\u306e\u8a08\u7b97\n  val subtotal1 = item1Price * item1Quantity\n  val subtotal2 = item2Price * item2Quantity\n  val subtotal3 = item3Price * item3Quantity\n\n  // \u5408\u8a08\n  val total = subtotal1 + subtotal2 + subtotal3\n\n  // \u30ec\u30b7\u30fc\u30c8\u51fa\u529b\n  println(\"=== \u30ec\u30b7\u30fc\u30c8 ===\")\n  println(s\"${item1Name} ${item1Price}\u5186 \u00d7 ${item1Quantity} = ${subtotal1}\u5186\")\n  println(s\"${item2Name} ${item2Price}\u5186 \u00d7 ${item2Quantity} = ${subtotal2}\u5186\")\n  println(s\"${item3Name} ${item3Price}\u5186 \u00d7 ${item3Quantity} = ${subtotal3}\u5186\")\n  println(\"----------------\")\n  println(s\"\u5408\u8a08: ${total}\u5186\")\n\n  // \u30dd\u30a4\u30f3\u30c8\u8a08\u7b97\uff08var\u3092\u4f7f\u3046\u4f8b\uff09\n  var points = 0\n  points = total / 100  // 100\u5186\u306b\u3064\u304d1\u30dd\u30a4\u30f3\u30c8\n  println(s\"\u7372\u5f97\u30dd\u30a4\u30f3\u30c8: ${points}\u30dd\u30a4\u30f3\u30c8\")\n}\n</code></pre>"},{"location":"part2/chapter03/#_12","title":"\u3088\u304f\u3042\u308b\u30a8\u30e9\u30fc\u3068\u5bfe\u51e6\u6cd5","text":""},{"location":"part2/chapter03/#1val","title":"\u30a8\u30e9\u30fc\u4f8b1\uff1aval\u3078\u306e\u518d\u4ee3\u5165","text":"<pre><code>val x = 10\nx = 20  // \u30a8\u30e9\u30fc\uff01\n</code></pre> <p>\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\uff1a <pre><code>error: reassignment to val\n</code></pre></p> <p>\u5bfe\u51e6\u6cd5: \u5024\u3092\u5909\u66f4\u3057\u305f\u3044\u5834\u5408\u306fvar\u3092\u4f7f\u3046</p>"},{"location":"part2/chapter03/#2_1","title":"\u30a8\u30e9\u30fc\u4f8b2\uff1a\u521d\u671f\u5316\u3055\u308c\u3066\u3044\u306a\u3044\u5909\u6570","text":"<pre><code>val x: Int  // \u30a8\u30e9\u30fc\uff01\u521d\u671f\u5024\u304c\u306a\u3044\n</code></pre> <p>\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\uff1a <pre><code>error: only classes can have declared but undefined members\n</code></pre></p> <p>\u5bfe\u51e6\u6cd5: \u5909\u6570\u306f\u5ba3\u8a00\u6642\u306b\u521d\u671f\u5024\u3092\u8a2d\u5b9a\u3059\u308b</p>"},{"location":"part2/chapter03/#3_2","title":"\u30a8\u30e9\u30fc\u4f8b3\uff1a\u578b\u306e\u4e0d\u4e00\u81f4","text":"<pre><code>val age: Int = \"20\"  // \u30a8\u30e9\u30fc\uff01\u6587\u5b57\u5217\u3092Int\u306b\u5165\u308c\u3089\u308c\u306a\u3044\n</code></pre> <p>\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\uff1a <pre><code>error: type mismatch\n  found   : String(\"20\")\n  required: Int\n</code></pre></p> <p>\u5bfe\u51e6\u6cd5: \u6b63\u3057\u3044\u578b\u306e\u5024\u3092\u4ee3\u5165\u3059\u308b\u304b\u3001\u578b\u5909\u63db\u3092\u884c\u3046</p>"},{"location":"part2/chapter03/#_13","title":"\u7df4\u7fd2\u554f\u984c","text":""},{"location":"part2/chapter03/#1_1","title":"\u554f\u984c1\uff1a\u500b\u4eba\u60c5\u5831\u306e\u7ba1\u7406","text":"<p>\u4ee5\u4e0b\u306e\u60c5\u5831\u3092\u9069\u5207\u306a\u5909\u6570\u306b\u683c\u7d0d\u3057\u3066\u8868\u793a\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - \u540d\u524d\uff1a\u3042\u306a\u305f\u306e\u540d\u524d - \u5e74\u9f62\uff1a\u3042\u306a\u305f\u306e\u5e74\u9f62 - \u8eab\u9577\uff1a170.5\uff08cm\uff09 - \u5b66\u751f\u304b\u3069\u3046\u304b\uff1atrue/false</p>"},{"location":"part2/chapter03/#2_2","title":"\u554f\u984c2\uff1a\u9280\u884c\u53e3\u5ea7\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3","text":"<p>\u9280\u884c\u53e3\u5ea7\u306e\u6b8b\u9ad8\u7ba1\u7406\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - \u521d\u671f\u6b8b\u9ad8\uff1a10000\u5186 - \u5165\u91d1\uff1a5000\u5186 - \u51fa\u91d1\uff1a3000\u5186 - \u6700\u7d42\u6b8b\u9ad8\u3092\u8868\u793a</p>"},{"location":"part2/chapter03/#3_3","title":"\u554f\u984c3\uff1a\u6e29\u5ea6\u5909\u63db","text":"<p>\u4ee5\u4e0b\u306e\u8981\u4ef6\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - \u6442\u6c0f\u6e29\u5ea6\u3092\u5909\u6570\u306b\u683c\u7d0d\uff08\u4f8b\uff1a25\u5ea6\uff09 - \u83ef\u6c0f\u6e29\u5ea6\u306b\u5909\u63db\uff08\u83ef\u6c0f = \u6442\u6c0f \u00d7 9/5 + 32\uff09 - \u4e21\u65b9\u306e\u6e29\u5ea6\u3092\u8868\u793a</p>"},{"location":"part2/chapter03/#4","title":"\u554f\u984c4\uff1a\u30a8\u30e9\u30fc\u3092\u4fee\u6b63","text":"<p>\u4ee5\u4e0b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u30a8\u30e9\u30fc\u3092\u4fee\u6b63\u3057\u3066\u304f\u3060\u3055\u3044\uff1a</p> <pre><code>@main def broken(): Unit = {\n  val userName = \"\u592a\u90ce\"\n  val userAge = 20\n\n  userName = \"\u6b21\u90ce\"\n\n  val message = \"\u3053\u3093\u306b\u3061\u306f\u3001\" + userName + \"\u3055\u3093\"\n  val NextYear = userAge + 1\n\n  println(message)\n  println(\"\u6765\u5e74\u306f\" + nextyear + \"\u6b73\u3067\u3059\u306d\")\n}\n</code></pre>"},{"location":"part2/chapter03/#_14","title":"\u307e\u3068\u3081","text":"<p>\u3053\u306e\u7ae0\u3067\u306f\u4ee5\u4e0b\u306e\u3053\u3068\u3092\u5b66\u3073\u307e\u3057\u305f\uff1a</p> <ol> <li> <p>val\u3068var</p> <ul> <li>val\uff1a\u5909\u66f4\u3067\u304d\u306a\u3044\u5024\uff08\u63a8\u5968\uff09</li> <li>var\uff1a\u5909\u66f4\u53ef\u80fd\u306a\u5909\u6570\uff08\u5fc5\u8981\u306a\u6642\u3060\u3051\u4f7f\u7528\uff09</li> </ul> </li> <li> <p>\u5909\u6570\u306e\u547d\u540d\u898f\u5247</p> <ul> <li>\u30ad\u30e3\u30e1\u30eb\u30b1\u30fc\u30b9\u3092\u4f7f\u7528\uff08firstName\uff09</li> <li>\u610f\u5473\u306e\u3042\u308b\u540d\u524d\u3092\u3064\u3051\u308b</li> <li>\u5b9a\u6570\u306f\u5927\u6587\u5b57\u3068\u30a2\u30f3\u30c0\u30fc\u30b9\u30b3\u30a2\uff08MAX_SIZE\uff09</li> </ul> </li> <li> <p>\u578b\u63a8\u8ad6\u3068\u578b\u6307\u5b9a</p> <ul> <li>Scala\u306f\u578b\u3092\u81ea\u52d5\u7684\u306b\u5224\u65ad</li> <li>\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u660e\u793a\u7684\u306b\u578b\u3092\u6307\u5b9a</li> </ul> </li> <li> <p>\u30b9\u30b3\u30fc\u30d7</p> <ul> <li>\u5909\u6570\u306f\u30d6\u30ed\u30c3\u30af\u5185\u3067\u306e\u307f\u6709\u52b9</li> <li>\u5185\u5074\u306e\u30d6\u30ed\u30c3\u30af\u304b\u3089\u5916\u5074\u306e\u5909\u6570\u306f\u898b\u3048\u308b</li> </ul> </li> <li> <p>\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9</p> <ul> <li>\u3067\u304d\u308b\u3060\u3051val\u3092\u4f7f\u3046</li> <li>\u5909\u6570\u540d\u306f\u5206\u304b\u308a\u3084\u3059\u304f</li> <li>\u9069\u5207\u306a\u30b9\u30b3\u30fc\u30d7\u3067\u5909\u6570\u3092\u5b9a\u7fa9</li> </ul> </li> </ol> <p>\u6b21\u306e\u7ae0\u3067\u306f\u3001\u69d8\u3005\u306a\u7a2e\u985e\u306e\u30c7\u30fc\u30bf\uff08\u6587\u5b57\u5217\u3001\u771f\u507d\u5024\u306a\u3069\uff09\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u5b66\u3093\u3067\u3044\u304d\u307e\u3059\uff01</p>"},{"location":"part2/chapter04/","title":"\u7b2c4\u7ae0 \u3044\u308d\u3044\u308d\u306a\u7a2e\u985e\u306e\u30c7\u30fc\u30bf","text":""},{"location":"part2/chapter04/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u306f\u6570\u5024\u4ee5\u5916\u306b\u3082\u69d8\u3005\u306a\u7a2e\u985e\u306e\u30c7\u30fc\u30bf\u3092\u6271\u3044\u307e\u3059\u3002\u3053\u306e\u7ae0\u3067\u306f\u3001\u6587\u5b57\u5217\u3001\u771f\u507d\u5024\u3001\u6587\u5b57\u306a\u3069\u3001Scala\u3067\u4f7f\u3048\u308b\u57fa\u672c\u7684\u306a\u30c7\u30fc\u30bf\u578b\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3059\u3002</p>"},{"location":"part2/chapter04/#_2","title":"\u57fa\u672c\u7684\u306a\u30c7\u30fc\u30bf\u578b\u306e\u4e00\u89a7","text":"<p>Scala\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u57fa\u672c\u7684\u306a\u30c7\u30fc\u30bf\u578b\u304c\u3042\u308a\u307e\u3059\uff1a</p> \u578b\u540d \u8aac\u660e \u4f8b Int \u6574\u6570 42, -100, 0 Long \u5927\u304d\u306a\u6574\u6570 1234567890L Double \u5c0f\u6570 3.14, -0.5 Float \u5358\u7cbe\u5ea6\u5c0f\u6570 3.14f String \u6587\u5b57\u5217 \"Hello\", \"\u3053\u3093\u306b\u3061\u306f\" Char 1\u6587\u5b57 'A', '\u3042' Boolean \u771f\u507d\u5024 true, false Unit \u5024\u306a\u3057 ()"},{"location":"part2/chapter04/#string","title":"\u6587\u5b57\u5217\uff08String\uff09","text":""},{"location":"part2/chapter04/#_3","title":"\u6587\u5b57\u5217\u306e\u57fa\u672c","text":"<pre><code>// StringBasics.scala\n@main def stringBasics(): Unit = {\n  val greeting = \"\u3053\u3093\u306b\u3061\u306f\"\n  val name = \"\u592a\u90ce\"\n\n  // \u6587\u5b57\u5217\u306e\u9023\u7d50\n  val message1 = greeting + \"\u3001\" + name + \"\u3055\u3093\"\n  println(message1)\n\n  // \u6587\u5b57\u5217\u88dc\u9593\uff08\u63a8\u5968\uff09\n  val message2 = s\"${greeting}\u3001${name}\u3055\u3093\"\n  println(message2)\n\n  // \u8907\u6570\u884c\u306e\u6587\u5b57\u5217\n  val poem = \"\"\"\u6625\u306f\u3042\u3051\u307c\u306e\n    |\u3084\u3046\u3084\u3046\u767d\u304f\u306a\u308a\u3086\u304f\n    |\u5c71\u304e\u306f\u5c11\u3057\u660e\u304b\u308a\u3066\"\"\".stripMargin\n  println(poem)\n}\n</code></pre>"},{"location":"part2/chapter04/#_4","title":"\u6587\u5b57\u5217\u306e\u64cd\u4f5c","text":"<pre><code>// StringOperations.scala\n@main def stringOperations(): Unit = {\n  val text = \"Hello, Scala!\"\n\n  // \u9577\u3055\u3092\u53d6\u5f97\n  println(s\"\u9577\u3055: ${text.length}\")\n\n  // \u5927\u6587\u5b57\u30fb\u5c0f\u6587\u5b57\u5909\u63db\n  println(s\"\u5927\u6587\u5b57: ${text.toUpperCase}\")\n  println(s\"\u5c0f\u6587\u5b57: ${text.toLowerCase}\")\n\n  // \u6587\u5b57\u5217\u306e\u4e00\u90e8\u3092\u53d6\u5f97\n  println(s\"\u6700\u521d\u306e5\u6587\u5b57: ${text.substring(0, 5)}\")\n  println(s\"7\u6587\u5b57\u76ee\u304b\u3089: ${text.substring(7)}\")\n\n  // \u6587\u5b57\u5217\u306e\u691c\u7d22\n  println(s\"Scala\u3092\u542b\u3080\uff1f: ${text.contains(\"Scala\")}\")\n  println(s\"Hello\u3067\u59cb\u307e\u308b\uff1f: ${text.startsWith(\"Hello\")}\")\n  println(s\"!\u3067\u7d42\u308f\u308b\uff1f: ${text.endsWith(\"!\")}\")\n\n  // \u7a7a\u767d\u306e\u524a\u9664\n  val spacedText = \"  Scala  \"\n  println(s\"\u5143: '${spacedText}'\")\n  println(s\"trim\u5f8c: '${spacedText.trim}'\")\n}\n</code></pre>"},{"location":"part2/chapter04/#_5","title":"\u6587\u5b57\u5217\u306e\u5206\u5272\u3068\u7d50\u5408","text":"<pre><code>// StringSplitJoin.scala\n@main def stringSplitJoin(): Unit = {\n  // \u6587\u5b57\u5217\u306e\u5206\u5272\n  val csv = \"\u308a\u3093\u3054,\u307f\u304b\u3093,\u3076\u3069\u3046,\u3082\u3082\"\n  val fruits = csv.split(\",\")\n\n  println(\"\u679c\u7269\u30ea\u30b9\u30c8:\")\n  fruits.foreach(fruit =&gt; println(s\"- ${fruit}\"))\n\n  // \u914d\u5217\u3092\u6587\u5b57\u5217\u306b\u7d50\u5408\n  val joined = fruits.mkString(\" \u3068 \")\n  println(s\"\u7d50\u5408: ${joined}\")\n\n  // \u6539\u884c\u3067\u5206\u5272\n  val lines = \"\"\"\u7b2c1\u884c\n    |\u7b2c2\u884c\n    |\u7b2c3\u884c\"\"\".stripMargin\n\n  val lineArray = lines.split(\"\\n\")\n  println(s\"\u884c\u6570: ${lineArray.length}\")\n}\n</code></pre>"},{"location":"part2/chapter04/#boolean","title":"\u771f\u507d\u5024\uff08Boolean\uff09","text":""},{"location":"part2/chapter04/#boolean_1","title":"Boolean\u306e\u57fa\u672c","text":"<pre><code>// BooleanBasics.scala\n@main def booleanBasics(): Unit = {\n  val isStudent = true\n  val isWorking = false\n\n  println(s\"\u5b66\u751f\u3067\u3059\u304b\uff1f: ${isStudent}\")\n  println(s\"\u50cd\u3044\u3066\u3044\u307e\u3059\u304b\uff1f: ${isWorking}\")\n\n  // \u6bd4\u8f03\u306e\u7d50\u679c\u306fBoolean\n  val age = 20\n  val isAdult = age &gt;= 18\n  val isTeenager = age &gt;= 13 &amp;&amp; age &lt;= 19\n\n  println(s\"${age}\u6b73\u306f\u6210\u4eba\uff1f: ${isAdult}\")\n  println(s\"${age}\u6b73\u306f\u30c6\u30a3\u30fc\u30f3\u30a8\u30a4\u30b8\u30e3\u30fc\uff1f: ${isTeenager}\")\n}\n</code></pre>"},{"location":"part2/chapter04/#_6","title":"\u8ad6\u7406\u6f14\u7b97","text":"<pre><code>// LogicalOperations.scala\n@main def logicalOperations(): Unit = {\n  val hasLicense = true\n  val hasExperience = false\n  val age = 25\n\n  // AND\u6f14\u7b97\uff08&amp;&amp;\uff09\n  val canDrive = hasLicense &amp;&amp; age &gt;= 18\n  println(s\"\u904b\u8ee2\u3067\u304d\u308b\uff1f: ${canDrive}\")\n\n  // OR\u6f14\u7b97\uff08||\uff09\n  val canApply = hasLicense || hasExperience\n  println(s\"\u5fdc\u52df\u3067\u304d\u308b\uff1f: ${canApply}\")\n\n  // NOT\u6f14\u7b97\uff08!\uff09\n  val needsTraining = !hasExperience\n  println(s\"\u7814\u4fee\u304c\u5fc5\u8981\uff1f: ${needsTraining}\")\n\n  // \u8907\u96d1\u306a\u6761\u4ef6\n  val isEligible = (hasLicense || hasExperience) &amp;&amp; age &gt;= 20\n  println(s\"\u6761\u4ef6\u3092\u6e80\u305f\u3059\uff1f: ${isEligible}\")\n}\n</code></pre>"},{"location":"part2/chapter04/#char","title":"\u6587\u5b57\uff08Char\uff09","text":""},{"location":"part2/chapter04/#char_1","title":"Char\u306e\u57fa\u672c","text":"<pre><code>// CharBasics.scala\n@main def charBasics(): Unit = {\n  val letter = 'A'\n  val digit = '5'\n  val symbol = '@'\n  val japanese = '\u3042'\n\n  println(s\"\u6587\u5b57: ${letter}\")\n  println(s\"\u6570\u5b57: ${digit}\")\n  println(s\"\u8a18\u53f7: ${symbol}\")\n  println(s\"\u65e5\u672c\u8a9e: ${japanese}\")\n\n  // Char\u3068String\u306e\u9055\u3044\n  val charA = 'A'      // Char\u578b\uff08\u30b7\u30f3\u30b0\u30eb\u30af\u30a9\u30fc\u30c8\uff09\n  val stringA = \"A\"    // String\u578b\uff08\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c8\uff09\n\n  println(s\"Char\u578b: ${charA.getClass.getSimpleName}\")\n  println(s\"String\u578b: ${stringA.getClass.getSimpleName}\")\n}\n</code></pre>"},{"location":"part2/chapter04/#char_2","title":"Char\u306e\u64cd\u4f5c","text":"<pre><code>// CharOperations.scala\n@main def charOperations(): Unit = {\n  val ch = 'A'\n\n  // \u6587\u5b57\u30b3\u30fc\u30c9\u306e\u53d6\u5f97\n  println(s\"'${ch}'\u306e\u6587\u5b57\u30b3\u30fc\u30c9: ${ch.toInt}\")\n\n  // \u6587\u5b57\u306e\u5224\u5b9a\n  println(s\"\u6587\u5b57\uff1f: ${ch.isLetter}\")\n  println(s\"\u6570\u5b57\uff1f: ${ch.isDigit}\")\n  println(s\"\u5927\u6587\u5b57\uff1f: ${ch.isUpper}\")\n  println(s\"\u5c0f\u6587\u5b57\uff1f: ${ch.isLower}\")\n\n  // \u5927\u6587\u5b57\u30fb\u5c0f\u6587\u5b57\u5909\u63db\n  val lower = ch.toLower\n  println(s\"\u5c0f\u6587\u5b57\u306b\u5909\u63db: ${lower}\")\n\n  // \u6587\u5b57\u30b3\u30fc\u30c9\u304b\u3089\u6587\u5b57\u3092\u4f5c\u6210\n  val charFromCode = 65.toChar\n  println(s\"\u6587\u5b57\u30b3\u30fc\u30c965\u306e\u6587\u5b57: ${charFromCode}\")\n\n  // \u9023\u7d9a\u3059\u308b\u6587\u5b57\n  val nextChar = (ch.toInt + 1).toChar\n  println(s\"'${ch}'\u306e\u6b21\u306e\u6587\u5b57: ${nextChar}\")\n}\n</code></pre>"},{"location":"part2/chapter04/#unit","title":"Unit\u578b","text":""},{"location":"part2/chapter04/#unit_1","title":"Unit\u3068\u306f","text":"<pre><code>// UnitType.scala\n@main def unitType(): Unit = {\n  // println\u306fUnit\u578b\u3092\u8fd4\u3059\n  val result = println(\"Hello\")\n  println(s\"println\u306e\u623b\u308a\u5024: ${result}\")\n  println(s\"\u578b: ${result.getClass.getSimpleName}\")\n\n  // Unit\u578b\u3092\u8fd4\u3059\u95a2\u6570\n  def greet(name: String): Unit = {\n    println(s\"\u3053\u3093\u306b\u3061\u306f\u3001${name}\u3055\u3093\")\n  }\n\n  val greetResult = greet(\"\u592a\u90ce\")\n  println(s\"greet\u95a2\u6570\u306e\u623b\u308a\u5024: ${greetResult}\")\n}\n</code></pre>"},{"location":"part2/chapter04/#_7","title":"\u578b\u5909\u63db","text":""},{"location":"part2/chapter04/#_8","title":"\u81ea\u52d5\u7684\u306a\u578b\u5909\u63db\u3068\u660e\u793a\u7684\u306a\u578b\u5909\u63db","text":"<pre><code>// TypeConversion.scala\n@main def typeConversion(): Unit = {\n  // \u6570\u5024\u578b\u306e\u5909\u63db\n  val intNum: Int = 42\n  val longNum: Long = intNum     // Int\u304b\u3089Long\u306f\u81ea\u52d5\u5909\u63db\n  val doubleNum: Double = intNum  // Int\u304b\u3089Double\u3082\u81ea\u52d5\u5909\u63db\n\n  println(s\"Int: ${intNum}\")\n  println(s\"Long: ${longNum}\")\n  println(s\"Double: ${doubleNum}\")\n\n  // \u660e\u793a\u7684\u306a\u5909\u63db\u304c\u5fc5\u8981\u306a\u5834\u5408\n  val doubleValue = 3.14\n  val intValue = doubleValue.toInt  // \u5c0f\u6570\u70b9\u4ee5\u4e0b\u306f\u5207\u308a\u6368\u3066\n  println(s\"${doubleValue} \u2192 ${intValue}\")\n\n  // \u6587\u5b57\u5217\u3068\u306e\u5909\u63db\n  val numStr = \"123\"\n  val num = numStr.toInt\n  println(s\"\u6587\u5b57\u5217\\\"${numStr}\\\" \u2192 \u6570\u5024${num}\")\n\n  val backToStr = num.toString\n  println(s\"\u6570\u5024${num} \u2192 \u6587\u5b57\u5217\\\"${backToStr}\\\"\")\n}\n</code></pre>"},{"location":"part2/chapter04/#_9","title":"\u5b89\u5168\u306a\u578b\u5909\u63db","text":"<pre><code>// SafeConversion.scala\n@main def safeConversion(): Unit = {\n  // \u5909\u63db\u53ef\u80fd\u306a\u6587\u5b57\u5217\n  val validStr = \"456\"\n  val validNum = validStr.toInt\n  println(s\"\\\"${validStr}\\\" \u2192 ${validNum}\")\n\n  // \u5909\u63db\u3067\u304d\u306a\u3044\u6587\u5b57\u5217\u306f\u30a8\u30e9\u30fc\u306b\u306a\u308b\n  // val invalidStr = \"abc\"\n  // val invalidNum = invalidStr.toInt  // \u5b9f\u884c\u6642\u30a8\u30e9\u30fc\uff01\n\n  // toIntOption\u3092\u4f7f\u3063\u305f\u5b89\u5168\u306a\u5909\u63db\n  val str1 = \"789\"\n  val str2 = \"xyz\"\n\n  val opt1 = str1.toIntOption\n  val opt2 = str2.toIntOption\n\n  println(s\"\\\"${str1}\\\".toIntOption: ${opt1}\")\n  println(s\"\\\"${str2}\\\".toIntOption: ${opt2}\")\n\n  // Option\u306e\u5024\u3092\u53d6\u308a\u51fa\u3059\n  opt1 match {\n    case Some(n) =&gt; println(s\"\u5909\u63db\u6210\u529f: ${n}\")\n    case None =&gt; println(\"\u5909\u63db\u5931\u6557\")\n  }\n}\n</code></pre>"},{"location":"part2/chapter04/#_10","title":"\u7279\u6b8a\u306a\u6587\u5b57\uff08\u30a8\u30b9\u30b1\u30fc\u30d7\u30b7\u30fc\u30b1\u30f3\u30b9\uff09","text":"<pre><code>// EscapeSequences.scala\n@main def escapeSequences(): Unit = {\n  // \u6539\u884c\n  println(\"1\u884c\u76ee\\n2\u884c\u76ee\\n3\u884c\u76ee\")\n\n  // \u30bf\u30d6\n  println(\"\u540d\u524d\\t\u5e74\u9f62\\t\u8077\u696d\")\n  println(\"\u592a\u90ce\\t25\\t\u4f1a\u793e\u54e1\")\n  println(\"\u82b1\u5b50\\t22\\t\u5b66\u751f\")\n\n  // \u30af\u30a9\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\n  println(\"\u5f7c\u306f\\\"\u3053\u3093\u306b\u3061\u306f\\\"\u3068\u8a00\u3063\u305f\")\n  println('\\'A\\'')\n\n  // \u30d0\u30c3\u30af\u30b9\u30e9\u30c3\u30b7\u30e5\n  println(\"C:\\\\Users\\\\Documents\")\n\n  // Unicode\u30a8\u30b9\u30b1\u30fc\u30d7\n  println(\"\\u3042\\u3044\\u3046\")  // \u3042\u3044\u3046\n}\n</code></pre>"},{"location":"part2/chapter04/#_11","title":"\u5b9f\u8df5\u7684\u306a\u4f8b\uff1a\u30e6\u30fc\u30b6\u30fc\u767b\u9332\u30d5\u30a9\u30fc\u30e0","text":"<pre><code>// UserRegistration.scala\n@main def userRegistration(): Unit = {\n  // \u30e6\u30fc\u30b6\u30fc\u60c5\u5831\n  val firstName = \"\u592a\u90ce\"\n  val lastName = \"\u5c71\u7530\"\n  val email = \"taro.yamada@example.com\"\n  val age = 25\n  val isStudent = false\n  val gender = 'M'  // M: \u7537\u6027, F: \u5973\u6027, O: \u305d\u306e\u4ed6\n\n  // \u30d5\u30eb\u30cd\u30fc\u30e0\u306e\u4f5c\u6210\n  val fullName = s\"${lastName} ${firstName}\"\n\n  // \u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u306e\u691c\u8a3c\uff08\u7c21\u6613\u7248\uff09\n  val isValidEmail = email.contains(\"@\") &amp;&amp; email.contains(\".\")\n\n  // \u5e74\u9f62\u30ab\u30c6\u30b4\u30ea\u306e\u5224\u5b9a\n  val ageCategory = if (age &lt; 20) \"\u672a\u6210\u5e74\" \n                    else if (age &lt; 30) \"20\u4ee3\"\n                    else if (age &lt; 40) \"30\u4ee3\"\n                    else \"40\u4ee3\u4ee5\u4e0a\"\n\n  // \u6027\u5225\u306e\u8868\u793a\n  val genderStr = gender match {\n    case 'M' =&gt; \"\u7537\u6027\"\n    case 'F' =&gt; \"\u5973\u6027\"\n    case 'O' =&gt; \"\u305d\u306e\u4ed6\"\n    case _ =&gt; \"\u4e0d\u660e\"\n  }\n\n  // \u767b\u9332\u60c5\u5831\u306e\u8868\u793a\n  println(\"=== \u30e6\u30fc\u30b6\u30fc\u767b\u9332\u60c5\u5831 ===\")\n  println(s\"\u540d\u524d: ${fullName}\")\n  println(s\"\u30e1\u30fc\u30eb: ${email}\")\n  println(s\"\u30e1\u30fc\u30eb\u691c\u8a3c: ${if (isValidEmail) \"\u6709\u52b9\" else \"\u7121\u52b9\"}\")\n  println(s\"\u5e74\u9f62: ${age}\u6b73\uff08${ageCategory}\uff09\")\n  println(s\"\u5b66\u751f: ${if (isStudent) \"\u306f\u3044\" else \"\u3044\u3044\u3048\"}\")\n  println(s\"\u6027\u5225: ${genderStr}\")\n\n  // \u30d1\u30b9\u30ef\u30fc\u30c9\u751f\u6210\uff08\u7c21\u6613\u7248\uff09\n  val password = s\"${firstName.take(2)}${age}${email.take(3)}\"\n  println(s\"\u4eee\u30d1\u30b9\u30ef\u30fc\u30c9: ${password}\")\n}\n</code></pre>"},{"location":"part2/chapter04/#_12","title":"\u3088\u304f\u3042\u308b\u30a8\u30e9\u30fc\u3068\u5bfe\u51e6\u6cd5","text":""},{"location":"part2/chapter04/#1","title":"\u30a8\u30e9\u30fc\u4f8b1\uff1a\u578b\u306e\u4e0d\u4e00\u81f4","text":"<pre><code>val text: String = 123  // \u30a8\u30e9\u30fc\uff01\n</code></pre> <p>\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\uff1a <pre><code>error: type mismatch;\n found   : Int(123)\n required: String\n</code></pre></p> <p>\u5bfe\u51e6\u6cd5: toString\u3092\u4f7f\u3063\u3066\u5909\u63db\u3059\u308b <pre><code>val text: String = 123.toString\n</code></pre></p>"},{"location":"part2/chapter04/#2charstring","title":"\u30a8\u30e9\u30fc\u4f8b2\uff1aChar\u3068String\u306e\u6df7\u540c","text":"<pre><code>val ch: Char = \"A\"  // \u30a8\u30e9\u30fc\uff01\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c8\n</code></pre> <p>\u5bfe\u51e6\u6cd5: Char\u306b\u306f\u30b7\u30f3\u30b0\u30eb\u30af\u30a9\u30fc\u30c8\u3092\u4f7f\u3046 <pre><code>val ch: Char = 'A'\n</code></pre></p>"},{"location":"part2/chapter04/#3","title":"\u30a8\u30e9\u30fc\u4f8b3\uff1a\u6587\u5b57\u5217\u3092\u6570\u5024\u306b\u5909\u63db\u3067\u304d\u306a\u3044","text":"<pre><code>val num = \"abc\".toInt  // \u5b9f\u884c\u6642\u30a8\u30e9\u30fc\uff01\n</code></pre> <p>\u5bfe\u51e6\u6cd5: toIntOption\u3092\u4f7f\u3063\u3066\u5b89\u5168\u306b\u5909\u63db\u3059\u308b</p>"},{"location":"part2/chapter04/#_13","title":"\u7df4\u7fd2\u554f\u984c","text":""},{"location":"part2/chapter04/#1_1","title":"\u554f\u984c1\uff1a\u6587\u5b57\u5217\u64cd\u4f5c","text":"<p>\u4ee5\u4e0b\u306e\u8981\u4ef6\u3092\u6e80\u305f\u3059\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - \u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u304b\u3089@\u3088\u308a\u524d\u306e\u90e8\u5206\uff08\u30e6\u30fc\u30b6\u30fc\u540d\uff09\u3092\u53d6\u308a\u51fa\u3059 - \u30e6\u30fc\u30b6\u30fc\u540d\u306e\u6700\u521d\u306e\u6587\u5b57\u3092\u5927\u6587\u5b57\u306b\u3059\u308b - \u4f8b\uff1a<code>\"john.doe@example.com\"</code> \u2192 <code>\"John.doe\"</code></p>"},{"location":"part2/chapter04/#2","title":"\u554f\u984c2\uff1a\u771f\u507d\u5024\u306e\u7d44\u307f\u5408\u308f\u305b","text":"<p>\u4ee5\u4e0b\u306e\u6761\u4ef6\u3092\u5224\u5b9a\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - \u5e74\u9f62\u304c18\u6b73\u4ee5\u4e0a\u304b\u306465\u6b73\u672a\u6e80 - \u5b66\u751f\u307e\u305f\u306f65\u6b73\u4ee5\u4e0a\uff08\u5272\u5f15\u5bfe\u8c61\uff09 - \u5e73\u65e5\uff08\u6708\u301c\u91d1\uff09\u304b\u3064\u55b6\u696d\u6642\u9593\u5185\uff089\u301c18\u6642\uff09</p>"},{"location":"part2/chapter04/#3_1","title":"\u554f\u984c3\uff1a\u6587\u5b57\u306e\u64cd\u4f5c","text":"<p>\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u306eA\u304b\u3089Z\u307e\u3067\u3092\u9806\u756a\u306b\u8868\u793a\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"part2/chapter04/#4_1","title":"\u554f\u984c4\uff1a\u578b\u5909\u63db","text":"<p>\u4ee5\u4e0b\u306e\u30c7\u30fc\u30bf\u3092\u9069\u5207\u306b\u5909\u63db\u3057\u3066\u8a08\u7b97\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - \u6587\u5b57\u5217<code>\"100\"</code>\u3068\u6587\u5b57\u5217<code>\"200\"</code>\u3092\u6570\u5024\u306b\u5909\u63db\u3057\u3066\u8db3\u3057\u7b97 - \u7d50\u679c\u3092\u6587\u5b57\u5217\u306b\u5909\u63db\u3057\u3066<code>\"\u5408\u8a08: xxx\u5186\"</code>\u306e\u5f62\u5f0f\u3067\u8868\u793a</p>"},{"location":"part2/chapter04/#5","title":"\u554f\u984c5\uff1a\u30a8\u30e9\u30fc\u3092\u4fee\u6b63","text":"<pre><code>@main def broken(): Unit = {\n  val name = 'Scala'\n  val age = \"25\"\n  val isValid = \"true\"\n\n  if (age &gt;= 20) {\n    println(name + \"\u306f\u6210\u4eba\u3067\u3059\")\n  }\n\n  if (isValid) {\n    println(\"\u6709\u52b9\u3067\u3059\")\n  }\n}\n</code></pre>"},{"location":"part2/chapter04/#_14","title":"\u307e\u3068\u3081","text":"<p>\u3053\u306e\u7ae0\u3067\u306f\u4ee5\u4e0b\u306e\u3053\u3068\u3092\u5b66\u3073\u307e\u3057\u305f\uff1a</p> <ol> <li> <p>\u6587\u5b57\u5217\uff08String\uff09</p> <ul> <li>\u6587\u5b57\u5217\u306e\u9023\u7d50\u3068\u6587\u5b57\u5217\u88dc\u9593</li> <li>\u69d8\u3005\u306a\u6587\u5b57\u5217\u64cd\u4f5c\u30e1\u30bd\u30c3\u30c9</li> <li>\u8907\u6570\u884c\u6587\u5b57\u5217</li> </ul> </li> <li> <p>\u771f\u507d\u5024\uff08Boolean\uff09</p> <ul> <li>true/false\u306e2\u3064\u306e\u5024</li> <li>\u8ad6\u7406\u6f14\u7b97\uff08AND\u3001OR\u3001NOT\uff09</li> <li>\u6bd4\u8f03\u6f14\u7b97\u306e\u7d50\u679c</li> </ul> </li> <li> <p>\u6587\u5b57\uff08Char\uff09</p> <ul> <li>1\u6587\u5b57\u3092\u8868\u3059\u578b</li> <li>\u30b7\u30f3\u30b0\u30eb\u30af\u30a9\u30fc\u30c8\u3067\u56f2\u3080</li> <li>\u6587\u5b57\u30b3\u30fc\u30c9\u3068\u306e\u5909\u63db</li> </ul> </li> <li> <p>Unit\u578b</p> <ul> <li>\u5024\u3092\u8fd4\u3055\u306a\u3044\u51e6\u7406\u306e\u578b</li> <li>\u4e3b\u306b\u526f\u4f5c\u7528\u306e\u3042\u308b\u51e6\u7406\u3067\u4f7f\u7528</li> </ul> </li> <li> <p>\u578b\u5909\u63db</p> <ul> <li>\u81ea\u52d5\u5909\u63db\u3068\u660e\u793a\u7684\u5909\u63db</li> <li>toXxx\u30e1\u30bd\u30c3\u30c9\u306b\u3088\u308b\u5909\u63db</li> <li>\u5b89\u5168\u306a\u5909\u63db\u65b9\u6cd5</li> </ul> </li> </ol> <p>\u6b21\u306e\u7ae0\u3067\u306f\u3001Scala\u306e\u5f37\u529b\u306a\u578b\u30b7\u30b9\u30c6\u30e0\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u5b66\u3093\u3067\u3044\u304d\u307e\u3059\uff01</p>"},{"location":"part2/chapter05/","title":"\u7b2c5\u7ae0 \u578b\u3063\u3066\u4f55\u3060\u308d\u3046\uff1f\uff08\u578b\u306e\u57fa\u790e\u7de8\uff09","text":""},{"location":"part2/chapter05/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306b\u304a\u3051\u308b\u300c\u578b\u300d\u306f\u3001\u30c7\u30fc\u30bf\u306e\u7a2e\u985e\u3092\u8868\u3059\u91cd\u8981\u306a\u6982\u5ff5\u3067\u3059\u3002\u578b\u3092\u7406\u89e3\u3059\u308b\u3053\u3068\u3067\u3001\u3088\u308a\u5b89\u5168\u3067\u8aad\u307f\u3084\u3059\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u7ae0\u3067\u306f\u3001\u578b\u306e\u57fa\u672c\u7684\u306a\u8003\u3048\u65b9\u3068Scala\u306e\u578b\u30b7\u30b9\u30c6\u30e0\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3059\u3002</p>"},{"location":"part2/chapter05/#_2","title":"\u578b\u3068\u306f\u4f55\u304b\uff1f","text":""},{"location":"part2/chapter05/#_3","title":"\u73fe\u5b9f\u4e16\u754c\u306e\u4f8b\u3067\u8003\u3048\u308b","text":"<p>\u578b\u306f\u3001\u73fe\u5b9f\u4e16\u754c\u306e\u300c\u5206\u985e\u300d\u3084\u300c\u30ab\u30c6\u30b4\u30ea\u30fc\u300d\u306b\u4f3c\u3066\u3044\u307e\u3059\uff1a</p> <pre><code>// RealWorldTypes.scala\n@main def realWorldTypes(): Unit = {\n  // \u73fe\u5b9f\u4e16\u754c\u306e\u5206\u985e\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u8868\u73fe\n\n  // \u6570\u5024\u578b\uff1a\u500b\u6570\u3084\u91cf\u3092\u8868\u3059\n  val appleCount: Int = 5        // \u308a\u3093\u3054\u306e\u500b\u6570\n  val temperature: Double = 23.5  // \u6e29\u5ea6\n  val distance: Long = 384400L    // \u8ddd\u96e2\uff08km\uff09\n\n  // \u6587\u5b57\u5217\u578b\uff1a\u540d\u524d\u3084\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u3059\n  val fruitName: String = \"\u308a\u3093\u3054\"\n  val message: String = \"\u304a\u3044\u3057\u3044\u308a\u3093\u3054\u3067\u3059\"\n\n  // \u771f\u507d\u5024\u578b\uff1a\u306f\u3044/\u3044\u3044\u3048\u3092\u8868\u3059\n  val isRipe: Boolean = true     // \u719f\u3057\u3066\u3044\u308b\uff1f\n  val isSold: Boolean = false    // \u58f2\u308c\u305f\uff1f\n\n  println(s\"${fruitName}\u304c${appleCount}\u500b\u3042\u308a\u307e\u3059\")\n  println(s\"\u719f\u3057\u3066\u3044\u308b: ${isRipe}\")\n  println(s\"\u6c17\u6e29: ${temperature}\u5ea6\")\n}\n</code></pre>"},{"location":"part2/chapter05/#_4","title":"\u306a\u305c\u578b\u304c\u5fc5\u8981\u306a\u306e\u304b\uff1f","text":"<pre><code>// WhyTypesArImportant.scala\n@main def whyTypesAreImportant(): Unit = {\n  // \u578b\u304c\u3042\u308b\u3053\u3068\u3067\u9593\u9055\u3044\u3092\u9632\u3052\u308b\n  val price = 100\n  val quantity = 3\n  val total = price * quantity  // \u6b63\u3057\u3044\u8a08\u7b97\n\n  // \u3082\u3057\u578b\u304c\u306a\u304b\u3063\u305f\u3089...\n  // val price = \"100\"\n  // val quantity = \"3\"\n  // val total = price * quantity  // \u30a8\u30e9\u30fc\uff01\u6587\u5b57\u5217\u306f\u639b\u3051\u7b97\u3067\u304d\u306a\u3044\n\n  // \u578b\u304c\u3042\u308b\u3053\u3068\u3067\u610f\u56f3\u304c\u660e\u78ba\u306b\u306a\u308b\n  val userName: String = \"\u592a\u90ce\"      // \u540d\u524d\u306f\u6587\u5b57\u5217\n  val userAge: Int = 20             // \u5e74\u9f62\u306f\u6574\u6570\n  val userHeight: Double = 170.5    // \u8eab\u9577\u306f\u5c0f\u6570\n\n  println(s\"${userName}\u3055\u3093\uff08${userAge}\u6b73\u3001${userHeight}cm\uff09\")\n}\n</code></pre>"},{"location":"part2/chapter05/#scala","title":"Scala\u306e\u578b\u968e\u5c64","text":""},{"location":"part2/chapter05/#_5","title":"\u57fa\u672c\u7684\u306a\u578b\u306e\u95a2\u4fc2","text":"<pre><code>// TypeHierarchy.scala\n@main def typeHierarchy(): Unit = {\n  // \u3059\u3079\u3066\u306e\u578b\u306e\u89aa\uff1aAny\n  val anything: Any = 42\n  val anything2: Any = \"Hello\"\n  val anything3: Any = true\n\n  println(s\"Any\u306b\u306f\u4f55\u3067\u3082\u5165\u308b: ${anything}, ${anything2}, ${anything3}\")\n\n  // \u5024\u578b\uff08AnyVal\uff09\u306e\u4f8b\n  val number: AnyVal = 123\n  val decimal: AnyVal = 3.14\n  val bool: AnyVal = true\n\n  // \u53c2\u7167\u578b\uff08AnyRef\uff09\u306e\u4f8b\n  val text: AnyRef = \"Scala\"\n  val list: AnyRef = List(1, 2, 3)\n}\n</code></pre>"},{"location":"part2/chapter05/#_6","title":"\u578b\u306e\u7d99\u627f\u95a2\u4fc2","text":"<pre><code>Any\uff08\u3059\u3079\u3066\u306e\u578b\u306e\u89aa\uff09\n\u251c\u2500\u2500 AnyVal\uff08\u5024\u578b\uff09\n\u2502   \u251c\u2500\u2500 Int\n\u2502   \u251c\u2500\u2500 Long\n\u2502   \u251c\u2500\u2500 Double\n\u2502   \u251c\u2500\u2500 Float\n\u2502   \u251c\u2500\u2500 Boolean\n\u2502   \u251c\u2500\u2500 Char\n\u2502   \u251c\u2500\u2500 Byte\n\u2502   \u251c\u2500\u2500 Short\n\u2502   \u2514\u2500\u2500 Unit\n\u2514\u2500\u2500 AnyRef\uff08\u53c2\u7167\u578b\uff09\n    \u251c\u2500\u2500 String\n    \u251c\u2500\u2500 List\n    \u251c\u2500\u2500 Array\n    \u2514\u2500\u2500 \u305d\u306e\u4ed6\u306e\u30af\u30e9\u30b9\n</code></pre>"},{"location":"part2/chapter05/#_7","title":"\u578b\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3","text":""},{"location":"part2/chapter05/#_8","title":"\u660e\u793a\u7684\u306a\u578b\u6307\u5b9a","text":"<pre><code>// TypeAnnotations.scala\n@main def typeAnnotations(): Unit = {\n  // \u578b\u3092\u660e\u793a\u7684\u306b\u6307\u5b9a\n  val name: String = \"Scala\"\n  val version: Double = 3.3\n  val year: Int = 2024\n\n  // \u578b\u63a8\u8ad6\u306b\u4efb\u305b\u308b\uff08\u578b\u3092\u66f8\u304b\u306a\u3044\uff09\n  val language = \"Scala\"     // String\u3068\u63a8\u8ad6\u3055\u308c\u308b\n  val majorVersion = 3       // Int\u3068\u63a8\u8ad6\u3055\u308c\u308b\n  val isNew = true          // Boolean\u3068\u63a8\u8ad6\u3055\u308c\u308b\n\n  // \u578b\u3092\u6307\u5b9a\u3059\u308b\u5229\u70b9\n  val price: Double = 100   // 100.0\u3068\u3057\u3066\u6271\u308f\u308c\u308b\n  val count = 100          // 100\uff08Int\uff09\u3068\u3057\u3066\u6271\u308f\u308c\u308b\n\n  println(s\"\u4fa1\u683c: ${price}\u5186\")\n  println(s\"\u500b\u6570: ${count}\u500b\")\n\n  // \u8a08\u7b97\u7d50\u679c\u306e\u578b\u3082\u7570\u306a\u308b\n  val halfPrice = price / 2    // 50.0\uff08Double\uff09\n  val halfCount = count / 2    // 50\uff08Int\uff09\n\n  println(s\"\u534a\u984d: ${halfPrice}\u5186\")\n  println(s\"\u534a\u5206: ${halfCount}\u500b\")\n}\n</code></pre>"},{"location":"part2/chapter05/#_9","title":"\u3044\u3064\u578b\u3092\u66f8\u304f\u3079\u304d\u304b","text":"<pre><code>// WhenToUseTypes.scala\n@main def whenToUseTypes(): Unit = {\n  // 1. \u516c\u958bAPI\u3084\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u30fb\u623b\u308a\u5024\n  def calculateTax(price: Double, rate: Double): Double =\n    price * rate\n\n  // 2. \u610f\u56f3\u3092\u660e\u78ba\u306b\u3057\u305f\u3044\u3068\u304d\n  val score: Double = 90  // 90.0\u3068\u3057\u3066\u6271\u3044\u305f\u3044\n\n  // 3. \u8907\u96d1\u306a\u5f0f\u306e\u7d50\u679c\n  val result: Option[String] = Some(\"\u6210\u529f\")\n\n  // 4. \u578b\u63a8\u8ad6\u304c\u671f\u5f85\u3068\u7570\u306a\u308b\u5834\u5408\n  val items: List[Any] = List(1, \"two\", 3.0)  // \u7570\u306a\u308b\u578b\u3092\u542b\u3080\u30ea\u30b9\u30c8\n\n  println(s\"\u7a0e\u984d: ${calculateTax(1000, 0.1)}\u5186\")\n  println(s\"\u30b9\u30b3\u30a2: ${score}\")\n  println(s\"\u7d50\u679c: ${result}\")\n  println(s\"\u30a2\u30a4\u30c6\u30e0: ${items}\")\n}\n</code></pre>"},{"location":"part2/chapter05/#_10","title":"\u578b\u306e\u4e92\u63db\u6027","text":""},{"location":"part2/chapter05/#_11","title":"\u6570\u5024\u578b\u306e\u5909\u63db","text":"<pre><code>// NumericTypeCompatibility.scala\n@main def numericTypeCompatibility(): Unit = {\n  // \u5c0f\u3055\u3044\u578b\u304b\u3089\u5927\u304d\u3044\u578b\u3078\u306e\u81ea\u52d5\u5909\u63db\n  val smallInt: Int = 100\n  val bigLong: Long = smallInt      // OK: Int \u2192 Long\n  val bigDouble: Double = smallInt   // OK: Int \u2192 Double\n\n  println(s\"Int: ${smallInt}\")\n  println(s\"Long: ${bigLong}\")\n  println(s\"Double: ${bigDouble}\")\n\n  // \u5927\u304d\u3044\u578b\u304b\u3089\u5c0f\u3055\u3044\u578b\u306f\u660e\u793a\u7684\u306a\u5909\u63db\u304c\u5fc5\u8981\n  val doubleVal = 3.14\n  // val intVal: Int = doubleVal    // \u30a8\u30e9\u30fc\uff01\n  val intVal: Int = doubleVal.toInt // OK: \u660e\u793a\u7684\u306a\u5909\u63db\n\n  println(s\"Double: ${doubleVal} \u2192 Int: ${intVal}\")\n\n  // \u7cbe\u5ea6\u306e\u640d\u5931\u306b\u6ce8\u610f\n  val bigNumber = 1234567890123456789L\n  val smallNumber = bigNumber.toInt\n  println(s\"Long: ${bigNumber} \u2192 Int: ${smallNumber}\")  // \u30c7\u30fc\u30bf\u304c\u5931\u308f\u308c\u308b\uff01\n}\n</code></pre>"},{"location":"part2/chapter05/#_12","title":"\u578b\u306e\u6607\u683c","text":"<pre><code>// TypePromotion.scala\n@main def typePromotion(): Unit = {\n  // \u7570\u306a\u308b\u6570\u5024\u578b\u306e\u8a08\u7b97\u3067\u306f\u3001\u3088\u308a\u5927\u304d\u306a\u578b\u306b\u6607\u683c\n  val intNum = 10\n  val doubleNum = 3.14\n\n  val result1 = intNum + doubleNum  // \u7d50\u679c\u306fDouble\n  val result2 = intNum * doubleNum  // \u7d50\u679c\u306fDouble\n\n  println(s\"${intNum} + ${doubleNum} = ${result1} (${result1.getClass.getSimpleName})\")\n  println(s\"${intNum} * ${doubleNum} = ${result2} (${result2.getClass.getSimpleName})\")\n\n  // \u578b\u3092\u7dad\u6301\u3057\u305f\u3044\u5834\u5408\n  val intResult = (intNum + doubleNum).toInt\n  println(s\"Int\u7d50\u679c: ${intResult}\")\n}\n</code></pre>"},{"location":"part2/chapter05/#nothingnull","title":"Nothing\u578b\u3068Null\u578b","text":""},{"location":"part2/chapter05/#nothing","title":"Nothing\u578b","text":"<pre><code>// NothingType.scala\n@main def nothingType(): Unit = {\n  // Nothing\u578b\u306f\u5168\u3066\u306e\u578b\u306e\u30b5\u30d6\u30bf\u30a4\u30d7\n  def error(message: String): Nothing =\n    throw new Exception(message)\n\n  // Nothing\u306f\u6c7a\u3057\u3066\u5024\u3092\u8fd4\u3055\u306a\u3044\n  def infiniteLoop(): Nothing = {\n    while (true) {\n      println(\"\u7121\u9650\u30eb\u30fc\u30d7...\")\n      Thread.sleep(1000)\n    }\n  }\n\n  // \u6761\u4ef6\u306b\u3088\u3063\u3066\u30a8\u30e9\u30fc\u3092\u6295\u3052\u308b\n  def divide(a: Int, b: Int): Int =\n    if (b == 0) {\n      error(\"\u30bc\u30ed\u3067\u9664\u7b97\u306f\u3067\u304d\u307e\u305b\u3093\")  // Nothing\u578b\n    } else {\n      a / b  // Int\u578b\n    }\n\n  println(divide(10, 2))\n  // println(divide(10, 0))  // \u30a8\u30e9\u30fc\u304c\u767a\u751f\n}\n</code></pre>"},{"location":"part2/chapter05/#null","title":"Null\u578b","text":"<pre><code>// NullType.scala\n@main def nullType(): Unit = {\n  // Scala\u3067\u306fnull\u306e\u4f7f\u7528\u306f\u63a8\u5968\u3055\u308c\u306a\u3044\n  var name: String = \"\u592a\u90ce\"\n  println(s\"\u540d\u524d: ${name}\")\n\n  // null\u3092\u4ee3\u5165\u3067\u304d\u308b\uff08\u975e\u63a8\u5968\uff09\n  name = null\n  // println(s\"\u9577\u3055: ${name.length}\")  // NullPointerException!\n\n  // Option\u3092\u4f7f\u3063\u305f\u5b89\u5168\u306a\u65b9\u6cd5\uff08\u63a8\u5968\uff09\n  var safeName: Option[String] = Some(\"\u82b1\u5b50\")\n  println(s\"\u5b89\u5168\u306a\u540d\u524d: ${safeName}\")\n\n  safeName = None  // \u5024\u304c\u306a\u3044\u3053\u3068\u3092\u8868\u73fe\n  println(s\"\u5024\u306a\u3057: ${safeName}\")\n\n  // \u5b89\u5168\u306b\u30a2\u30af\u30bb\u30b9\n  safeName match {\n    case Some(n) =&gt; println(s\"\u540d\u524d\u306f${n}\u3067\u3059\")\n    case None =&gt; println(\"\u540d\u524d\u304c\u3042\u308a\u307e\u305b\u3093\")\n  }\n}\n</code></pre>"},{"location":"part2/chapter05/#_13","title":"\u578b\u30a8\u30a4\u30ea\u30a2\u30b9","text":""},{"location":"part2/chapter05/#_14","title":"\u578b\u306b\u5225\u540d\u3092\u3064\u3051\u308b","text":"<pre><code>// TypeAlias.scala\n@main def typeAlias(): Unit = {\n  // \u578b\u30a8\u30a4\u30ea\u30a2\u30b9\u306e\u5b9a\u7fa9\n  type UserID = Int\n  type UserName = String\n  type Age = Int\n  type Email = String\n\n  // \u578b\u30a8\u30a4\u30ea\u30a2\u30b9\u3092\u4f7f\u3063\u305f\u5909\u6570\u5b9a\u7fa9\n  val id: UserID = 12345\n  val name: UserName = \"\u5c71\u7530\u592a\u90ce\"\n  val age: Age = 25\n  val email: Email = \"yamada@example.com\"\n\n  // \u95a2\u6570\u3067\u3082\u4f7f\u3048\u308b\n  def createUser(id: UserID, name: UserName, age: Age): String =\n    s\"\u30e6\u30fc\u30b6\u30fc#${id}: ${name}\uff08${age}\u6b73\uff09\"\n\n  println(createUser(id, name, age))\n\n  // \u3088\u308a\u8907\u96d1\u306a\u578b\u30a8\u30a4\u30ea\u30a2\u30b9\n  type UserData = (UserID, UserName, Age, Email)\n  val user: UserData = (id, name, age, email)\n\n  println(s\"\u30e6\u30fc\u30b6\u30fc\u60c5\u5831: ${user}\")\n}\n</code></pre>"},{"location":"part2/chapter05/#_15","title":"\u578b\u5b89\u5168\u6027\u306e\u5229\u70b9","text":""},{"location":"part2/chapter05/#_16","title":"\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306e\u30a8\u30e9\u30fc\u691c\u51fa","text":"<pre><code>// TypeSafety.scala\n@main def typeSafety(): Unit = {\n  // \u578b\u304c\u3042\u308b\u3053\u3068\u3067\u9593\u9055\u3044\u3092\u65e9\u671f\u767a\u898b\n  def addNumbers(a: Int, b: Int): Int = a + b\n\n  // \u6b63\u3057\u3044\u4f7f\u3044\u65b9\n  val sum = addNumbers(10, 20)\n  println(s\"\u5408\u8a08: ${sum}\")\n\n  // \u9593\u9055\u3063\u305f\u4f7f\u3044\u65b9\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\n  // val wrong = addNumbers(\"10\", \"20\")  // \u30a8\u30e9\u30fc\uff01\n  // val wrong2 = addNumbers(10.5, 20.5) // \u30a8\u30e9\u30fc\uff01\n\n  // \u578b\u306b\u3088\u3063\u3066\u610f\u56f3\u304c\u660e\u78ba\n  case class Product(name: String, price: Double, quantity: Int)\n\n  val apple = Product(\"\u308a\u3093\u3054\", 150.0, 5)\n  val total = apple.price * apple.quantity\n\n  println(s\"${apple.name}: ${apple.price}\u5186 \u00d7 ${apple.quantity}\u500b = ${total}\u5186\")\n}\n</code></pre>"},{"location":"part2/chapter05/#_17","title":"\u5b9f\u8df5\u7684\u306a\u4f8b\uff1a\u56f3\u66f8\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0","text":"<pre><code>// LibrarySystem.scala\n@main def librarySystem(): Unit = {\n  // \u578b\u30a8\u30a4\u30ea\u30a2\u30b9\u3067\u610f\u5473\u3092\u660e\u78ba\u306b\n  type ISBN = String\n  type Title = String\n  type Author = String\n  type Year = Int\n  type Available = Boolean\n\n  // \u672c\u306e\u60c5\u5831\u3092\u8868\u3059\u578b\n  case class Book(\n    isbn: ISBN,\n    title: Title,\n    author: Author,\n    year: Year,\n    available: Available\n  )\n\n  // \u56f3\u66f8\u9928\u306e\u8535\u66f8\n  val books = List(\n    Book(\"978-4-123456-78-9\", \"Scala\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\", \"\u5c71\u7530\u592a\u90ce\", 2024, true),\n    Book(\"978-4-234567-89-0\", \"\u95a2\u6570\u578b\u5165\u9580\", \"\u9234\u6728\u82b1\u5b50\", 2023, false),\n    Book(\"978-4-345678-90-1\", \"\u578b\u30b7\u30b9\u30c6\u30e0\u8a73\u89e3\", \"\u4f50\u85e4\u6b21\u90ce\", 2024, true)\n  )\n\n  // \u5229\u7528\u53ef\u80fd\u306a\u672c\u3092\u691c\u7d22\n  def findAvailableBooks(books: List[Book]): List[Book] =\n    books.filter(_.available)\n\n  // \u8457\u8005\u3067\u691c\u7d22\n  def findByAuthor(books: List[Book], author: Author): List[Book] =\n    books.filter(_.author == author)\n\n  // \u65b0\u3057\u3044\u672c\u306e\u8ffd\u52a0\n  def addBook(books: List[Book], book: Book): List[Book] =\n    books :+ book\n\n  println(\"=== \u56f3\u66f8\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0 ===\")\n  println(\"\\n\u5229\u7528\u53ef\u80fd\u306a\u672c:\")\n  findAvailableBooks(books).foreach { book =&gt;\n    println(s\"- ${book.title} (${book.author}, ${book.year}\u5e74)\")\n  }\n\n  println(\"\\n\u5c71\u7530\u592a\u90ce\u306e\u8457\u66f8:\")\n  findByAuthor(books, \"\u5c71\u7530\u592a\u90ce\").foreach { book =&gt;\n    println(s\"- ${book.title}\")\n  }\n}\n</code></pre>"},{"location":"part2/chapter05/#_18","title":"\u3088\u304f\u3042\u308b\u30a8\u30e9\u30fc\u3068\u5bfe\u51e6\u6cd5","text":""},{"location":"part2/chapter05/#1","title":"\u30a8\u30e9\u30fc\u4f8b1\uff1a\u578b\u306e\u4e0d\u4e00\u81f4","text":"<pre><code>def double(x: Int): Int = x * 2\nval result = double(3.14)  // \u30a8\u30e9\u30fc\uff01\n</code></pre> <p>\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\uff1a <pre><code>error: type mismatch;\n found   : Double(3.14)\n required: Int\n</code></pre></p> <p>\u5bfe\u51e6\u6cd5: \u6b63\u3057\u3044\u578b\u3092\u6e21\u3059\u304b\u3001\u578b\u3092\u5909\u63db\u3059\u308b</p>"},{"location":"part2/chapter05/#2any","title":"\u30a8\u30e9\u30fc\u4f8b2\uff1aAny\u578b\u306e\u8aa4\u7528","text":"<pre><code>val items: List[Any] = List(1, \"two\", 3.0)\nval sum = items(0) + items(2)  // \u30a8\u30e9\u30fc\uff01\n</code></pre> <p>\u5bfe\u51e6\u6cd5: \u5177\u4f53\u7684\u306a\u578b\u3092\u4f7f\u3046\u304b\u3001\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u3067\u51e6\u7406</p>"},{"location":"part2/chapter05/#3null","title":"\u30a8\u30e9\u30fc\u4f8b3\uff1anull\u53c2\u7167","text":"<pre><code>var text: String = null\nval length = text.length  // \u5b9f\u884c\u6642\u30a8\u30e9\u30fc\uff01\n</code></pre> <p>\u5bfe\u51e6\u6cd5: Option\u3092\u4f7f\u3063\u3066\u5b89\u5168\u306b\u6271\u3046</p>"},{"location":"part2/chapter05/#_19","title":"\u7df4\u7fd2\u554f\u984c","text":""},{"location":"part2/chapter05/#1_1","title":"\u554f\u984c1\uff1a\u578b\u306e\u5224\u5b9a","text":"<p>\u4ee5\u4e0b\u306e\u5024\u306e\u578b\u3092\u7b54\u3048\u3066\u304f\u3060\u3055\u3044\uff1a - <code>42</code> - <code>\"Hello\"</code> - <code>true</code> - <code>3.14</code> - <code>'A'</code></p>"},{"location":"part2/chapter05/#2","title":"\u554f\u984c2\uff1a\u578b\u30a8\u30a4\u30ea\u30a2\u30b9","text":"<p>\u5b66\u751f\u60c5\u5831\u3092\u7ba1\u7406\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4f7f\u3046\u578b\u30a8\u30a4\u30ea\u30a2\u30b9\u3092\u5b9a\u7fa9\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - \u5b66\u7c4d\u756a\u53f7 - \u6c0f\u540d - \u5b66\u5e74 - GPA\uff08\u6210\u7e3e\u5e73\u5747\uff09</p>"},{"location":"part2/chapter05/#3","title":"\u554f\u984c3\uff1a\u578b\u5b89\u5168\u306a\u95a2\u6570","text":"<p>\u5e74\u9f62\u3092\u53d7\u3051\u53d6\u3063\u3066\u3001\u5e74\u4ee3\uff0810\u4ee3\u300120\u4ee3\u306a\u3069\uff09\u3092\u8fd4\u3059\u95a2\u6570\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u578b\u3092\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u3053\u3068\u3002</p>"},{"location":"part2/chapter05/#4","title":"\u554f\u984c4\uff1a\u578b\u5909\u63db","text":"<p>\u4ee5\u4e0b\u306e\u5909\u63db\u3092\u884c\u3046\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - String \"123\" \u3092 Int \u306b\u5909\u63db - Double 45.67 \u3092 Int \u306b\u5909\u63db - Int 100 \u3092 String \u306b\u5909\u63db</p>"},{"location":"part2/chapter05/#5_1","title":"\u554f\u984c5\uff1a\u30a8\u30e9\u30fc\u3092\u4fee\u6b63","text":"<pre><code>@main def broken(): Unit = {\n  val price: Int = 99.99\n  val quantity: String = 3\n  val total = price * quantity\n\n  val message: Any = \"\u5408\u8a08\u91d1\u984d\"\n  val length = message.length\n\n  println(s\"${message}: ${total}\u5186\")\n}\n</code></pre>"},{"location":"part2/chapter05/#_20","title":"\u307e\u3068\u3081","text":"<p>\u3053\u306e\u7ae0\u3067\u306f\u4ee5\u4e0b\u306e\u3053\u3068\u3092\u5b66\u3073\u307e\u3057\u305f\uff1a</p> <ol> <li> <p>\u578b\u306e\u57fa\u672c\u6982\u5ff5</p> <ul> <li>\u578b\u306f\u30c7\u30fc\u30bf\u306e\u7a2e\u985e\u3092\u8868\u3059</li> <li>\u578b\u304c\u3042\u308b\u3053\u3068\u3067\u5b89\u5168\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u66f8\u3051\u308b</li> <li>\u578b\u306b\u3088\u3063\u3066\u610f\u56f3\u304c\u660e\u78ba\u306b\u306a\u308b</li> </ul> </li> <li> <p>Scala\u306e\u578b\u968e\u5c64</p> <ul> <li>Any\u578b\u304c\u3059\u3079\u3066\u306e\u578b\u306e\u89aa</li> <li>AnyVal\uff08\u5024\u578b\uff09\u3068AnyRef\uff08\u53c2\u7167\u578b\uff09</li> <li>Nothing\u578b\u3068Null\u578b</li> </ul> </li> <li> <p>\u578b\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3</p> <ul> <li>\u660e\u793a\u7684\u306a\u578b\u6307\u5b9a\u306e\u65b9\u6cd5</li> <li>\u3044\u3064\u578b\u3092\u66f8\u304f\u3079\u304d\u304b</li> <li>\u578b\u63a8\u8ad6\u3068\u306e\u4f7f\u3044\u5206\u3051</li> </ul> </li> <li> <p>\u578b\u306e\u4e92\u63db\u6027</p> <ul> <li>\u6570\u5024\u578b\u306e\u81ea\u52d5\u5909\u63db</li> <li>\u660e\u793a\u7684\u306a\u578b\u5909\u63db</li> <li>\u578b\u306e\u6607\u683c</li> </ul> </li> <li> <p>\u578b\u5b89\u5168\u6027</p> <ul> <li>\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306e\u30a8\u30e9\u30fc\u691c\u51fa</li> <li>\u5b9f\u884c\u6642\u30a8\u30e9\u30fc\u306e\u9632\u6b62</li> <li>\u3088\u308a\u826f\u3044\u30b3\u30fc\u30c9\u8a2d\u8a08</li> </ul> </li> </ol> <p>\u6b21\u306e\u7ae0\u3067\u306f\u3001Scala\u306e\u5f37\u529b\u306a\u578b\u63a8\u8ad6\u6a5f\u80fd\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u5b66\u3093\u3067\u3044\u304d\u307e\u3059\uff01</p>"},{"location":"part2/chapter06/","title":"\u7b2c6\u7ae0 \u578b\u63a8\u8ad6\u306e\u9b54\u6cd5","text":""},{"location":"part2/chapter06/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>Scala\u306e\u6700\u3082\u4fbf\u5229\u306a\u6a5f\u80fd\u306e\u4e00\u3064\u304c\u300c\u578b\u63a8\u8ad6\u300d\u3067\u3059\u3002\u578b\u63a8\u8ad6\u3068\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u304c\u578b\u3092\u660e\u793a\u7684\u306b\u66f8\u304b\u306a\u304f\u3066\u3082\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u81ea\u52d5\u7684\u306b\u578b\u3092\u5224\u65ad\u3057\u3066\u304f\u308c\u308b\u6a5f\u80fd\u3067\u3059\u3002\u3053\u306e\u7ae0\u3067\u306f\u3001\u578b\u63a8\u8ad6\u306e\u4ed5\u7d44\u307f\u3068\u52b9\u679c\u7684\u306a\u4f7f\u3044\u65b9\u3092\u5b66\u3073\u307e\u3059\u3002</p>"},{"location":"part2/chapter06/#_2","title":"\u578b\u63a8\u8ad6\u3068\u306f\u4f55\u304b\uff1f","text":""},{"location":"part2/chapter06/#_3","title":"\u57fa\u672c\u7684\u306a\u578b\u63a8\u8ad6","text":"<pre><code>// BasicTypeInference.scala\n@main def basicTypeInference(): Unit = {\n  // \u578b\u3092\u66f8\u304b\u306a\u304f\u3066\u3082\u3001Scala\u304c\u81ea\u52d5\u7684\u306b\u578b\u3092\u63a8\u8ad6\n  val number = 42              // Int\u578b\u3068\u63a8\u8ad6\n  val decimal = 3.14           // Double\u578b\u3068\u63a8\u8ad6\n  val text = \"Hello, Scala!\"   // String\u578b\u3068\u63a8\u8ad6\n  val flag = true              // Boolean\u578b\u3068\u63a8\u8ad6\n\n  // \u63a8\u8ad6\u3055\u308c\u305f\u578b\u3092\u78ba\u8a8d\n  println(s\"number: ${number.getClass.getSimpleName}\")\n  println(s\"decimal: ${decimal.getClass.getSimpleName}\")\n  println(s\"text: ${text.getClass.getSimpleName}\")\n  println(s\"flag: ${flag.getClass.getSimpleName}\")\n\n  // \u660e\u793a\u7684\u306b\u578b\u3092\u66f8\u3044\u305f\u5834\u5408\u3068\u540c\u3058\n  val explicitNumber: Int = 42\n  val explicitText: String = \"Hello, Scala!\"\n\n  // \u4e21\u8005\u306f\u5b8c\u5168\u306b\u540c\u3058\n  println(s\"\u63a8\u8ad6: ${number}, \u660e\u793a: ${explicitNumber}\")\n}\n</code></pre>"},{"location":"part2/chapter06/#_4","title":"\u5f0f\u304b\u3089\u306e\u578b\u63a8\u8ad6","text":"<pre><code>// ExpressionTypeInference.scala\n@main def expressionTypeInference(): Unit = {\n  // \u8a08\u7b97\u7d50\u679c\u306e\u578b\u3082\u63a8\u8ad6\u3055\u308c\u308b\n  val sum = 10 + 20           // Int\n  val product = 5.0 * 3       // Double\uff08\u7247\u65b9\u304cDouble\uff09\n  val divided = 10 / 3        // Int\uff08\u6574\u6570\u540c\u58eb\u306e\u9664\u7b97\uff09\n  val precise = 10.0 / 3      // Double\n\n  println(s\"sum: ${sum} (${sum.getClass.getSimpleName})\")\n  println(s\"product: ${product} (${product.getClass.getSimpleName})\")\n  println(s\"divided: ${divided} (${divided.getClass.getSimpleName})\")\n  println(s\"precise: ${precise} (${precise.getClass.getSimpleName})\")\n\n  // \u8907\u96d1\u306a\u5f0f\u3067\u3082\u63a8\u8ad6\n  val complex = (10 + 5) * 2.0 / 3  // Double\n  println(s\"complex: ${complex} (${complex.getClass.getSimpleName})\")\n}\n</code></pre>"},{"location":"part2/chapter06/#_5","title":"\u95a2\u6570\u3067\u306e\u578b\u63a8\u8ad6","text":""},{"location":"part2/chapter06/#_6","title":"\u5f15\u6570\u306e\u578b\u306f\u5fc5\u9808\u3001\u623b\u308a\u5024\u306e\u578b\u306f\u63a8\u8ad6\u53ef\u80fd","text":"<pre><code>// FunctionTypeInference.scala\n@main def functionTypeInference(): Unit = {\n  // \u623b\u308a\u5024\u306e\u578b\u3092\u63a8\u8ad6\n  def add(x: Int, y: Int) = x + y  // \u623b\u308a\u5024\u306fInt\u3068\u63a8\u8ad6\n\n  // \u660e\u793a\u7684\u306b\u66f8\u3044\u305f\u5834\u5408\u3068\u540c\u3058\n  def addExplicit(x: Int, y: Int): Int = x + y\n\n  println(s\"add(3, 4) = ${add(3, 4)}\")\n  println(s\"addExplicit(3, 4) = ${addExplicit(3, 4)}\")\n\n  // \u3088\u308a\u8907\u96d1\u306a\u4f8b\n  def greet(name: String) = s\"\u3053\u3093\u306b\u3061\u306f\u3001${name}\u3055\u3093\uff01\"  // String\u3068\u63a8\u8ad6\n  def isAdult(age: Int) = age &gt;= 18                      // Boolean\u3068\u63a8\u8ad6\n  def calculateBMI(weight: Double, height: Double) = \n    weight / (height * height)                           // Double\u3068\u63a8\u8ad6\n\n  println(greet(\"\u592a\u90ce\"))\n  println(s\"20\u6b73\u306f\u6210\u4eba\uff1f: ${isAdult(20)}\")\n  println(s\"BMI: ${calculateBMI(65.0, 1.70)}\")\n}\n</code></pre>"},{"location":"part2/chapter06/#_7","title":"\u30ed\u30fc\u30ab\u30eb\u95a2\u6570\u3067\u306e\u578b\u63a8\u8ad6","text":"<pre><code>// LocalFunctionInference.scala\n@main def localFunctionInference(): Unit = {\n  // \u95a2\u6570\u5185\u3067\u5b9a\u7fa9\u3059\u308b\u95a2\u6570\n  def processNumbers(numbers: List[Int]): String = {\n    // \u30ed\u30fc\u30ab\u30eb\u95a2\u6570\u306e\u578b\u3082\u63a8\u8ad6\u3055\u308c\u308b\n    def double(x: Int) = x * 2\n    def isEven(x: Int) = x % 2 == 0\n    def format(x: Int) = s\"[${x}]\"\n\n    numbers\n      .map(double)      // \u5404\u8981\u7d20\u30922\u500d\n      .filter(isEven)   // \u5076\u6570\u306e\u307f\u9078\u629e\n      .map(format)      // \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n      .mkString(\", \")   // \u6587\u5b57\u5217\u306b\u7d50\u5408\n  }\n\n  val result = processNumbers(List(1, 2, 3, 4, 5))\n  println(s\"\u7d50\u679c: ${result}\")\n}\n</code></pre>"},{"location":"part2/chapter06/#_8","title":"\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u306e\u578b\u63a8\u8ad6","text":""},{"location":"part2/chapter06/#_9","title":"\u30ea\u30b9\u30c8\u306e\u578b\u63a8\u8ad6","text":"<pre><code>// CollectionTypeInference.scala\n@main def collectionTypeInference(): Unit = {\n  // \u8981\u7d20\u304b\u3089\u578b\u3092\u63a8\u8ad6\n  val numbers = List(1, 2, 3, 4, 5)          // List[Int]\n  val words = List(\"apple\", \"banana\", \"cat\")  // List[String]\n  val mixed = List(1, \"two\", 3.0, true)      // List[Any]\n\n  println(s\"numbers: ${numbers}\")\n  println(s\"words: ${words}\")\n  println(s\"mixed: ${mixed}\")\n\n  // Map\u306e\u578b\u63a8\u8ad6\n  val ages = Map(\n    \"\u592a\u90ce\" -&gt; 20,\n    \"\u82b1\u5b50\" -&gt; 22,\n    \"\u6b21\u90ce\" -&gt; 19\n  )  // Map[String, Int]\n\n  println(s\"ages: ${ages}\")\n\n  // \u8907\u96d1\u306a\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\n  val studentScores = Map(\n    \"\u6570\u5b66\" -&gt; List(80, 85, 90),\n    \"\u82f1\u8a9e\" -&gt; List(75, 80, 85),\n    \"\u7406\u79d1\" -&gt; List(90, 95, 100)\n  )  // Map[String, List[Int]]\n\n  println(s\"studentScores: ${studentScores}\")\n}\n</code></pre>"},{"location":"part2/chapter06/#_10","title":"\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u3067\u306e\u578b\u63a8\u8ad6","text":"<pre><code>// MethodChainInference.scala\n@main def methodChainInference(): Unit = {\n  val numbers = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\n  // \u5404\u30b9\u30c6\u30c3\u30d7\u3067\u578b\u304c\u63a8\u8ad6\u3055\u308c\u308b\n  val result = numbers\n    .filter(_ % 2 == 0)     // List[Int]\uff08\u5076\u6570\u306e\u307f\uff09\n    .map(_ * 2)             // List[Int]\uff082\u500d\uff09\n    .map(_.toString)        // List[String]\uff08\u6587\u5b57\u5217\u306b\u5909\u63db\uff09\n    .map(\"\u6570\u5024: \" + _)      // List[String]\uff08\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u8ffd\u52a0\uff09\n    .mkString(\", \")         // String\uff08\u7d50\u5408\uff09\n\n  println(result)\n\n  // \u578b\u3092\u8ffd\u8de1\u3057\u3066\u307f\u308b\n  val step1 = numbers.filter(_ % 2 == 0)\n  val step2 = step1.map(_ * 2)\n  val step3 = step2.map(_.toString)\n\n  println(s\"step1: ${step1} (${step1.getClass.getSimpleName})\")\n  println(s\"step2: ${step2} (${step2.getClass.getSimpleName})\")\n  println(s\"step3: ${step3} (${step3.getClass.getSimpleName})\")\n}\n</code></pre>"},{"location":"part2/chapter06/#_11","title":"\u578b\u63a8\u8ad6\u306e\u9650\u754c","text":""},{"location":"part2/chapter06/#_12","title":"\u518d\u5e30\u95a2\u6570\u3067\u306f\u623b\u308a\u5024\u306e\u578b\u304c\u5fc5\u8981","text":"<pre><code>// RecursionTypeInference.scala\n@main def recursionTypeInference(): Unit = {\n  // \u518d\u5e30\u95a2\u6570\u3067\u306f\u623b\u308a\u5024\u306e\u578b\u3092\u660e\u793a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n  def factorial(n: Int): Int = {  // \u623b\u308a\u5024\u306e\u578b\u304c\u5fc5\u8981\n    if (n &lt;= 1) 1\n    else n * factorial(n - 1)\n  }\n\n  // \u3053\u308c\u306f\u30a8\u30e9\u30fc\u306b\u306a\u308b\n  // def factorialError(n: Int) =\n  //   if (n &lt;= 1) 1\n  //   else n * factorialError(n - 1)\n\n  println(s\"5! = ${factorial(5)}\")\n\n  // \u76f8\u4e92\u518d\u5e30\u3082\u578b\u304c\u5fc5\u8981\n  def isEven(n: Int): Boolean = {\n    if (n == 0) true\n    else isOdd(n - 1)\n  }\n\n  def isOdd(n: Int): Boolean = {\n    if (n == 0) false\n    else isEven(n - 1)\n  }\n\n  println(s\"10\u306f\u5076\u6570\uff1f: ${isEven(10)}\")\n  println(s\"7\u306f\u5947\u6570\uff1f: ${isOdd(7)}\")\n}\n</code></pre>"},{"location":"part2/chapter06/#_13","title":"\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u63a8\u8ad6","text":"<pre><code>// TypeParameterInference.scala\n@main def typeParameterInference(): Unit = {\n  // \u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u95a2\u6570\u306e\u578b\u63a8\u8ad6\n  def identity[T](x: T): T = x\n\n  // \u4f7f\u7528\u6642\u306b\u578b\u304c\u63a8\u8ad6\u3055\u308c\u308b\n  val intResult = identity(42)        // T = Int\n  val stringResult = identity(\"Scala\") // T = String\n  val doubleResult = identity(3.14)   // T = Double\n\n  println(s\"intResult: ${intResult}\")\n  println(s\"stringResult: ${stringResult}\")\n  println(s\"doubleResult: ${doubleResult}\")\n\n  // \u3088\u308a\u5b9f\u7528\u7684\u306a\u4f8b\n  def firstElement[T](list: List[T]): Option[T] = {\n    list.headOption\n  }\n\n  val first1 = firstElement(List(1, 2, 3))        // Option[Int]\n  val first2 = firstElement(List(\"a\", \"b\", \"c\"))  // Option[String]\n\n  println(s\"first1: ${first1}\")\n  println(s\"first2: ${first2}\")\n}\n</code></pre>"},{"location":"part2/chapter06/#_14","title":"\u578b\u63a8\u8ad6\u306e\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9","text":""},{"location":"part2/chapter06/#_15","title":"\u3044\u3064\u578b\u3092\u660e\u793a\u3059\u3079\u304d\u304b","text":"<pre><code>// WhenToSpecifyTypes.scala\n@main def whenToSpecifyTypes(): Unit = {\n  // 1. \u30d1\u30d6\u30ea\u30c3\u30afAPI\u3067\u306f\u578b\u3092\u660e\u793a\n  def calculatePrice(basePrice: Double, taxRate: Double): Double = {\n    basePrice * (1 + taxRate)\n  }\n\n  // 2. \u8907\u96d1\u306a\u578b\u3084\u610f\u56f3\u3092\u660e\u78ba\u306b\u3057\u305f\u3044\u5834\u5408\n  val userDataList: List[(String, Int, Boolean)] = List(\n    (\"\u592a\u90ce\", 20, true),\n    (\"\u82b1\u5b50\", 22, false),\n    (\"\u6b21\u90ce\", 19, true)\n  )\n\n  // 3. \u578b\u3092\u5236\u9650\u3057\u305f\u3044\u5834\u5408\n  val score: Double = 90  // 90.0\u3068\u3057\u3066\u6271\u3044\u305f\u3044\n\n  // 4. \u30ed\u30fc\u30ab\u30eb\u5909\u6570\u3067\u306f\u63a8\u8ad6\u306b\u4efb\u305b\u308b\n  val localSum = 10 + 20\n  val localName = \"\u30ed\u30fc\u30ab\u30eb\u5909\u6570\"\n\n  println(s\"\u4fa1\u683c: ${calculatePrice(1000, 0.1)}\u5186\")\n  println(s\"\u30e6\u30fc\u30b6\u30fc\u6570: ${userDataList.length}\")\n  println(s\"\u30b9\u30b3\u30a2: ${score}\")\n}\n</code></pre>"},{"location":"part2/chapter06/#_16","title":"\u578b\u63a8\u8ad6\u3092\u6d3b\u7528\u3057\u305f\u8aad\u307f\u3084\u3059\u3044\u30b3\u30fc\u30c9","text":"<pre><code>// ReadableCodeWithInference.scala\n@main def readableCodeWithInference(): Unit = {\n  // \u5197\u9577\u306a\u578b\u6307\u5b9a\u3092\u907f\u3051\u308b\n  // \u60aa\u3044\u4f8b\n  val numbers1: List[Int] = List[Int](1, 2, 3, 4, 5)\n\n  // \u826f\u3044\u4f8b\n  val numbers2 = List(1, 2, 3, 4, 5)\n\n  // \u51e6\u7406\u306e\u6d41\u308c\u304c\u898b\u3084\u3059\u3044\n  val report = List(\"apple\", \"banana\", \"apple\", \"cherry\", \"banana\", \"apple\")\n    .groupBy(identity)           // \u540c\u3058\u8981\u7d20\u3067\u30b0\u30eb\u30fc\u30d7\u5316\n    .view.mapValues(_.size)      // \u5404\u30b0\u30eb\u30fc\u30d7\u306e\u30b5\u30a4\u30ba\u3092\u8a08\u7b97\n    .toList                      // \u30ea\u30b9\u30c8\u306b\u5909\u63db\n    .sortBy(-_._2)              // \u51fa\u73fe\u56de\u6570\u3067\u964d\u9806\u30bd\u30fc\u30c8\n    .map { case (fruit, count) =&gt;\n      s\"${fruit}: ${count}\u500b\"\n    }\n    .mkString(\"\\n\")\n\n  println(\"\u679c\u7269\u306e\u96c6\u8a08:\")\n  println(report)\n}\n</code></pre>"},{"location":"part2/chapter06/#_17","title":"\u5b9f\u8df5\u7684\u306a\u4f8b\uff1a\u6210\u7e3e\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0","text":"<pre><code>// GradeManagementSystem.scala\n@main def gradeManagementSystem(): Unit = {\n  // \u5b66\u751f\u306e\u6210\u7e3e\u30c7\u30fc\u30bf\uff08\u578b\u63a8\u8ad6\u3092\u6d3b\u7528\uff09\n  case class Student(name: String, scores: Map[String, Int])\n\n  val students = List(\n    Student(\"\u5c71\u7530\u592a\u90ce\", Map(\"\u6570\u5b66\" -&gt; 85, \"\u82f1\u8a9e\" -&gt; 78, \"\u7406\u79d1\" -&gt; 92)),\n    Student(\"\u9234\u6728\u82b1\u5b50\", Map(\"\u6570\u5b66\" -&gt; 92, \"\u82f1\u8a9e\" -&gt; 88, \"\u7406\u79d1\" -&gt; 85)),\n    Student(\"\u4f50\u85e4\u6b21\u90ce\", Map(\"\u6570\u5b66\" -&gt; 78, \"\u82f1\u8a9e\" -&gt; 95, \"\u7406\u79d1\" -&gt; 80))\n  )\n\n  // \u5e73\u5747\u70b9\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\uff08\u623b\u308a\u5024\u306e\u578b\u306f\u63a8\u8ad6\uff09\n  def average(scores: Iterable[Int]) = \n    scores.sum.toDouble / scores.size\n\n  // \u6210\u7e3e\u8a55\u4fa1\uff08\u578b\u63a8\u8ad6\u3092\u6d3b\u7528\uff09\n  def grade(score: Double) = score match {\n    case s if s &gt;= 90 =&gt; \"A\"\n    case s if s &gt;= 80 =&gt; \"B\"\n    case s if s &gt;= 70 =&gt; \"C\"\n    case s if s &gt;= 60 =&gt; \"D\"\n    case _ =&gt; \"F\"\n  }\n\n  // \u30ec\u30dd\u30fc\u30c8\u751f\u6210\n  println(\"=== \u6210\u7e3e\u30ec\u30dd\u30fc\u30c8 ===\")\n\n  students.foreach { student =&gt;\n    val avg = average(student.scores.values)\n    val gradeLevel = grade(avg)\n\n    println(s\"\\n${student.name}\")\n    student.scores.foreach { (subject, score) =&gt;\n      println(s\"  ${subject}: ${score}\u70b9 (${grade(score)})\")\n    }\n    println(s\"  \u5e73\u5747: ${avg.round}\u70b9 (${gradeLevel})\")\n  }\n\n  // \u79d1\u76ee\u5225\u306e\u7d71\u8a08\n  println(\"\\n=== \u79d1\u76ee\u5225\u7d71\u8a08 ===\")\n  val subjects = List(\"\u6570\u5b66\", \"\u82f1\u8a9e\", \"\u7406\u79d1\")\n\n  subjects.foreach { subject =&gt;\n    val scores = students.map(_.scores(subject))\n    val avg = average(scores)\n    val max = scores.max\n    val min = scores.min\n\n    println(s\"${subject}: \u5e73\u5747${avg.round}\u70b9, \u6700\u9ad8${max}\u70b9, \u6700\u4f4e${min}\u70b9\")\n  }\n}\n</code></pre>"},{"location":"part2/chapter06/#_18","title":"\u3088\u304f\u3042\u308b\u9593\u9055\u3044\u3068\u5bfe\u51e6\u6cd5","text":""},{"location":"part2/chapter06/#1","title":"\u9593\u9055\u30441\uff1a\u904e\u5ea6\u306a\u578b\u6307\u5b9a","text":"<pre><code>// \u60aa\u3044\u4f8b\nval list: List[String] = List[String](\"a\", \"b\", \"c\")\nval map: Map[String, Int] = Map[String, Int](\"one\" -&gt; 1)\n\n// \u826f\u3044\u4f8b\nval list = List(\"a\", \"b\", \"c\")\nval map = Map(\"one\" -&gt; 1)\n</code></pre>"},{"location":"part2/chapter06/#2","title":"\u9593\u9055\u30442\uff1a\u578b\u63a8\u8ad6\u306e\u8aa4\u89e3","text":"<pre><code>// \u610f\u56f3\u3057\u306a\u3044\u578b\u63a8\u8ad6\nval numbers = List(1, 2, 3.0)  // List[Double]\u306b\u306a\u308b\uff01\n\n// \u660e\u793a\u7684\u306b\u578b\u3092\u6307\u5b9a\nval intNumbers: List[Int] = List(1, 2, 3)\n</code></pre>"},{"location":"part2/chapter06/#3var","title":"\u9593\u9055\u30443\uff1avar\u3067\u306e\u578b\u5909\u66f4","text":"<pre><code>var value = 10      // Int\u578b\u3068\u3057\u3066\u63a8\u8ad6\n// value = \"text\"   // \u30a8\u30e9\u30fc\uff01\u578b\u306f\u5909\u66f4\u3067\u304d\u306a\u3044\n\n// \u7570\u306a\u308b\u578b\u3092\u6271\u3044\u305f\u3044\u5834\u5408\nvar anyValue: Any = 10\nanyValue = \"text\"   // OK\n</code></pre>"},{"location":"part2/chapter06/#_19","title":"\u578b\u63a8\u8ad6\u306e\u30c7\u30d0\u30c3\u30b0","text":"<pre><code>// TypeInferenceDebugging.scala\n@main def typeInferenceDebugging(): Unit = {\n  // \u63a8\u8ad6\u3055\u308c\u305f\u578b\u3092\u78ba\u8a8d\u3059\u308b\u65b9\u6cd5\n\n  // 1. IDE\u306e\u30db\u30d0\u30fc\u6a5f\u80fd\u3092\u4f7f\u3046\uff08\u6700\u3082\u7c21\u5358\uff09\n\n  // 2. \u660e\u793a\u7684\u306b\u578b\u3092\u66f8\u3044\u3066\u78ba\u8a8d\n  val mystery = List(1, 2, 3).map(_.toString)\n  // val check: List[Int] = mystery  // \u30a8\u30e9\u30fc\u3067\u578b\u304c\u5206\u304b\u308b\n\n  // 3. \u5b9f\u884c\u6642\u306b\u578b\u3092\u78ba\u8a8d\n  println(s\"\u578b: ${mystery.getClass}\")\n  println(s\"\u8981\u7d20\u306e\u578b: ${mystery.headOption.map(_.getClass)}\")\n\n  // 4. \u578b\u3092\u4e00\u6642\u7684\u306b\u660e\u793a\u3057\u3066\u78ba\u8a8d\n  val explicit: List[String] = List(1, 2, 3).map(_.toString)\n\n  // 5. \u30b3\u30f3\u30d1\u30a4\u30e9\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u578b\u3092\u8868\u793a\n  // scalac -Xprint:typer MyFile.scala\n}\n</code></pre>"},{"location":"part2/chapter06/#_20","title":"\u7df4\u7fd2\u554f\u984c","text":""},{"location":"part2/chapter06/#1_1","title":"\u554f\u984c1\uff1a\u578b\u63a8\u8ad6\u306e\u78ba\u8a8d","text":"<p>\u4ee5\u4e0b\u306e\u5909\u6570\u306e\u63a8\u8ad6\u3055\u308c\u308b\u578b\u3092\u7b54\u3048\u3066\u304f\u3060\u3055\u3044\uff1a <pre><code>val a = 42\nval b = 42L\nval c = 42.0\nval d = \"42\"\nval e = List(1, 2, 3)\nval f = Map(\"a\" -&gt; 1, \"b\" -&gt; 2)\n</code></pre></p>"},{"location":"part2/chapter06/#2_1","title":"\u554f\u984c2\uff1a\u95a2\u6570\u306e\u578b\u63a8\u8ad6","text":"<p>\u4ee5\u4e0b\u306e\u95a2\u6570\u306e\u623b\u308a\u5024\u306e\u578b\u3092\u7b54\u3048\u3066\u304f\u3060\u3055\u3044\uff1a <pre><code>def double(x: Int) = x * 2\ndef concat(a: String, b: String) = a + b\ndef compare(x: Int, y: Int) = x &gt; y\n</code></pre></p>"},{"location":"part2/chapter06/#3","title":"\u554f\u984c3\uff1a\u578b\u63a8\u8ad6\u3092\u6d3b\u7528","text":"<p>\u578b\u3092\u4e00\u5207\u66f8\u304b\u305a\u306b\u3001\u6570\u5024\u306e\u30ea\u30b9\u30c8\u304b\u3089\u5076\u6570\u306e\u307f\u3092\u62bd\u51fa\u3057\u3001\u305d\u308c\u305e\u308c\u30922\u500d\u306b\u3057\u3066\u6587\u5b57\u5217\u306e\u30ea\u30b9\u30c8\u3068\u3057\u3066\u8fd4\u3059\u95a2\u6570\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"part2/chapter06/#4","title":"\u554f\u984c4\uff1a\u578b\u63a8\u8ad6\u306e\u4fee\u6b63","text":"<p>\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u610f\u56f3\u3057\u306a\u3044\u578b\u63a8\u8ad6\u304c\u8d77\u304d\u3066\u3044\u307e\u3059\u3002\u4fee\u6b63\u3057\u3066\u304f\u3060\u3055\u3044\uff1a <pre><code>val prices = List(100, 200, 300.5)  // \u3059\u3079\u3066Int\u306b\u3057\u305f\u3044\nval result = 10 / 3                 // \u5c0f\u6570\u306e\u7d50\u679c\u304c\u6b32\u3057\u3044\n</code></pre></p>"},{"location":"part2/chapter06/#5","title":"\u554f\u984c5\uff1a\u518d\u5e30\u95a2\u6570","text":"<p>\u578b\u63a8\u8ad6\u3092\u8003\u616e\u3057\u3066\u3001\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u3092\u8a08\u7b97\u3059\u308b\u518d\u5e30\u95a2\u6570\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"part2/chapter06/#_21","title":"\u307e\u3068\u3081","text":"<p>\u3053\u306e\u7ae0\u3067\u306f\u4ee5\u4e0b\u306e\u3053\u3068\u3092\u5b66\u3073\u307e\u3057\u305f\uff1a</p> <ol> <li> <p>\u578b\u63a8\u8ad6\u306e\u57fa\u672c</p> <ul> <li>Scala\u304c\u81ea\u52d5\u7684\u306b\u578b\u3092\u5224\u65ad</li> <li>\u5024\u3084\u5f0f\u304b\u3089\u9069\u5207\u306a\u578b\u3092\u63a8\u8ad6</li> <li>\u30b3\u30fc\u30c9\u304c\u30b7\u30f3\u30d7\u30eb\u3067\u8aad\u307f\u3084\u3059\u304f\u306a\u308b</li> </ul> </li> <li> <p>\u95a2\u6570\u3067\u306e\u578b\u63a8\u8ad6</p> <ul> <li>\u623b\u308a\u5024\u306e\u578b\u306f\u591a\u304f\u306e\u5834\u5408\u63a8\u8ad6\u53ef\u80fd</li> <li>\u5f15\u6570\u306e\u578b\u306f\u660e\u793a\u7684\u306b\u6307\u5b9a\u304c\u5fc5\u8981</li> <li>\u518d\u5e30\u95a2\u6570\u3067\u306f\u623b\u308a\u5024\u306e\u578b\u304c\u5fc5\u9808</li> </ul> </li> <li> <p>\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u306e\u578b\u63a8\u8ad6</p> <ul> <li>\u8981\u7d20\u304b\u3089\u81ea\u52d5\u7684\u306b\u578b\u3092\u5224\u65ad</li> <li>\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u3067\u3082\u578b\u3092\u8ffd\u8de1</li> <li>\u8907\u96d1\u306a\u69cb\u9020\u3067\u3082\u9069\u5207\u306b\u63a8\u8ad6</li> </ul> </li> <li> <p>\u578b\u63a8\u8ad6\u306e\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9</p> <ul> <li>\u30d1\u30d6\u30ea\u30c3\u30afAPI\u3067\u306f\u578b\u3092\u660e\u793a</li> <li>\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u3067\u306f\u63a8\u8ad6\u3092\u6d3b\u7528</li> <li>\u610f\u56f3\u3092\u660e\u78ba\u306b\u3057\u305f\u3044\u5834\u5408\u306f\u578b\u3092\u66f8\u304f</li> </ul> </li> <li> <p>\u578b\u63a8\u8ad6\u306e\u9650\u754c\u3068\u6ce8\u610f\u70b9</p> <ul> <li>\u518d\u5e30\u95a2\u6570\u3067\u306e\u5236\u9650</li> <li>\u610f\u56f3\u3057\u306a\u3044\u578b\u63a8\u8ad6\u3078\u306e\u5bfe\u51e6</li> <li>\u30c7\u30d0\u30c3\u30b0\u65b9\u6cd5\u306e\u7406\u89e3</li> </ul> </li> </ol> <p>\u6b21\u306e\u7ae0\u3067\u306f\u3001\u6587\u5b57\u5217\u306e\u64cd\u4f5c\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u5b66\u3093\u3067\u3044\u304d\u307e\u3059\uff01</p>"},{"location":"part2/chapter07/","title":"\u7b2c7\u7ae0 \u6587\u5b57\u5217\u3092\u81ea\u7531\u81ea\u5728\u306b","text":""},{"location":"part2/chapter07/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u6587\u5b57\u5217\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u6700\u3082\u3088\u304f\u4f7f\u3046\u30c7\u30fc\u30bf\u578b\u306e\u4e00\u3064\u3067\u3059\u3002\u30e6\u30fc\u30b6\u30fc\u3078\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u8868\u793a\u3001\u30c7\u30fc\u30bf\u306e\u4fdd\u5b58\u3001\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u66f8\u304d\u306a\u3069\u3001\u3042\u3089\u3086\u308b\u5834\u9762\u3067\u6587\u5b57\u5217\u3092\u6271\u3044\u307e\u3059\u3002\u3053\u306e\u7ae0\u3067\u306f\u3001Scala\u3067\u306e\u6587\u5b57\u5217\u64cd\u4f5c\u3092\u5fb9\u5e95\u7684\u306b\u5b66\u3073\u307e\u3059\u3002</p>"},{"location":"part2/chapter07/#_2","title":"\u6587\u5b57\u5217\u306e\u57fa\u672c\u64cd\u4f5c","text":""},{"location":"part2/chapter07/#_3","title":"\u6587\u5b57\u5217\u306e\u4f5c\u6210\u3068\u9023\u7d50","text":"<pre><code>// StringCreation.scala\n@main def stringCreation(): Unit = {\n  // \u6587\u5b57\u5217\u306e\u4f5c\u6210\n  val greeting = \"\u3053\u3093\u306b\u3061\u306f\"\n  val name = \"\u592a\u90ce\"\n\n  // \u6587\u5b57\u5217\u306e\u9023\u7d50\uff08+\u6f14\u7b97\u5b50\uff09\n  val message1 = greeting + \"\u3001\" + name + \"\u3055\u3093\"\n  println(message1)\n\n  // \u6587\u5b57\u5217\u88dc\u9593\uff08\u63a8\u5968\uff09\n  val message2 = s\"${greeting}\u3001${name}\u3055\u3093\"\n  println(message2)\n\n  // \u5f0f\u3092\u57cb\u3081\u8fbc\u3080\n  val age = 20\n  val nextYear = s\"\u6765\u5e74\u306f${age + 1}\u6b73\u306b\u306a\u308a\u307e\u3059\"\n  println(nextYear)\n\n  // f\u88dc\u9593\u5b50\uff08\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u4ed8\u304d\uff09\n  val price = 1234.5\n  val formatted = f\"\u4fa1\u683c: ${price}%.2f\u5186\"\n  println(formatted)\n\n  // raw\u88dc\u9593\u5b50\uff08\u30a8\u30b9\u30b1\u30fc\u30d7\u306a\u3057\uff09\n  val path = raw\"C:\\Users\\Documents\\file.txt\"\n  println(path)\n}\n</code></pre>"},{"location":"part2/chapter07/#_4","title":"\u6587\u5b57\u5217\u306e\u9577\u3055\u3068\u6587\u5b57\u3078\u306e\u30a2\u30af\u30bb\u30b9","text":"<pre><code>// StringLength.scala\n@main def stringLength(): Unit = {\n  val text = \"Hello, Scala!\"\n\n  // \u9577\u3055\u306e\u53d6\u5f97\n  println(s\"\u9577\u3055: ${text.length}\u6587\u5b57\")\n\n  // \u6587\u5b57\u3078\u306e\u30a2\u30af\u30bb\u30b9\n  println(s\"\u6700\u521d\u306e\u6587\u5b57: ${text(0)}\")\n  println(s\"\u6700\u5f8c\u306e\u6587\u5b57: ${text(text.length - 1)}\")\n\n  // \u7bc4\u56f2\u3067\u30a2\u30af\u30bb\u30b9\n  println(s\"2-5\u6587\u5b57\u76ee: ${text.substring(2, 5)}\")\n\n  // \u65e5\u672c\u8a9e\u306e\u6271\u3044\n  val japanese = \"\u3053\u3093\u306b\u3061\u306f\"\n  println(s\"\u65e5\u672c\u8a9e\u306e\u9577\u3055: ${japanese.length}\u6587\u5b57\")\n\n  // \u6587\u5b57\u3054\u3068\u306b\u51e6\u7406\n  println(\"\u6587\u5b57\u3054\u3068\u306b\u8868\u793a:\")\n  japanese.foreach(char =&gt; println(s\"  ${char}\"))\n}\n</code></pre>"},{"location":"part2/chapter07/#_5","title":"\u6587\u5b57\u5217\u306e\u691c\u7d22\u3068\u7f6e\u63db","text":""},{"location":"part2/chapter07/#_6","title":"\u6587\u5b57\u5217\u306e\u691c\u7d22","text":"<pre><code>// StringSearch.scala\n@main def stringSearch(): Unit = {\n  val text = \"Scala is a powerful language. Scala is fun!\"\n\n  // \u542b\u307e\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\n  println(s\"'Scala'\u3092\u542b\u3080\uff1f: ${text.contains(\"Scala\")}\")\n  println(s\"'Java'\u3092\u542b\u3080\uff1f: ${text.contains(\"Java\")}\")\n\n  // \u958b\u59cb\u30fb\u7d42\u4e86\u306e\u78ba\u8a8d\n  println(s\"'Scala'\u3067\u59cb\u307e\u308b\uff1f: ${text.startsWith(\"Scala\")}\")\n  println(s\"'!'\u3067\u7d42\u308f\u308b\uff1f: ${text.endsWith(\"!\")}\")\n\n  // \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u691c\u7d22\n  println(s\"\u6700\u521d\u306e'Scala': ${text.indexOf(\"Scala\")}\")\n  println(s\"\u6700\u5f8c\u306e'Scala': ${text.lastIndexOf(\"Scala\")}\")\n\n  // \u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u306f-1\n  println(s\"'Python'\u306e\u4f4d\u7f6e: ${text.indexOf(\"Python\")}\")\n\n  // \u6b63\u898f\u8868\u73fe\u3067\u306e\u691c\u7d22\n  val pattern = \"\\\\b\\\\w+ful\\\\b\".r  // \"ful\"\u3067\u7d42\u308f\u308b\u5358\u8a9e\n  val matches = pattern.findAllIn(text).toList\n  println(s\"'ful'\u3067\u7d42\u308f\u308b\u5358\u8a9e: ${matches}\")\n}\n</code></pre>"},{"location":"part2/chapter07/#_7","title":"\u6587\u5b57\u5217\u306e\u7f6e\u63db","text":"<pre><code>// StringReplace.scala\n@main def stringReplace(): Unit = {\n  val original = \"I love Java. Java is great!\"\n\n  // \u5358\u7d14\u306a\u7f6e\u63db\n  val replaced1 = original.replace(\"Java\", \"Scala\")\n  println(s\"\u5143: ${original}\")\n  println(s\"\u7f6e\u63db\u5f8c: ${replaced1}\")\n\n  // \u6700\u521d\u306e\u4e00\u3064\u3060\u3051\u7f6e\u63db\n  val replaced2 = original.replaceFirst(\"Java\", \"Scala\")\n  println(s\"\u6700\u521d\u3060\u3051: ${replaced2}\")\n\n  // \u6b63\u898f\u8868\u73fe\u3067\u306e\u7f6e\u63db\n  val text = \"\u79c1\u306e\u96fb\u8a71\u756a\u53f7\u306f090-1234-5678\u3067\u3059\"\n  val masked = text.replaceAll(\"\\\\d{3}-\\\\d{4}-\\\\d{4}\", \"***-****-****\")\n  println(s\"\u30de\u30b9\u30af\u5f8c: ${masked}\")\n\n  // \u8907\u6570\u306e\u7f6e\u63db\n  val multiReplace = \"apple,banana;orange:grape\"\n    .replace(\",\", \" \")\n    .replace(\";\", \" \")\n    .replace(\":\", \" \")\n  println(s\"\u533a\u5207\u308a\u6587\u5b57\u3092\u7d71\u4e00: ${multiReplace}\")\n}\n</code></pre>"},{"location":"part2/chapter07/#_8","title":"\u6587\u5b57\u5217\u306e\u5206\u5272\u3068\u7d50\u5408","text":""},{"location":"part2/chapter07/#_9","title":"\u6587\u5b57\u5217\u306e\u5206\u5272","text":"<pre><code>// StringSplit.scala\n@main def stringSplit(): Unit = {\n  // \u30ab\u30f3\u30de\u3067\u5206\u5272\n  val csv = \"\u308a\u3093\u3054,\u30d0\u30ca\u30ca,\u30aa\u30ec\u30f3\u30b8,\u3076\u3069\u3046\"\n  val fruits = csv.split(\",\")\n  println(\"\u679c\u7269\u30ea\u30b9\u30c8:\")\n  fruits.foreach(fruit =&gt; println(s\"  - ${fruit}\"))\n\n  // \u7a7a\u767d\u3067\u5206\u5272\n  val sentence = \"Scala  is   awesome\"\n  val words = sentence.split(\"\\\\s+\")  // \u9023\u7d9a\u3059\u308b\u7a7a\u767d\u3082\u8003\u616e\n  println(s\"\u5358\u8a9e\u6570: ${words.length}\")\n  words.foreach(println)\n\n  // \u8907\u6570\u306e\u533a\u5207\u308a\u6587\u5b57\n  val mixed = \"apple,banana;orange:grape\"\n  val items = mixed.split(\"[,;:]\")\n  println(s\"\u30a2\u30a4\u30c6\u30e0: ${items.mkString(\", \")}\")\n\n  // \u884c\u3067\u5206\u5272\n  val multiline = \"\"\"\u7b2c1\u884c\n    |\u7b2c2\u884c\n    |\u7b2c3\u884c\"\"\".stripMargin\n  val lines = multiline.split(\"\\n\")\n  println(s\"\u884c\u6570: ${lines.length}\")\n}\n</code></pre>"},{"location":"part2/chapter07/#_10","title":"\u6587\u5b57\u5217\u306e\u7d50\u5408","text":"<pre><code>// StringJoin.scala\n@main def stringJoin(): Unit = {\n  val words = List(\"Scala\", \"is\", \"awesome\")\n\n  // mkString\u3067\u7d50\u5408\n  val sentence1 = words.mkString(\" \")\n  val sentence2 = words.mkString(\", \")\n  val sentence3 = words.mkString(\"[\", \", \", \"]\")\n\n  println(s\"\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a: ${sentence1}\")\n  println(s\"\u30ab\u30f3\u30de\u533a\u5207\u308a: ${sentence2}\")\n  println(s\"\u62ec\u5f27\u4ed8\u304d: ${sentence3}\")\n\n  // StringBuilder\u3067\u52b9\u7387\u7684\u306b\u7d50\u5408\n  val builder = new StringBuilder()\n  builder.append(\"Hello\")\n  builder.append(\", \")\n  builder.append(\"World\")\n  builder.append(\"!\")\n  println(s\"StringBuilder: ${builder.toString}\")\n\n  // \u5927\u91cf\u306e\u6587\u5b57\u5217\u7d50\u5408\n  val numbers = (1 to 10000).map(_.toString)\n  val efficient = numbers.mkString(\",\")  // \u52b9\u7387\u7684\n  println(s\"\u5927\u91cf\u7d50\u5408\u306e\u9577\u3055: ${efficient.length}\")\n}\n</code></pre>"},{"location":"part2/chapter07/#_11","title":"\u6587\u5b57\u5217\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8","text":""},{"location":"part2/chapter07/#printf","title":"printf\u5f62\u5f0f\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8","text":"<pre><code>// StringFormat.scala\n@main def stringFormat(): Unit = {\n  // f\u88dc\u9593\u5b50\u3092\u4f7f\u3063\u305f\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n  val name = \"\u592a\u90ce\"\n  val age = 20\n  val height = 170.5\n  val score = 85.333333\n\n  // \u57fa\u672c\u7684\u306a\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n  println(f\"\u540d\u524d: ${name}%s, \u5e74\u9f62: ${age}%d\u6b73\")\n  println(f\"\u8eab\u9577: ${height}%.1fcm\")\n  println(f\"\u30b9\u30b3\u30a2: ${score}%.2f\u70b9\")\n\n  // \u5e45\u6307\u5b9a\n  println(f\"${name}%10s\")  // \u53f3\u5bc4\u305b\n  println(f\"${name}%-10s\") // \u5de6\u5bc4\u305b\n  println(f\"${age}%05d\")   // \u30bc\u30ed\u57cb\u3081\n\n  // \u8868\u5f62\u5f0f\u3067\u306e\u8868\u793a\n  println(\"\\n\u6210\u7e3e\u8868:\")\n  println(f\"${\"\u79d1\u76ee\"}%-10s ${\"\u70b9\u6570\"}%5s ${\"\u8a55\u4fa1\"}%s\")\n  println(\"-\" * 25)\n  println(f\"${\"\u6570\u5b66\"}%-10s ${85}%5d ${\"B\"}%s\")\n  println(f\"${\"\u82f1\u8a9e\"}%-10s ${92}%5d ${\"A\"}%s\")\n  println(f\"${\"\u7406\u79d1\"}%-10s ${78}%5d ${\"C\"}%s\")\n}\n</code></pre>"},{"location":"part2/chapter07/#_12","title":"\u6570\u5024\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8","text":"<pre><code>// NumberFormat.scala\n@main def numberFormat(): Unit = {\n  val price = 1234567.89\n  val percentage = 0.1234\n  val scientific = 1234.5678\n\n  // \u901a\u8ca8\u5f62\u5f0f\n  println(f\"\u4fa1\u683c: \u00a5${price}%,.0f\")\n\n  // \u30d1\u30fc\u30bb\u30f3\u30c8\u8868\u793a\n  println(f\"\u5272\u5408: ${percentage * 100}%.2f%%\")\n\n  // \u6307\u6570\u8868\u8a18\n  println(f\"\u79d1\u5b66\u8868\u8a18: ${scientific}%e\")\n  println(f\"\u77ed\u3044\u65b9: ${scientific}%g\")\n\n  // 16\u9032\u6570\u30018\u9032\u6570\n  val number = 255\n  println(f\"10\u9032\u6570: ${number}%d\")\n  println(f\"16\u9032\u6570: ${number}%x\")\n  println(f\"8\u9032\u6570: ${number}%o\")\n\n  // \u65e5\u4ed8\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\uff08\u7c21\u6613\u7248\uff09\n  import java.time.LocalDateTime\n  val now = LocalDateTime.now()\n  println(f\"\u73fe\u5728\u6642\u523b: ${now.getYear}%d\u5e74${now.getMonthValue}%02d\u6708${now.getDayOfMonth}%02d\u65e5\")\n}\n</code></pre>"},{"location":"part2/chapter07/#_13","title":"\u6587\u5b57\u5217\u306e\u5909\u63db","text":""},{"location":"part2/chapter07/#_14","title":"\u5927\u6587\u5b57\u30fb\u5c0f\u6587\u5b57\u5909\u63db","text":"<pre><code>// CaseConversion.scala\n@main def caseConversion(): Unit = {\n  val text = \"Hello, Scala Programming!\"\n\n  // \u5927\u6587\u5b57\u30fb\u5c0f\u6587\u5b57\u5909\u63db\n  println(s\"\u5143: ${text}\")\n  println(s\"\u5927\u6587\u5b57: ${text.toUpperCase}\")\n  println(s\"\u5c0f\u6587\u5b57: ${text.toLowerCase}\")\n\n  // \u6700\u521d\u306e\u6587\u5b57\u3092\u5927\u6587\u5b57\u306b\n  val word = \"scala\"\n  val capitalized = word.capitalize\n  println(s\"${word} \u2192 ${capitalized}\")\n\n  // \u30ad\u30e3\u30e1\u30eb\u30b1\u30fc\u30b9\u3068\u30b9\u30cd\u30fc\u30af\u30b1\u30fc\u30b9\u306e\u5909\u63db\n  val camelCase = \"firstName\"\n  val snakeCase = camelCase\n    .replaceAll(\"([A-Z])\", \"_$1\")\n    .toLowerCase\n  println(s\"${camelCase} \u2192 ${snakeCase}\")\n\n  // \u30bf\u30a4\u30c8\u30eb\u30b1\u30fc\u30b9\uff08\u5404\u5358\u8a9e\u306e\u6700\u521d\u3092\u5927\u6587\u5b57\uff09\n  val title = \"the quick brown fox\"\n  val titleCase = title.split(\" \")\n    .map(_.capitalize)\n    .mkString(\" \")\n  println(s\"\u30bf\u30a4\u30c8\u30eb\u30b1\u30fc\u30b9: ${titleCase}\")\n}\n</code></pre>"},{"location":"part2/chapter07/#_15","title":"\u7a7a\u767d\u306e\u51e6\u7406","text":"<pre><code>// WhitespaceHandling.scala\n@main def whitespaceHandling(): Unit = {\n  val messy = \"  Hello   Scala   World  \"\n\n  // \u524d\u5f8c\u306e\u7a7a\u767d\u3092\u524a\u9664\n  println(s\"\u5143: '${messy}'\")\n  println(s\"trim: '${messy.trim}'\")\n\n  // \u5de6\u5074\u306e\u307f\u524a\u9664\n  println(s\"\u5de6trim: '${messy.stripLeading}'\")\n\n  // \u53f3\u5074\u306e\u307f\u524a\u9664\n  println(s\"\u53f3trim: '${messy.stripTrailing}'\")\n\n  // \u9023\u7d9a\u3059\u308b\u7a7a\u767d\u30921\u3064\u306b\n  val normalized = messy.trim.replaceAll(\"\\\\s+\", \" \")\n  println(s\"\u6b63\u898f\u5316: '${normalized}'\")\n\n  // \u6539\u884c\u3092\u542b\u3080\u6587\u5b57\u5217\n  val multiline = \"\"\"\n    |  \u7b2c1\u884c\n    |    \u7b2c2\u884c  \n    |  \u7b2c3\u884c\n  \"\"\".stripMargin\n\n  val trimmedLines = multiline\n    .split(\"\\n\")\n    .map(_.trim)\n    .filter(_.nonEmpty)\n    .mkString(\"\\n\")\n\n  println(\"\u6574\u5f62\u5f8c:\")\n  println(trimmedLines)\n}\n</code></pre>"},{"location":"part2/chapter07/#_16","title":"\u6b63\u898f\u8868\u73fe","text":""},{"location":"part2/chapter07/#_17","title":"\u57fa\u672c\u7684\u306a\u6b63\u898f\u8868\u73fe","text":"<pre><code>// RegexBasics.scala\n@main def regexBasics(): Unit = {\n  // \u6b63\u898f\u8868\u73fe\u30d1\u30bf\u30fc\u30f3\u306e\u4f5c\u6210\n  val emailPattern = \"\\\\w+@\\\\w+\\\\.\\\\w+\".r\n  val phonePattern = \"\\\\d{3}-\\\\d{4}-\\\\d{4}\".r\n\n  // \u30de\u30c3\u30c1\u30f3\u30b0\n  val email = \"user@example.com\"\n  val phone = \"090-1234-5678\"\n\n  emailPattern.findFirstIn(email) match {\n    case Some(found) =&gt; println(s\"\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9: ${found}\")\n    case None =&gt; println(\"\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\")\n  }\n\n  phonePattern.findFirstIn(phone) match {\n    case Some(found) =&gt; println(s\"\u96fb\u8a71\u756a\u53f7: ${found}\")\n    case None =&gt; println(\"\u96fb\u8a71\u756a\u53f7\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\")\n  }\n\n  // \u8907\u6570\u306e\u30de\u30c3\u30c1\u3092\u691c\u7d22\n  val text = \"\u9023\u7d61\u5148: user1@example.com, user2@test.com\"\n  val emails = emailPattern.findAllIn(text).toList\n  println(s\"\u898b\u3064\u304b\u3063\u305f\u30e1\u30fc\u30eb: ${emails}\")\n}\n</code></pre>"},{"location":"part2/chapter07/#_18","title":"\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0\u3068\u62bd\u51fa","text":"<pre><code>// RegexExtraction.scala\n@main def regexExtraction(): Unit = {\n  // \u30b0\u30eb\u30fc\u30d7\u3092\u4f7f\u3063\u305f\u62bd\u51fa\n  val datePattern = \"(\\\\d{4})-(\\\\d{2})-(\\\\d{2})\".r\n  val logPattern = \"\\\\[(\\\\w+)\\\\] (.+)\".r\n\n  // \u65e5\u4ed8\u306e\u62bd\u51fa\n  \"2024-03-15\" match {\n    case datePattern(year, month, day) =&gt;\n      println(s\"\u5e74: ${year}, \u6708: ${month}, \u65e5: ${day}\")\n    case _ =&gt;\n      println(\"\u65e5\u4ed8\u5f62\u5f0f\u304c\u6b63\u3057\u304f\u3042\u308a\u307e\u305b\u3093\")\n  }\n\n  // \u30ed\u30b0\u306e\u89e3\u6790\n  val logs = List(\n    \"[INFO] \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u958b\u59cb\u3057\u307e\u3057\u305f\",\n    \"[ERROR] \u30d5\u30a1\u30a4\u30eb\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\",\n    \"[DEBUG] \u5909\u6570x\u306e\u5024: 42\"\n  )\n\n  logs.foreach { log =&gt;\n    log match {\n      case logPattern(level, message) =&gt;\n        println(s\"${level}: ${message}\")\n      case _ =&gt;\n        println(s\"\u4e0d\u660e\u306a\u5f62\u5f0f: ${log}\")\n    }\n  }\n}\n</code></pre>"},{"location":"part2/chapter07/#_19","title":"\u5b9f\u8df5\u7684\u306a\u4f8b\uff1a\u30c6\u30ad\u30b9\u30c8\u51e6\u7406\u30c4\u30fc\u30eb","text":"<pre><code>// TextProcessor.scala\n@main def textProcessor(): Unit = {\n  // \u30b5\u30f3\u30d7\u30eb\u30c6\u30ad\u30b9\u30c8\n  val article = \"\"\"\n    |Scala\u306f2003\u5e74\u306b\u767b\u5834\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3067\u3059\u3002\n    |JavaVM\u4e0a\u3067\u52d5\u4f5c\u3057\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u3068\u95a2\u6570\u578b\u306e\u7279\u5fb4\u3092\u6301\u3061\u307e\u3059\u3002\n    |\n    |\u4e3b\u306a\u7279\u5fb4\uff1a\n    |1. \u578b\u63a8\u8ad6\u306b\u3088\u308a\u3001\u30b3\u30fc\u30c9\u304c\u7c21\u6f54\u306b\u66f8\u3051\u308b\n    |2. \u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0\u304c\u5f37\u529b\n    |3. \u4e26\u884c\u51e6\u7406\u304c\u5f97\u610f\n    |\n    |\u9023\u7d61\u5148: info@scala-lang.org\n    |\u8a73\u7d30: https://www.scala-lang.org/\n  \"\"\".stripMargin.trim\n\n  // \u7d71\u8a08\u60c5\u5831\u306e\u53ce\u96c6\n  val lines = article.split(\"\\n\")\n  val words = article.split(\"\\\\s+\")\n  val chars = article.length\n\n  println(\"=== \u30c6\u30ad\u30b9\u30c8\u7d71\u8a08 ===\")\n  println(s\"\u884c\u6570: ${lines.length}\")\n  println(s\"\u5358\u8a9e\u6570: ${words.length}\")\n  println(s\"\u6587\u5b57\u6570: ${chars}\")\n\n  // \u30ad\u30fc\u30ef\u30fc\u30c9\u691c\u7d22\n  val keywords = List(\"Scala\", \"\u578b\", \"\u95a2\u6570\")\n  println(\"\\n=== \u30ad\u30fc\u30ef\u30fc\u30c9\u51fa\u73fe\u56de\u6570 ===\")\n  keywords.foreach { keyword =&gt;\n    val count = article.split(keyword).length - 1\n    println(s\"${keyword}: ${count}\u56de\")\n  }\n\n  // URL\u62bd\u51fa\n  val urlPattern = \"https?://[\\\\w/.-]+\".r\n  val urls = urlPattern.findAllIn(article).toList\n  println(s\"\\n=== \u898b\u3064\u304b\u3063\u305fURL ===\")\n  urls.foreach(println)\n\n  // \u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u62bd\u51fa\n  val emailPattern = \"[\\\\w.+-]+@[\\\\w.-]+\\\\.[\\\\w]+\".r\n  val emails = emailPattern.findAllIn(article).toList\n  println(s\"\\n=== \u898b\u3064\u304b\u3063\u305f\u30e1\u30fc\u30eb ===\")\n  emails.foreach(println)\n\n  // \u898b\u51fa\u3057\u4f5c\u6210\uff08\u6700\u521d\u306e\u6587\u3092\u62bd\u51fa\uff09\n  val firstSentence = article.split(\"[\u3002\uff01\uff1f]\").headOption.getOrElse(\"\")\n  println(s\"\\n=== \u898b\u51fa\u3057 ===\")\n  println(firstSentence)\n}\n</code></pre>"},{"location":"part2/chapter07/#_20","title":"\u6587\u5b57\u5217\u306e\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0","text":"<pre><code>// StringEncoding.scala\n@main def stringEncoding(): Unit = {\n  val text = \"\u3053\u3093\u306b\u3061\u306f\u3001Scala!\"\n\n  // \u30d0\u30a4\u30c8\u914d\u5217\u3078\u306e\u5909\u63db\n  val utf8Bytes = text.getBytes(\"UTF-8\")\n  val sjisBytes = text.getBytes(\"Shift_JIS\")\n\n  println(s\"\u5143\u306e\u6587\u5b57\u5217: ${text}\")\n  println(s\"UTF-8\u30d0\u30a4\u30c8\u6570: ${utf8Bytes.length}\")\n  println(s\"Shift-JIS\u30d0\u30a4\u30c8\u6570: ${sjisBytes.length}\")\n\n  // \u30d0\u30a4\u30c8\u914d\u5217\u304b\u3089\u6587\u5b57\u5217\u3078\n  val restored = new String(utf8Bytes, \"UTF-8\")\n  println(s\"\u5fa9\u5143: ${restored}\")\n\n  // Base64\u30a8\u30f3\u30b3\u30fc\u30c9\uff08Java\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u4f7f\u7528\uff09\n  import java.util.Base64\n  val encoded = Base64.getEncoder.encodeToString(utf8Bytes)\n  val decoded = new String(Base64.getDecoder.decode(encoded), \"UTF-8\")\n\n  println(s\"Base64: ${encoded}\")\n  println(s\"\u30c7\u30b3\u30fc\u30c9: ${decoded}\")\n}\n</code></pre>"},{"location":"part2/chapter07/#_21","title":"\u3088\u304f\u3042\u308b\u30a8\u30e9\u30fc\u3068\u5bfe\u51e6\u6cd5","text":""},{"location":"part2/chapter07/#1indexoutofboundsexception","title":"\u30a8\u30e9\u30fc\u4f8b1\uff1aIndexOutOfBoundsException","text":"<pre><code>val text = \"Hello\"\n// val char = text(10)  // \u30a8\u30e9\u30fc\uff01\u7bc4\u56f2\u5916\n</code></pre> <p>\u5bfe\u51e6\u6cd5: \u9577\u3055\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u304b\u3001lift\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046</p>"},{"location":"part2/chapter07/#2nullpointerexception","title":"\u30a8\u30e9\u30fc\u4f8b2\uff1aNullPointerException","text":"<pre><code>var text: String = null\n// val length = text.length  // \u30a8\u30e9\u30fc\uff01\n</code></pre> <p>\u5bfe\u51e6\u6cd5: Option\u3092\u4f7f\u3063\u3066\u5b89\u5168\u306b\u51e6\u7406</p>"},{"location":"part2/chapter07/#3","title":"\u30a8\u30e9\u30fc\u4f8b3\uff1a\u6b63\u898f\u8868\u73fe\u306e\u30a8\u30e9\u30fc","text":"<pre><code>// val pattern = \"[\".r  // \u30a8\u30e9\u30fc\uff01\u4e0d\u5b8c\u5168\u306a\u6b63\u898f\u8868\u73fe\n</code></pre> <p>\u5bfe\u51e6\u6cd5: \u6b63\u898f\u8868\u73fe\u3092\u6b63\u3057\u304f\u8a18\u8ff0\u3057\u3001\u30a8\u30b9\u30b1\u30fc\u30d7\u304c\u5fc5\u8981\u306a\u6587\u5b57\u306b\u6ce8\u610f</p>"},{"location":"part2/chapter07/#_22","title":"\u7df4\u7fd2\u554f\u984c","text":""},{"location":"part2/chapter07/#1","title":"\u554f\u984c1\uff1a\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u306e\u691c\u8a3c","text":"<p>\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u304c\u6709\u52b9\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\u3002 - @\u3092\u542b\u3080 - @\u306e\u524d\u5f8c\u306b1\u6587\u5b57\u4ee5\u4e0a - \u30c9\u30e1\u30a4\u30f3\u90e8\u5206\u306b.\u3092\u542b\u3080</p>"},{"location":"part2/chapter07/#2","title":"\u554f\u984c2\uff1a\u6587\u5b57\u5217\u306e\u6574\u5f62","text":"<p>\u4ee5\u4e0b\u306e\u51e6\u7406\u3092\u884c\u3046\u95a2\u6570\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - \u524d\u5f8c\u306e\u7a7a\u767d\u3092\u524a\u9664 - \u9023\u7d9a\u3059\u308b\u7a7a\u767d\u30921\u3064\u306b - \u5404\u5358\u8a9e\u306e\u6700\u521d\u3092\u5927\u6587\u5b57\u306b</p>"},{"location":"part2/chapter07/#3csv","title":"\u554f\u984c3\uff1aCSV\u30d1\u30fc\u30b5\u30fc","text":"<p>CSV\u5f62\u5f0f\u306e\u6587\u5b57\u5217\u3092\u89e3\u6790\u3057\u3066\u3001List[List[String]]\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"part2/chapter07/#4","title":"\u554f\u984c4\uff1a\u30d1\u30b9\u30ef\u30fc\u30c9\u5f37\u5ea6\u30c1\u30a7\u30c3\u30af","text":"<p>\u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u5f37\u5ea6\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u95a2\u6570\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - 8\u6587\u5b57\u4ee5\u4e0a - \u5927\u6587\u5b57\u30fb\u5c0f\u6587\u5b57\u3092\u542b\u3080 - \u6570\u5b57\u3092\u542b\u3080 - \u7279\u6b8a\u6587\u5b57\u3092\u542b\u3080</p>"},{"location":"part2/chapter07/#5","title":"\u554f\u984c5\uff1a\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u51e6\u7406","text":"<p>\u6587\u5b57\u5217\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5185\u306e<code>${\u5909\u6570\u540d}</code>\u3092\u5b9f\u969b\u306e\u5024\u306b\u7f6e\u63db\u3059\u308b\u95a2\u6570\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"part2/chapter07/#_23","title":"\u307e\u3068\u3081","text":"<p>\u3053\u306e\u7ae0\u3067\u306f\u4ee5\u4e0b\u306e\u3053\u3068\u3092\u5b66\u3073\u307e\u3057\u305f\uff1a</p> <ol> <li> <p>\u6587\u5b57\u5217\u306e\u57fa\u672c\u64cd\u4f5c</p> <ul> <li>\u4f5c\u6210\u3001\u9023\u7d50\u3001\u88dc\u9593</li> <li>\u9577\u3055\u3068\u6587\u5b57\u3078\u306e\u30a2\u30af\u30bb\u30b9</li> <li>\u69d8\u3005\u306a\u6587\u5b57\u5217\u88dc\u9593\u5b50</li> </ul> </li> <li> <p>\u691c\u7d22\u3068\u7f6e\u63db</p> <ul> <li>contains\u3001indexOf\u7b49\u306e\u691c\u7d22\u30e1\u30bd\u30c3\u30c9</li> <li>replace\u7cfb\u30e1\u30bd\u30c3\u30c9\u3067\u306e\u7f6e\u63db</li> <li>\u6b63\u898f\u8868\u73fe\u3092\u4f7f\u3063\u305f\u9ad8\u5ea6\u306a\u691c\u7d22</li> </ul> </li> <li> <p>\u5206\u5272\u3068\u7d50\u5408</p> <ul> <li>split\u3067\u306e\u5206\u5272</li> <li>mkString\u3067\u306e\u7d50\u5408</li> <li>StringBuilder\u3067\u306e\u52b9\u7387\u7684\u306a\u51e6\u7406</li> </ul> </li> <li> <p>\u30d5\u30a9\u30fc\u30de\u30c3\u30c8</p> <ul> <li>f\u88dc\u9593\u5b50\u3067\u306eprintf\u5f62\u5f0f</li> <li>\u6570\u5024\u3084\u65e5\u4ed8\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8</li> <li>\u8868\u5f62\u5f0f\u3067\u306e\u51fa\u529b</li> </ul> </li> <li> <p>\u6b63\u898f\u8868\u73fe</p> <ul> <li>\u30d1\u30bf\u30fc\u30f3\u306e\u4f5c\u6210\u3068\u4f7f\u7528</li> <li>\u30de\u30c3\u30c1\u30f3\u30b0\u3068\u62bd\u51fa</li> <li>\u5b9f\u7528\u7684\u306a\u30d1\u30bf\u30fc\u30f3\u4f8b</li> </ul> </li> </ol> <p>\u6b21\u306e\u7ae0\u3067\u306f\u3001\u578b\u5b89\u5168\u306a\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306b\u3064\u3044\u3066\u5b66\u3093\u3067\u3044\u304d\u307e\u3059\uff01</p>"},{"location":"part3/chapter08/","title":"\u7b2c8\u7ae0 \u578b\u5b89\u5168\u306a\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\uff08\u57fa\u790e\u7de8\uff09","text":""},{"location":"part3/chapter08/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u306f\u3001\u8907\u6570\u306e\u30c7\u30fc\u30bf\u3092\u307e\u3068\u3081\u3066\u6271\u3046\u3053\u3068\u304c\u3088\u304f\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u751f\u5f92\u306e\u540d\u7c3f\u3001\u5546\u54c1\u306e\u30ea\u30b9\u30c8\u3001\u65e5\u3005\u306e\u58f2\u4e0a\u30c7\u30fc\u30bf\u306a\u3069\u3067\u3059\u3002Scala\u306b\u306f\u3001\u3053\u3046\u3057\u305f\u30c7\u30fc\u30bf\u3092\u52b9\u7387\u7684\u304b\u3064\u5b89\u5168\u306b\u6271\u3046\u305f\u3081\u306e\u300c\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u300d\u3068\u547c\u3070\u308c\u308b\u4ed5\u7d44\u307f\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u7ae0\u3067\u306f\u3001\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u57fa\u672c\u6982\u5ff5\u3068\u578b\u5b89\u5168\u6027\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3059\u3002</p>"},{"location":"part3/chapter08/#_2","title":"\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3068\u306f\u4f55\u304b\uff1f","text":""},{"location":"part3/chapter08/#_3","title":"\u73fe\u5b9f\u4e16\u754c\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3","text":"<pre><code>// RealWorldCollections.scala\n@main def realWorldCollections(): Unit = {\n  // \u8cb7\u3044\u7269\u30ea\u30b9\u30c8\n  val shoppingList = List(\"\u725b\u4e73\", \"\u30d1\u30f3\", \"\u5375\", \"\u308a\u3093\u3054\")\n  println(s\"\u8cb7\u3044\u7269\u30ea\u30b9\u30c8: ${shoppingList}\")\n\n  // \u751f\u5f92\u306e\u70b9\u6570\n  val scores = List(85, 92, 78, 95, 88)\n  println(s\"\u30c6\u30b9\u30c8\u306e\u70b9\u6570: ${scores}\")\n\n  // \u66dc\u65e5\u3068\u4e88\u5b9a\n  val schedule = Map(\n    \"\u6708\u66dc\u65e5\" -&gt; \"\u4f1a\u8b70\",\n    \"\u706b\u66dc\u65e5\" -&gt; \"\u958b\u767a\",\n    \"\u6c34\u66dc\u65e5\" -&gt; \"\u30ec\u30d3\u30e5\u30fc\"\n  )\n  println(s\"\u4eca\u9031\u306e\u4e88\u5b9a: ${schedule}\")\n}\n</code></pre>"},{"location":"part3/chapter08/#_4","title":"\u306a\u305c\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304c\u5fc5\u8981\u304b\uff1f","text":"<pre><code>// WhyCollections.scala\n@main def whyCollections(): Unit = {\n  // \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u308f\u306a\u3044\u5834\u5408\uff08\u975e\u52b9\u7387\uff09\n  val student1 = \"\u592a\u90ce\"\n  val student2 = \"\u82b1\u5b50\"\n  val student3 = \"\u6b21\u90ce\"\n  val student4 = \"\u685c\"\n  val student5 = \"\u5065\u592a\"\n\n  println(\"\u751f\u5f92\u4e00\u89a7\uff08\u500b\u5225\u5909\u6570\uff09:\")\n  println(student1)\n  println(student2)\n  println(student3)\n  println(student4)\n  println(student5)\n\n  // \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u3046\u5834\u5408\uff08\u52b9\u7387\u7684\uff09\n  val students = List(\"\u592a\u90ce\", \"\u82b1\u5b50\", \"\u6b21\u90ce\", \"\u685c\", \"\u5065\u592a\")\n\n  println(\"\\n\u751f\u5f92\u4e00\u89a7\uff08\u30ea\u30b9\u30c8\uff09:\")\n  students.foreach(println)\n\n  // \u3055\u3089\u306b\u4fbf\u5229\u306a\u64cd\u4f5c\n  println(s\"\\n\u751f\u5f92\u6570: ${students.length}\u4eba\")\n  println(s\"\u6700\u521d\u306e\u751f\u5f92: ${students.head}\")\n  println(s\"\u300c\u592a\u300d\u3092\u542b\u3080\u751f\u5f92: ${students.filter(_.contains(\"\u592a\"))}\")\n}\n</code></pre>"},{"location":"part3/chapter08/#_5","title":"\u578b\u5b89\u5168\u6027\u3068\u306f","text":""},{"location":"part3/chapter08/#_6","title":"\u578b\u5b89\u5168\u306a\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u5229\u70b9","text":"<pre><code>// TypeSafeCollections.scala\n@main def typeSafeCollections(): Unit = {\n  // \u578b\u5b89\u5168\u306a\u30ea\u30b9\u30c8\uff08\u3059\u3079\u3066\u540c\u3058\u578b\uff09\n  val numbers: List[Int] = List(1, 2, 3, 4, 5)\n  val total = numbers.sum  // \u578b\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u8a08\u7b97\u53ef\u80fd\n  println(s\"\u5408\u8a08: ${total}\")\n\n  // \u578b\u304c\u6df7\u5728\u3059\u308b\u5834\u5408\uff08Any\u578b\uff09\n  val mixed: List[Any] = List(1, \"two\", 3.0, true)\n  // val mixedTotal = mixed.sum  // \u30a8\u30e9\u30fc\uff01Any\u306b\u306f sum \u30e1\u30bd\u30c3\u30c9\u304c\u306a\u3044\n\n  // \u578b\u5b89\u5168\u6027\u306b\u3088\u308a\u9593\u9055\u3044\u3092\u9632\u3052\u308b\n  val prices: List[Double] = List(100.0, 250.5, 80.0)\n  val average = prices.sum / prices.length\n  println(f\"\u5e73\u5747\u4fa1\u683c: ${average}%.2f\u5186\")\n\n  // \u578b\u3092\u9593\u9055\u3048\u308b\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\n  // prices.append(\"\u7121\u6599\")  // \u30a8\u30e9\u30fc\uff01String\u306f\u8ffd\u52a0\u3067\u304d\u306a\u3044\n}\n</code></pre>"},{"location":"part3/chapter08/#_7","title":"\u578b\u30d1\u30e9\u30e1\u30fc\u30bf","text":"<pre><code>// TypeParameters.scala\n@main def typeParameters(): Unit = {\n  // List[T]\u306eT\u304c\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\n  val intList: List[Int] = List(1, 2, 3)\n  val stringList: List[String] = List(\"a\", \"b\", \"c\")\n  val doubleList: List[Double] = List(1.1, 2.2, 3.3)\n\n  // \u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u3088\u308a\u3001\u5404\u30ea\u30b9\u30c8\u306f\u9069\u5207\u306a\u578b\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3048\u308b\n  println(s\"\u6570\u5024\u306e\u5408\u8a08: ${intList.sum}\")\n  println(s\"\u6587\u5b57\u5217\u306e\u7d50\u5408: ${stringList.mkString}\")\n  println(s\"\u5c0f\u6570\u306e\u5e73\u5747: ${doubleList.sum / doubleList.length}\")\n\n  // \u30cd\u30b9\u30c8\u3057\u305f\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\n  val listOfLists: List[List[Int]] = List(\n    List(1, 2, 3),\n    List(4, 5, 6),\n    List(7, 8, 9)\n  )\n\n  println(\"2\u6b21\u5143\u30ea\u30b9\u30c8:\")\n  listOfLists.foreach { row =&gt;\n    println(row.mkString(\" \"))\n  }\n}\n</code></pre>"},{"location":"part3/chapter08/#_8","title":"\u57fa\u672c\u7684\u306a\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u578b","text":""},{"location":"part3/chapter08/#list","title":"List\uff08\u30ea\u30b9\u30c8\uff09","text":"<p><pre><code>// ListBasics.scala\n@main def listBasics(): Unit = {\n  // \u30ea\u30b9\u30c8\u306e\u4f5c\u6210\n  val fruits = List(\"\u308a\u3093\u3054\", \"\u30d0\u30ca\u30ca\", \"\u30aa\u30ec\u30f3\u30b8\")\n  val numbers = List(10, 20, 30, 40, 50)\n  val empty = List[String]()  // \u7a7a\u306e\u30ea\u30b9\u30c8\n\n  // \u57fa\u672c\u7684\u306a\u64cd\u4f5c\n  println(s\"\u6700\u521d\u306e\u8981\u7d20: ${fruits.head}\")\n  println(s\"\u6700\u5f8c\u306e\u8981\u7d20: ${fruits.last}\")\n  println(s\"\u6700\u521d\u4ee5\u5916: ${fruits.tail}\")\n  println(s\"\u8981\u7d20\u6570: ${fruits.length}\")\n  println(s\"\u7a7a\uff1f: ${fruits.isEmpty}\")\n\n  // \u8981\u7d20\u306e\u8ffd\u52a0\uff08\u65b0\u3057\u3044\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\uff09\n  val moreFruits = \"\u3076\u3069\u3046\" :: fruits  // \u5148\u982d\u306b\u8ffd\u52a0\n  val evenMore = fruits :+ \"\u30e1\u30ed\u30f3\"    // \u672b\u5c3e\u306b\u8ffd\u52a0\n\n  println(s\"\u5143\u306e\u30ea\u30b9\u30c8: ${fruits}\")\n  println(s\"\u5148\u982d\u306b\u8ffd\u52a0: ${moreFruits}\")\n  println(s\"\u672b\u5c3e\u306b\u8ffd\u52a0: ${evenMore}\")\n}\n</code></pre> <pre><code>### Set\uff08\u96c6\u5408\uff09\n\n```scala\n// SetBasics.scala\n@main def setBasics(): Unit = {\n  // Set\u306e\u4f5c\u6210\uff08\u91cd\u8907\u3059\u308b\u8981\u7d20\u306f\u81ea\u52d5\u7684\u306b\u9664\u53bb\uff09\n  val numbers = Set(1, 2, 3, 2, 1, 4)\n  println(s\"Set: ${numbers}\")  // \u91cd\u8907\u304c\u9664\u53bb\u3055\u308c\u308b\n\n  // \u96c6\u5408\u6f14\u7b97\n  val set1 = Set(1, 2, 3, 4)\n  val set2 = Set(3, 4, 5, 6)\n\n  println(s\"\u548c\u96c6\u5408: ${set1 | set2}\")      // 1, 2, 3, 4, 5, 6\n  println(s\"\u7a4d\u96c6\u5408: ${set1 &amp; set2}\")      // 3, 4\n  println(s\"\u5dee\u96c6\u5408: ${set1 -- set2}\")     // 1, 2\n\n  // \u8981\u7d20\u306e\u78ba\u8a8d\n  println(s\"3\u3092\u542b\u3080\uff1f: ${set1.contains(3)}\")\n  println(s\"7\u3092\u542b\u3080\uff1f: ${set1.contains(7)}\")\n\n  // \u8981\u7d20\u306e\u8ffd\u52a0\u30fb\u524a\u9664\n  val added = numbers + 5\n  val removed = numbers - 2\n  println(s\"5\u3092\u8ffd\u52a0: ${added}\")\n  println(s\"2\u3092\u524a\u9664: ${removed}\")\n}\n</code></pre></p>"},{"location":"part3/chapter08/#map","title":"Map\uff08\u30de\u30c3\u30d7\uff09","text":"<pre><code>// MapBasics.scala\n@main def mapBasics(): Unit = {\n  // Map\u306e\u4f5c\u6210\n  val ages = Map(\n    \"\u592a\u90ce\" -&gt; 20,\n    \"\u82b1\u5b50\" -&gt; 22,\n    \"\u6b21\u90ce\" -&gt; 19\n  )\n\n  // \u5024\u306e\u53d6\u5f97\n  println(s\"\u592a\u90ce\u306e\u5e74\u9f62: ${ages(\"\u592a\u90ce\")}\")\n\n  // \u5b89\u5168\u306a\u5024\u306e\u53d6\u5f97\n  ages.get(\"\u82b1\u5b50\") match {\n    case Some(age) =&gt; println(s\"\u82b1\u5b50\u306f${age}\u6b73\u3067\u3059\")\n    case None =&gt; println(\"\u82b1\u5b50\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\")\n  }\n\n  // \u30ad\u30fc\u3068\u5024\u306e\u4e00\u89a7\n  println(s\"\u540d\u524d\u4e00\u89a7: ${ages.keys}\")\n  println(s\"\u5e74\u9f62\u4e00\u89a7: ${ages.values}\")\n\n  // \u8981\u7d20\u306e\u8ffd\u52a0\u30fb\u66f4\u65b0\n  val updated = ages + (\"\u685c\" -&gt; 21)\n  val modified = updated + (\"\u592a\u90ce\" -&gt; 21)  // \u66f4\u65b0\n\n  println(s\"\u685c\u3092\u8ffd\u52a0: ${updated}\")\n  println(s\"\u592a\u90ce\u3092\u66f4\u65b0: ${modified}\")\n}\n</code></pre>"},{"location":"part3/chapter08/#_9","title":"\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u3068\u30df\u30e5\u30fc\u30bf\u30d6\u30eb","text":""},{"location":"part3/chapter08/#_10","title":"\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\uff08\u5909\u66f4\u4e0d\u53ef\uff09\u30b3\u30ec\u30af\u30b7\u30e7\u30f3","text":"<pre><code>// ImmutableCollections.scala\n@main def immutableCollections(): Unit = {\n  // \u30c7\u30d5\u30a9\u30eb\u30c8\u306f\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\n  val list = List(1, 2, 3)\n  val newList = list :+ 4  // \u65b0\u3057\u3044\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n\n  println(s\"\u5143\u306e\u30ea\u30b9\u30c8: ${list}\")      // \u5909\u308f\u3089\u306a\u3044\n  println(s\"\u65b0\u3057\u3044\u30ea\u30b9\u30c8: ${newList}\")  // \u65b0\u3057\u3044\u30ea\u30b9\u30c8\n\n  // \u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306e\u5229\u70b9\n  def processData(data: List[Int]): List[Int] =\n    data.map(_ * 2).filter(_ &gt; 5)\n\n  val original = List(1, 2, 3, 4, 5)\n  val processed = processData(original)\n\n  println(s\"\u51e6\u7406\u524d: ${original}\")  // \u5143\u306e\u30c7\u30fc\u30bf\u306f\u5909\u308f\u3089\u306a\u3044\n  println(s\"\u51e6\u7406\u5f8c: ${processed}\")\n}\n</code></pre>"},{"location":"part3/chapter08/#_11","title":"\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\uff08\u5909\u66f4\u53ef\u80fd\uff09\u30b3\u30ec\u30af\u30b7\u30e7\u30f3","text":"<pre><code>// MutableCollections.scala\n@main def mutableCollections(): Unit = {\n  import scala.collection.mutable\n\n  // \u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u30ea\u30b9\u30c8\uff08ListBuffer\uff09\n  val buffer = mutable.ListBuffer(1, 2, 3)\n  buffer += 4        // \u8981\u7d20\u3092\u8ffd\u52a0\n  buffer.append(5)   // \u5225\u306e\u8ffd\u52a0\u65b9\u6cd5\n  buffer.remove(0)   // \u30a4\u30f3\u30c7\u30c3\u30af\u30b90\u3092\u524a\u9664\n\n  println(s\"ListBuffer: ${buffer}\")\n\n  // \u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306aMap\n  val scores = mutable.Map(\"\u6570\u5b66\" -&gt; 80)\n  scores(\"\u82f1\u8a9e\") = 75       // \u8981\u7d20\u3092\u8ffd\u52a0\n  scores(\"\u6570\u5b66\") = 85       // \u8981\u7d20\u3092\u66f4\u65b0\n  scores.remove(\"\u82f1\u8a9e\")     // \u8981\u7d20\u3092\u524a\u9664\n\n  println(s\"\u6210\u7e3e: ${scores}\")\n\n  // \u4f7f\u3044\u5206\u3051\u306e\u6307\u91dd\n  // - \u57fa\u672c\u7684\u306b\u306f\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u3092\u4f7f\u3046\n  // - \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u91cd\u8981\u306a\u5834\u5408\u306e\u307f\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\n}\n}\n</code></pre>"},{"location":"part3/chapter08/#_12","title":"\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u57fa\u672c\u64cd\u4f5c","text":""},{"location":"part3/chapter08/#_13","title":"\u8981\u7d20\u3078\u306e\u30a2\u30af\u30bb\u30b9","text":"<pre><code>// AccessingElements.scala\n@main def accessingElements(): Unit = {\n  val list = List(\"A\", \"B\", \"C\", \"D\", \"E\")\n\n  // \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3067\u30a2\u30af\u30bb\u30b9\n  println(s\"0\u756a\u76ee: ${list(0)}\")\n  println(s\"2\u756a\u76ee: ${list(2)}\")\n\n  // \u5b89\u5168\u306a\u30a2\u30af\u30bb\u30b9\n  list.lift(10) match {\n    case Some(elem) =&gt; println(s\"10\u756a\u76ee: ${elem}\")\n    case None =&gt; println(\"10\u756a\u76ee\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\")\n  }\n\n  // \u6761\u4ef6\u306b\u5408\u3046\u8981\u7d20\u3092\u63a2\u3059\n  val numbers = List(1, 3, 5, 7, 9)\n  numbers.find(_ &gt; 5) match {\n    case Some(n) =&gt; println(s\"5\u3088\u308a\u5927\u304d\u3044\u6700\u521d\u306e\u6570: ${n}\")\n    case None =&gt; println(\"\u898b\u3064\u304b\u308a\u307e\u305b\u3093\")\n  }\n\n  // \u8907\u6570\u306e\u8981\u7d20\u3092\u53d6\u5f97\n  println(s\"\u6700\u521d\u306e3\u3064: ${list.take(3)}\")\n  println(s\"\u6700\u5f8c\u306e2\u3064: ${list.takeRight(2)}\")\n  println(s\"2\u756a\u76ee\u304b\u30894\u756a\u76ee: ${list.slice(1, 4)}\")\n}\n</code></pre>"},{"location":"part3/chapter08/#_14","title":"\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3068\u5909\u63db","text":"<pre><code>// FilteringAndTransforming.scala\n@main def filteringAndTransforming(): Unit = {\n  val numbers = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\n  // \u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\n  val evens = numbers.filter(_ % 2 == 0)\n  val odds = numbers.filterNot(_ % 2 == 0)\n  val large = numbers.filter(_ &gt; 5)\n\n  println(s\"\u5076\u6570: ${evens}\")\n  println(s\"\u5947\u6570: ${odds}\")\n  println(s\"5\u3088\u308a\u5927: ${large}\")\n\n  // \u5909\u63db\uff08map\uff09\n  val doubled = numbers.map(_ * 2)\n  val strings = numbers.map(n =&gt; s\"\u6570\u5024${n}\")\n\n  println(s\"2\u500d: ${doubled}\")\n  println(s\"\u6587\u5b57\u5217\u5316: ${strings}\")\n\n  // \u30d5\u30a3\u30eb\u30bf\u3068\u5909\u63db\u306e\u7d44\u307f\u5408\u308f\u305b\n  val result = numbers\n    .filter(_ % 2 == 0)\n    .map(_ * 3)\n    .filter(_ &gt; 10)\n\n  println(s\"\u5076\u6570\u30923\u500d\u3057\u306610\u3088\u308a\u5927: ${result}\")\n}\n</code></pre>"},{"location":"part3/chapter08/#_15","title":"\u5b9f\u8df5\u7684\u306a\u4f8b\uff1a\u6210\u7e3e\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0","text":"<pre><code>// GradeManagement.scala\n@main def gradeManagement(): Unit = {\n  // \u5b66\u751f\u306e\u6210\u7e3e\u30c7\u30fc\u30bf\n  case class Student(name: String, id: Int, scores: Map[String, Int])\n\n  val students = List(\n    Student(\"\u5c71\u7530\u592a\u90ce\", 101, Map(\"\u6570\u5b66\" -&gt; 85, \"\u82f1\u8a9e\" -&gt; 78, \"\u7406\u79d1\" -&gt; 92)),\n    Student(\"\u9234\u6728\u82b1\u5b50\", 102, Map(\"\u6570\u5b66\" -&gt; 92, \"\u82f1\u8a9e\" -&gt; 88, \"\u7406\u79d1\" -&gt; 85)),\n    Student(\"\u4f50\u85e4\u6b21\u90ce\", 103, Map(\"\u6570\u5b66\" -&gt; 78, \"\u82f1\u8a9e\" -&gt; 95, \"\u7406\u79d1\" -&gt; 80)),\n    Student(\"\u7530\u4e2d\u685c\", 104, Map(\"\u6570\u5b66\" -&gt; 95, \"\u82f1\u8a9e\" -&gt; 82, \"\u7406\u79d1\" -&gt; 88))\n  )\n\n  // \u5404\u5b66\u751f\u306e\u5e73\u5747\u70b9\u3092\u8a08\u7b97\n  val averages = students.map { student =&gt;\n    val avg = student.scores.values.sum.toDouble / student.scores.size\n    (student.name, avg)\n  }\n\n  println(\"=== \u5e73\u5747\u70b9 ===\")\n  averages.foreach { case (name, avg) =&gt;\n    println(f\"${name}: ${avg}%.1f\u70b9\")\n  }\n\n  // \u79d1\u76ee\u5225\u306e\u7d71\u8a08\n  val subjects = List(\"\u6570\u5b66\", \"\u82f1\u8a9e\", \"\u7406\u79d1\")\n\n  println(\"\\n=== \u79d1\u76ee\u5225\u7d71\u8a08 ===\")\n  subjects.foreach { subject =&gt;\n    val scores = students.map(_.scores(subject))\n    val avg = scores.sum.toDouble / scores.length\n    val max = scores.max\n    val min = scores.min\n\n    println(f\"${subject}: \u5e73\u5747${avg}%.1f\u70b9, \u6700\u9ad8${max}\u70b9, \u6700\u4f4e${min}\u70b9\")\n  }\n\n  // \u512a\u79c0\u306a\u5b66\u751f\uff08\u5e73\u574785\u70b9\u4ee5\u4e0a\uff09\n  val excellent = students.filter { student =&gt;\n    val avg = student.scores.values.sum.toDouble / student.scores.size\n    avg &gt;= 85\n  }\n\n  println(\"\\n=== \u512a\u79c0\u306a\u5b66\u751f ===\")\n  excellent.foreach(s =&gt; println(s.name))\n}\n</code></pre>"},{"location":"part3/chapter08/#_16","title":"\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u8003\u616e","text":"<pre><code>// CollectionPerformance.scala\n@main def collectionPerformance(): Unit = {\n  // List\u306e\u7279\u6027\n  // - \u5148\u982d\u3078\u306e\u8ffd\u52a0: O(1)\n  // - \u672b\u5c3e\u3078\u306e\u8ffd\u52a0: O(n)\n  // - \u30e9\u30f3\u30c0\u30e0\u30a2\u30af\u30bb\u30b9: O(n)\n\n  val list = List(1, 2, 3, 4, 5)\n  val prepended = 0 :: list      // \u9ad8\u901f\n  val appended = list :+ 6        // \u4f4e\u901f\uff08\u5927\u304d\u306a\u30ea\u30b9\u30c8\u3067\u306f\uff09\n\n  // Vector\u306e\u7279\u6027\n  // - \u30e9\u30f3\u30c0\u30e0\u30a2\u30af\u30bb\u30b9: O(log n)\n  // - \u8ffd\u52a0: O(log n)\n  val vector = Vector(1, 2, 3, 4, 5)\n  val vecAppended = vector :+ 6   // \u6bd4\u8f03\u7684\u9ad8\u901f\n\n  // \u5927\u91cf\u30c7\u30fc\u30bf\u306e\u51e6\u7406\n  val largeList = (1 to 100000).toList\n  val largeVector = (1 to 100000).toVector\n\n  // \u30d3\u30e5\u30fc\u3092\u4f7f\u3063\u305f\u9045\u5ef6\u8a55\u4fa1\n  val view = largeList.view\n    .filter(_ % 2 == 0)\n    .map(_ * 2)\n    .take(10)\n\n  println(s\"\u9045\u5ef6\u8a55\u4fa1\u306e\u7d50\u679c: ${view.toList}\")\n}\n</code></pre>"},{"location":"part3/chapter08/#_17","title":"\u3088\u304f\u3042\u308b\u30a8\u30e9\u30fc\u3068\u5bfe\u51e6\u6cd5","text":""},{"location":"part3/chapter08/#1indexoutofboundsexception","title":"\u30a8\u30e9\u30fc\u4f8b1\uff1aIndexOutOfBoundsException","text":"<pre><code>val list = List(1, 2, 3)\n// val item = list(5)  // \u30a8\u30e9\u30fc\uff01\n</code></pre> <p>\u5bfe\u51e6\u6cd5: lift\u30e1\u30bd\u30c3\u30c9\u3084headOption\u3092\u4f7f\u3046</p>"},{"location":"part3/chapter08/#2nosuchelementexception","title":"\u30a8\u30e9\u30fc\u4f8b2\uff1aNoSuchElementException","text":"<pre><code>val empty = List[Int]()\n// val first = empty.head  // \u30a8\u30e9\u30fc\uff01\n</code></pre> <p>\u5bfe\u51e6\u6cd5: headOption\u3084firstOption\u3092\u4f7f\u3046</p>"},{"location":"part3/chapter08/#3","title":"\u30a8\u30e9\u30fc\u4f8b3\uff1a\u578b\u306e\u4e0d\u4e00\u81f4","text":"<pre><code>val numbers: List[Int] = List(1, 2, 3)\n// numbers :+ \"4\"  // \u30a8\u30e9\u30fc\uff01\u578b\u304c\u9055\u3046\n</code></pre> <p>\u5bfe\u51e6\u6cd5: \u6b63\u3057\u3044\u578b\u306e\u8981\u7d20\u3092\u8ffd\u52a0\u3059\u308b</p>"},{"location":"part3/chapter08/#_18","title":"\u7df4\u7fd2\u554f\u984c","text":""},{"location":"part3/chapter08/#1","title":"\u554f\u984c1\uff1a\u30b7\u30e7\u30c3\u30d4\u30f3\u30b0\u30ab\u30fc\u30c8","text":"<p>\u5546\u54c1\u540d\u3068\u4fa1\u683c\u306eMap\u3092\u4f7f\u3063\u3066\u3001\u30b7\u30e7\u30c3\u30d4\u30f3\u30b0\u30ab\u30fc\u30c8\u3092\u5b9f\u88c5\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - \u5546\u54c1\u306e\u8ffd\u52a0\u30fb\u524a\u9664 - \u5408\u8a08\u91d1\u984d\u306e\u8a08\u7b97 - \u6700\u3082\u9ad8\u3044\u5546\u54c1\u306e\u8868\u793a</p>"},{"location":"part3/chapter08/#2","title":"\u554f\u984c2\uff1a\u91cd\u8907\u306e\u9664\u53bb","text":"<p>\u6587\u5b57\u5217\u306e\u30ea\u30b9\u30c8\u304b\u3089\u91cd\u8907\u3092\u9664\u53bb\u3057\u3001\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u9806\u306b\u4e26\u3079\u66ff\u3048\u308b\u95a2\u6570\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"part3/chapter08/#3_1","title":"\u554f\u984c3\uff1a\u30b0\u30eb\u30fc\u30d7\u5316","text":"<p>\u5b66\u751f\u306e\u30ea\u30b9\u30c8\u3092\u5b66\u5e74\u3067\u30b0\u30eb\u30fc\u30d7\u5316\u3057\u3001\u5404\u5b66\u5e74\u306e\u4eba\u6570\u3092\u8868\u793a\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"part3/chapter08/#4","title":"\u554f\u984c4\uff1a\u7d71\u8a08\u8a08\u7b97","text":"<p>\u6570\u5024\u306e\u30ea\u30b9\u30c8\u3092\u53d7\u3051\u53d6\u308a\u3001\u4ee5\u4e0b\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - \u5e73\u5747\u5024 - \u4e2d\u592e\u5024 - \u6700\u983b\u5024</p>"},{"location":"part3/chapter08/#5","title":"\u554f\u984c5\uff1a\u30a8\u30e9\u30fc\u3092\u4fee\u6b63","text":"<pre><code>@main def broken(): Unit = {\n  val list = List(1, 2, 3)\n  list.add(4)\n\n  val map = Map(\"a\" -&gt; 1)\n  val value = map[\"a\"]\n\n  val set = Set(1, 2, 3)\n  val first = set.head\n  set.remove(first)\n}\n</code></pre>"},{"location":"part3/chapter08/#_19","title":"\u307e\u3068\u3081","text":"<p>\u3053\u306e\u7ae0\u3067\u306f\u4ee5\u4e0b\u306e\u3053\u3068\u3092\u5b66\u3073\u307e\u3057\u305f\uff1a</p> <ol> <li> <p>\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u57fa\u672c\u6982\u5ff5</p> <ul> <li>\u8907\u6570\u306e\u30c7\u30fc\u30bf\u3092\u307e\u3068\u3081\u3066\u6271\u3046\u4ed5\u7d44\u307f</li> <li>\u578b\u5b89\u5168\u6027\u306b\u3088\u308b\u5b89\u5168\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0</li> <li>\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4f7f\u3044\u65b9</li> </ul> </li> <li> <p>\u57fa\u672c\u7684\u306a\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u578b</p> <ul> <li>List\uff1a\u9806\u5e8f\u4ed8\u304d\u30ea\u30b9\u30c8</li> <li>Set\uff1a\u91cd\u8907\u306e\u306a\u3044\u96c6\u5408</li> <li>Map\uff1a\u30ad\u30fc\u3068\u5024\u306e\u30da\u30a2</li> </ul> </li> <li> <p>\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u3068\u30df\u30e5\u30fc\u30bf\u30d6\u30eb</p> <ul> <li>\u30c7\u30d5\u30a9\u30eb\u30c8\u306f\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\uff08\u63a8\u5968\uff09</li> <li>\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u3092\u4f7f\u7528</li> <li>\u305d\u308c\u305e\u308c\u306e\u5229\u70b9\u3068\u4f7f\u3044\u5206\u3051</li> </ul> </li> <li> <p>\u57fa\u672c\u7684\u306a\u64cd\u4f5c</p> <ul> <li>\u8981\u7d20\u3078\u306e\u30a2\u30af\u30bb\u30b9</li> <li>\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3068\u5909\u63db</li> <li>\u5b89\u5168\u306a\u64cd\u4f5c\u65b9\u6cd5</li> </ul> </li> <li> <p>\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u8003\u616e</p> <ul> <li>\u5404\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u7279\u6027</li> <li>\u9069\u5207\u306a\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u9078\u629e</li> <li>\u9045\u5ef6\u8a55\u4fa1\u306e\u6d3b\u7528</li> </ul> </li> </ol> <p>\u6b21\u306e\u7ae0\u3067\u306f\u3001\u6700\u3082\u91cd\u8981\u306a\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u3042\u308bList\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u5b66\u3093\u3067\u3044\u304d\u307e\u3059\uff01</p>"},{"location":"part3/chapter09/","title":"\u7b2c9\u7ae0 \u30ea\u30b9\u30c8\u3067\u540c\u3058\u30c7\u30fc\u30bf\u3092\u4e26\u3079\u308b","text":""},{"location":"part3/chapter09/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u30ea\u30b9\u30c8\uff08List\uff09\u306f\u3001Scala\u3067\u6700\u3082\u3088\u304f\u4f7f\u308f\u308c\u308b\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u3059\u3002\u9806\u5e8f\u3092\u4fdd\u6301\u3057\u3001\u540c\u3058\u578b\u306e\u8981\u7d20\u3092\u4e26\u3079\u3066\u7ba1\u7406\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u7ae0\u3067\u306f\u3001\u30ea\u30b9\u30c8\u306e\u8a73\u7d30\u306a\u4f7f\u3044\u65b9\u3068\u3001\u5b9f\u8df5\u7684\u306a\u6d3b\u7528\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002</p>"},{"location":"part3/chapter09/#_2","title":"\u30ea\u30b9\u30c8\u306e\u57fa\u672c","text":""},{"location":"part3/chapter09/#_3","title":"\u30ea\u30b9\u30c8\u306e\u4f5c\u6210\u3068\u7279\u5fb4","text":"<pre><code>// ListCreation.scala\n@main def listCreation(): Unit = {\n  // \u30ea\u30b9\u30c8\u306e\u4f5c\u6210\u65b9\u6cd5\n  val list1 = List(1, 2, 3, 4, 5)\n  val list2 = 1 :: 2 :: 3 :: 4 :: 5 :: Nil  // ::\u6f14\u7b97\u5b50\u3092\u4f7f\u3063\u305f\u65b9\u6cd5\n  val list3 = List.range(1, 6)              // \u7bc4\u56f2\u304b\u3089\u4f5c\u6210\n  val list4 = List.fill(5)(0)               // \u540c\u3058\u5024\u3067\u57cb\u3081\u308b\n\n  println(s\"List(): ${list1}\")\n  println(s\":: \u6f14\u7b97\u5b50: ${list2}\")\n  println(s\"range: ${list3}\")\n  println(s\"fill: ${list4}\")\n\n  // \u30ea\u30b9\u30c8\u306e\u7279\u5fb4\n  // 1. \u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\uff08\u5909\u66f4\u4e0d\u53ef\uff09\n  // 2. \u9806\u5e8f\u3092\u4fdd\u6301\n  // 3. \u540c\u3058\u578b\u306e\u8981\u7d20\u306e\u307f\n  // 4. \u5148\u982d\u3078\u306e\u8ffd\u52a0\u304c\u9ad8\u901f\n\n  // \u578b\u5b89\u5168\u6027\u306e\u78ba\u8a8d\n  val intList: List[Int] = List(1, 2, 3)\n  val stringList: List[String] = List(\"a\", \"b\", \"c\")\n  // val mixedList: List[Int] = List(1, \"2\", 3)  // \u30a8\u30e9\u30fc\uff01\u578b\u304c\u9055\u3046\n}\n}\n</code></pre>"},{"location":"part3/chapter09/#cons","title":"Cons\uff08::\uff09\u6f14\u7b97\u5b50\u306e\u7406\u89e3","text":"<pre><code>// ConsOperator.scala\n@main def consOperator(): Unit = {\n  // ::\uff08cons\uff09\u306f\u8981\u7d20\u3092\u30ea\u30b9\u30c8\u306e\u5148\u982d\u306b\u8ffd\u52a0\n  val list = List(2, 3, 4)\n  val newList = 1 :: list\n\n  println(s\"\u5143\u306e\u30ea\u30b9\u30c8: ${list}\")\n  println(s\"1\u3092\u5148\u982d\u306b\u8ffd\u52a0: ${newList}\")\n\n  // \u30ea\u30b9\u30c8\u306e\u69cb\u9020\u3092\u7406\u89e3\n  val step1 = Nil           // \u7a7a\u306e\u30ea\u30b9\u30c8\n  val step2 = 3 :: step1    // List(3)\n  val step3 = 2 :: step2    // List(2, 3)\n  val step4 = 1 :: step3    // List(1, 2, 3)\n\n  println(s\"Step 1: ${step1}\")\n  println(s\"Step 2: ${step2}\")\n  println(s\"Step 3: ${step3}\")\n  println(s\"Step 4: ${step4}\")\n\n  // \u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u3067\u306e\u5206\u89e3\n  list match {\n    case head :: tail =&gt;\n      println(s\"\u5148\u982d: ${head}, \u6b8b\u308a: ${tail}\")\n    case Nil =&gt;\n      println(\"\u7a7a\u306e\u30ea\u30b9\u30c8\")\n  }\n}\n}\n</code></pre>"},{"location":"part3/chapter09/#_4","title":"\u30ea\u30b9\u30c8\u306e\u57fa\u672c\u64cd\u4f5c","text":""},{"location":"part3/chapter09/#_5","title":"\u8981\u7d20\u3078\u306e\u30a2\u30af\u30bb\u30b9","text":"<pre><code>// ListAccess.scala\n@main def listAccess(): Unit = {\n  val fruits = List(\"\u308a\u3093\u3054\", \"\u30d0\u30ca\u30ca\", \"\u30aa\u30ec\u30f3\u30b8\", \"\u3076\u3069\u3046\", \"\u30e1\u30ed\u30f3\")\n\n  // \u57fa\u672c\u7684\u306a\u30a2\u30af\u30bb\u30b9\n  println(s\"\u6700\u521d\u306e\u8981\u7d20: ${fruits.head}\")\n  println(s\"\u6700\u5f8c\u306e\u8981\u7d20: ${fruits.last}\")\n  println(s\"\u6700\u521d\u4ee5\u5916: ${fruits.tail}\")\n  println(s\"\u6700\u5f8c\u4ee5\u5916: ${fruits.init}\")\n\n  // \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30a2\u30af\u30bb\u30b9\n  println(s\"0\u756a\u76ee: ${fruits(0)}\")\n  println(s\"2\u756a\u76ee: ${fruits(2)}\")\n\n  // \u5b89\u5168\u306a\u30a2\u30af\u30bb\u30b9\n  println(s\"headOption: ${fruits.headOption}\")\n  println(s\"lastOption: ${fruits.lastOption}\")\n\n  val emptyList = List[String]()\n  println(s\"\u7a7a\u30ea\u30b9\u30c8\u306eheadOption: ${emptyList.headOption}\")\n\n  // lift \u30e1\u30bd\u30c3\u30c9\u3067\u5b89\u5168\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30a2\u30af\u30bb\u30b9\n  println(s\"\u5b58\u5728\u3059\u308b\u8981\u7d20: ${fruits.lift(1)}\")\n  println(s\"\u5b58\u5728\u3057\u306a\u3044\u8981\u7d20: ${fruits.lift(10)}\")\n\n  // \u90e8\u5206\u30ea\u30b9\u30c8\u306e\u53d6\u5f97\n  println(s\"\u6700\u521d\u306e3\u3064: ${fruits.take(3)}\")\n  println(s\"\u6700\u5f8c\u306e2\u3064: ${fruits.takeRight(2)}\")\n  println(s\"\u6700\u521d\u306e2\u3064\u3092\u9664\u304f: ${fruits.drop(2)}\")\n  println(s\"\u6700\u5f8c\u306e1\u3064\u3092\u9664\u304f: ${fruits.dropRight(1)}\")\n}\n</code></pre>"},{"location":"part3/chapter09/#_6","title":"\u30ea\u30b9\u30c8\u306e\u7d50\u5408\u3068\u5206\u5272","text":"<pre><code>// ListConcatenation.scala\n@main def listConcatenation(): Unit = {\n  val list1 = List(1, 2, 3)\n  val list2 = List(4, 5, 6)\n  val list3 = List(7, 8, 9)\n\n  // \u30ea\u30b9\u30c8\u306e\u7d50\u5408\n  val combined1 = list1 ++ list2\n  val combined2 = list1 ::: list2  // \u30ea\u30b9\u30c8\u5c02\u7528\u306e\u7d50\u5408\u6f14\u7b97\u5b50\n  val combined3 = List.concat(list1, list2, list3)\n\n  println(s\"++ \u6f14\u7b97\u5b50: ${combined1}\")\n  println(s\"::: \u6f14\u7b97\u5b50: ${combined2}\")\n  println(s\"concat: ${combined3}\")\n\n  // \u30ea\u30b9\u30c8\u306e\u5206\u5272\n  val numbers = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\n  val (firstHalf, secondHalf) = numbers.splitAt(5)\n  println(s\"\u524d\u534a: ${firstHalf}, \u5f8c\u534a: ${secondHalf}\")\n\n  val (evens, odds) = numbers.partition(_ % 2 == 0)\n  println(s\"\u5076\u6570: ${evens}, \u5947\u6570: ${odds}\")\n\n  // \u30b0\u30eb\u30fc\u30d7\u5316\n  val grouped = numbers.grouped(3).toList\n  println(s\"3\u3064\u305a\u3064\u30b0\u30eb\u30fc\u30d7\u5316: ${grouped}\")\n\n  // sliding window\n  val sliding = numbers.sliding(3).toList\n  println(s\"\u30b9\u30e9\u30a4\u30c7\u30a3\u30f3\u30b0\u7a93: ${sliding}\")\n}\n</code></pre>"},{"location":"part3/chapter09/#_7","title":"\u9ad8\u5ea6\u306a\u30ea\u30b9\u30c8\u64cd\u4f5c","text":""},{"location":"part3/chapter09/#mapfilterflatmap","title":"map\u3001filter\u3001flatMap","text":"<pre><code>// ListTransformations.scala\n@main def listTransformations(): Unit = {\n  val numbers = List(1, 2, 3, 4, 5)\n\n  // map: \u5404\u8981\u7d20\u3092\u5909\u63db\n  val doubled = numbers.map(_ * 2)\n  val strings = numbers.map(n =&gt; s\"\u6570\u5024: $n\")\n\n  println(s\"2\u500d: ${doubled}\")\n  println(s\"\u6587\u5b57\u5217\u5316: ${strings}\")\n\n  // filter: \u6761\u4ef6\u306b\u5408\u3046\u8981\u7d20\u3092\u9078\u629e\n  val evens = numbers.filter(_ % 2 == 0)\n  val largeNumbers = numbers.filter(_ &gt; 3)\n\n  println(s\"\u5076\u6570: ${evens}\")\n  println(s\"3\u3088\u308a\u5927: ${largeNumbers}\")\n\n  // flatMap: map\u3057\u3066\u5e73\u5766\u5316\n  val nested = List(List(1, 2), List(3, 4), List(5))\n  val flattened = nested.flatten\n  val flatMapped = numbers.flatMap(n =&gt; List(n, n * 10))\n\n  println(s\"flatten: ${flattened}\")\n  println(s\"flatMap: ${flatMapped}\")\n\n  // \u7d44\u307f\u5408\u308f\u305b\n  val result = numbers\n    .filter(_ % 2 == 1)      // \u5947\u6570\u306e\u307f\n    .map(_ * 3)              // 3\u500d\n    .filter(_ &gt; 5)           // 5\u3088\u308a\u5927\u304d\u3044\n\n  println(s\"\u7d44\u307f\u5408\u308f\u305b: ${result}\")\n}\n</code></pre>"},{"location":"part3/chapter09/#fold-reduce","title":"fold \u3068 reduce","text":"<pre><code>// ListFoldReduce.scala\n@main def listFoldReduce(): Unit = {\n  val numbers = List(1, 2, 3, 4, 5)\n\n  // sum \u306f fold \u306e\u7279\u6b8a\u306a\u4f8b\n  val sum1 = numbers.sum\n  val sum2 = numbers.fold(0)(_ + _)\n  val sum3 = numbers.foldLeft(0)(_ + _)\n\n  println(s\"sum: ${sum1}\")\n  println(s\"fold: ${sum2}\")\n  println(s\"foldLeft: ${sum3}\")\n\n  // \u6587\u5b57\u5217\u306e\u7d50\u5408\n  val words = List(\"Scala\", \"is\", \"awesome\")\n  val sentence = words.foldLeft(\"\")((acc, word) =&gt; \n    if acc.isEmpty then word else s\"$acc $word\"\n  )\n  println(s\"\u6587\u7ae0: ${sentence}\")\n\n  // reduce\uff08\u521d\u671f\u5024\u306a\u3057\uff09\n  val product = numbers.reduce(_ * _)\n  val max = numbers.reduce((a, b) =&gt; if a &gt; b then a else b)\n\n  println(s\"\u7a4d: ${product}\")\n  println(s\"\u6700\u5927\u5024: ${max}\")\n\n  // foldLeft vs foldRight\n  val chars = List(\"A\", \"B\", \"C\")\n  val left = chars.foldLeft(\"X\")(_ + _)   // \"XABC\"\n  val right = chars.foldRight(\"X\")(_ + _) // \"ABCX\"\n\n  println(s\"foldLeft: ${left}\")\n  println(s\"foldRight: ${right}\")\n}\n</code></pre>"},{"location":"part3/chapter09/#zip-unzip","title":"zip \u3068 unzip","text":"<pre><code>// ListZip.scala\n@main def listZip(): Unit = {\n  val names = List(\"\u592a\u90ce\", \"\u82b1\u5b50\", \"\u6b21\u90ce\")\n  val ages = List(20, 22, 19)\n  val cities = List(\"\u6771\u4eac\", \"\u5927\u962a\", \"\u540d\u53e4\u5c4b\", \"\u798f\u5ca1\")  // \u9577\u3044\u30ea\u30b9\u30c8\n\n  // zip: 2\u3064\u306e\u30ea\u30b9\u30c8\u3092\u30da\u30a2\u306b\u3059\u308b\n  val pairs = names.zip(ages)\n  println(s\"\u540d\u524d\u3068\u5e74\u9f62: ${pairs}\")\n\n  // \u9577\u3055\u304c\u9055\u3046\u5834\u5408\u306f\u77ed\u3044\u65b9\u306b\u5408\u308f\u305b\u308b\n  val nameCity = names.zip(cities)\n  println(s\"\u540d\u524d\u3068\u90fd\u5e02: ${nameCity}\")\n\n  // zipWithIndex: \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u4ed8\u304d\n  val indexed = names.zipWithIndex\n  println(s\"\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u4ed8\u304d: ${indexed}\")\n\n  // unzip: \u30da\u30a2\u306e\u30ea\u30b9\u30c8\u30922\u3064\u306e\u30ea\u30b9\u30c8\u306b\u5206\u89e3\n  val (nameList, ageList) = pairs.unzip\n  println(s\"\u540d\u524d: ${nameList}, \u5e74\u9f62: ${ageList}\")\n\n  // 3\u3064\u7d44\u306e\u5834\u5408\n  val triples = names.zip(ages).zip(cities).map {\n    case ((name, age), city) =&gt; (name, age, city)\n  }\n  val (names2, ages2, cities2) = triples.unzip3\n  println(s\"3\u3064\u7d44: ${triples}\")\n}\n</code></pre>"},{"location":"part3/chapter09/#_8","title":"\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0\u3068\u30ea\u30b9\u30c8","text":"<pre><code>// ListPatternMatching.scala\n@main def listPatternMatching(): Unit = {\n  // \u57fa\u672c\u7684\u306a\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\n  def describe(list: List[Int]): String = list match {\n    case Nil =&gt; \"\u7a7a\u306e\u30ea\u30b9\u30c8\"\n    case head :: Nil =&gt; s\"\u8981\u7d20\u304c1\u3064: $head\"\n    case head :: tail =&gt; s\"\u5148\u982d: $head, \u6b8b\u308a: $tail\"\n  }\n\n  println(describe(List()))\n  println(describe(List(1)))\n  println(describe(List(1, 2, 3)))\n\n  // \u3088\u308a\u8907\u96d1\u306a\u30d1\u30bf\u30fc\u30f3\n  def sumFirstTwo(list: List[Int]): Option[Int] = list match {\n    case first :: second :: _ =&gt; Some(first + second)\n    case _ =&gt; None\n  }\n\n  println(s\"\u6700\u521d\u306e2\u3064\u306e\u548c: ${sumFirstTwo(List(10, 20, 30))}\")\n  println(s\"\u8981\u7d20\u4e0d\u8db3: ${sumFirstTwo(List(10))}\")\n\n  // \u518d\u5e30\u7684\u306a\u51e6\u7406\n  def sum(list: List[Int]): Int = list match {\n    case Nil =&gt; 0\n    case head :: tail =&gt; head + sum(tail)\n  }\n\n  println(s\"\u518d\u5e30\u7684\u306a\u5408\u8a08: ${sum(List(1, 2, 3, 4, 5))}\")\n\n  // \u6761\u4ef6\u4ed8\u304d\u30d1\u30bf\u30fc\u30f3\n  def findFirstEven(list: List[Int]): Option[Int] = list match {\n    case Nil =&gt; None\n    case head :: tail if head % 2 == 0 =&gt; Some(head)\n    case _ :: tail =&gt; findFirstEven(tail)\n  }\n\n  println(s\"\u6700\u521d\u306e\u5076\u6570: ${findFirstEven(List(1, 3, 5, 4, 6))}\")\n}\n</code></pre>"},{"location":"part3/chapter09/#todo","title":"\u5b9f\u8df5\u7684\u306a\u4f8b\uff1aTODO\u30ea\u30b9\u30c8\u7ba1\u7406","text":"<pre><code>// TodoListManager.scala\n@main def todoListManager(): Unit = {\n  // TODO\u30a2\u30a4\u30c6\u30e0\u306e\u5b9a\u7fa9\n  case class Todo(\n    id: Int,\n    title: String,\n    completed: Boolean = false,\n    priority: Int = 3  // 1:\u9ad8, 2:\u4e2d, 3:\u4f4e\n  )\n\n  // \u521d\u671f\u306eTODO\u30ea\u30b9\u30c8\n  var todos = List(\n    Todo(1, \"Scala\u306e\u52c9\u5f37\", false, 1),\n    Todo(2, \"\u8cb7\u3044\u7269\u306b\u884c\u304f\", false, 2),\n    Todo(3, \"\u30e1\u30fc\u30eb\u306e\u8fd4\u4fe1\", true, 3),\n    Todo(4, \"\u904b\u52d5\u3059\u308b\", false, 2),\n    Todo(5, \"\u672c\u3092\u8aad\u3080\", false, 3)\n  )\n\n  // TODO\u306e\u8868\u793a\n  def displayTodos(list: List[Todo]): Unit = {\n    list.foreach { todo =&gt;\n      val status = if (todo.completed) \"\u2713\" else \"\u25cb\"\n      val priority = \"\u2605\" * (4 - todo.priority)\n      println(f\"$status ${todo.id}%2d. ${todo.title}%-20s $priority\")\n    }\n  }\n\n  println(\"=== \u73fe\u5728\u306eTODO ===\")\n  displayTodos(todos)\n\n  // \u672a\u5b8c\u4e86\u306eTODO\u3092\u53d6\u5f97\n  val pending = todos.filterNot(_.completed)\n  println(s\"\\n\u672a\u5b8c\u4e86: ${pending.length}\u4ef6\")\n\n  // \u512a\u5148\u5ea6\u9806\u306b\u30bd\u30fc\u30c8\n  val sorted = todos.sortBy(todo =&gt; (todo.completed, todo.priority))\n  println(\"\\n=== \u512a\u5148\u5ea6\u9806 ===\")\n  displayTodos(sorted)\n\n  // TODO\u3092\u5b8c\u4e86\u306b\u3059\u308b\n  def completeTodo(id: Int, list: List[Todo]): List[Todo] = {\n    list.map { todo =&gt;\n      if (todo.id == id) todo.copy(completed = true)\n      else todo\n    }\n  }\n\n  todos = completeTodo(2, todos)\n  println(\"\\n=== ID:2\u3092\u5b8c\u4e86 ===\")\n  displayTodos(todos)\n\n  // \u7d71\u8a08\u60c5\u5831\n  val stats = todos.groupBy(_.completed).view.mapValues(_.length)\n  println(s\"\\n\u5b8c\u4e86: ${stats.getOrElse(true, 0)}\u4ef6\")\n  println(s\"\u672a\u5b8c\u4e86: ${stats.getOrElse(false, 0)}\u4ef6\")\n}\n</code></pre>"},{"location":"part3/chapter09/#_9","title":"\u30ea\u30b9\u30c8\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6700\u9069\u5316","text":"<pre><code>// ListPerformance.scala\n@main def listPerformance(): Unit = {\n  // \u30ea\u30b9\u30c8\u306e\u69cb\u7bc9\uff1a\u672b\u5c3e\u3078\u306e\u8ffd\u52a0\u306f\u907f\u3051\u308b\n  def buildListBad(n: Int): List[Int] = {\n    var list = List[Int]()\n    for (i &lt;- 1 to n) {\n      list = list :+ i  // O(n) - \u9045\u3044\uff01\n    }\n    list\n  }\n\n  def buildListGood(n: Int): List[Int] = {\n    var list = List[Int]()\n    for (i &lt;- 1 to n) {\n      list = i :: list  // O(1) - \u901f\u3044\uff01\n    }\n    list.reverse      // \u6700\u5f8c\u306b\u4e00\u5ea6\u3060\u3051\u53cd\u8ee2\n  }\n\n  // \u3055\u3089\u306b\u826f\u3044\u65b9\u6cd5\n  def buildListBest(n: Int): List[Int] = {\n    (1 to n).toList\n  }\n\n  // \u5927\u304d\u306a\u30ea\u30b9\u30c8\u3067\u306e\u64cd\u4f5c\n  val largeList = (1 to 10000).toList\n\n  // \u9045\u5ef6\u8a55\u4fa1\u3092\u6d3b\u7528\n  val result = largeList.view\n    .filter(_ % 2 == 0)\n    .map(_ * 2)\n    .take(10)\n    .toList\n\n  println(s\"\u9045\u5ef6\u8a55\u4fa1\u306e\u7d50\u679c: ${result}\")\n\n  // tail recursion \u3067 stack overflow \u3092\u9632\u3050\n  @annotation.tailrec\n  def sumTailRec(list: List[Int], acc: Int = 0): Int = list match {\n    case Nil =&gt; acc\n    case head :: tail =&gt; sumTailRec(tail, acc + head)\n  }\n\n  val sum = sumTailRec((1 to 100000).toList)\n  println(s\"\u672b\u5c3e\u518d\u5e30\u306e\u5408\u8a08: ${sum}\")\n}\n</code></pre>"},{"location":"part3/chapter09/#_10","title":"\u3088\u304f\u3042\u308b\u4f7f\u7528\u30d1\u30bf\u30fc\u30f3","text":"<pre><code>// CommonListPatterns.scala\n@main def commonListPatterns(): Unit = {\n  val data = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\n  // \u5b58\u5728\u30c1\u30a7\u30c3\u30af\n  println(s\"5\u3092\u542b\u3080\uff1f: ${data.contains(5)}\")\n  println(s\"\u5076\u6570\u304c\u5b58\u5728\uff1f: ${data.exists(_ % 2 == 0)}\")\n  println(s\"\u3059\u3079\u3066\u6b63\uff1f: ${data.forall(_ &gt; 0)}\")\n\n  // \u691c\u7d22\n  println(s\"\u6700\u521d\u306e\u5076\u6570: ${data.find(_ % 2 == 0)}\")\n  println(s\"5\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9: ${data.indexOf(5)}\")\n\n  // \u96c6\u8a08\n  println(s\"\u5408\u8a08: ${data.sum}\")\n  println(s\"\u5e73\u5747: ${data.sum.toDouble / data.length}\")\n  println(s\"\u6700\u5927: ${data.max}\")\n  println(s\"\u6700\u5c0f: ${data.min}\")\n\n  // \u5909\u63db\u3068\u53ce\u96c6\n  val (evens, odds) = data.partition(_ % 2 == 0)\n  val grouped = data.groupBy(_ % 3)\n\n  println(s\"\u5076\u6570\u3068\u5947\u6570: $evens, $odds\")\n  println(s\"3\u3067\u5272\u3063\u305f\u4f59\u308a\u3067\u30b0\u30eb\u30fc\u30d7\u5316: $grouped\")\n\n  // distinct \u3068\u91cd\u8907\n  val duplicates = List(1, 2, 2, 3, 3, 3, 4, 4, 4, 4)\n  println(s\"\u91cd\u8907\u9664\u53bb: ${duplicates.distinct}\")\n\n  // \u30ab\u30a6\u30f3\u30c8\n  val counts = duplicates.groupBy(identity).view.mapValues(_.size)\n  println(s\"\u51fa\u73fe\u56de\u6570: ${counts.toMap}\")\n}\n</code></pre>"},{"location":"part3/chapter09/#_11","title":"\u7df4\u7fd2\u554f\u984c","text":""},{"location":"part3/chapter09/#1","title":"\u554f\u984c1\uff1a\u30ea\u30b9\u30c8\u306e\u64cd\u4f5c","text":"<p>\u4ee5\u4e0b\u306e\u64cd\u4f5c\u3092\u884c\u3046\u95a2\u6570\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - \u30ea\u30b9\u30c8\u306e\u8981\u7d20\u3092\u9006\u9806\u306b\u3059\u308b\uff08reverse\u3092\u4f7f\u308f\u305a\u306b\uff09 - \u30ea\u30b9\u30c8\u304b\u3089\u91cd\u8907\u3092\u9664\u53bb\u3059\u308b\uff08distinct\u3092\u4f7f\u308f\u305a\u306b\uff09 - 2\u3064\u306e\u30bd\u30fc\u30c8\u6e08\u307f\u30ea\u30b9\u30c8\u3092\u30de\u30fc\u30b8\u3059\u308b</p>"},{"location":"part3/chapter09/#2","title":"\u554f\u984c2\uff1a\u7d71\u8a08\u95a2\u6570","text":"<p>\u6570\u5024\u306e\u30ea\u30b9\u30c8\u3092\u53d7\u3051\u53d6\u308a\u3001\u4ee5\u4e0b\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - \u5206\u6563 - \u6a19\u6e96\u504f\u5dee - \u4e2d\u592e\u5024</p>"},{"location":"part3/chapter09/#3","title":"\u554f\u984c3\uff1a\u6587\u5b57\u5217\u51e6\u7406","text":"<p>\u6587\u5b57\u5217\u306e\u30ea\u30b9\u30c8\u3092\u53d7\u3051\u53d6\u308a\u3001\u4ee5\u4e0b\u306e\u51e6\u7406\u3092\u884c\u3063\u3066\u304f\u3060\u3055\u3044\uff1a - \u5404\u6587\u5b57\u5217\u306e\u6700\u521d\u306e\u6587\u5b57\u3092\u5927\u6587\u5b57\u306b\u3059\u308b - \u7a7a\u6587\u5b57\u5217\u3092\u9664\u53bb\u3059\u308b - \u9577\u3055\u9806\u306b\u30bd\u30fc\u30c8\u3059\u308b</p>"},{"location":"part3/chapter09/#4","title":"\u554f\u984c4\uff1a\u30cd\u30b9\u30c8\u3057\u305f\u30ea\u30b9\u30c8","text":"<p>List[List[Int]]\u3092\u53d7\u3051\u53d6\u308a\u3001\u4ee5\u4e0b\u3092\u8a08\u7b97\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - \u5168\u8981\u7d20\u306e\u5408\u8a08 - \u5404\u5185\u90e8\u30ea\u30b9\u30c8\u306e\u6700\u5927\u5024\u306e\u30ea\u30b9\u30c8 - \u8ee2\u7f6e\uff08\u884c\u3068\u5217\u3092\u5165\u308c\u66ff\u3048\uff09</p>"},{"location":"part3/chapter09/#5","title":"\u554f\u984c5\uff1a\u30a8\u30e9\u30fc\u3092\u4fee\u6b63","text":"<pre><code>@main def broken(): Unit = {\n  val list = List(1, 2, 3)\n  list(0) = 10  // \u30ea\u30b9\u30c8\u3092\u5909\u66f4\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\n\n  val empty = List()\n  val first = empty.head\n\n  val result = list.map(_ + 1).filter(_ &gt; 2).sum()\n}\n</code></pre>"},{"location":"part3/chapter09/#_12","title":"\u307e\u3068\u3081","text":"<p>\u3053\u306e\u7ae0\u3067\u306f\u4ee5\u4e0b\u306e\u3053\u3068\u3092\u5b66\u3073\u307e\u3057\u305f\uff1a</p> <ol> <li> <p>\u30ea\u30b9\u30c8\u306e\u57fa\u672c</p> <ul> <li>\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u9806\u5e8f\u4ed8\u304d\u30b3\u30ec\u30af\u30b7\u30e7\u30f3</li> <li>::\u6f14\u7b97\u5b50\u306b\u3088\u308b\u52b9\u7387\u7684\u306a\u69cb\u7bc9</li> <li>\u578b\u5b89\u5168\u6027\u306e\u4fdd\u8a3c</li> </ul> </li> <li> <p>\u57fa\u672c\u7684\u306a\u64cd\u4f5c</p> <ul> <li>\u8981\u7d20\u3078\u306e\u30a2\u30af\u30bb\u30b9\uff08head\u3001tail\u3001apply\uff09</li> <li>\u30ea\u30b9\u30c8\u306e\u7d50\u5408\u3068\u5206\u5272</li> <li>\u5b89\u5168\u306a\u64cd\u4f5c\u65b9\u6cd5</li> </ul> </li> <li> <p>\u9ad8\u5ea6\u306a\u64cd\u4f5c</p> <ul> <li>map\u3001filter\u3001flatMap\u306b\u3088\u308b\u5909\u63db</li> <li>fold\u3068reduce\u306b\u3088\u308b\u96c6\u7d04</li> <li>zip\u306b\u3088\u308b\u8907\u6570\u30ea\u30b9\u30c8\u306e\u7d50\u5408</li> </ul> </li> <li> <p>\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0</p> <ul> <li>\u30ea\u30b9\u30c8\u306e\u69cb\u9020\u306b\u3088\u308b\u5206\u5c90</li> <li>\u518d\u5e30\u7684\u306a\u51e6\u7406</li> <li>\u6761\u4ef6\u4ed8\u304d\u30d1\u30bf\u30fc\u30f3</li> </ul> </li> <li> <p>\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u8003\u616e</p> <ul> <li>\u5148\u982d\u3078\u306e\u8ffd\u52a0\u306e\u6d3b\u7528</li> <li>\u9045\u5ef6\u8a55\u4fa1\u306e\u5229\u7528</li> <li>\u672b\u5c3e\u518d\u5e30\u306e\u91cd\u8981\u6027</li> </ul> </li> </ol> <p>\u6b21\u306e\u7ae0\u3067\u306f\u3001\u7570\u306a\u308b\u578b\u306e\u8981\u7d20\u3092\u307e\u3068\u3081\u3089\u308c\u308b\u30bf\u30d7\u30eb\u306b\u3064\u3044\u3066\u5b66\u3093\u3067\u3044\u304d\u307e\u3059\uff01</p>"},{"location":"part3/chapter10/","title":"\u7b2c10\u7ae0 \u578b\u5b89\u5168\u306a\u30bf\u30d7\u30eb","text":""},{"location":"part3/chapter10/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u30bf\u30d7\u30eb\uff08Tuple\uff09\u306f\u3001\u7570\u306a\u308b\u578b\u306e\u5024\u3092\u56fa\u5b9a\u6570\u3060\u3051\u307e\u3068\u3081\u3066\u6271\u3046\u305f\u3081\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3059\u3002\u30ea\u30b9\u30c8\u304c\u540c\u3058\u578b\u306e\u8981\u7d20\u3092\u53ef\u5909\u500b\u6570\u6271\u3046\u306e\u306b\u5bfe\u3057\u3001\u30bf\u30d7\u30eb\u306f\u7570\u306a\u308b\u578b\u306e\u8981\u7d20\u3092\u56fa\u5b9a\u500b\u6570\u6271\u3044\u307e\u3059\u3002\u3053\u306e\u7ae0\u3067\u306f\u3001\u30bf\u30d7\u30eb\u306e\u4f7f\u3044\u65b9\u3068\u578b\u5b89\u5168\u6027\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3059\u3002</p>"},{"location":"part3/chapter10/#_2","title":"\u30bf\u30d7\u30eb\u3068\u306f\u4f55\u304b\uff1f","text":""},{"location":"part3/chapter10/#_3","title":"\u30bf\u30d7\u30eb\u306e\u57fa\u672c\u6982\u5ff5","text":"<pre><code>// TupleBasics.scala\n@main def tupleBasics(): Unit = {\n  // 2\u8981\u7d20\u306e\u30bf\u30d7\u30eb\uff08\u30da\u30a2\uff09\n  val person = (\"\u592a\u90ce\", 25)\n  println(s\"\u540d\u524d\u3068\u5e74\u9f62: ${person}\")\n\n  // 3\u8981\u7d20\u306e\u30bf\u30d7\u30eb\n  val coordinate = (10.5, 20.3, 5.0)\n  println(s\"3D\u5ea7\u6a19: ${coordinate}\")\n\n  // \u7570\u306a\u308b\u578b\u3092\u6df7\u5728\u3067\u304d\u308b\n  val mixed = (\"Scala\", 3.3, true, 'A')\n  println(s\"\u6df7\u5728\u578b: ${mixed}\")\n\n  // \u30bf\u30d7\u30eb\u306e\u578b\n  val pair: (String, Int) = (\"\u82b1\u5b50\", 22)\n  val triple: (Int, String, Boolean) = (1, \"yes\", true)\n\n  // \u6700\u592722\u8981\u7d20\u307e\u3067\n  val large = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, \n               11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22)\n  println(s\"22\u8981\u7d20\u306e\u30bf\u30d7\u30eb: ${large}\")\n}\n</code></pre>"},{"location":"part3/chapter10/#_4","title":"\u30bf\u30d7\u30eb\u3078\u306e\u30a2\u30af\u30bb\u30b9","text":"<pre><code>// TupleAccess.scala\n@main def tupleAccess(): Unit = {\n  val person = (\"\u5c71\u7530\u592a\u90ce\", 30, \"\u30a8\u30f3\u30b8\u30cb\u30a2\")\n\n  // \u4f4d\u7f6e\u3067\u30a2\u30af\u30bb\u30b9\uff081\u304b\u3089\u59cb\u307e\u308b\uff09\n  println(s\"\u540d\u524d: ${person._1}\")\n  println(s\"\u5e74\u9f62: ${person._2}\")\n  println(s\"\u8077\u696d: ${person._3}\")\n\n  // \u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u3067\u5206\u89e3\n  val (name, age, job) = person\n  println(s\"$name \u3055\u3093\uff08$age \u6b73\uff09\u306f $job \u3067\u3059\")\n\n  // \u4e00\u90e8\u3060\u3051\u53d6\u308a\u51fa\u3059\n  val (personName, _, personJob) = person\n  println(s\"$personName \u306e\u8077\u696d\u306f $personJob\")\n\n  // match\u5f0f\u3067\u306e\u5206\u89e3\n  person match {\n    case (n, a, j) if a &gt;= 20 =&gt; \n      println(s\"$n \u306f\u6210\u4eba\u3067\u3059\")\n    case _ =&gt; \n      println(\"\u672a\u6210\u5e74\u3067\u3059\")\n  }\n}\n</code></pre>"},{"location":"part3/chapter10/#_5","title":"\u30bf\u30d7\u30eb\u306e\u4f5c\u6210\u65b9\u6cd5","text":""},{"location":"part3/chapter10/#_6","title":"\u69d8\u3005\u306a\u4f5c\u6210\u65b9\u6cd5","text":"<pre><code>// TupleCreation.scala\n@main def tupleCreation(): Unit = {\n  // \u901a\u5e38\u306e\u4f5c\u6210\u65b9\u6cd5\n  val tuple1 = (1, \"one\")\n  val tuple2 = (1, \"one\", 1.0)\n\n  // Tuple\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u305f\u4f5c\u6210\n  val tuple3 = Tuple2(1, \"one\")\n  val tuple4 = Tuple3(1, \"one\", 1.0)\n\n  // \u77e2\u5370\u8a18\u6cd5\uff082\u8981\u7d20\u306e\u307f\uff09\n  val pair = 1 -&gt; \"one\"\n  println(s\"\u77e2\u5370\u8a18\u6cd5: ${pair}\")\n\n  // \u95a2\u6570\u306e\u623b\u308a\u5024\u3068\u3057\u3066\n  def getCoordinate(): (Double, Double) = (35.6762, 139.6503)\n  val (lat, lon) = getCoordinate()\n  println(s\"\u7def\u5ea6: $lat, \u7d4c\u5ea6: $lon\")\n\n  // Option\u578b\u3068\u7d44\u307f\u5408\u308f\u305b\n  def divide(a: Int, b: Int): Option[(Int, Int)] = {\n    if (b != 0) Some((a / b, a % b))\n    else None\n  }\n\n  divide(10, 3) match {\n    case Some((quotient, remainder)) =&gt;\n      println(s\"10 \u00f7 3 = $quotient \u4f59\u308a $remainder\")\n    case None =&gt;\n      println(\"\u30bc\u30ed\u9664\u7b97\u30a8\u30e9\u30fc\")\n  }\n}\n</code></pre>"},{"location":"part3/chapter10/#_7","title":"\u30bf\u30d7\u30eb\u306e\u30cd\u30b9\u30c8","text":"<pre><code>// NestedTuples.scala\n@main def nestedTuples(): Unit = {\n  // \u30cd\u30b9\u30c8\u3057\u305f\u30bf\u30d7\u30eb\n  val nested = ((1, 2), (3, 4))\n  println(s\"\u30cd\u30b9\u30c8\u3057\u305f\u30bf\u30d7\u30eb: ${nested}\")\n\n  // \u30a2\u30af\u30bb\u30b9\n  println(s\"\u5de6\u4e0a: ${nested._1._1}\")\n  println(s\"\u53f3\u4e0b: ${nested._2._2}\")\n\n  // \u3088\u308a\u8907\u96d1\u306a\u69cb\u9020\n  val student = (\n    \"S12345\",                    // \u5b66\u7c4d\u756a\u53f7\n    (\"\u5c71\u7530\", \"\u592a\u90ce\"),            // \u59d3\u540d\n    (2024, 4, 1),               // \u5165\u5b66\u5e74\u6708\u65e5\n    Map(\"\u6570\u5b66\" -&gt; 85, \"\u82f1\u8a9e\" -&gt; 78)  // \u6210\u7e3e\n  )\n\n  val (id, (lastName, firstName), (year, month, day), scores) = student\n  println(s\"$lastName $firstName \u3055\u3093\uff08\u5b66\u7c4d\u756a\u53f7: $id\uff09\")\n  println(s\"\u5165\u5b66: $year\u5e74$month\u6708$day\u65e5\")\n  println(s\"\u6210\u7e3e: $scores\")\n}\n</code></pre>"},{"location":"part3/chapter10/#_8","title":"\u30bf\u30d7\u30eb\u306e\u578b\u5b89\u5168\u6027","text":""},{"location":"part3/chapter10/#_9","title":"\u578b\u306e\u4fdd\u8a3c","text":"<pre><code>// TupleTypeSafety.scala\n@main def tupleTypeSafety(): Unit = {\n  // \u5404\u8981\u7d20\u306e\u578b\u304c\u4fdd\u8a3c\u3055\u308c\u308b\n  val data: (Int, String, Double) = (100, \"\u5186\", 1.1)\n\n  // \u578b\u304c\u5408\u308f\u306a\u3044\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\n  // val wrong: (Int, String, Double) = (100, 200, 1.1)  // \u30a8\u30e9\u30fc\uff01\n\n  // \u578b\u63a8\u8ad6\u3082\u6b63\u78ba\n  val inferred = (42, \"answer\", true)\n  val num: Int = inferred._1       // OK\n  val str: String = inferred._2    // OK\n  val bool: Boolean = inferred._3  // OK\n\n  // \u95a2\u6570\u306e\u5f15\u6570\u3068\u3057\u3066\n  def processData(data: (String, Int, Boolean)): String = {\n    val (name, value, active) = data\n    if (active) s\"$name: $value\" else s\"$name: \u7121\u52b9\"\n  }\n\n  println(processData((\"\u6e29\u5ea6\", 25, true)))\n  println(processData((\"\u6e7f\u5ea6\", 60, false)))\n\n  // \u578b\u30a8\u30a4\u30ea\u30a2\u30b9\u3067\u3088\u308a\u5206\u304b\u308a\u3084\u3059\u304f\n  type PersonInfo = (String, Int, String)\n  type Coordinate3D = (Double, Double, Double)\n\n  val person: PersonInfo = (\"\u4f50\u85e4\", 28, \"\u55b6\u696d\")\n  val point: Coordinate3D = (1.0, 2.0, 3.0)\n}\n</code></pre>"},{"location":"part3/chapter10/#_10","title":"\u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u3068\u306e\u6bd4\u8f03","text":"<pre><code>// TupleVsCaseClass.scala\n@main def tupleVsCaseClass(): Unit = {\n  // \u30bf\u30d7\u30eb\u3092\u4f7f\u3063\u305f\u5834\u5408\n  val personTuple = (\"\u7530\u4e2d\", 35, \"\u30c7\u30b6\u30a4\u30ca\u30fc\")\n  println(s\"\u540d\u524d: ${personTuple._1}\")  // \u610f\u5473\u304c\u5206\u304b\u308a\u3065\u3089\u3044\n\n  // \u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u305f\u5834\u5408\n  case class Person(name: String, age: Int, job: String)\n  val personClass = Person(\"\u7530\u4e2d\", 35, \"\u30c7\u30b6\u30a4\u30ca\u30fc\")\n  println(s\"\u540d\u524d: ${personClass.name}\")  // \u610f\u5473\u304c\u660e\u78ba\n\n  // \u30bf\u30d7\u30eb\u304c\u9069\u3057\u3066\u3044\u308b\u5834\u5408\n  // 1. \u4e00\u6642\u7684\u306a\u30c7\u30fc\u30bf\u306e\u7d44\u307f\u5408\u308f\u305b\n  def getMinMax(numbers: List[Int]): (Int, Int) = {\n    (numbers.min, numbers.max)\n  }\n\n  // 2. \u8907\u6570\u306e\u5024\u3092\u8fd4\u3059\u95a2\u6570\n  def divmod(a: Int, b: Int): (Int, Int) = {\n    (a / b, a % b)\n  }\n\n  // 3. \u30ad\u30fc\u3068\u5024\u306e\u30da\u30a2\n  val entries = List(\n    \"apple\" -&gt; 100,\n    \"banana\" -&gt; 80,\n    \"orange\" -&gt; 120\n  )\n\n  // \u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u304c\u9069\u3057\u3066\u3044\u308b\u5834\u5408\n  // 1. \u30c9\u30e1\u30a4\u30f3\u30e2\u30c7\u30eb\n  case class Product(name: String, price: Int, stock: Int)\n\n  // 2. \u518d\u5229\u7528\u3055\u308c\u308b\u69cb\u9020\n  case class Address(zip: String, prefecture: String, city: String)\n}\n</code></pre>"},{"location":"part3/chapter10/#_11","title":"\u30bf\u30d7\u30eb\u306e\u64cd\u4f5c","text":""},{"location":"part3/chapter10/#_12","title":"\u30bf\u30d7\u30eb\u306e\u5909\u63db","text":"<pre><code>// TupleOperations.scala\n@main def tupleOperations(): Unit = {\n  // swap\uff082\u8981\u7d20\u30bf\u30d7\u30eb\u306e\u307f\uff09\n  val pair = (1, \"one\")\n  val swapped = pair.swap\n  println(s\"\u5143: $pair, \u4ea4\u63db\u5f8c: $swapped\")\n\n  // \u30bf\u30d7\u30eb\u304b\u3089\u30ea\u30b9\u30c8\u3078\n  val triple = (10, 20, 30)\n  val list = List(triple._1, triple._2, triple._3)\n  println(s\"\u30ea\u30b9\u30c8\u5316: $list\")\n\n  // productIterator\u3092\u4f7f\u3063\u305f\u6c4e\u7528\u7684\u306a\u5909\u63db\n  val tuple = (\"A\", \"B\", \"C\", \"D\")\n  val elements = tuple.productIterator.toList\n  println(s\"\u8981\u7d20\u306e\u30ea\u30b9\u30c8: $elements\")\n\n  // \u30bf\u30d7\u30eb\u306e\u8981\u7d20\u3092\u5909\u63db\n  val numbers = (1, 2, 3)\n  val doubled = (numbers._1 * 2, numbers._2 * 2, numbers._3 * 2)\n  println(s\"2\u500d: $doubled\")\n\n  // \u3088\u308a\u6c4e\u7528\u7684\u306a\u5909\u63db\uff08\u305f\u3060\u3057\u578b\u60c5\u5831\u306f\u5931\u308f\u308c\u308b\uff09\n  def multiplyTuple3(t: (Int, Int, Int), factor: Int): (Int, Int, Int) = {\n    (t._1 * factor, t._2 * factor, t._3 * factor)\n  }\n\n  println(s\"3\u500d: ${multiplyTuple3(numbers, 3)}\")\n}\n</code></pre>"},{"location":"part3/chapter10/#_13","title":"\u30bf\u30d7\u30eb\u3068\u30b3\u30ec\u30af\u30b7\u30e7\u30f3","text":"<pre><code>// TupleWithCollections.scala\n@main def tupleWithCollections(): Unit = {\n  // \u30bf\u30d7\u30eb\u306e\u30ea\u30b9\u30c8\n  val students = List(\n    (\"\u5c71\u7530\", 85),\n    (\"\u9234\u6728\", 92),\n    (\"\u4f50\u85e4\", 78),\n    (\"\u7530\u4e2d\", 88)\n  )\n\n  // \u30bd\u30fc\u30c8\n  val sortedByScore = students.sortBy(_._2).reverse\n  println(\"\u6210\u7e3e\u9806:\")\n  sortedByScore.foreach { case (name, score) =&gt;\n    println(s\"  $name: $score\u70b9\")\n  }\n\n  // \u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\n  val highScorers = students.filter(_._2 &gt;= 85)\n  println(s\"85\u70b9\u4ee5\u4e0a: $highScorers\")\n\n  // \u30de\u30c3\u30d7\u306b\u5909\u63db\n  val scoreMap = students.toMap\n  println(s\"\u30de\u30c3\u30d7\u5316: $scoreMap\")\n\n  // unzip\u3067\u30ea\u30b9\u30c8\u3092\u5206\u89e3\n  val (names, scores) = students.unzip\n  println(s\"\u540d\u524d: $names\")\n  println(s\"\u70b9\u6570: $scores\")\n  println(s\"\u5e73\u5747\u70b9: ${scores.sum.toDouble / scores.length}\")\n}\n</code></pre>"},{"location":"part3/chapter10/#_14","title":"\u5b9f\u8df5\u7684\u306a\u4f8b\uff1a\u30c7\u30fc\u30bf\u5206\u6790","text":"<pre><code>// DataAnalysisWithTuples.scala\n@main def dataAnalysisWithTuples(): Unit = {\n  // \u58f2\u4e0a\u30c7\u30fc\u30bf\uff08\u65e5\u4ed8\u3001\u5546\u54c1\u540d\u3001\u6570\u91cf\u3001\u5358\u4fa1\uff09\n  val salesData = List(\n    (\"2024-01-01\", \"\u5546\u54c1A\", 5, 1000),\n    (\"2024-01-01\", \"\u5546\u54c1B\", 3, 1500),\n    (\"2024-01-02\", \"\u5546\u54c1A\", 8, 1000),\n    (\"2024-01-02\", \"\u5546\u54c1C\", 2, 2000),\n    (\"2024-01-03\", \"\u5546\u54c1B\", 6, 1500),\n    (\"2024-01-03\", \"\u5546\u54c1C\", 4, 2000)\n  )\n\n  // \u58f2\u4e0a\u91d1\u984d\u3092\u8a08\u7b97\n  val salesWithAmount = salesData.map { case (date, product, qty, price) =&gt;\n    (date, product, qty, price, qty * price)\n  }\n\n  println(\"=== \u58f2\u4e0a\u660e\u7d30 ===\")\n  salesWithAmount.foreach { case (date, product, qty, price, amount) =&gt;\n    println(f\"$date: $product \u00d7 $qty\u500b = $amount%,d\u5186\")\n  }\n\n  // \u65e5\u5225\u96c6\u8a08\n  val dailySales = salesWithAmount\n    .groupBy(_._1)  // \u65e5\u4ed8\u3067\u30b0\u30eb\u30fc\u30d7\u5316\n    .view.mapValues(_.map(_._5).sum)  // \u58f2\u4e0a\u5408\u8a08\n    .toMap\n\n  println(\"\\n=== \u65e5\u5225\u58f2\u4e0a ===\")\n  dailySales.toList.sorted.foreach { case (date, total) =&gt;\n    println(f\"$date: $total%,d\u5186\")\n  }\n\n  // \u5546\u54c1\u5225\u96c6\u8a08\n  val productSales = salesWithAmount\n    .groupBy(_._2)  // \u5546\u54c1\u3067\u30b0\u30eb\u30fc\u30d7\u5316\n    .view.mapValues { sales =&gt;\n      val totalQty = sales.map(_._3).sum\n      val totalAmount = sales.map(_._5).sum\n      (totalQty, totalAmount)\n    }\n    .toMap\n\n  println(\"\\n=== \u5546\u54c1\u5225\u58f2\u4e0a ===\")\n  productSales.foreach { case (product, (qty, amount)) =&gt;\n    println(f\"$product: $qty\u500b, $amount%,d\u5186\")\n  }\n\n  // \u7d71\u8a08\u60c5\u5831\n  val amounts = salesWithAmount.map(_._5)\n  val stats = (\n    amounts.sum,                          // \u5408\u8a08\n    amounts.sum.toDouble / amounts.length, // \u5e73\u5747\n    amounts.max,                          // \u6700\u5927\n    amounts.min                           // \u6700\u5c0f\n  )\n\n  val (total, avg, max, min) = stats\n  println(f\"\\n=== \u7d71\u8a08\u60c5\u5831 ===\")\n  println(f\"\u58f2\u4e0a\u5408\u8a08: $total%,d\u5186\")\n  println(f\"\u5e73\u5747\u58f2\u4e0a: $avg%,.1f\u5186\")\n  println(f\"\u6700\u5927\u58f2\u4e0a: $max%,d\u5186\")\n  println(f\"\u6700\u5c0f\u58f2\u4e0a: $min%,d\u5186\")\n}\n</code></pre>"},{"location":"part3/chapter10/#_15","title":"\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0\u306e\u6d3b\u7528","text":"<pre><code>// TuplePatternMatching.scala\n@main def tuplePatternMatching(): Unit = {\n  // \u57fa\u672c\u7684\u306a\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\n  val data = (42, \"answer\")\n\n  data match {\n    case (n, s) =&gt; println(s\"\u6570\u5024: $n, \u6587\u5b57\u5217: $s\")\n  }\n\n  // \u6761\u4ef6\u4ed8\u304d\u30d1\u30bf\u30fc\u30f3\n  val scores = List(\n    (\"Alice\", 95),\n    (\"Bob\", 82),\n    (\"Carol\", 76),\n    (\"Dave\", 68)\n  )\n\n  scores.foreach {\n    case (name, score) if score &gt;= 90 =&gt; \n      println(s\"$name: \u512a\u79c0\uff01\")\n    case (name, score) if score &gt;= 80 =&gt; \n      println(s\"$name: \u826f\u597d\")\n    case (name, score) if score &gt;= 70 =&gt; \n      println(s\"$name: \u53ef\")\n    case (name, _) =&gt; \n      println(s\"$name: \u8981\u52aa\u529b\")\n  }\n\n  // \u30cd\u30b9\u30c8\u3057\u305f\u30bf\u30d7\u30eb\u306e\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\n  val nested = ((1, 2), (3, 4))\n\n  nested match {\n    case ((a, b), (c, d)) =&gt;\n      println(s\"\u5408\u8a08: ${a + b + c + d}\")\n  }\n\n  // \u90e8\u5206\u7684\u306a\u30de\u30c3\u30c1\n  val triple = (100, \"test\", true)\n\n  triple match {\n    case (n, _, true) if n &gt; 50 =&gt;\n      println(\"50\u3088\u308a\u5927\u304d\u304f\u3001\u6709\u52b9\")\n    case (n, _, false) =&gt;\n      println(s\"\u7121\u52b9\uff08\u5024: $n\uff09\")\n    case _ =&gt;\n      println(\"\u305d\u306e\u4ed6\")\n  }\n}\n</code></pre>"},{"location":"part3/chapter10/#_16","title":"\u3088\u304f\u3042\u308b\u30a8\u30e9\u30fc\u3068\u5bfe\u51e6\u6cd5","text":""},{"location":"part3/chapter10/#1","title":"\u30a8\u30e9\u30fc\u4f8b1\uff1a\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u9593\u9055\u3044","text":"<pre><code>val pair = (1, 2)\n// val third = pair._3  // \u30a8\u30e9\u30fc\uff01\u5b58\u5728\u3057\u306a\u3044\n</code></pre> <p>\u5bfe\u51e6\u6cd5: \u30bf\u30d7\u30eb\u306e\u30b5\u30a4\u30ba\u3092\u78ba\u8a8d\u3057\u3001\u9069\u5207\u306a\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u4f7f\u7528</p>"},{"location":"part3/chapter10/#2","title":"\u30a8\u30e9\u30fc\u4f8b2\uff1a\u578b\u306e\u4e0d\u4e00\u81f4","text":"<pre><code>val tuple: (Int, String) = (100, \"test\")\n// val num: String = tuple._1  // \u30a8\u30e9\u30fc\uff01\u578b\u304c\u9055\u3046\n</code></pre> <p>\u5bfe\u51e6\u6cd5: \u6b63\u3057\u3044\u578b\u3092\u6307\u5b9a\u3059\u308b\u304b\u3001\u578b\u5909\u63db\u3092\u884c\u3046</p>"},{"location":"part3/chapter10/#3","title":"\u30a8\u30e9\u30fc\u4f8b3\uff1a\u53ef\u5909\u9577\u30c7\u30fc\u30bf\u3078\u306e\u8aa4\u7528","text":"<pre><code>// val data = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23)  // \u30a8\u30e9\u30fc\uff0123\u8981\u7d20\n</code></pre> <p>\u5bfe\u51e6\u6cd5: 22\u8981\u7d20\u3092\u8d85\u3048\u308b\u5834\u5408\u306f\u30ea\u30b9\u30c8\u3084\u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u3092\u4f7f\u7528</p>"},{"location":"part3/chapter10/#_17","title":"\u7df4\u7fd2\u554f\u984c","text":""},{"location":"part3/chapter10/#1_1","title":"\u554f\u984c1\uff1a\u5ea7\u6a19\u8a08\u7b97","text":"<p>2\u6b21\u5143\u5ea7\u6a19\u3092\u8868\u3059\u30bf\u30d7\u30eb(Double, Double)\u3092\u53d7\u3051\u53d6\u308a\u3001\u4ee5\u4e0b\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - 2\u70b9\u9593\u306e\u8ddd\u96e2 - \u4e2d\u70b9\u306e\u5ea7\u6a19 - \u539f\u70b9\u304b\u3089\u306e\u8ddd\u96e2</p>"},{"location":"part3/chapter10/#2_1","title":"\u554f\u984c2\uff1a\u30c7\u30fc\u30bf\u96c6\u8a08","text":"<p>(\u65e5\u4ed8: String, \u58f2\u4e0a: Int, \u8cbb\u7528: Int)\u306e\u30ea\u30b9\u30c8\u304b\u3089\u4ee5\u4e0b\u3092\u8a08\u7b97\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - \u5229\u76ca\uff08\u58f2\u4e0a - \u8cbb\u7528\uff09\u304c\u6700\u5927\u306e\u65e5 - \u5229\u76ca\u7387\uff08\u5229\u76ca / \u58f2\u4e0a\uff09\u306e\u5e73\u5747 - \u8d64\u5b57\u306e\u65e5\u6570</p>"},{"location":"part3/chapter10/#3_1","title":"\u554f\u984c3\uff1a\u30bf\u30d7\u30eb\u306e\u5909\u63db","text":"<p>(String, Int, Boolean)\u306e\u30ea\u30b9\u30c8\u3092\u3001\u6761\u4ef6\u306b\u5fdc\u3058\u3066\u5909\u63db\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - Boolean\u304ctrue\u306e\u8981\u7d20\u306e\u307f\u62bd\u51fa - String\u3092\u5927\u6587\u5b57\u306b\u3001Int\u30922\u500d\u306b\u5909\u63db - Int\u3067\u30bd\u30fc\u30c8\u3057\u3066String\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059</p>"},{"location":"part3/chapter10/#4","title":"\u554f\u984c4\uff1a\u8907\u96d1\u306a\u30c7\u30fc\u30bf\u69cb\u9020","text":"<p>\u5b66\u751f\u306e\u6210\u7e3e\u30c7\u30fc\u30bf(\u5b66\u7c4d\u756a\u53f7: String, (\u6570\u5b66: Int, \u82f1\u8a9e: Int, \u7406\u79d1: Int))\u306e\u30ea\u30b9\u30c8\u304b\u3089\uff1a - 3\u79d1\u76ee\u306e\u5408\u8a08\u70b9\u3067\u30e9\u30f3\u30ad\u30f3\u30b0 - \u5404\u79d1\u76ee\u306e\u6700\u9ad8\u5f97\u70b9\u8005 - \u5168\u79d1\u76ee80\u70b9\u4ee5\u4e0a\u306e\u5b66\u751f</p>"},{"location":"part3/chapter10/#5","title":"\u554f\u984c5\uff1a\u30a8\u30e9\u30fc\u3092\u4fee\u6b63","text":"<pre><code>@main def broken(): Unit = {\n  val data = (1, \"two\", 3.0)\n  val sum = data._1 + data._2 + data._3\n\n  val pair = (10, 20)\n  val (a, b, c) = pair\n\n  val list = List((1, \"a\"), (2, \"b\"))\n  val first = list.head._3\n</code></pre>"},{"location":"part3/chapter10/#_18","title":"\u307e\u3068\u3081","text":"<p>\u3053\u306e\u7ae0\u3067\u306f\u4ee5\u4e0b\u306e\u3053\u3068\u3092\u5b66\u3073\u307e\u3057\u305f\uff1a</p> <ol> <li> <p>\u30bf\u30d7\u30eb\u306e\u57fa\u672c</p> <ul> <li>\u7570\u306a\u308b\u578b\u306e\u8981\u7d20\u3092\u56fa\u5b9a\u6570\u307e\u3068\u3081\u308b</li> <li>\u6700\u592722\u8981\u7d20\u307e\u3067\u6271\u3048\u308b</li> <li>\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u30c7\u30fc\u30bf\u69cb\u9020</li> </ul> </li> <li> <p>\u8981\u7d20\u3078\u306e\u30a2\u30af\u30bb\u30b9</p> <ul> <li>_1, _2\u306a\u3069\u306e\u4f4d\u7f6e\u30a2\u30af\u30bb\u30b9</li> <li>\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u306b\u3088\u308b\u5206\u89e3</li> <li>\u578b\u5b89\u5168\u306a\u30a2\u30af\u30bb\u30b9</li> </ul> </li> <li> <p>\u30bf\u30d7\u30eb\u306e\u4f5c\u6210\u3068\u64cd\u4f5c</p> <ul> <li>\u69d8\u3005\u306a\u4f5c\u6210\u65b9\u6cd5</li> <li>swap\u3084productIterator</li> <li>\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3068\u306e\u7d44\u307f\u5408\u308f\u305b</li> </ul> </li> <li> <p>\u578b\u5b89\u5168\u6027</p> <ul> <li>\u5404\u8981\u7d20\u306e\u578b\u304c\u4fdd\u8a3c\u3055\u308c\u308b</li> <li>\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306e\u578b\u30c1\u30a7\u30c3\u30af</li> <li>\u578b\u63a8\u8ad6\u306e\u6d3b\u7528</li> </ul> </li> <li> <p>\u4f7f\u3044\u3069\u3053\u308d</p> <ul> <li>\u4e00\u6642\u7684\u306a\u30c7\u30fc\u30bf\u306e\u7d44\u307f\u5408\u308f\u305b</li> <li>\u8907\u6570\u5024\u306e\u8fd4\u5374</li> <li>\u8efd\u91cf\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u3068\u3057\u3066</li> </ul> </li> </ol> <p>\u6b21\u306e\u7ae0\u3067\u306f\u3001\u30bf\u30d7\u30eb\u3092\u4f7f\u3063\u3066\u7570\u306a\u308b\u30c7\u30fc\u30bf\u3092\u307e\u3068\u3081\u308b\u5b9f\u8df5\u7684\u306a\u65b9\u6cd5\u3092\u5b66\u3093\u3067\u3044\u304d\u307e\u3059\uff01</p>"},{"location":"part3/chapter11/","title":"\u7b2c11\u7ae0 \u30bf\u30d7\u30eb\u3067\u9055\u3046\u30c7\u30fc\u30bf\u3092\u307e\u3068\u3081\u308b","text":""},{"location":"part3/chapter11/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u3057\u3066\u3044\u308b\u3068\u3001\u300c\u540d\u524d\u3068\u5e74\u9f62\u300d\u300c\u7def\u5ea6\u3068\u7d4c\u5ea6\u300d\u300c\u6210\u529f\u30fb\u5931\u6557\u3068\u305d\u306e\u7406\u7531\u300d\u306e\u3088\u3046\u306b\u3001\u9055\u3046\u7a2e\u985e\u306e\u30c7\u30fc\u30bf\u3092\u30bb\u30c3\u30c8\u3067\u6271\u3044\u305f\u3044\u3053\u3068\u304c\u3088\u304f\u3042\u308a\u307e\u3059\u3002</p> <p>\u524d\u306e\u7ae0\u3067\u306f\u300c\u540c\u3058\u578b\u306e\u30c7\u30fc\u30bf\u3092\u4e26\u3079\u308b\u300d\u30ea\u30b9\u30c8\u3092\u5b66\u3073\u307e\u3057\u305f\u3002\u4eca\u56de\u306f\u300c\u9055\u3046\u578b\u306e\u30c7\u30fc\u30bf\u3092\u307e\u3068\u3081\u308b\u300d\u30bf\u30d7\u30eb\u3092\u5b66\u3073\u307e\u3057\u3087\u3046\uff01</p> <p>\u30bf\u30d7\u30eb\u306f\u3001\u65e5\u5e38\u751f\u6d3b\u3067\u3044\u3048\u3070\u300c\u304a\u5f01\u5f53\u7bb1\u300d\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002\u3054\u306f\u3093\u3001\u304a\u304b\u305a\u3001\u30c7\u30b6\u30fc\u30c8\u306a\u3069\u3001\u9055\u3046\u3082\u306e\u30921\u3064\u306e\u7bb1\u306b\u307e\u3068\u3081\u3066\u6301\u3061\u904b\u3079\u307e\u3059\u3088\u306d\u3002</p>"},{"location":"part3/chapter11/#_2","title":"\u30bf\u30d7\u30eb\u3063\u3066\u4f55\u3060\u308d\u3046\uff1f","text":""},{"location":"part3/chapter11/#_3","title":"\u304a\u5f01\u5f53\u7bb1\u3067\u8003\u3048\u3066\u307f\u3088\u3046","text":"<pre><code>// TupleLikeBento.scala\n@main def tupleLikeBento(): Unit = {\n  // \u304a\u5f01\u5f53\u306e\u4e2d\u8eab\uff08\u9055\u3046\u3082\u306e\u304c\u5165\u3063\u3066\u3044\u308b\uff09\n  val myBento = (\"\u304a\u306b\u304e\u308a\", 2, \"\u5510\u63da\u3052\", true)\n  //             \u2191\u6587\u5b57    \u2191\u6570  \u2191\u6587\u5b57   \u2191\u771f\u507d\u5024\n\n  println(s\"\u4eca\u65e5\u306e\u304a\u5f01\u5f53: $myBento\")\n\n  // \u4f55\u304c\u5165\u3063\u3066\u3044\u308b\u304b\u78ba\u8a8d\n  println(s\"\u4e3b\u98df: ${myBento._1}\")  // 1\u756a\u76ee\n  println(s\"\u500b\u6570: ${myBento._2}\")  // 2\u756a\u76ee\n  println(s\"\u304a\u304b\u305a: ${myBento._3}\") // 3\u756a\u76ee\n  println(s\"\u30c7\u30b6\u30fc\u30c8\u4ed8\u304d\uff1f: ${myBento._4}\") // 4\u756a\u76ee\n}\n</code></pre> <p>\u30bf\u30d7\u30eb\u306f\u300c\u9055\u3046\u578b\u306e\u30c7\u30fc\u30bf\u3092\u3001\u6c7a\u307e\u3063\u305f\u9806\u756a\u3067\u3001\u6c7a\u307e\u3063\u305f\u6570\u3060\u3051\u300d\u307e\u3068\u3081\u3089\u308c\u307e\u3059\uff01</p>"},{"location":"part3/chapter11/#_4","title":"\u3082\u3063\u3068\u8eab\u8fd1\u306a\u4f8b","text":"<pre><code>// DailyTuples.scala\n@main def dailyTuples(): Unit = {\n  // \u4eba\u306e\u60c5\u5831\uff08\u540d\u524d\u3068\u5e74\u9f62\uff09\n  val person = (\"\u7530\u4e2d\u592a\u90ce\", 25)\n  println(s\"${person._1}\u3055\u3093\u306f${person._2}\u6b73\u3067\u3059\")\n\n  // \u5834\u6240\u306e\u60c5\u5831\uff08\u5730\u540d\u3068\u5ea7\u6a19\uff09\n  val tokyo = (\"\u6771\u4eac\", 35.6762, 139.6503)\n  println(s\"${tokyo._1}\u306e\u7def\u5ea6: ${tokyo._2}, \u7d4c\u5ea6: ${tokyo._3}\")\n\n  // \u30c6\u30b9\u30c8\u306e\u7d50\u679c\uff08\u79d1\u76ee\u3068\u70b9\u6570\u3068\u5408\u683c\uff1f\uff09\n  val testResult = (\"\u6570\u5b66\", 85, true)\n  val subject = testResult._1\n  val score = testResult._2\n  val passed = testResult._3\n\n  if (passed) {\n    println(s\"${subject}\u306f${score}\u70b9\u3067\u5408\u683c\u3067\u3059\uff01\")\n  } else {\n    println(s\"${subject}\u306f${score}\u70b9\u3067\u4e0d\u5408\u683c\u3067\u3059...\")\n  }\n}\n</code></pre>"},{"location":"part3/chapter11/#_5","title":"\u30bf\u30d7\u30eb\u306e\u4f5c\u308a\u65b9","text":""},{"location":"part3/chapter11/#_6","title":"\u57fa\u672c\u306e\u4f5c\u308a\u65b9","text":"<pre><code>// CreatingTuples.scala\n@main def creatingTuples(): Unit = {\n  // 2\u3064\u306e\u8981\u7d20\uff08\u30da\u30a2\uff09\n  val pair = (\"\u308a\u3093\u3054\", 100)\n  println(s\"$pair\")  // (\u308a\u3093\u3054,100)\n\n  // 3\u3064\u306e\u8981\u7d20\uff08\u30c8\u30ea\u30d7\u30eb\uff09\n  val triple = (\"\u307f\u304b\u3093\", 80, 5)\n  println(s\"$triple\")  // (\u307f\u304b\u3093,80,5)\n\n  // \u3082\u3063\u3068\u305f\u304f\u3055\u3093\uff08\u6700\u592722\u500b\u307e\u3067\uff01\uff09\n  val many = (1, \"\u4e8c\", 3.0, '\u56db', true, 6)\n  println(s\"\u3044\u308d\u3044\u308d: $many\")\n\n  // \u578b\u3092\u660e\u793a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\n  val typed: (String, Int) = (\"\u30d0\u30ca\u30ca\", 150)\n  println(s\"\u578b\u4ed8\u304d: $typed\")\n}\n</code></pre>"},{"location":"part3/chapter11/#_7","title":"\u77e2\u5370\u3092\u4f7f\u3063\u305f\u66f8\u304d\u65b9\uff08\u30da\u30a2\u306e\u307f\uff09","text":"<pre><code>// ArrowNotation.scala\n@main def arrowNotation(): Unit = {\n  // 2\u3064\u306e\u8981\u7d20\u306e\u6642\u3060\u3051\u4f7f\u3048\u308b\u7279\u5225\u306a\u66f8\u304d\u65b9\n  val price1 = \"\u30b3\u30fc\u30d2\u30fc\" -&gt; 300\n  val price2 = (\"\u30b3\u30fc\u30d2\u30fc\", 300)  // \u4e0a\u3068\u540c\u3058\u610f\u5473\uff01\n\n  println(s\"\u77e2\u5370\u8a18\u6cd5: $price1\")\n  println(s\"\u666e\u901a\u306e\u8a18\u6cd5: $price2\")\n\n  // \u30de\u30c3\u30d7\u3092\u4f5c\u308b\u3068\u304d\u306b\u3088\u304f\u4f7f\u3046\n  val menu = Map(\n    \"\u30b3\u30fc\u30d2\u30fc\" -&gt; 300,\n    \"\u7d05\u8336\" -&gt; 250,\n    \"\u30b1\u30fc\u30ad\" -&gt; 400\n  )\n\n  println(s\"\u30e1\u30cb\u30e5\u30fc: $menu\")\n}\n</code></pre>"},{"location":"part3/chapter11/#_8","title":"\u30bf\u30d7\u30eb\u306e\u4e2d\u8eab\u3092\u53d6\u308a\u51fa\u3059","text":""},{"location":"part3/chapter11/#_1-_2","title":"\u756a\u53f7\u3067\u53d6\u308a\u51fa\u3059\uff08._1, ._2, ...\uff09","text":"<pre><code>// AccessingTuples.scala\n@main def accessingTuples(): Unit = {\n  val studentInfo = (\"\u5c71\u7530\u82b1\u5b50\", 20, \"\u5de5\u5b66\u90e8\", 3.5)\n\n  // \u756a\u53f7\u306f1\u304b\u3089\u59cb\u307e\u308b\uff01\uff080\u304b\u3089\u3058\u3083\u306a\u3044\uff09\n  println(s\"\u540d\u524d: ${studentInfo._1}\")\n  println(s\"\u5e74\u9f62: ${studentInfo._2}\u6b73\")\n  println(s\"\u5b66\u90e8: ${studentInfo._3}\")\n  println(s\"GPA: ${studentInfo._4}\")\n\n  // \u3053\u3093\u306a\u4f7f\u3044\u65b9\u3082\n  val message = s\"${studentInfo._1}\u3055\u3093\uff08${studentInfo._2}\u6b73\uff09\u306f\" +\n                s\"${studentInfo._3}\u306e\u5b66\u751f\u3067\u3001GPA\u306f${studentInfo._4}\u3067\u3059\"\n  println(message)\n}\n</code></pre>"},{"location":"part3/chapter11/#_9","title":"\u5206\u89e3\u3057\u3066\u53d6\u308a\u51fa\u3059\uff08\u304a\u3059\u3059\u3081\uff01\uff09","text":"<pre><code>// DestructuringTuples.scala\n@main def destructuringTuples(): Unit = {\n  val studentInfo = (\"\u5c71\u7530\u82b1\u5b50\", 20, \"\u5de5\u5b66\u90e8\", 3.5)\n\n  // \u4e00\u5ea6\u306b\u5168\u90e8\u53d6\u308a\u51fa\u3059\uff08\u3053\u308c\u304c\u4fbf\u5229\uff01\uff09\n  val (name, age, department, gpa) = studentInfo\n\n  println(s\"\u540d\u524d: $name\")\n  println(s\"\u5e74\u9f62: $age\u6b73\")\n  println(s\"\u5b66\u90e8: $department\")\n  println(s\"GPA: $gpa\")\n\n  // \u5fc5\u8981\u306a\u3082\u306e\u3060\u3051\u53d6\u308a\u51fa\u3059\uff08_\u3067\u7121\u8996\uff09\n  val (studentName, _, studentDept, _) = studentInfo\n  println(s\"$studentName\u3055\u3093\u306f$studentDept\u6240\u5c5e\u3067\u3059\")\n\n  // \u8907\u6570\u306e\u30bf\u30d7\u30eb\u3092\u51e6\u7406\n  val results = List(\n    (\"\u6570\u5b66\", 85),\n    (\"\u82f1\u8a9e\", 92),\n    (\"\u7406\u79d1\", 78)\n  )\n\n  results.foreach { case (subject, score) =&gt;\n    println(s\"$subject: $score\u70b9\")\n  }\n}\n</code></pre>"},{"location":"part3/chapter11/#_10","title":"\u5b9f\u8df5\u7684\u306a\u4f7f\u3044\u65b9","text":""},{"location":"part3/chapter11/#_11","title":"\u95a2\u6570\u304b\u3089\u8907\u6570\u306e\u5024\u3092\u8fd4\u3059","text":"<pre><code>// ReturningMultipleValues.scala\n@main def returningMultipleValues(): Unit = {\n  // \u5272\u308a\u7b97\u306e\u5546\u3068\u4f59\u308a\u3092\u540c\u6642\u306b\u8fd4\u3059\n  def divideWithRemainder(a: Int, b: Int): (Int, Int) =\n    (a / b, a % b)\n\n  val (quotient, remainder) = divideWithRemainder(17, 5)\n  println(s\"17 \u00f7 5 = $quotient \u4f59\u308a $remainder\")\n\n  // \u7d71\u8a08\u60c5\u5831\u3092\u8fd4\u3059\n  def getStats(numbers: List[Int]): (Int, Double, Int, Int) = {\n    val sum = numbers.sum\n    val avg = sum.toDouble / numbers.length\n    val max = numbers.max\n    val min = numbers.min\n    (sum, avg, max, min)\n  }\n\n  val data = List(10, 20, 30, 40, 50)\n  val (total, average, maximum, minimum) = getStats(data)\n\n  println(s\"\u5408\u8a08: $total\")\n  println(s\"\u5e73\u5747: $average\")\n  println(s\"\u6700\u5927: $maximum\")\n  println(s\"\u6700\u5c0f: $minimum\")\n}\n</code></pre>"},{"location":"part3/chapter11/#_12","title":"\u30a8\u30e9\u30fc\u51e6\u7406\u3067\u306e\u6d3b\u7528","text":"<pre><code>// TuplesForErrorHandling.scala\n@main def tuplesForErrorHandling(): Unit = {\n  // \u6210\u529f\u30fb\u5931\u6557\u3068\u7d50\u679c\u3092\u4e00\u7dd2\u306b\u8fd4\u3059\n  def safeDivide(a: Int, b: Int): (Boolean, Double, String) =\n    if (b == 0) {\n      (false, 0.0, \"\u30bc\u30ed\u3067\u5272\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\")\n    } else {\n      (true, a.toDouble / b, \"\u8a08\u7b97\u6210\u529f\")\n    }\n\n  // \u4f7f\u3063\u3066\u307f\u308b\n  val (success1, result1, message1) = safeDivide(10, 2)\n  if (success1) {\n    println(s\"\u7d50\u679c: $result1\")\n  } else {\n    println(s\"\u30a8\u30e9\u30fc: $message1\")\n  }\n\n  val (success2, result2, message2) = safeDivide(10, 0)\n  if (success2) {\n    println(s\"\u7d50\u679c: $result2\")\n  } else {\n    println(s\"\u30a8\u30e9\u30fc: $message2\")\n  }\n}\n</code></pre>"},{"location":"part3/chapter11/#_13","title":"\u30c7\u30fc\u30bf\u306e\u6574\u7406","text":"<pre><code>// OrganizingData.scala\n@main def organizingData(): Unit = {\n  // \u5546\u54c1\u60c5\u5831\uff08\u540d\u524d\u3001\u4fa1\u683c\u3001\u5728\u5eab\u6570\uff09\n  val products = List(\n    (\"\u30ce\u30fc\u30c8\", 100, 50),\n    (\"\u30da\u30f3\", 150, 30),\n    (\"\u6d88\u3057\u30b4\u30e0\", 80, 100),\n    (\"\u5b9a\u898f\", 200, 20)\n  )\n\n  // \u5728\u5eab\u304c\u5c11\u306a\u3044\u5546\u54c1\u3092\u63a2\u3059\n  println(\"=== \u5728\u5eab\u304c\u5c11\u306a\u3044\u5546\u54c1\uff0830\u500b\u4ee5\u4e0b\uff09===\")\n  products.foreach { case (name, price, stock) =&gt;\n    if (stock &lt;= 30) {\n      println(s\"$name: \u6b8b\u308a$stock\u500b\uff08${price}\u5186\uff09\")\n    }\n  }\n\n  // \u58f2\u4e0a\u8a08\u7b97\uff08\u5546\u54c1\u540d\u3001\u8ca9\u58f2\u6570\uff09\n  val sales = List(\n    (\"\u30ce\u30fc\u30c8\", 10),\n    (\"\u30da\u30f3\", 5),\n    (\"\u6d88\u3057\u30b4\u30e0\", 20)\n  )\n\n  println(\"\\n=== \u58f2\u4e0a\u30ec\u30dd\u30fc\u30c8 ===\")\n  sales.foreach { case (productName, quantity) =&gt;\n    // \u5546\u54c1\u60c5\u5831\u304b\u3089\u4fa1\u683c\u3092\u63a2\u3059\n    products.find(_._1 == productName) match {\n      case Some((_, price, _)) =&gt;\n        val total = price * quantity\n        println(s\"$productName: ${quantity}\u500b \u00d7 ${price}\u5186 = ${total}\u5186\")\n      case None =&gt;\n        println(s\"$productName: \u5546\u54c1\u60c5\u5831\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\")\n    }\n  }\n}\n</code></pre>"},{"location":"part3/chapter11/#_14","title":"\u30bf\u30d7\u30eb\u306e\u4fbf\u5229\u306a\u6a5f\u80fd","text":""},{"location":"part3/chapter11/#swap2","title":"swap\uff082\u8981\u7d20\u30bf\u30d7\u30eb\u306e\u307f\uff09","text":"<pre><code>// TupleSwap.scala\n@main def tupleSwap(): Unit = {\n  val original = (\"\u5148\", \"\u5f8c\")\n  val swapped = original.swap  // \u9806\u756a\u3092\u5165\u308c\u66ff\u3048\u308b\n\n  println(s\"\u5143: $original\")    // (\u5148,\u5f8c)\n  println(s\"\u4ea4\u63db\u5f8c: $swapped\") // (\u5f8c,\u5148)\n\n  // \u5b9f\u7528\u4f8b\uff1a\u30ad\u30fc\u3068\u5024\u3092\u5165\u308c\u66ff\u3048\u308b\n  val scores = List(\n    (\"\u592a\u90ce\", 85),\n    (\"\u82b1\u5b50\", 92),\n    (\"\u6b21\u90ce\", 78)\n  )\n\n  // \u70b9\u6570\u3067\u30bd\u30fc\u30c8\u3057\u305f\u3044\n  val sortedByScore = scores\n    .map(_.swap)           // (85,\u592a\u90ce), (92,\u82b1\u5b50), (78,\u6b21\u90ce)\n    .sorted                // \u6570\u5024\u3067\u30bd\u30fc\u30c8\n    .map(_.swap)           // \u5143\u306b\u623b\u3059\n\n  println(\"\u70b9\u6570\u9806\uff08\u4f4e\u3044\u9806\uff09:\")\n  sortedByScore.foreach { case (name, score) =&gt;\n    println(s\"  $name: $score\u70b9\")\n  }\n}\n</code></pre>"},{"location":"part3/chapter11/#_15","title":"\u30ea\u30b9\u30c8\u3068\u30bf\u30d7\u30eb\u306e\u5909\u63db","text":"<pre><code>// ListsAndTuples.scala\n@main def listsAndTuples(): Unit = {\n  // 2\u3064\u306e\u30ea\u30b9\u30c8\u3092\u30bf\u30d7\u30eb\u306e\u30ea\u30b9\u30c8\u306b\n  val names = List(\"\u592a\u90ce\", \"\u82b1\u5b50\", \"\u6b21\u90ce\")\n  val ages = List(20, 22, 19)\n\n  val people = names.zip(ages)  // zip = \u30b8\u30c3\u30d1\u30fc\u306e\u3088\u3046\u306b\u7d44\u307f\u5408\u308f\u305b\u308b\n  println(s\"\u7d44\u307f\u5408\u308f\u305b: $people\")\n\n  // \u30bf\u30d7\u30eb\u306e\u30ea\u30b9\u30c8\u30922\u3064\u306e\u30ea\u30b9\u30c8\u306b\n  val (nameList, ageList) = people.unzip\n  println(s\"\u540d\u524d: $nameList\")\n  println(s\"\u5e74\u9f62: $ageList\")\n\n  // \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u4ed8\u304d\u30ea\u30b9\u30c8\n  val fruits = List(\"\u308a\u3093\u3054\", \"\u30d0\u30ca\u30ca\", \"\u30aa\u30ec\u30f3\u30b8\")\n  val indexed = fruits.zipWithIndex\n\n  println(\"\\n\u679c\u7269\u30ea\u30b9\u30c8:\")\n  indexed.foreach { case (fruit, index) =&gt;\n    println(s\"  ${index + 1}. $fruit\")\n  }\n}\n</code></pre>"},{"location":"part3/chapter11/#_16","title":"\u3088\u304f\u3042\u308b\u9593\u9055\u3044\u3068\u5bfe\u51e6\u6cd5","text":""},{"location":"part3/chapter11/#1","title":"\u9593\u9055\u30441\uff1a\u756a\u53f7\u3092\u9593\u9055\u3048\u308b","text":"<pre><code>// CommonMistakes1.scala\n@main def commonMistakes1(): Unit = {\n  val pair = (\"A\", \"B\")\n\n  // \u3088\u304f\u3042\u308b\u9593\u9055\u3044\n  // val first = pair._0   // \u30a8\u30e9\u30fc\uff010\u756a\u306f\u306a\u3044\n  // val third = pair._3   // \u30a8\u30e9\u30fc\uff012\u8981\u7d20\u3057\u304b\u306a\u3044\n\n  // \u6b63\u3057\u3044\u65b9\u6cd5\n  val first = pair._1   // OK\n  val second = pair._2  // OK\n\n  println(s\"1\u756a\u76ee: $first, 2\u756a\u76ee: $second\")\n}\n</code></pre>"},{"location":"part3/chapter11/#2","title":"\u9593\u9055\u30442\uff1a\u578b\u3092\u9593\u9055\u3048\u308b","text":"<pre><code>// CommonMistakes2.scala\n@main def commonMistakes2(): Unit = {\n  val data: (String, Int) = (\"\u5e74\u9f62\", 25)\n\n  // \u3088\u304f\u3042\u308b\u9593\u9055\u3044\n  // val age: String = data._2  // \u30a8\u30e9\u30fc\uff01Int\u306a\u306e\u306b String \u3068\u3057\u3066\u6271\u304a\u3046\u3068\u3057\u3066\u3044\u308b\n\n  // \u6b63\u3057\u3044\u65b9\u6cd5\n  val label: String = data._1  // OK\n  val age: Int = data._2       // OK\n\n  println(s\"$label: $age\")\n}\n</code></pre>"},{"location":"part3/chapter11/#3","title":"\u9593\u9055\u30443\uff1a\u8981\u7d20\u6570\u3092\u9593\u9055\u3048\u308b","text":"<pre><code>// CommonMistakes3.scala\n@main def commonMistakes3(): Unit = {\n  val triple = (\"A\", \"B\", \"C\")\n\n  // \u3088\u304f\u3042\u308b\u9593\u9055\u3044\n  // val (a, b) = triple        // \u30a8\u30e9\u30fc\uff013\u8981\u7d20\u306a\u306e\u306b2\u3064\u3057\u304b\u53d7\u3051\u53d6\u3063\u3066\u3044\u306a\u3044\n  // val (a, b, c, d) = triple  // \u30a8\u30e9\u30fc\uff013\u8981\u7d20\u306a\u306e\u306b4\u3064\u53d7\u3051\u53d6\u308d\u3046\u3068\u3057\u3066\u3044\u308b\n\n  // \u6b63\u3057\u3044\u65b9\u6cd5\n  val (a, b, c) = triple      // OK\uff1a\u3061\u3087\u3046\u30693\u3064\n  val (x, y, _) = triple      // OK\uff1a3\u3064\u76ee\u306f\u7121\u8996\n\n  println(s\"\u5168\u90e8: $a, $b, $c\")\n  println(s\"2\u3064\u3060\u3051: $x, $y\")\n}\n</code></pre>"},{"location":"part3/chapter11/#_17","title":"\u7df4\u7fd2\u3057\u3066\u307f\u3088\u3046\uff01","text":""},{"location":"part3/chapter11/#1_1","title":"\u7df4\u7fd21\uff1a\u5ea7\u6a19\u8a08\u7b97","text":"<p>2\u6b21\u5143\u5ea7\u6a19\u3092\u8868\u3059\u30bf\u30d7\u30eb(Double, Double)\u3092\u4f7f\u3063\u3066\u30012\u70b9\u9593\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code>@main def practice1(): Unit = {\n  val point1 = (0.0, 0.0)\n  val point2 = (3.0, 4.0)\n\n  // \u3053\u3053\u306b\u8ddd\u96e2\u3092\u8a08\u7b97\u3059\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u304f\u3060\u3055\u3044\n  // \u30d2\u30f3\u30c8: \u8ddd\u96e2 = \u221a((x2-x1)\u00b2 + (y2-y1)\u00b2)\n}\n</code></pre>"},{"location":"part3/chapter11/#2_1","title":"\u7df4\u7fd22\uff1a\u6210\u7e3e\u7ba1\u7406","text":"<p>\u751f\u5f92\u306e\u6210\u7e3e\u30c7\u30fc\u30bf\uff08\u540d\u524d\u3001\u6570\u5b66\u3001\u82f1\u8a9e\u3001\u7406\u79d1\uff09\u306e\u30bf\u30d7\u30eb\u306e\u30ea\u30b9\u30c8\u304b\u3089\u30013\u79d1\u76ee\u306e\u5e73\u5747\u70b9\u304c\u6700\u3082\u9ad8\u3044\u751f\u5f92\u3092\u898b\u3064\u3051\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code>@main def practice2(): Unit = {\n  val students = List(\n    (\"\u592a\u90ce\", 80, 75, 85),\n    (\"\u82b1\u5b50\", 90, 85, 80),\n    (\"\u6b21\u90ce\", 70, 90, 75),\n    (\"\u685c\", 85, 80, 90)\n  )\n\n  // \u3053\u3053\u306b\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u304f\u3060\u3055\u3044\n}\n</code></pre>"},{"location":"part3/chapter11/#3_1","title":"\u7df4\u7fd23\uff1a\u8cb7\u3044\u7269\u8a08\u7b97","text":"<p>\u5546\u54c1\u540d\u3068\u5358\u4fa1\u306e\u30bf\u30d7\u30eb\u306e\u30ea\u30b9\u30c8\u3068\u3001\u5546\u54c1\u540d\u3068\u8cfc\u5165\u6570\u306e\u30bf\u30d7\u30eb\u306e\u30ea\u30b9\u30c8\u304b\u3089\u3001\u5408\u8a08\u91d1\u984d\u3092\u8a08\u7b97\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code>@main def practice3(): Unit = {\n  val prices = List(\n    (\"\u308a\u3093\u3054\", 100),\n    (\"\u30d0\u30ca\u30ca\", 80),\n    (\"\u30aa\u30ec\u30f3\u30b8\", 120)\n  )\n\n  val purchases = List(\n    (\"\u308a\u3093\u3054\", 3),\n    (\"\u30d0\u30ca\u30ca\", 5),\n    (\"\u30aa\u30ec\u30f3\u30b8\", 2)\n  )\n\n  // \u3053\u3053\u306b\u5408\u8a08\u91d1\u984d\u3092\u8a08\u7b97\u3059\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u304f\u3060\u3055\u3044\n}\n</code></pre>"},{"location":"part3/chapter11/#_18","title":"\u3053\u306e\u7ae0\u306e\u307e\u3068\u3081","text":"<p>\u30bf\u30d7\u30eb\u306b\u3064\u3044\u3066\u3001\u305f\u304f\u3055\u3093\u306e\u3053\u3068\u3092\u5b66\u3073\u307e\u3057\u305f\u306d\uff01</p>"},{"location":"part3/chapter11/#_19","title":"\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3053\u3068","text":"<p>\u2705 \u30bf\u30d7\u30eb\u306e\u57fa\u672c - \u9055\u3046\u578b\u306e\u30c7\u30fc\u30bf\u3092\u307e\u3068\u3081\u3089\u308c\u308b - \u6700\u592722\u500b\u307e\u3067\u8981\u7d20\u3092\u5165\u308c\u3089\u308c\u308b - \u9806\u756a\u3068\u500b\u6570\u304c\u6c7a\u307e\u3063\u3066\u3044\u308b</p> <p>\u2705 \u30bf\u30d7\u30eb\u306e\u4f5c\u308a\u65b9 - \u666e\u901a\u306e\u66f8\u304d\u65b9\uff1a<code>(\u8981\u7d201, \u8981\u7d202, ...)</code> - \u77e2\u5370\u8a18\u6cd5\uff082\u8981\u7d20\u306e\u307f\uff09\uff1a<code>\u8981\u7d201 -&gt; \u8981\u7d202</code></p> <p>\u2705 \u8981\u7d20\u306e\u53d6\u308a\u51fa\u3057\u65b9 - \u756a\u53f7\u3067\uff1a<code>._1</code>, <code>._2</code>, ...\uff081\u304b\u3089\u59cb\u307e\u308b\uff09 - \u5206\u89e3\u3057\u3066\uff1a<code>val (a, b, c) = tuple</code> - \u4e0d\u8981\u306a\u8981\u7d20\u306f<code>_</code>\u3067\u7121\u8996</p> <p>\u2705 \u5b9f\u8df5\u7684\u306a\u4f7f\u3044\u65b9 - \u95a2\u6570\u304b\u3089\u8907\u6570\u306e\u5024\u3092\u8fd4\u3059 - \u95a2\u9023\u3059\u308b\u30c7\u30fc\u30bf\u3092\u307e\u3068\u3081\u308b - \u30ea\u30b9\u30c8\u3068\u7d44\u307f\u5408\u308f\u305b\u3066\u4f7f\u3046</p>"},{"location":"part3/chapter11/#_20","title":"\u30bf\u30d7\u30eb\u3092\u4f7f\u3046\u3079\u304d\u5834\u9762","text":"<ol> <li> <p>\u5c11\u6570\u306e\u95a2\u9023\u30c7\u30fc\u30bf</p> <ul> <li>\u540d\u524d\u3068\u5e74\u9f62</li> <li>\u7def\u5ea6\u3068\u7d4c\u5ea6</li> <li>\u6210\u529f/\u5931\u6557\u3068\u7d50\u679c</li> </ul> </li> <li> <p>\u4e00\u6642\u7684\u306a\u30c7\u30fc\u30bf\u306e\u7d44\u307f\u5408\u308f\u305b</p> <ul> <li>\u8a08\u7b97\u306e\u4e2d\u9593\u7d50\u679c</li> <li>\u95a2\u6570\u306e\u623b\u308a\u5024</li> <li>\u30eb\u30fc\u30d7\u5185\u3067\u306e\u51e6\u7406</li> </ul> </li> <li> <p>\u578b\u304c\u9055\u3046\u30c7\u30fc\u30bf\u3092\u6271\u3046</p> <ul> <li>\u6587\u5b57\u5217\u3068\u6570\u5024</li> <li>\u8907\u6570\u306e\u7570\u306a\u308b\u578b\u306e\u7d44\u307f\u5408\u308f\u305b</li> </ul> </li> </ol>"},{"location":"part3/chapter11/#_21","title":"\u6b21\u306e\u7ae0\u3067\u306f...","text":"<p>\u30bf\u30d7\u30eb\u306e\u5fdc\u7528\u7de8\u3068\u3057\u3066\u3001\u3088\u308a\u5b9f\u8df5\u7684\u306a\u4f7f\u3044\u65b9\u3092\u5b66\u3073\u307e\u3059\u3002\u7279\u306b\u3001\u30de\u30c3\u30d7\uff08Map\uff09\u3068\u7d44\u307f\u5408\u308f\u305b\u305f\u4f7f\u3044\u65b9\u3092\u8a73\u3057\u304f\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part3/chapter11/#_22","title":"\u6700\u5f8c\u306b","text":"<p>\u30bf\u30d7\u30eb\u306f\u300c\u30c7\u30fc\u30bf\u306e\u5c0f\u5305\u300d\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002\u95a2\u9023\u3059\u308b\u3082\u306e\u3092\u307e\u3068\u3081\u3066\u3001\u5fc5\u8981\u306a\u3068\u304d\u306b\u53d6\u308a\u51fa\u3059\u3002\u3053\u306e\u8003\u3048\u65b9\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u3042\u3089\u3086\u308b\u5834\u9762\u3067\u5f79\u7acb\u3061\u307e\u3059\u3002</p> <p>\u6700\u521d\u306f<code>._1</code>\u3084<code>._2</code>\u3068\u3044\u3046\u66f8\u304d\u65b9\u306b\u9055\u548c\u611f\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u4f7f\u3063\u3066\u3044\u308b\u3046\u3061\u306b\u81ea\u7136\u306b\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3088\uff01</p>"},{"location":"part3/chapter12/","title":"\u7b2c12\u7ae0 \u578b\u5b89\u5168\u306a\u30de\u30c3\u30d7","text":""},{"location":"part3/chapter12/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u300c\u8f9e\u66f8\u300d\u3092\u4f7f\u3063\u305f\u3053\u3068\u306f\u3042\u308a\u307e\u3059\u304b\uff1f\u5358\u8a9e\u3092\u8abf\u3079\u308b\u3068\u3001\u305d\u306e\u610f\u5473\u304c\u51fa\u3066\u304d\u307e\u3059\u3088\u306d\u3002\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u300c\u30de\u30c3\u30d7\uff08Map\uff09\u300d\u3082\u540c\u3058\u3088\u3046\u306a\u4ed5\u7d44\u307f\u3067\u3059\u3002</p> <p>\u300c\u30ad\u30fc\uff08\u9375\uff09\u300d\u3092\u4f7f\u3063\u3066\u300c\u5024\u300d\u3092\u53d6\u308a\u51fa\u3059\u3001\u307e\u308b\u3067\u5b9d\u7bb1\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3059\u3002\u3053\u306e\u7ae0\u3067\u306f\u3001Scala\u306e\u578b\u5b89\u5168\u306a\u30de\u30c3\u30d7\u306b\u3064\u3044\u3066\u3001\u697d\u3057\u304f\u5b66\u3093\u3067\u3044\u304d\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part3/chapter12/#_2","title":"\u30de\u30c3\u30d7\u3063\u3066\u4f55\u3060\u308d\u3046\uff1f","text":""},{"location":"part3/chapter12/#_3","title":"\u8eab\u8fd1\u306a\u4f8b\u3067\u8003\u3048\u3066\u307f\u3088\u3046","text":"<pre><code>// MapLikeDictionary.scala\n@main def mapLikeDictionary(): Unit = {\n  // \u96fb\u8a71\u5e33\u306e\u3088\u3046\u306a\u30de\u30c3\u30d7\n  val phoneBook = Map(\n    \"\u7530\u4e2d\u592a\u90ce\" -&gt; \"090-1234-5678\",\n    \"\u5c71\u7530\u82b1\u5b50\" -&gt; \"080-9876-5432\",\n    \"\u4f50\u85e4\u6b21\u90ce\" -&gt; \"070-1111-2222\"\n  )\n\n  // \u540d\u524d\uff08\u30ad\u30fc\uff09\u3067\u96fb\u8a71\u756a\u53f7\uff08\u5024\uff09\u3092\u8abf\u3079\u308b\n  println(s\"\u7530\u4e2d\u592a\u90ce\u306e\u96fb\u8a71\u756a\u53f7: ${phoneBook(\"\u7530\u4e2d\u592a\u90ce\")}\")\n\n  // \u82f1\u548c\u8f9e\u5178\u306e\u3088\u3046\u306a\u30de\u30c3\u30d7\n  val dictionary = Map(\n    \"apple\" -&gt; \"\u308a\u3093\u3054\",\n    \"banana\" -&gt; \"\u30d0\u30ca\u30ca\",\n    \"orange\" -&gt; \"\u30aa\u30ec\u30f3\u30b8\"\n  )\n\n  println(s\"apple\u306e\u610f\u5473: ${dictionary(\"apple\")}\")\n}\n</code></pre> <p>\u30de\u30c3\u30d7\u306f\u300c\u4f55\u304b\u300d\u3068\u300c\u4f55\u304b\u300d\u3092\u7d50\u3073\u3064\u3051\u308b\u3001\u4fbf\u5229\u306a\u9053\u5177\u3067\u3059\uff01</p>"},{"location":"part3/chapter12/#_4","title":"\u3082\u3063\u3068\u5b9f\u7528\u7684\u306a\u4f8b","text":"<pre><code>// PracticalMaps.scala\n@main def practicalMaps(): Unit = {\n  // \u5546\u54c1\u3068\u4fa1\u683c\n  val prices = Map(\n    \"\u30b3\u30fc\u30d2\u30fc\" -&gt; 300,\n    \"\u7d05\u8336\" -&gt; 250,\n    \"\u30b1\u30fc\u30ad\" -&gt; 400,\n    \"\u30b5\u30f3\u30c9\u30a4\u30c3\u30c1\" -&gt; 350\n  )\n\n  println(\"=== \u30ab\u30d5\u30a7\u30e1\u30cb\u30e5\u30fc ===\")\n  prices.foreach { case (item, price) =&gt;\n    println(s\"$item: ${price}\u5186\")\n  }\n\n  // \u5b66\u751f\u3068\u6210\u7e3e\n  val grades = Map(\n    \"A001\" -&gt; 85,\n    \"A002\" -&gt; 92,\n    \"A003\" -&gt; 78,\n    \"A004\" -&gt; 88\n  )\n\n  println(\"\\n=== \u6210\u7e3e\u4e00\u89a7 ===\")\n  grades.foreach { case (id, score) =&gt;\n    println(s\"\u5b66\u7c4d\u756a\u53f7$id: $score\u70b9\")\n  }\n}\n</code></pre>"},{"location":"part3/chapter12/#_5","title":"\u30de\u30c3\u30d7\u306e\u4f5c\u308a\u65b9","text":""},{"location":"part3/chapter12/#_6","title":"\u57fa\u672c\u306e\u4f5c\u308a\u65b9","text":"<pre><code>// CreatingMaps.scala\n@main def creatingMaps(): Unit = {\n  // \u65b9\u6cd51\uff1a\u77e2\u5370\u8a18\u6cd5\uff08\u304a\u3059\u3059\u3081\uff01\uff09\n  val fruits = Map(\n    \"apple\" -&gt; \"\u308a\u3093\u3054\",\n    \"banana\" -&gt; \"\u30d0\u30ca\u30ca\",\n    \"grape\" -&gt; \"\u3076\u3069\u3046\"\n  )\n\n  // \u65b9\u6cd52\uff1a\u30bf\u30d7\u30eb\u3092\u4f7f\u3046\n  val numbers = Map(\n    (\"one\", 1),\n    (\"two\", 2),\n    (\"three\", 3)\n  )\n\n  // \u65b9\u6cd53\uff1a\u7a7a\u306e\u30de\u30c3\u30d7\u304b\u3089\u59cb\u3081\u308b\n  val emptyMap = Map[String, Int]()\n  val withOne = emptyMap + (\"first\" -&gt; 1)\n  val withTwo = withOne + (\"second\" -&gt; 2)\n\n  println(s\"\u679c\u7269: $fruits\")\n  println(s\"\u6570\u5b57: $numbers\")\n  println(s\"\u8ffd\u52a0\u5f8c: $withTwo\")\n}\n</code></pre>"},{"location":"part3/chapter12/#_7","title":"\u578b\u3092\u660e\u793a\u3059\u308b","text":"<pre><code>// TypedMaps.scala\n@main def typedMaps(): Unit = {\n  // \u578b\u3092\u660e\u793a\u7684\u306b\u6307\u5b9a\n  val ages: Map[String, Int] = Map(\n    \"\u592a\u90ce\" -&gt; 20,\n    \"\u82b1\u5b50\" -&gt; 22,\n    \"\u6b21\u90ce\" -&gt; 19\n  )\n\n  // \u578b\u63a8\u8ad6\u306b\u4efb\u305b\u308b\uff08\u901a\u5e38\u306f\u3053\u308c\u3067OK\uff09\n  val cities = Map(\n    \"\u6771\u4eac\" -&gt; \"\u65e5\u672c\",\n    \"\u30cb\u30e5\u30fc\u30e8\u30fc\u30af\" -&gt; \"\u30a2\u30e1\u30ea\u30ab\",\n    \"\u30ed\u30f3\u30c9\u30f3\" -&gt; \"\u30a4\u30ae\u30ea\u30b9\"\n  )\n\n  // \u8907\u96d1\u306a\u578b\u306e\u30de\u30c3\u30d7\n  val studentInfo: Map[String, (Int, String)] = Map(\n    \"A001\" -&gt; (20, \"\u5de5\u5b66\u90e8\"),\n    \"A002\" -&gt; (21, \"\u7406\u5b66\u90e8\"),\n    \"A003\" -&gt; (19, \"\u6587\u5b66\u90e8\")\n  )\n\n  studentInfo.foreach { case (id, (age, dept)) =&gt;\n    println(s\"$id: ${age}\u6b73, $dept\")\n  }\n}\n</code></pre>"},{"location":"part3/chapter12/#_8","title":"\u5024\u3092\u53d6\u308a\u51fa\u3059","text":""},{"location":"part3/chapter12/#_9","title":"\u57fa\u672c\u7684\u306a\u53d6\u308a\u51fa\u3057\u65b9","text":"<pre><code>// GettingValues.scala\n@main def gettingValues(): Unit = {\n  val inventory = Map(\n    \"\u30da\u30f3\" -&gt; 50,\n    \"\u30ce\u30fc\u30c8\" -&gt; 30,\n    \"\u6d88\u3057\u30b4\u30e0\" -&gt; 100\n  )\n\n  // \u76f4\u63a5\u53d6\u308a\u51fa\u3059\uff08\u30ad\u30fc\u304c\u5fc5\u305a\u5b58\u5728\u3059\u308b\u5834\u5408\uff09\n  val penCount = inventory(\"\u30da\u30f3\")\n  println(s\"\u30da\u30f3\u306e\u5728\u5eab: $penCount\u500b\")\n\n  // \u5b58\u5728\u3057\u306a\u3044\u30ad\u30fc\u3092\u6307\u5b9a\u3059\u308b\u3068\u30a8\u30e9\u30fc\uff01\n  // val rulerCount = inventory(\"\u5b9a\u898f\")  // \u30a8\u30e9\u30fc\uff01\n\n  // \u5b89\u5168\u306b\u53d6\u308a\u51fa\u3059\uff08get\u30e1\u30bd\u30c3\u30c9\uff09\n  inventory.get(\"\u30ce\u30fc\u30c8\") match {\n    case Some(count) =&gt; println(s\"\u30ce\u30fc\u30c8\u306e\u5728\u5eab: ${count}\u500b\")\n    case None =&gt; println(\"\u30ce\u30fc\u30c8\u306f\u5728\u5eab\u306b\u3042\u308a\u307e\u305b\u3093\")\n  }\n\n  inventory.get(\"\u5b9a\u898f\") match {\n    case Some(count) =&gt; println(s\"\u5b9a\u898f\u306e\u5728\u5eab: ${count}\u500b\")\n    case None =&gt; println(\"\u5b9a\u898f\u306f\u5728\u5eab\u306b\u3042\u308a\u307e\u305b\u3093\")\n  }\n}\n</code></pre>"},{"location":"part3/chapter12/#_10","title":"\u4fbf\u5229\u306a\u53d6\u308a\u51fa\u3057\u65b9","text":"<pre><code>// ConvenientGetters.scala\n@main def convenientGetters(): Unit = {\n  val settings = Map(\n    \"fontSize\" -&gt; 14,\n    \"theme\" -&gt; \"dark\",\n    \"autoSave\" -&gt; \"true\"\n  )\n\n  // \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u6307\u5b9a\u3057\u3066\u53d6\u5f97\n  val fontSize = settings.getOrElse(\"fontSize\", 12)\n  val lineHeight = settings.getOrElse(\"lineHeight\", 20)  // \u5b58\u5728\u3057\u306a\u3044\n\n  println(s\"\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba: $fontSize\")\n  println(s\"\u884c\u306e\u9ad8\u3055: $lineHeight\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\uff09\")\n\n  // \u30ad\u30fc\u306e\u5b58\u5728\u78ba\u8a8d\n  if (settings.contains(\"theme\")) {\n    println(s\"\u30c6\u30fc\u30de\u8a2d\u5b9a: ${settings(\"theme\")}\")\n  } else {\n    println(\"\u30c6\u30fc\u30de\u306f\u672a\u8a2d\u5b9a\u3067\u3059\")\n  }\n\n  // \u3059\u3079\u3066\u306e\u30ad\u30fc\u3068\u5024\u3092\u53d6\u5f97\n  println(\"\\n=== \u3059\u3079\u3066\u306e\u8a2d\u5b9a ===\")\n  println(s\"\u30ad\u30fc\u4e00\u89a7: ${settings.keys}\")\n  println(s\"\u5024\u4e00\u89a7: ${settings.values}\")\n}\n</code></pre>"},{"location":"part3/chapter12/#_11","title":"\u30de\u30c3\u30d7\u306e\u66f4\u65b0","text":""},{"location":"part3/chapter12/#_12","title":"\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u30de\u30c3\u30d7\u306e\u66f4\u65b0","text":"<pre><code>// UpdatingMaps.scala\n@main def updatingMaps(): Unit = {\n  val originalPrices = Map(\n    \"\u30b3\u30fc\u30d2\u30fc\" -&gt; 300,\n    \"\u7d05\u8336\" -&gt; 250\n  )\n\n  // \u8981\u7d20\u3092\u8ffd\u52a0\uff08\u65b0\u3057\u3044\u30de\u30c3\u30d7\u3092\u4f5c\u6210\uff09\n  val withCake = originalPrices + (\"\u30b1\u30fc\u30ad\" -&gt; 400)\n\n  // \u8907\u6570\u8ffd\u52a0\n  val fullMenu = originalPrices ++ Map(\n    \"\u30b1\u30fc\u30ad\" -&gt; 400,\n    \"\u30b5\u30f3\u30c9\u30a4\u30c3\u30c1\" -&gt; 350\n  )\n\n  // \u5024\u3092\u66f4\u65b0\uff08\u540c\u3058\u30ad\u30fc\u3067\u4e0a\u66f8\u304d\uff09\n  val newPrices = originalPrices + (\"\u30b3\u30fc\u30d2\u30fc\" -&gt; 350)\n\n  // \u8981\u7d20\u3092\u524a\u9664\n  val withoutTea = fullMenu - \"\u7d05\u8336\"\n\n  println(s\"\u5143\u306e\u4fa1\u683c: $originalPrices\")\n  println(s\"\u30b1\u30fc\u30ad\u8ffd\u52a0: $withCake\")\n  println(s\"\u30d5\u30eb\u30e1\u30cb\u30e5\u30fc: $fullMenu\")\n  println(s\"\u5024\u4e0a\u3052\u5f8c: $newPrices\")\n  println(s\"\u7d05\u8336\u306a\u3057: $withoutTea\")\n}\n</code></pre>"},{"location":"part3/chapter12/#_13","title":"\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u30de\u30c3\u30d7","text":"<pre><code>// MutableMaps.scala\n@main def mutableMaps(): Unit = {\n  import scala.collection.mutable\n\n  // \u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u30de\u30c3\u30d7\u306e\u4f5c\u6210\n  val scores = mutable.Map(\n    \"\u592a\u90ce\" -&gt; 80,\n    \"\u82b1\u5b50\" -&gt; 85\n  )\n\n  // \u76f4\u63a5\u66f4\u65b0\u3067\u304d\u308b\n  scores(\"\u592a\u90ce\") = 90  // \u66f4\u65b0\n  scores(\"\u6b21\u90ce\") = 75  // \u8ffd\u52a0\n\n  println(s\"\u66f4\u65b0\u5f8c: $scores\")\n\n  // \u524a\u9664\n  scores.remove(\"\u82b1\u5b50\")\n  println(s\"\u82b1\u5b50\u3092\u524a\u9664: $scores\")\n\n  // \u4e00\u62ec\u66f4\u65b0\n  scores ++= Map(\"\u685c\" -&gt; 88, \"\u5065\u592a\" -&gt; 92)\n  println(s\"\u8907\u6570\u8ffd\u52a0: $scores\")\n}\n</code></pre>"},{"location":"part3/chapter12/#_14","title":"\u5b9f\u8df5\u7684\u306a\u4f7f\u3044\u65b9","text":""},{"location":"part3/chapter12/#_15","title":"\u5728\u5eab\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0","text":"<pre><code>// InventorySystem.scala\n@main def inventorySystem(): Unit = {\n  // \u5546\u54c1\u306e\u5728\u5eab\u7ba1\u7406\n  var inventory = Map(\n    \"\u30da\u30f3\" -&gt; 100,\n    \"\u30ce\u30fc\u30c8\" -&gt; 50,\n    \"\u6d88\u3057\u30b4\u30e0\" -&gt; 200,\n    \"\u5b9a\u898f\" -&gt; 30\n  )\n\n  // \u5728\u5eab\u3092\u8868\u793a\n  def showInventory(): Unit = {\n    println(\"=== \u73fe\u5728\u306e\u5728\u5eab ===\")\n    inventory.foreach { case (item, count) =&gt;\n      val status = if (count &lt; 50) \"\u26a0\ufe0f \u5728\u5eab\u5c11\" else \"\u2713\"\n      println(f\"$item%-10s: $count%3d\u500b $status\")\n    }\n  }\n\n  // \u5546\u54c1\u3092\u8ca9\u58f2\n  def sell(item: String, quantity: Int): Unit =\n    inventory.get(item) match {\n      case Some(current) if current &gt;= quantity =&gt;\n        inventory = inventory + (item -&gt; (current - quantity))\n        println(s\"\u2713 $item \u3092${quantity}\u500b\u8ca9\u58f2\u3057\u307e\u3057\u305f\")\n      case Some(current) =&gt;\n        println(s\"\u274c \u5728\u5eab\u4e0d\u8db3\uff01${item}\u306f${current}\u500b\u3057\u304b\u3042\u308a\u307e\u305b\u3093\")\n      case None =&gt;\n        println(s\"\u274c ${item}\u306f\u53d6\u308a\u6271\u3063\u3066\u3044\u307e\u305b\u3093\")\n    }\n\n  // \u5728\u5eab\u3092\u88dc\u5145\n  def restock(item: String, quantity: Int): Unit = {\n    val current = inventory.getOrElse(item, 0)\n    inventory = inventory + (item -&gt; (current + quantity))\n    println(s\"\u2713 $item \u3092${quantity}\u500b\u88dc\u5145\u3057\u307e\u3057\u305f\")\n  }\n\n  // \u4f7f\u3063\u3066\u307f\u308b\n  showInventory()\n\n  println(\"\\n--- \u8ca9\u58f2\u51e6\u7406 ---\")\n  sell(\"\u30da\u30f3\", 30)\n  sell(\"\u30ce\u30fc\u30c8\", 60)  // \u5728\u5eab\u4e0d\u8db3\n  sell(\"\u306f\u3055\u307f\", 5)   // \u5b58\u5728\u3057\u306a\u3044\n\n  println(\"\\n--- \u88dc\u5145\u51e6\u7406 ---\")\n  restock(\"\u30ce\u30fc\u30c8\", 100)\n  restock(\"\u306f\u3055\u307f\", 50)  // \u65b0\u5546\u54c1\n\n  println()\n  showInventory()\n}\n</code></pre>"},{"location":"part3/chapter12/#_16","title":"\u6210\u7e3e\u7ba1\u7406\u3068\u5206\u6790","text":"<pre><code>// GradeAnalysis.scala\n@main def gradeAnalysis(): Unit = {\n  // \u5b66\u751f\u306e\u6210\u7e3e\uff08\u5b66\u7c4d\u756a\u53f7 -&gt; (\u540d\u524d, \u70b9\u6570\u306e\u30de\u30c3\u30d7)\uff09\n  val students = Map(\n    \"S001\" -&gt; (\"\u7530\u4e2d\u592a\u90ce\", Map(\"\u6570\u5b66\" -&gt; 85, \"\u82f1\u8a9e\" -&gt; 78, \"\u7406\u79d1\" -&gt; 92)),\n    \"S002\" -&gt; (\"\u5c71\u7530\u82b1\u5b50\", Map(\"\u6570\u5b66\" -&gt; 92, \"\u82f1\u8a9e\" -&gt; 88, \"\u7406\u79d1\" -&gt; 85)),\n    \"S003\" -&gt; (\"\u4f50\u85e4\u6b21\u90ce\", Map(\"\u6570\u5b66\" -&gt; 78, \"\u82f1\u8a9e\" -&gt; 95, \"\u7406\u79d1\" -&gt; 80))\n  )\n\n  // \u500b\u4eba\u6210\u7e3e\u8868\n  def showStudentGrades(id: String): Unit =\n    students.get(id) match {\n      case Some((name, grades)) =&gt;\n        println(s\"=== $name \u3055\u3093\u306e\u6210\u7e3e ===\")\n        var total = 0\n        grades.foreach { case (subject, score) =&gt;\n          println(s\"$subject: $score\u70b9\")\n          total += score\n        }\n        val average = total.toDouble / grades.size\n        println(f\"\u5e73\u5747: $average%.1f\u70b9\")\n\n      case None =&gt;\n        println(s\"\u5b66\u7c4d\u756a\u53f7 $id \u306e\u5b66\u751f\u306f\u898b\u3064\u304b\u308a\u307e\u305b\u3093\")\n    }\n\n  // \u79d1\u76ee\u5225\u7d71\u8a08\n  def subjectStats(subject: String): Unit = {\n    println(s\"\\n=== $subject \u306e\u7d71\u8a08 ===\")\n    val scores = students.values.flatMap { case (_, grades) =&gt;\n      grades.get(subject)\n    }.toList\n\n    if (scores.nonEmpty) {\n      val average = scores.sum.toDouble / scores.length\n      val max = scores.max\n      val min = scores.min\n\n      println(f\"\u5e73\u5747\u70b9: $average%.1f\")\n      println(s\"\u6700\u9ad8\u70b9: $max\")\n      println(s\"\u6700\u4f4e\u70b9: $min\")\n    }\n  }\n\n  // \u4f7f\u3063\u3066\u307f\u308b\n  showStudentGrades(\"S001\")\n  showStudentGrades(\"S004\")  // \u5b58\u5728\u3057\u306a\u3044\n\n  subjectStats(\"\u6570\u5b66\")\n  subjectStats(\"\u82f1\u8a9e\")\n}\n</code></pre>"},{"location":"part3/chapter12/#_17","title":"\u5358\u8a9e\u30ab\u30a6\u30f3\u30bf\u30fc","text":"<pre><code>// WordCounter.scala\n@main def wordCounter(): Unit = {\n  val text = \"\"\"\n    Scala\u306f\u697d\u3057\u3044\u8a00\u8a9e\u3067\u3059\u3002\n    Scala\u3067\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u5b66\u3073\u307e\u3057\u3087\u3046\u3002\n    Scala\u306f\u578b\u5b89\u5168\u3067\u3059\u3002\n  \"\"\"\n\n  // \u5358\u8a9e\u3092\u6570\u3048\u308b\n  val words = text.split(\"\\\\s+|\u3002|\u3001\").filter(_.nonEmpty)\n\n  var wordCount = Map[String, Int]()\n\n  words.foreach { word =&gt;\n    val current = wordCount.getOrElse(word, 0)\n    wordCount = wordCount + (word -&gt; (current + 1))\n  }\n\n  // \u7d50\u679c\u3092\u8868\u793a\n  println(\"=== \u5358\u8a9e\u306e\u51fa\u73fe\u56de\u6570 ===\")\n  wordCount.toList\n    .sortBy(-_._2)  // \u56de\u6570\u306e\u591a\u3044\u9806\n    .foreach { case (word, count) =&gt;\n      println(s\"$word: $count\u56de\")\n    }\n}\n</code></pre>"},{"location":"part3/chapter12/#_18","title":"\u30de\u30c3\u30d7\u306e\u4fbf\u5229\u306a\u64cd\u4f5c","text":""},{"location":"part3/chapter12/#_19","title":"\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3068\u5909\u63db","text":"<pre><code>// MapOperations.scala\n@main def mapOperations(): Unit = {\n  val products = Map(\n    \"\u30da\u30f3\" -&gt; 100,\n    \"\u30ce\u30fc\u30c8\" -&gt; 200,\n    \"\u6d88\u3057\u30b4\u30e0\" -&gt; 80,\n    \"\u5b9a\u898f\" -&gt; 150,\n    \"\u306f\u3055\u307f\" -&gt; 300\n  )\n\n  // 150\u5186\u4ee5\u4e0a\u306e\u5546\u54c1\u3092\u62bd\u51fa\n  val expensive = products.filter { case (_, price) =&gt; price &gt;= 150 }\n  println(s\"150\u5186\u4ee5\u4e0a: $expensive\")\n\n  // \u4fa1\u683c\u309210%\u5024\u4e0a\u3052\n  val increased = products.map { case (name, price) =&gt;\n    (name, (price * 1.1).toInt)\n  }\n  println(s\"10%\u5024\u4e0a\u3052\u5f8c: $increased\")\n\n  // \u30ad\u30fc\u3060\u3051\u5909\u63db\uff08\u5546\u54c1\u540d\u3092\u5927\u6587\u5b57\u306b\uff09\n  val upperCase = products.map { case (name, price) =&gt;\n    (name.toUpperCase, price)\n  }\n  println(s\"\u5927\u6587\u5b57: $upperCase\")\n}\n</code></pre>"},{"location":"part3/chapter12/#_20","title":"\u30de\u30c3\u30d7\u306e\u7d50\u5408","text":"<pre><code>// MergingMaps.scala\n@main def mergingMaps(): Unit = {\n  val shop1 = Map(\"\u308a\u3093\u3054\" -&gt; 100, \"\u30d0\u30ca\u30ca\" -&gt; 80)\n  val shop2 = Map(\"\u30d0\u30ca\u30ca\" -&gt; 90, \"\u30aa\u30ec\u30f3\u30b8\" -&gt; 120)\n\n  // \u5358\u7d14\u306a\u7d50\u5408\uff08\u5f8c\u306e\u5024\u3067\u4e0a\u66f8\u304d\uff09\n  val merged1 = shop1 ++ shop2\n  println(s\"shop2\u512a\u5148: $merged1\")\n\n  val merged2 = shop2 ++ shop1\n  println(s\"shop1\u512a\u5148: $merged2\")\n\n  // \u30ab\u30b9\u30bf\u30e0\u7d50\u5408\uff08\u5b89\u3044\u65b9\u3092\u9078\u3076\uff09\n  val bestPrices = (shop1.keySet ++ shop2.keySet).map { fruit =&gt;\n    val price1 = shop1.getOrElse(fruit, Int.MaxValue)\n    val price2 = shop2.getOrElse(fruit, Int.MaxValue)\n    fruit -&gt; math.min(price1, price2)\n  }.toMap\n\n  println(s\"\u6700\u5b89\u5024: $bestPrices\")\n}\n</code></pre>"},{"location":"part3/chapter12/#_21","title":"\u3088\u304f\u3042\u308b\u9593\u9055\u3044\u3068\u5bfe\u51e6\u6cd5","text":""},{"location":"part3/chapter12/#1","title":"\u9593\u9055\u30441\uff1a\u5b58\u5728\u3057\u306a\u3044\u30ad\u30fc","text":"<pre><code>// MapMistakes1.scala\n@main def mapMistakes1(): Unit = {\n  val ages = Map(\"\u592a\u90ce\" -&gt; 20, \"\u82b1\u5b50\" -&gt; 22)\n\n  // \u9593\u9055\u3044\uff1a\u5b58\u5728\u3057\u306a\u3044\u30ad\u30fc\u306b\u76f4\u63a5\u30a2\u30af\u30bb\u30b9\n  // val jiroAge = ages(\"\u6b21\u90ce\")  // \u30a8\u30e9\u30fc\uff01\n\n  // \u6b63\u3057\u3044\u65b9\u6cd51\uff1aget\u3092\u4f7f\u3046\n  ages.get(\"\u6b21\u90ce\") match {\n    case Some(age) =&gt; println(s\"\u6b21\u90ce\u306f${age}\u6b73\")\n    case None =&gt; println(\"\u6b21\u90ce\u306e\u30c7\u30fc\u30bf\u306f\u3042\u308a\u307e\u305b\u3093\")\n  }\n\n  // \u6b63\u3057\u3044\u65b9\u6cd52\uff1agetOrElse\u3092\u4f7f\u3046\n  val jiroAge = ages.getOrElse(\"\u6b21\u90ce\", 0)\n  println(s\"\u6b21\u90ce\u306e\u5e74\u9f62: $jiroAge\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\uff09\")\n\n  // \u6b63\u3057\u3044\u65b9\u6cd53\uff1a\u4e8b\u524d\u306b\u30c1\u30a7\u30c3\u30af\n  if (ages.contains(\"\u6b21\u90ce\")) {\n    println(s\"\u6b21\u90ce\u306f${ages(\"\u6b21\u90ce\")}\u6b73\")\n  } else {\n    println(\"\u6b21\u90ce\u306e\u30c7\u30fc\u30bf\u306f\u3042\u308a\u307e\u305b\u3093\")\n  }\n}\n</code></pre>"},{"location":"part3/chapter12/#2","title":"\u9593\u9055\u30442\uff1a\u578b\u306e\u4e0d\u4e00\u81f4","text":"<pre><code>// MapMistakes2.scala\n@main def mapMistakes2(): Unit = {\n  // \u578b\u304c\u660e\u78ba\u306a\u30de\u30c3\u30d7\n  val prices: Map[String, Int] = Map(\n    \"\u30b3\u30fc\u30d2\u30fc\" -&gt; 300,\n    \"\u7d05\u8336\" -&gt; 250\n  )\n\n  // \u9593\u9055\u3044\uff1a\u9055\u3046\u578b\u306e\u5024\u3092\u8ffd\u52a0\u3057\u3088\u3046\u3068\u3059\u308b\n  // val wrong = prices + (\"\u30b1\u30fc\u30ad\" -&gt; \"400\u5186\")  // \u30a8\u30e9\u30fc\uff01\n\n  // \u6b63\u3057\u3044\uff1a\u540c\u3058\u578b\u3067\u8ffd\u52a0\n  val correct = prices + (\"\u30b1\u30fc\u30ad\" -&gt; 400)\n  println(correct)\n}\n</code></pre>"},{"location":"part3/chapter12/#_22","title":"\u7df4\u7fd2\u3057\u3066\u307f\u3088\u3046\uff01","text":""},{"location":"part3/chapter12/#1_1","title":"\u7df4\u7fd21\uff1a\u30e1\u30cb\u30e5\u30fc\u8a08\u7b97\u6a5f","text":"<p>\u30ab\u30d5\u30a7\u306e\u30e1\u30cb\u30e5\u30fc\u3068\u6ce8\u6587\u30ea\u30b9\u30c8\u304b\u3089\u3001\u5408\u8a08\u91d1\u984d\u3092\u8a08\u7b97\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code>@main def practice1(): Unit = {\n  val menu = Map(\n    \"\u30b3\u30fc\u30d2\u30fc\" -&gt; 300,\n    \"\u7d05\u8336\" -&gt; 250,\n    \"\u30b1\u30fc\u30ad\" -&gt; 400,\n    \"\u30b5\u30f3\u30c9\u30a4\u30c3\u30c1\" -&gt; 350\n  )\n\n  val orders = List(\n    \"\u30b3\u30fc\u30d2\u30fc\", \"\u30b3\u30fc\u30d2\u30fc\", \"\u30b1\u30fc\u30ad\", \"\u7d05\u8336\"\n  )\n\n  // \u3053\u3053\u306b\u5408\u8a08\u91d1\u984d\u3092\u8a08\u7b97\u3059\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u304f\u3060\u3055\u3044\n}\n</code></pre>"},{"location":"part3/chapter12/#2_1","title":"\u7df4\u7fd22\uff1a\u6295\u7968\u96c6\u8a08","text":"<p>\u6295\u7968\u7d50\u679c\u306e\u30ea\u30b9\u30c8\u304b\u3089\u3001\u5404\u5019\u88dc\u8005\u306e\u5f97\u7968\u6570\u3092\u96c6\u8a08\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code>@main def practice2(): Unit = {\n  val votes = List(\n    \"\u5c71\u7530\", \"\u7530\u4e2d\", \"\u5c71\u7530\", \"\u4f50\u85e4\", \n    \"\u7530\u4e2d\", \"\u5c71\u7530\", \"\u7530\u4e2d\", \"\u7530\u4e2d\"\n  )\n\n  // \u3053\u3053\u306b\u96c6\u8a08\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u304f\u3060\u3055\u3044\n  // \u671f\u5f85\u3059\u308b\u7d50\u679c: Map(\"\u5c71\u7530\" -&gt; 3, \"\u7530\u4e2d\" -&gt; 4, \"\u4f50\u85e4\" -&gt; 1)\n}\n</code></pre>"},{"location":"part3/chapter12/#3","title":"\u7df4\u7fd23\uff1a\u5728\u5eab\u30c1\u30a7\u30c3\u30af","text":"<p>\u6ce8\u6587\u30ea\u30b9\u30c8\u306b\u5bfe\u3057\u3066\u3001\u5728\u5eab\u304c\u8db3\u308a\u308b\u304b\u30c1\u30a7\u30c3\u30af\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p> <pre><code>@main def practice3(): Unit = {\n  val inventory = Map(\n    \"\u30da\u30f3\" -&gt; 50,\n    \"\u30ce\u30fc\u30c8\" -&gt; 30,\n    \"\u6d88\u3057\u30b4\u30e0\" -&gt; 100\n  )\n\n  val orders = Map(\n    \"\u30da\u30f3\" -&gt; 20,\n    \"\u30ce\u30fc\u30c8\" -&gt; 40,  // \u5728\u5eab\u4e0d\u8db3\uff01\n    \"\u5b9a\u898f\" -&gt; 10     // \u5728\u5eab\u306b\u306a\u3044\uff01\n  )\n\n  // \u3053\u3053\u306b\u30c1\u30a7\u30c3\u30af\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u304f\u3060\u3055\u3044\n}\n</code></pre>"},{"location":"part3/chapter12/#_23","title":"\u3053\u306e\u7ae0\u306e\u307e\u3068\u3081","text":"<p>\u30de\u30c3\u30d7\u306b\u3064\u3044\u3066\u3001\u672c\u5f53\u306b\u305f\u304f\u3055\u3093\u306e\u3053\u3068\u3092\u5b66\u3073\u307e\u3057\u305f\u306d\uff01</p>"},{"location":"part3/chapter12/#_24","title":"\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3053\u3068","text":"<p>\u2705 \u30de\u30c3\u30d7\u306e\u57fa\u672c - \u30ad\u30fc\u3068\u5024\u306e\u30da\u30a2\u3067\u30c7\u30fc\u30bf\u3092\u7ba1\u7406 - \u578b\u5b89\u5168\u306a\u5ba3\u8a00\u3068\u64cd\u4f5c - \u52b9\u7387\u7684\u306a\u30c7\u30fc\u30bf\u306e\u691c\u7d22</p> <p>\u2705 \u30de\u30c3\u30d7\u306e\u64cd\u4f5c - \u5024\u306e\u53d6\u5f97\uff08get\u3001getOrElse\uff09 - \u8981\u7d20\u306e\u8ffd\u52a0\u30fb\u66f4\u65b0\u30fb\u524a\u9664 - \u5b89\u5168\u306a\u30a2\u30af\u30bb\u30b9\u65b9\u6cd5</p> <p>\u2705 \u5b9f\u8df5\u7684\u306a\u4f7f\u3044\u65b9 - \u5728\u5eab\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0 - \u6210\u7e3e\u306e\u96c6\u8a08\u3068\u5206\u6790 - \u5358\u8a9e\u306e\u30ab\u30a6\u30f3\u30c8</p> <p>\u2705 \u4fbf\u5229\u306a\u6a5f\u80fd - \u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3068\u5909\u63db - \u30de\u30c3\u30d7\u306e\u7d50\u5408 - \u30ad\u30fc\u3068\u5024\u306e\u64cd\u4f5c</p>"},{"location":"part3/chapter12/#_25","title":"\u30de\u30c3\u30d7\u3092\u4f7f\u3046\u3079\u304d\u5834\u9762","text":"<ol> <li> <p>\u691c\u7d22\u304c\u5fc5\u8981\u306a\u3068\u304d</p> <ul> <li>\u540d\u524d\u304b\u3089\u96fb\u8a71\u756a\u53f7\u3092\u8abf\u3079\u308b</li> <li>\u5546\u54c1\u540d\u304b\u3089\u4fa1\u683c\u3092\u8abf\u3079\u308b</li> <li>ID\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b</li> </ul> </li> <li> <p>\u95a2\u9023\u4ed8\u3051\u304c\u5fc5\u8981\u306a\u3068\u304d</p> <ul> <li>\u5358\u8a9e\u3068\u610f\u5473</li> <li>\u4eba\u3068\u5c5e\u6027</li> <li>\u30ad\u30fc\u3068\u8a2d\u5b9a\u5024</li> </ul> </li> <li> <p>\u96c6\u8a08\u3084\u5206\u6790</p> <ul> <li>\u51fa\u73fe\u56de\u6570\u306e\u30ab\u30a6\u30f3\u30c8</li> <li>\u30b0\u30eb\u30fc\u30d7\u3054\u3068\u306e\u96c6\u8a08</li> <li>\u30c7\u30fc\u30bf\u306e\u5206\u985e</li> </ul> </li> </ol>"},{"location":"part3/chapter12/#_26","title":"\u6b21\u306e\u7ae0\u3067\u306f...","text":"<p>\u30de\u30c3\u30d7\u3092\u4f7f\u3063\u305f\u3001\u3088\u308a\u9ad8\u5ea6\u306a\u30c7\u30fc\u30bf\u51e6\u7406\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3059\u3002\u8907\u96d1\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u64cd\u4f5c\u3082\u3001\u6016\u304f\u3042\u308a\u307e\u305b\u3093\u3088\uff01</p>"},{"location":"part3/chapter12/#_27","title":"\u6700\u5f8c\u306b","text":"<p>\u30de\u30c3\u30d7\u306f\u300c\u9b54\u6cd5\u306e\u8f9e\u66f8\u300d\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002\u4f55\u3067\u3082\u5165\u308c\u3089\u308c\u3066\u3001\u3059\u3050\u306b\u53d6\u308a\u51fa\u305b\u308b\u3002\u3053\u306e\u4fbf\u5229\u3055\u3092\u6d3b\u7528\u3057\u3066\u3001\u3082\u3063\u3068\u697d\u3057\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u3063\u3066\u3044\u304d\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part3/chapter13/","title":"\u7b2c13\u7ae0 \u30de\u30c3\u30d7\u3067\u95a2\u9023\u4ed8\u3051\u3066\u4fdd\u5b58","text":""},{"location":"part3/chapter13/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u524d\u7ae0\u3067\u30de\u30c3\u30d7\u306e\u57fa\u672c\u3092\u5b66\u3073\u307e\u3057\u305f\u3002\u4eca\u56de\u306f\u3001\u30de\u30c3\u30d7\u3092\u4f7f\u3063\u3066\u3082\u3063\u3068\u8907\u96d1\u306a\u30c7\u30fc\u30bf\u3092\u6271\u3046\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002</p> <p>\u73fe\u5b9f\u4e16\u754c\u3067\u306f\u3001\u30c7\u30fc\u30bf\u306f\u5358\u7d14\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u300c\u751f\u5f92\u306b\u306f\u8907\u6570\u306e\u79d1\u76ee\u306e\u6210\u7e3e\u304c\u3042\u308b\u300d\u300c\u304a\u5e97\u306b\u306f\u8907\u6570\u306e\u5546\u54c1\u304c\u3042\u308a\u3001\u305d\u308c\u305e\u308c\u306b\u5728\u5eab\u3068\u4fa1\u683c\u304c\u3042\u308b\u300d\u306a\u3069\u3001\u30c7\u30fc\u30bf\u306b\u306f\u95a2\u9023\u6027\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u3053\u306e\u7ae0\u3067\u306f\u3001\u30de\u30c3\u30d7\u3092\u4f7f\u3063\u3066\u3053\u3046\u3057\u305f\u8907\u96d1\u306a\u95a2\u9023\u3092\u8868\u73fe\u3059\u308b\u65b9\u6cd5\u3092\u3001\u697d\u3057\u304f\u5b66\u3093\u3067\u3044\u304d\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part3/chapter13/#_2","title":"\u8907\u96d1\u306a\u30c7\u30fc\u30bf\u306e\u95a2\u9023\u4ed8\u3051","text":""},{"location":"part3/chapter13/#_3","title":"\u30cd\u30b9\u30c8\u3057\u305f\u30de\u30c3\u30d7","text":"<pre><code>// NestedMaps.scala\n@main def nestedMaps(): Unit = {\n  // \u751f\u5f92\u3054\u3068\u306e\u79d1\u76ee\u5225\u6210\u7e3e\n  val gradeBook = Map(\n    \"\u7530\u4e2d\u592a\u90ce\" -&gt; Map(\n      \"\u6570\u5b66\" -&gt; 85,\n      \"\u82f1\u8a9e\" -&gt; 78,\n      \"\u7406\u79d1\" -&gt; 92\n    ),\n    \"\u5c71\u7530\u82b1\u5b50\" -&gt; Map(\n      \"\u6570\u5b66\" -&gt; 92,\n      \"\u82f1\u8a9e\" -&gt; 88,\n      \"\u7406\u79d1\" -&gt; 85\n    ),\n    \"\u4f50\u85e4\u6b21\u90ce\" -&gt; Map(\n      \"\u6570\u5b66\" -&gt; 78,\n      \"\u82f1\u8a9e\" -&gt; 95,\n      \"\u7406\u79d1\" -&gt; 80\n    )\n  )\n\n  // \u7279\u5b9a\u306e\u751f\u5f92\u306e\u7279\u5b9a\u306e\u79d1\u76ee\u3092\u8abf\u3079\u308b\n  val taroMath = gradeBook(\"\u7530\u4e2d\u592a\u90ce\")(\"\u6570\u5b66\")\n  println(s\"\u7530\u4e2d\u592a\u90ce\u306e\u6570\u5b66: $taroMath\u70b9\")\n\n  // \u5b89\u5168\u306b\u30a2\u30af\u30bb\u30b9\n  gradeBook.get(\"\u5c71\u7530\u82b1\u5b50\") match {\n    case Some(subjects) =&gt;\n      subjects.get(\"\u82f1\u8a9e\") match {\n        case Some(score) =&gt; println(s\"\u5c71\u7530\u82b1\u5b50\u306e\u82f1\u8a9e: $score\u70b9\")\n        case None =&gt; println(\"\u82f1\u8a9e\u306e\u6210\u7e3e\u304c\u3042\u308a\u307e\u305b\u3093\")\n      }\n    case None =&gt; println(\"\u305d\u306e\u751f\u5f92\u306f\u898b\u3064\u304b\u308a\u307e\u305b\u3093\")\n  }\n}\n</code></pre>"},{"location":"part3/chapter13/#_4","title":"\u30de\u30c3\u30d7\u3068\u30b1\u30fc\u30b9\u30af\u30e9\u30b9","text":"<pre><code>// MapWithCaseClass.scala\n@main def mapWithCaseClass(): Unit = {\n  // \u5546\u54c1\u60c5\u5831\u3092\u8868\u3059\u30b1\u30fc\u30b9\u30af\u30e9\u30b9\n  case class Product(\n    name: String,\n    price: Int,\n    stock: Int,\n    category: String\n  )\n\n  // \u5546\u54c1ID\u3068\u5546\u54c1\u60c5\u5831\u306e\u30de\u30c3\u30d7\n  val products = Map(\n    \"P001\" -&gt; Product(\"\u30ce\u30fc\u30c8PC\", 80000, 5, \"\u96fb\u5b50\u6a5f\u5668\"),\n    \"P002\" -&gt; Product(\"\u30de\u30a6\u30b9\", 2000, 20, \"\u30a2\u30af\u30bb\u30b5\u30ea\"),\n    \"P003\" -&gt; Product(\"\u30ad\u30fc\u30dc\u30fc\u30c9\", 5000, 15, \"\u30a2\u30af\u30bb\u30b5\u30ea\"),\n    \"P004\" -&gt; Product(\"\u30e2\u30cb\u30bf\u30fc\", 30000, 8, \"\u96fb\u5b50\u6a5f\u5668\")\n  )\n\n  // \u30ab\u30c6\u30b4\u30ea\u5225\u306b\u5546\u54c1\u3092\u8868\u793a\n  println(\"=== \u30ab\u30c6\u30b4\u30ea: \u96fb\u5b50\u6a5f\u5668 ===\")\n  products.filter { case (_, product) =&gt;\n    product.category == \"\u96fb\u5b50\u6a5f\u5668\"\n  }.foreach { case (id, product) =&gt;\n    println(f\"$id: ${product.name}%-15s ${product.price}%,d\u5186 (\u5728\u5eab: ${product.stock})\")\n  }\n\n  // \u5728\u5eab\u304c\u5c11\u306a\u3044\u5546\u54c1\n  println(\"\\n=== \u5728\u5eab\u8b66\u544a\uff0810\u500b\u4ee5\u4e0b\uff09===\")\n  products.filter(_._2.stock &lt;= 10).foreach { case (id, product) =&gt;\n    println(s\"\u26a0\ufe0f $id: ${product.name} - \u6b8b\u308a${product.stock}\u500b\")\n  }\n}\n</code></pre>"},{"location":"part3/chapter13/#_5","title":"\u5b9f\u8df5\u4f8b\uff1a\u56f3\u66f8\u9928\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0","text":"<pre><code>// LibrarySystem.scala\n@main def librarySystem(): Unit = {\n  // \u672c\u306e\u60c5\u5831\n  case class Book(\n    title: String,\n    author: String,\n    isbn: String,\n    available: Boolean = true\n  )\n\n  // \u8cb8\u51fa\u8a18\u9332\n  case class Rental(\n    bookIsbn: String,\n    userId: String,\n    rentDate: String,\n    returnDate: Option[String] = None\n  )\n\n  // \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\n  var books = Map(\n    \"978-4-123456-78-9\" -&gt; Book(\"Scala\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\", \"\u5c71\u7530\u592a\u90ce\", \"978-4-123456-78-9\"),\n    \"978-4-234567-89-0\" -&gt; Book(\"\u95a2\u6570\u578b\u5165\u9580\", \"\u7530\u4e2d\u82b1\u5b50\", \"978-4-234567-89-0\"),\n    \"978-4-345678-90-1\" -&gt; Book(\"\u578b\u5b89\u5168\u306e\u6975\u610f\", \"\u4f50\u85e4\u6b21\u90ce\", \"978-4-345678-90-1\")\n  )\n\n  var rentals = List[Rental]()\n\n  // \u672c\u3092\u501f\u308a\u308b\n  def rentBook(isbn: String, userId: String, date: String): Unit = {\n    books.get(isbn) match {\n      case Some(book) if book.available =&gt;\n        books = books + (isbn -&gt; book.copy(available = false))\n        rentals = Rental(isbn, userId, date) :: rentals\n        println(s\"\u2713 \u300c${book.title}\u300d\u3092\u8cb8\u51fa\u3057\u307e\u3057\u305f\")\n      case Some(book) =&gt;\n        println(s\"\u274c \u300c${book.title}\u300d\u306f\u8cb8\u51fa\u4e2d\u3067\u3059\")\n      case None =&gt;\n        println(s\"\u274c ISBN: $isbn \u306e\u672c\u306f\u898b\u3064\u304b\u308a\u307e\u305b\u3093\")\n    }\n  }\n\n  // \u672c\u3092\u8fd4\u3059\n  def returnBook(isbn: String, date: String): Unit = {\n    books.get(isbn) match {\n      case Some(book) if !book.available =&gt;\n        books = books + (isbn -&gt; book.copy(available = true))\n        // \u8cb8\u51fa\u8a18\u9332\u3092\u66f4\u65b0\n        rentals = rentals.map { rental =&gt;\n          if (rental.bookIsbn == isbn &amp;&amp; rental.returnDate.isEmpty)\n            rental.copy(returnDate = Some(date))\n          else\n            rental\n        }\n        println(s\"\u2713 \u300c${book.title}\u300d\u3092\u8fd4\u5374\u3057\u307e\u3057\u305f\")\n      case Some(book) =&gt;\n        println(s\"\u274c \u300c${book.title}\u300d\u306f\u8cb8\u51fa\u3055\u308c\u3066\u3044\u307e\u305b\u3093\")\n      case None =&gt;\n        println(s\"\u274c ISBN: $isbn \u306e\u672c\u306f\u898b\u3064\u304b\u308a\u307e\u305b\u3093\")\n    }\n  }\n\n  // \u5229\u7528\u72b6\u6cc1\u3092\u8868\u793a\n  def showStatus(): Unit = {\n    println(\"\\n=== \u8535\u66f8\u4e00\u89a7 ===\")\n    books.foreach { case (isbn, book) =&gt;\n      val status = if (book.available) \"\u8cb8\u51fa\u53ef\u80fd\" else \"\u8cb8\u51fa\u4e2d\"\n      println(f\"${book.title}%-20s by ${book.author}%-10s [$status]\")\n    }\n\n    println(\"\\n=== \u73fe\u5728\u306e\u8cb8\u51fa ===\")\n    rentals.filter(_.returnDate.isEmpty).foreach { rental =&gt;\n      books.get(rental.bookIsbn).foreach { book =&gt;\n        println(s\"${book.title} -&gt; ${rental.userId} (${rental.rentDate}\uff5e)\")\n      }\n    }\n  }\n\n  // \u4f7f\u3063\u3066\u307f\u308b\n  showStatus()\n\n  println(\"\\n--- \u8cb8\u51fa\u51e6\u7406 ---\")\n  rentBook(\"978-4-123456-78-9\", \"U001\", \"2024-01-15\")\n  rentBook(\"978-4-234567-89-0\", \"U002\", \"2024-01-15\")\n  rentBook(\"978-4-123456-78-9\", \"U003\", \"2024-01-16\")  // \u3059\u3067\u306b\u8cb8\u51fa\u4e2d\n\n  println(\"\\n--- \u8fd4\u5374\u51e6\u7406 ---\")\n  returnBook(\"978-4-123456-78-9\", \"2024-01-20\")\n\n  showStatus()\n}\n</code></pre>"},{"location":"part3/chapter13/#_6","title":"\u30b0\u30eb\u30fc\u30d7\u5316\u3068\u96c6\u8a08","text":""},{"location":"part3/chapter13/#groupby","title":"groupBy\u3092\u4f7f\u3063\u305f\u5206\u985e","text":"<pre><code>// GroupingData.scala\n@main def groupingData(): Unit = {\n  // \u5f93\u696d\u54e1\u30c7\u30fc\u30bf\n  case class Employee(\n    name: String,\n    department: String,\n    salary: Int,\n    years: Int\n  )\n\n  val employees = List(\n    Employee(\"\u7530\u4e2d\", \"\u55b6\u696d\", 400000, 5),\n    Employee(\"\u5c71\u7530\", \"\u958b\u767a\", 500000, 3),\n    Employee(\"\u4f50\u85e4\", \"\u55b6\u696d\", 450000, 7),\n    Employee(\"\u9234\u6728\", \"\u958b\u767a\", 550000, 8),\n    Employee(\"\u9ad8\u6a4b\", \"\u4eba\u4e8b\", 380000, 2),\n    Employee(\"\u6e21\u8fba\", \"\u958b\u767a\", 480000, 4)\n  )\n\n  // \u90e8\u7f72\u3054\u3068\u306b\u30b0\u30eb\u30fc\u30d7\u5316\n  val byDepartment = employees.groupBy(_.department)\n\n  println(\"=== \u90e8\u7f72\u5225\u4eba\u6570 ===\")\n  byDepartment.foreach { case (dept, emps) =&gt;\n    println(s\"$dept: ${emps.length}\u4eba\")\n  }\n\n  // \u90e8\u7f72\u3054\u3068\u306e\u5e73\u5747\u7d66\u4e0e\n  println(\"\\n=== \u90e8\u7f72\u5225\u5e73\u5747\u7d66\u4e0e ===\")\n  byDepartment.foreach { case (dept, emps) =&gt;\n    val avgSalary = emps.map(_.salary).sum / emps.length\n    println(f\"$dept: ${avgSalary}%,d\u5186\")\n  }\n\n  // \u7d4c\u9a13\u5e74\u6570\u3067\u30b0\u30eb\u30fc\u30d7\u5316\n  val byExperience = employees.groupBy { emp =&gt;\n    if emp.years &lt; 3 then \"\u65b0\u4eba\"\n    else if emp.years &lt; 7 then \"\u4e2d\u5805\"\n    else \"\u30d9\u30c6\u30e9\u30f3\"\n  }\n\n  println(\"\\n=== \u7d4c\u9a13\u5225\u5206\u5e03 ===\")\n  byExperience.foreach { case (level, emps) =&gt;\n    println(s\"$level: ${emps.map(_.name).mkString(\", \")}\")\n  }\n</code></pre>"},{"location":"part3/chapter13/#_7","title":"\u8907\u6570\u30ad\u30fc\u3067\u306e\u96c6\u8a08","text":"<pre><code>// MultiKeyAggregation.scala\n@main def multiKeyAggregation(): Unit = {\n  // \u58f2\u4e0a\u30c7\u30fc\u30bf\n  case class Sale(\n    date: String,\n    product: String,\n    category: String,\n    amount: Int\n  )\n\n  val sales = List(\n    Sale(\"2024-01-01\", \"\u30b3\u30fc\u30d2\u30fc\", \"\u98f2\u307f\u7269\", 300),\n    Sale(\"2024-01-01\", \"\u30b5\u30f3\u30c9\u30a4\u30c3\u30c1\", \"\u98df\u3079\u7269\", 500),\n    Sale(\"2024-01-01\", \"\u30b3\u30fc\u30d2\u30fc\", \"\u98f2\u307f\u7269\", 300),\n    Sale(\"2024-01-02\", \"\u7d05\u8336\", \"\u98f2\u307f\u7269\", 250),\n    Sale(\"2024-01-02\", \"\u30b1\u30fc\u30ad\", \"\u98df\u3079\u7269\", 400),\n    Sale(\"2024-01-02\", \"\u30b3\u30fc\u30d2\u30fc\", \"\u98f2\u307f\u7269\", 300)\n  )\n\n  // \u65e5\u4ed8\u3054\u3068\u306e\u58f2\u4e0a\n  val dailySales = sales.groupBy(_.date).map { case (date, daySales) =&gt;\n    date -&gt; daySales.map(_.amount).sum\n  }\n\n  println(\"=== \u65e5\u5225\u58f2\u4e0a ===\")\n  dailySales.toList.sorted.foreach { case (date, total) =&gt;\n    println(f\"$date: ${total}%,d\u5186\")\n  }\n\n  // \u30ab\u30c6\u30b4\u30ea\u5225\u58f2\u4e0a\n  val categorySales = sales.groupBy(_.category).map { case (cat, catSales) =&gt;\n    cat -&gt; catSales.map(_.amount).sum\n  }\n\n  println(\"\\n=== \u30ab\u30c6\u30b4\u30ea\u5225\u58f2\u4e0a ===\")\n  categorySales.foreach { case (category, total) =&gt;\n    println(f\"$category: ${total}%,d\u5186\")\n  }\n\n  // \u5546\u54c1\u5225\u306e\u8ca9\u58f2\u56de\u6570\u3068\u58f2\u4e0a\n  val productStats = sales.groupBy(_.product).map { case (product, productSales) =&gt;\n    val count = productSales.length\n    val total = productSales.map(_.amount).sum\n    (product, count, total)\n  }\n\n  println(\"\\n=== \u5546\u54c1\u5225\u7d71\u8a08 ===\")\n  productStats.foreach { case (product, count, total) =&gt;\n    println(f\"$product: $count\u56de ${total}%,d\u5186\")\n  }\n</code></pre>"},{"location":"part3/chapter13/#_8","title":"\u9ad8\u5ea6\u306a\u30de\u30c3\u30d7\u64cd\u4f5c","text":""},{"location":"part3/chapter13/#_9","title":"\u30de\u30c3\u30d7\u306e\u5909\u63db\u3068\u30de\u30c3\u30d4\u30f3\u30b0","text":"<pre><code>// AdvancedMapOperations.scala\n@main def advancedMapOperations(): Unit = {\n  // \u5143\u30c7\u30fc\u30bf\uff1a\u751f\u5f92ID -&gt; (\u540d\u524d, \u70b9\u6570\u30ea\u30b9\u30c8)\n  val students = Map(\n    \"S001\" -&gt; (\"\u7530\u4e2d\", List(85, 90, 78)),\n    \"S002\" -&gt; (\"\u5c71\u7530\", List(92, 88, 95)),\n    \"S003\" -&gt; (\"\u4f50\u85e4\", List(78, 82, 80))\n  )\n\n  // \u5e73\u5747\u70b9\u3092\u8a08\u7b97\u3057\u3066\u30de\u30c3\u30d7\u306b\u5909\u63db\n  val averages = students.map { case (id, (name, scores)) =&gt;\n    val avg = scores.sum.toDouble / scores.length\n    (id, (name, avg))\n  }\n\n  println(\"=== \u5e73\u5747\u70b9 ===\")\n  averages.foreach { case (id, (name, avg)) =&gt;\n    println(f\"$id: $name - $avg%.1f\u70b9\")\n  }\n\n  // \u6210\u7e3e\u30e9\u30f3\u30af\u3092\u8ffd\u52a0\n  val withRank = averages.map { case (id, (name, avg)) =&gt;\n    val rank = avg match\n      case a if a &gt;= 90 =&gt; \"A\"\n      case a if a &gt;= 80 =&gt; \"B\"\n      case a if a &gt;= 70 =&gt; \"C\"\n      case _ =&gt; \"D\"\n    (id, (name, avg, rank))\n  }\n\n  println(\"\\n=== \u6210\u7e3e\u30e9\u30f3\u30af ===\")\n  withRank.foreach { case (id, (name, avg, rank)) =&gt;\n    println(f\"$id: $name - $avg%.1f\u70b9 [\u30e9\u30f3\u30af$rank]\")\n  }\n</code></pre>"},{"location":"part3/chapter13/#_10","title":"\u30de\u30c3\u30d7\u306e\u30de\u30fc\u30b8\u6226\u7565","text":"<pre><code>// MapMergeStrategies.scala\n@main def mapMergeStrategies(): Unit = {\n  // \u5e97\u8217A\u306e\u5728\u5eab\n  val storeA = Map(\n    \"\u308a\u3093\u3054\" -&gt; 50,\n    \"\u30d0\u30ca\u30ca\" -&gt; 30,\n    \"\u30aa\u30ec\u30f3\u30b8\" -&gt; 40\n  )\n\n  // \u5e97\u8217B\u306e\u5728\u5eab\n  val storeB = Map(\n    \"\u308a\u3093\u3054\" -&gt; 30,\n    \"\u30d0\u30ca\u30ca\" -&gt; 50,\n    \"\u3076\u3069\u3046\" -&gt; 20\n  )\n\n  // \u6226\u75651\uff1a\u5408\u8a08\u3059\u308b\n  val totalStock = (storeA.keySet ++ storeB.keySet).map { fruit =&gt;\n    val stockA = storeA.getOrElse(fruit, 0)\n    val stockB = storeB.getOrElse(fruit, 0)\n    fruit -&gt; (stockA + stockB)\n  }.toMap\n\n  println(\"=== \u5408\u8a08\u5728\u5eab ===\")\n  totalStock.foreach { case (fruit, total) =&gt;\n    println(s\"$fruit: $total\u500b\")\n  }\n\n  // \u6226\u75652\uff1a\u5e97\u8217\u5225\u306b\u4fdd\u6301\n  val allStores = Map(\n    \"\u5e97\u8217A\" -&gt; storeA,\n    \"\u5e97\u8217B\" -&gt; storeB\n  )\n\n  println(\"\\n=== \u5e97\u8217\u5225\u5728\u5eab ===\")\n  allStores.foreach { case (store, inventory) =&gt;\n    println(s\"$store:\")\n    inventory.foreach { case (fruit, count) =&gt;\n      println(s\"  $fruit: $count\u500b\")\n    }\n  }\n\n  // \u6226\u75653\uff1a\u5546\u54c1\u3054\u3068\u306b\u5e97\u8217\u60c5\u5831\u3092\u4fdd\u6301\n  val byProduct = (storeA.keySet ++ storeB.keySet).map { fruit =&gt;\n    val stores = Map(\n      \"\u5e97\u8217A\" -&gt; storeA.getOrElse(fruit, 0),\n      \"\u5e97\u8217B\" -&gt; storeB.getOrElse(fruit, 0)\n    ).filter(_._2 &gt; 0)  // \u5728\u5eab0\u306f\u9664\u5916\n    fruit -&gt; stores\n  }.toMap\n\n  println(\"\\n=== \u5546\u54c1\u5225\u306e\u5e97\u8217\u5728\u5eab ===\")\n  byProduct.foreach { case (fruit, stores) =&gt;\n    println(s\"$fruit: ${stores.map{case(s,c) =&gt; s\"$s($c\u500b)\"}.mkString(\", \")}\")\n  }\n</code></pre>"},{"location":"part3/chapter13/#_11","title":"\u5b9f\u7528\u4f8b\uff1a\u30b7\u30e7\u30c3\u30d4\u30f3\u30b0\u30ab\u30fc\u30c8\u30b7\u30b9\u30c6\u30e0","text":"<pre><code>// ShoppingCartSystem.scala\n@main def shoppingCartSystem(): Unit = {\n  // \u5546\u54c1\u30ab\u30bf\u30ed\u30b0\n  val catalog = Map(\n    \"P001\" -&gt; (\"T\u30b7\u30e3\u30c4\", 2000),\n    \"P002\" -&gt; (\"\u30b8\u30fc\u30f3\u30ba\", 5000),\n    \"P003\" -&gt; (\"\u30b9\u30cb\u30fc\u30ab\u30fc\", 8000),\n    \"P004\" -&gt; (\"\u30ad\u30e3\u30c3\u30d7\", 3000)\n  )\n\n  // \u30e6\u30fc\u30b6\u30fc\u306e\u30ab\u30fc\u30c8\uff08\u30e6\u30fc\u30b6\u30fcID -&gt; \u5546\u54c1ID\u3068\u6570\u91cf\u306e\u30de\u30c3\u30d7\uff09\n  var carts = Map[String, Map[String, Int]]()\n\n  // \u30ab\u30fc\u30c8\u306b\u5546\u54c1\u3092\u8ffd\u52a0\n  def addToCart(userId: String, productId: String, quantity: Int): Unit =\n    if catalog.contains(productId) then\n      val userCart = carts.getOrElse(userId, Map())\n      val currentQty = userCart.getOrElse(productId, 0)\n      val updatedCart = userCart + (productId -&gt; (currentQty + quantity))\n      carts = carts + (userId -&gt; updatedCart)\n\n      val (name, _) = catalog(productId)\n      println(s\"\u2713 $name \u3092${quantity}\u500b\u30ab\u30fc\u30c8\u306b\u8ffd\u52a0\u3057\u307e\u3057\u305f\")\n    else\n      println(s\"\u274c \u5546\u54c1ID: $productId \u306f\u5b58\u5728\u3057\u307e\u305b\u3093\")\n\n  // \u30ab\u30fc\u30c8\u306e\u4e2d\u8eab\u3092\u8868\u793a\n  def showCart(userId: String): Unit =\n    carts.get(userId) match\n      case Some(cart) if cart.nonEmpty =&gt;\n        println(s\"\\n=== $userId \u3055\u3093\u306e\u30ab\u30fc\u30c8 ===\")\n        var total = 0\n        cart.foreach { case (productId, quantity) =&gt;\n          val (name, price) = catalog(productId)\n          val subtotal = price * quantity\n          total += subtotal\n          println(f\"$name%-15s: ${price}%,d\u5186 \u00d7 $quantity = ${subtotal}%,d\u5186\")\n        }\n        println(f\"\u5408\u8a08: ${total}%,d\u5186\")\n\n      case _ =&gt;\n        println(s\"\\n$userId \u3055\u3093\u306e\u30ab\u30fc\u30c8\u306f\u7a7a\u3067\u3059\")\n\n  // \u30af\u30fc\u30dd\u30f3\u9069\u7528\n  def applyCoupon(userId: String, discount: Double): Int =\n    carts.get(userId) match\n      case Some(cart) =&gt;\n        val total = cart.map { case (productId, quantity) =&gt;\n          val (_, price) = catalog(productId)\n          price * quantity\n        }.sum\n        val discounted = (total * (1 - discount)).toInt\n        println(f\"\\n\ud83d\udcb0 ${(discount * 100).toInt}%%\u30af\u30fc\u30dd\u30f3\u9069\u7528: ${total}%,d\u5186 \u2192 ${discounted}%,d\u5186\")\n        discounted\n\n      case None =&gt;\n        println(\"\u30ab\u30fc\u30c8\u304c\u7a7a\u3067\u3059\")\n        0\n\n  // \u4f7f\u3063\u3066\u307f\u308b\n  println(\"=== \u5546\u54c1\u30ab\u30bf\u30ed\u30b0 ===\")\n  catalog.foreach { case (id, (name, price)) =&gt;\n    println(f\"$id: $name%-15s ${price}%,d\u5186\")\n  }\n\n  // \u30e6\u30fc\u30b6\u30fc1\u306e\u8cb7\u3044\u7269\n  addToCart(\"user1\", \"P001\", 2)  // T\u30b7\u30e3\u30c42\u679a\n  addToCart(\"user1\", \"P003\", 1)  // \u30b9\u30cb\u30fc\u30ab\u30fc1\u8db3\n  showCart(\"user1\")\n\n  // \u30e6\u30fc\u30b6\u30fc2\u306e\u8cb7\u3044\u7269\n  addToCart(\"user2\", \"P002\", 1)  // \u30b8\u30fc\u30f3\u30ba1\u672c\n  addToCart(\"user2\", \"P004\", 2)  // \u30ad\u30e3\u30c3\u30d72\u500b\n  addToCart(\"user2\", \"P001\", 1)  // T\u30b7\u30e3\u30c41\u679a\n  showCart(\"user2\")\n\n  // \u30af\u30fc\u30dd\u30f3\u9069\u7528\n  applyCoupon(\"user1\", 0.1)  // 10%\u30aa\u30d5\n  applyCoupon(\"user2\", 0.2)  // 20%\u30aa\u30d5\n</code></pre>"},{"location":"part3/chapter13/#_12","title":"\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u8003\u3048\u308b","text":"<pre><code>// MapPerformance.scala\n@main def mapPerformance(): Unit = {\n  import scala.collection.mutable\n\n  // \u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb vs \u30df\u30e5\u30fc\u30bf\u30d6\u30eb\n\n  // \u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\uff08\u5c0f\u898f\u6a21\u30c7\u30fc\u30bf\u306b\u6700\u9069\uff09\n  var immutableMap = Map[String, Int]()\n  for (i &lt;- 1 to 100) {\n    immutableMap = immutableMap + (s\"key$i\" -&gt; i)\n  }\n\n  // \u30df\u30e5\u30fc\u30bf\u30d6\u30eb\uff08\u5927\u898f\u6a21\u30c7\u30fc\u30bf\u306b\u6700\u9069\uff09\n  val mutableMap = mutable.Map[String, Int]()\n  for (i &lt;- 1 to 10000) {\n    mutableMap(s\"key$i\") = i\n  }\n\n  println(s\"\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb: ${immutableMap.size}\u8981\u7d20\")\n  println(s\"\u30df\u30e5\u30fc\u30bf\u30d6\u30eb: ${mutableMap.size}\u8981\u7d20\")\n\n  // \u52b9\u7387\u7684\u306a\u521d\u671f\u5316\n  // \u60aa\u3044\u4f8b\uff1a\u4e00\u3064\u305a\u3064\u8ffd\u52a0\n  var slowMap = Map[Int, String]()\n  for (i &lt;- 1 to 100) {\n    slowMap = slowMap + (i -&gt; s\"value$i\")\n  }\n\n  // \u826f\u3044\u4f8b\uff1a\u4e00\u5ea6\u306b\u4f5c\u6210\n  val fastMap = (1 to 100).map(i =&gt; i -&gt; s\"value$i\").toMap\n\n  // withDefaultValue\u3067\u5b89\u5168\u304b\u3064\u9ad8\u901f\u306b\n  val scoreMap = Map(\n    \"\u592a\u90ce\" -&gt; 85,\n    \"\u82b1\u5b50\" -&gt; 92\n  ).withDefaultValue(0)\n\n  println(s\"\\n\u5b58\u5728\u3059\u308b: ${scoreMap(\"\u592a\u90ce\")}\")\n  println(s\"\u5b58\u5728\u3057\u306a\u3044: ${scoreMap(\"\u6b21\u90ce\")}\")  // 0\u304c\u8fd4\u308b\n</code></pre>"},{"location":"part3/chapter13/#_13","title":"\u7df4\u7fd2\u3057\u3066\u307f\u3088\u3046\uff01","text":""},{"location":"part3/chapter13/#1","title":"\u7df4\u7fd21\uff1a\u751f\u5f92\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0","text":"<p>\u751f\u5f92ID\u3001\u540d\u524d\u3001\u5b66\u5e74\u3001\u6210\u7e3e\uff08\u79d1\u76ee\u540d\u3068\u70b9\u6570\u306e\u30de\u30c3\u30d7\uff09\u3092\u7ba1\u7406\u3059\u308b\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\u3002 - \u751f\u5f92\u306e\u8ffd\u52a0 - \u6210\u7e3e\u306e\u66f4\u65b0 - \u5b66\u5e74\u5225\u306e\u5e73\u5747\u70b9\u8868\u793a</p>"},{"location":"part3/chapter13/#2","title":"\u7df4\u7fd22\uff1a\u5728\u5eab\u7ba1\u7406\u306e\u62e1\u5f35","text":"<p>\u5546\u54c1\u306e\u5728\u5eab\u3092\u5e97\u8217\u5225\u3001\u30ab\u30c6\u30b4\u30ea\u5225\u306b\u7ba1\u7406\u3059\u308b\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\u3002 - \u5e97\u8217\u9593\u306e\u5728\u5eab\u79fb\u52d5 - \u30ab\u30c6\u30b4\u30ea\u5225\u306e\u5728\u5eab\u96c6\u8a08 - \u5728\u5eab\u4e0d\u8db3\u30a2\u30e9\u30fc\u30c8</p>"},{"location":"part3/chapter13/#3","title":"\u7df4\u7fd23\uff1a\u4e88\u7d04\u30b7\u30b9\u30c6\u30e0","text":"<p>\u4f1a\u8b70\u5ba4\u306e\u4e88\u7d04\u3092\u7ba1\u7406\u3059\u308b\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\u3002 - \u65e5\u4ed8\u3068\u6642\u9593\u5e2f\u3067\u306e\u4e88\u7d04 - \u4e88\u7d04\u306e\u91cd\u8907\u30c1\u30a7\u30c3\u30af - \u5229\u7528\u7d71\u8a08\u306e\u8868\u793a</p>"},{"location":"part3/chapter13/#_14","title":"\u3053\u306e\u7ae0\u306e\u307e\u3068\u3081","text":"<p>\u30de\u30c3\u30d7\u3092\u4f7f\u3063\u305f\u9ad8\u5ea6\u306a\u30c7\u30fc\u30bf\u7ba1\u7406\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3057\u305f\uff01</p>"},{"location":"part3/chapter13/#_15","title":"\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3053\u3068","text":"<p>\u2705 \u8907\u96d1\u306a\u30c7\u30fc\u30bf\u69cb\u9020 - \u30cd\u30b9\u30c8\u3057\u305f\u30de\u30c3\u30d7\u306e\u64cd\u4f5c - \u30de\u30c3\u30d7\u3068\u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u306e\u7d44\u307f\u5408\u308f\u305b - \u591a\u6b21\u5143\u306e\u30c7\u30fc\u30bf\u7ba1\u7406</p> <p>\u2705 \u30c7\u30fc\u30bf\u306e\u96c6\u8a08\u3068\u5206\u6790 - groupBy\u306b\u3088\u308b\u5206\u985e - \u8907\u6570\u30ad\u30fc\u3067\u306e\u96c6\u8a08 - \u7d71\u8a08\u60c5\u5831\u306e\u7b97\u51fa</p> <p>\u2705 \u5b9f\u8df5\u7684\u306a\u30b7\u30b9\u30c6\u30e0 - \u56f3\u66f8\u9928\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0 - \u30b7\u30e7\u30c3\u30d4\u30f3\u30b0\u30ab\u30fc\u30c8 - \u5728\u5eab\u7ba1\u7406</p> <p>\u2705 \u9ad8\u5ea6\u306a\u64cd\u4f5c - \u30de\u30c3\u30d7\u306e\u5909\u63db - \u30de\u30fc\u30b8\u6226\u7565 - \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u6700\u9069\u5316</p>"},{"location":"part3/chapter13/#_16","title":"\u30de\u30c3\u30d7\u6d3b\u7528\u306e\u30b3\u30c4","text":"<ol> <li> <p>\u9069\u5207\u306a\u30ad\u30fc\u306e\u9078\u629e</p> <ul> <li>\u30e6\u30cb\u30fc\u30af\u3067\u5909\u308f\u3089\u306a\u3044\u5024</li> <li>\u691c\u7d22\u3057\u3084\u3059\u3044\u5024</li> <li>\u610f\u5473\u306e\u3042\u308b\u8b58\u5225\u5b50</li> </ul> </li> <li> <p>\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u8a2d\u8a08</p> <ul> <li>\u5358\u7d14\u304b\u3089\u59cb\u3081\u308b</li> <li>\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u8907\u96d1\u5316</li> <li>\u8aad\u307f\u3084\u3059\u3055\u3092\u91cd\u8996</li> </ul> </li> <li> <p>\u5b89\u5168\u6027\u306e\u78ba\u4fdd</p> <ul> <li>getOrElse\u306e\u6d3b\u7528</li> <li>\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306e\u8a2d\u5b9a</li> <li>\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0</li> </ul> </li> </ol>"},{"location":"part3/chapter13/#_17","title":"\u6b21\u306e\u90e8\u3067\u306f...","text":"<p>\u7b2cIV\u90e8\u3067\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u300c\u5224\u65ad\u529b\u300d\u3092\u6301\u305f\u305b\u308b\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002\u6761\u4ef6\u5206\u5c90\u3084\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0\u3067\u3001\u3082\u3063\u3068\u8ce2\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u308a\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part3/chapter13/#_18","title":"\u6700\u5f8c\u306b","text":"<p>\u30de\u30c3\u30d7\u306f\u300c\u30c7\u30fc\u30bf\u306e\u5b9d\u7bb1\u300d\u3067\u3059\u3002\u3046\u307e\u304f\u4f7f\u3048\u3070\u3001\u8907\u96d1\u306a\u30c7\u30fc\u30bf\u3082\u6574\u7406\u6574\u9813\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u307e\u3067\u306b\u5b66\u3093\u3060\u30ea\u30b9\u30c8\u3001\u30bf\u30d7\u30eb\u3001\u30de\u30c3\u30d7\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\u3069\u3093\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3082\u6271\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u3059\u3054\u3044\u9032\u6b69\u3067\u3059\u306d\uff01</p>"},{"location":"part4/chapter14/","title":"\u7b2c14\u7ae0 \u6761\u4ef6\u5206\u5c90\u306e\u57fa\u672c","text":""},{"location":"part4/chapter14/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u3053\u308c\u307e\u3067\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u4e0a\u304b\u3089\u4e0b\u3078\u4e00\u76f4\u7dda\u306b\u5b9f\u884c\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002\u3067\u3082\u3001\u73fe\u5b9f\u4e16\u754c\u3067\u306f\u300c\u3082\u3057\u96e8\u306a\u3089\u5098\u3092\u6301\u3064\u300d\u300c\u3082\u305718\u6b73\u4ee5\u4e0a\u306a\u3089\u6295\u7968\u3067\u304d\u308b\u300d\u306e\u3088\u3046\u306b\u3001\u6761\u4ef6\u306b\u3088\u3063\u3066\u884c\u52d5\u3092\u5909\u3048\u307e\u3059\u3088\u306d\u3002</p> <p>\u30d7\u30ed\u30b0\u30e9\u30e0\u3082\u540c\u3058\u3067\u3059\uff01\u6761\u4ef6\u306b\u3088\u3063\u3066\u51e6\u7406\u3092\u5909\u3048\u308b\u300c\u6761\u4ef6\u5206\u5c90\u300d\u3092\u5b66\u3093\u3067\u3001\u3082\u3063\u3068\u8ce2\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u308a\u307e\u3057\u3087\u3046\u3002</p>"},{"location":"part4/chapter14/#if","title":"if\u5f0f\uff1a\u300c\u3082\u3057\u301c\u306a\u3089\u300d\u3092\u8868\u73fe\u3059\u308b","text":""},{"location":"part4/chapter14/#if_1","title":"\u57fa\u672c\u306e if","text":"<pre><code>// BasicIf.scala\n@main def basicIf(): Unit = {\n  val age = 20\n\n  if (age &gt;= 18) {\n    println(\"\u6210\u4eba\u3067\u3059\uff01\u9078\u6319\u6a29\u304c\u3042\u308a\u307e\u3059\u3002\")\n  }\n\n  val temperature = 28\n\n  if (temperature &gt; 25) {\n    println(\"\u6691\u3044\u3067\u3059\u306d\u3002\u30a8\u30a2\u30b3\u30f3\u3092\u3064\u3051\u307e\u3057\u3087\u3046\u3002\")\n  }\n}\n</code></pre> <p>\u300c\u3082\u3057\uff08if\uff09\u301c\u306a\u3089\uff08then\uff09\u3001\u3053\u308c\u3092\u3059\u308b\u300d\u3068\u3044\u3046\u5f62\u3067\u3059\u3002\u65e5\u672c\u8a9e\u3068\u540c\u3058\u3067\u3059\u306d\uff01</p>"},{"location":"part4/chapter14/#if-else","title":"if-else\uff1a\u300c\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u300d","text":"<pre><code>// IfElse.scala\n@main def ifElse(): Unit = {\n  val score = 75\n\n  if (score &gt;= 80) {\n    println(\"\u5408\u683c\u3067\u3059\uff01\u304a\u3081\u3067\u3068\u3046\uff01\")\n  } else {\n    println(\"\u6b8b\u5ff5\u3001\u4e0d\u5408\u683c\u3067\u3059\u3002\u6b21\u56de\u304c\u3093\u3070\u308a\u307e\u3057\u3087\u3046\u3002\")\n  }\n\n  // \u5929\u6c17\u3067\u884c\u52d5\u3092\u6c7a\u3081\u308b\n  val weather = \"\u96e8\"\n\n  if (weather == \"\u6674\u308c\") {\n    println(\"\u30d4\u30af\u30cb\u30c3\u30af\u306b\u884c\u304d\u307e\u3057\u3087\u3046\uff01\")\n  } else {\n    println(\"\u5bb6\u3067\u6620\u753b\u3067\u3082\u898b\u307e\u3057\u3087\u3046\u3002\")\n  }\n}\n</code></pre>"},{"location":"part4/chapter14/#if-else-if-else","title":"if-else if-else\uff1a\u8907\u6570\u306e\u6761\u4ef6","text":"<pre><code>// MultipleConditions.scala\n@main def multipleConditions(): Unit = {\n  val score = 85\n\n  if (score &gt;= 90) {\n    println(\"\u512a\u79c0\uff01A\u30e9\u30f3\u30af\u3067\u3059\")\n  } else if (score &gt;= 80) {\n    println(\"\u826f\u597d\uff01B\u30e9\u30f3\u30af\u3067\u3059\")\n  } else if (score &gt;= 70) {\n    println(\"\u5408\u683c\uff01C\u30e9\u30f3\u30af\u3067\u3059\")\n  } else {\n    println(\"\u3082\u3046\u5c11\u3057\u304c\u3093\u3070\u308a\u307e\u3057\u3087\u3046\")\n  }\n\n  // \u6642\u9593\u5e2f\u3067\u3042\u3044\u3055\u3064\u3092\u5909\u3048\u308b\n  val hour = 14\n\n  if (hour &gt;= 5 &amp;&amp; hour &lt; 12) {\n    println(\"\u304a\u306f\u3088\u3046\u3054\u3056\u3044\u307e\u3059\")\n  } else if (hour &gt;= 12 &amp;&amp; hour &lt; 17) {\n    println(\"\u3053\u3093\u306b\u3061\u306f\")\n  } else if (hour &gt;= 17 &amp;&amp; hour &lt; 22) {\n    println(\"\u3053\u3093\u3070\u3093\u306f\")\n  } else {\n    println(\"\u304a\u3084\u3059\u307f\u306a\u3055\u3044\")\n  }\n}\n</code></pre>"},{"location":"part4/chapter14/#_2","title":"\u6761\u4ef6\u306e\u66f8\u304d\u65b9","text":""},{"location":"part4/chapter14/#_3","title":"\u6bd4\u8f03\u6f14\u7b97\u5b50","text":"<pre><code>// ComparisonOperators.scala\n@main def comparisonOperators(): Unit = {\n  val x = 10\n  val y = 20\n\n  println(s\"x = $x, y = $y \u3068\u3057\u3066...\")\n  println(s\"x == y : ${x == y}\")  // \u7b49\u3057\u3044\uff1f\n  println(s\"x != y : ${x != y}\")  // \u7b49\u3057\u304f\u306a\u3044\uff1f\n  println(s\"x &lt; y  : ${x &lt; y}\")   // \u3088\u308a\u5c0f\u3055\u3044\uff1f\n  println(s\"x &lt;= y : ${x &lt;= y}\")  // \u4ee5\u4e0b\uff1f\n  println(s\"x &gt; y  : ${x &gt; y}\")   // \u3088\u308a\u5927\u304d\u3044\uff1f\n  println(s\"x &gt;= y : ${x &gt;= y}\")  // \u4ee5\u4e0a\uff1f\n\n  // \u6587\u5b57\u5217\u306e\u6bd4\u8f03\n  val name = \"\u592a\u90ce\"\n  println(s\"\\n\u540d\u524d\u304c\u592a\u90ce\uff1f: ${name == \"\u592a\u90ce\"}\")\n  println(s\"\u540d\u524d\u304c\u592a\u90ce\u3058\u3083\u306a\u3044\uff1f: ${name != \"\u592a\u90ce\"}\")\n}\n</code></pre>"},{"location":"part4/chapter14/#_4","title":"\u8ad6\u7406\u6f14\u7b97\u5b50\uff1a\u6761\u4ef6\u3092\u7d44\u307f\u5408\u308f\u305b\u308b","text":"<pre><code>// LogicalOperators.scala\n@main def logicalOperators(): Unit = {\n  val age = 25\n  val hasLicense = true\n\n  // &amp;&amp; (\u304b\u3064\u3001AND)\n  if (age &gt;= 18 &amp;&amp; hasLicense) {\n    println(\"\u8eca\u3092\u904b\u8ee2\u3067\u304d\u307e\u3059\")\n  }\n\n  // || (\u307e\u305f\u306f\u3001OR)\n  val isWeekend = true\n  val isHoliday = false\n\n  if (isWeekend || isHoliday) {\n    println(\"\u4eca\u65e5\u306f\u4f11\u307f\u3067\u3059\uff01\")\n  }\n\n  // ! (\u5426\u5b9a\u3001NOT)\n  val isRaining = false\n\n  if (!isRaining) {\n    println(\"\u96e8\u306f\u964d\u3063\u3066\u3044\u307e\u305b\u3093\")\n  }\n\n  // \u8907\u96d1\u306a\u6761\u4ef6\n  val temperature = 22\n  val humidity = 60\n\n  if (temperature &gt;= 20 &amp;&amp; temperature &lt;= 25 &amp;&amp; humidity &lt; 70) {\n    println(\"\u3068\u3066\u3082\u5feb\u9069\u306a\u5929\u6c17\u3067\u3059\")\n  }\n}\n</code></pre>"},{"location":"part4/chapter14/#if_2","title":"if\u5f0f\u306f\u5024\u3092\u8fd4\u3059","text":""},{"location":"part4/chapter14/#if_3","title":"\u5024\u3068\u3057\u3066\u306eif","text":"<pre><code>// IfAsExpression.scala\n@main def ifAsExpression(): Unit = {\n  val score = 85\n\n  // if\u306e\u7d50\u679c\u3092\u5909\u6570\u306b\u5165\u308c\u308b\n  val result = if (score &gt;= 80) \"\u5408\u683c\" else \"\u4e0d\u5408\u683c\"\n  println(s\"\u5224\u5b9a: $result\")\n\n  // \u8a08\u7b97\u306b\u3082\u4f7f\u3048\u308b\n  val price = 1000\n  val isMember = true\n\n  val finalPrice = if (isMember) price * 0.9 else price\n  println(f\"\u304a\u652f\u6255\u3044\u91d1\u984d: ${finalPrice.toInt}\u5186\")\n\n  // \u8907\u6570\u884c\u3067\u3082\u5927\u4e08\u592b\n  val message = if (score &gt;= 90) {\n    \"\u7d20\u6674\u3089\u3057\u3044\uff01\" +\n    \"\u6b21\u3082\u3053\u306e\u8abf\u5b50\u3067\uff01\"\n  } else if (score &gt;= 80) {\n    \"\u3088\u304f\u3067\u304d\u307e\u3057\u305f\uff01\" +\n    \"\u3082\u3046\u5c11\u3057\u3067\u6700\u9ad8\u8a55\u4fa1\u3067\u3059\u3002\"\n  } else {\n    \"\u3082\u3063\u3068\u304c\u3093\u3070\u308a\u307e\u3057\u3087\u3046\u3002\"\n  }\n\n  println(message)\n}\n</code></pre>"},{"location":"part4/chapter14/#_5","title":"\u5b9f\u8df5\u7684\u306a\u4f8b","text":""},{"location":"part4/chapter14/#_6","title":"\u6599\u91d1\u8a08\u7b97\u30b7\u30b9\u30c6\u30e0","text":"<pre><code>// PriceCalculator.scala\n@main def priceCalculator(): Unit = {\n  // \u6620\u753b\u9928\u306e\u6599\u91d1\u8a08\u7b97\n  def calculateTicketPrice(age: Int, dayOfWeek: String): Int = {\n    val basePrice = 1800\n\n    if (age &lt; 6) {\n      0  // \u5e7c\u5150\u7121\u6599\n    } else if (age &lt;= 12) {\n      1000  // \u5b50\u4f9b\u6599\u91d1\n    } else if (age &gt;= 60) {\n      1200  // \u30b7\u30cb\u30a2\u6599\u91d1\n    } else if (dayOfWeek == \"\u6c34\u66dc\u65e5\") {\n      1000  // \u30ec\u30c7\u30a3\u30fc\u30b9\u30c7\u30fc\uff08\u8ab0\u3067\u3082\uff09\n    } else {\n      basePrice  // \u901a\u5e38\u6599\u91d1\n    }\n  }\n\n  // \u3044\u308d\u3044\u308d\u306a\u6761\u4ef6\u3067\u8a66\u3057\u3066\u307f\u308b\n  println(\"=== \u6620\u753b\u9928\u6599\u91d1\u8868 ===\")\n  println(s\"5\u6b73\u30fb\u6708\u66dc\u65e5: ${calculateTicketPrice(5, \"\u6708\u66dc\u65e5\")}\u5186\")\n  println(s\"10\u6b73\u30fb\u706b\u66dc\u65e5: ${calculateTicketPrice(10, \"\u706b\u66dc\u65e5\")}\u5186\")\n  println(s\"25\u6b73\u30fb\u6c34\u66dc\u65e5: ${calculateTicketPrice(25, \"\u6c34\u66dc\u65e5\")}\u5186\")\n  println(s\"65\u6b73\u30fb\u91d1\u66dc\u65e5: ${calculateTicketPrice(65, \"\u91d1\u66dc\u65e5\")}\u5186\")\n\n  // \u5272\u5f15\u306e\u7d44\u307f\u5408\u308f\u305b\n  def calculateWithDiscounts(\n    age: Int, \n    isMember: Boolean, \n    has\u0421oupon: Boolean\n  ): Int = {\n    var price = calculateTicketPrice(age, \"\u6708\u66dc\u65e5\")\n\n    // \u4f1a\u54e1\u5272\u5f15\uff0810%\u30aa\u30d5\uff09\n    if (isMember &amp;&amp; price &gt; 0) {\n      price = (price * 0.9).toInt\n    }\n\n    // \u30af\u30fc\u30dd\u30f3\u5272\u5f15\uff08200\u5186\u5f15\u304d\uff09\n    if (has\u0421oupon &amp;&amp; price &gt; 200) {\n      price = price - 200\n    }\n\n    price\n  }\n\n  println(\"\\n=== \u5272\u5f15\u9069\u7528\u4f8b ===\")\n  println(s\"\u4e00\u822c\u30fb\u4f1a\u54e1\u30fb\u30af\u30fc\u30dd\u30f3\u3042\u308a: ${calculateWithDiscounts(30, true, true)}\u5186\")\n}\n</code></pre>"},{"location":"part4/chapter14/#bmi","title":"BMI\u8a08\u7b97\u3068\u5065\u5eb7\u30a2\u30c9\u30d0\u30a4\u30b9","text":"<pre><code>// BMICalculator.scala\n@main def bmiCalculator(): Unit = {\n  def calculateBMI(weight: Double, height: Double): Double =\n    weight / (height * height)\n\n  def getHealthAdvice(bmi: Double): String = {\n    if (bmi &lt; 18.5) {\n      \"\u4f4e\u4f53\u91cd\u3067\u3059\u3002\u30d0\u30e9\u30f3\u30b9\u306e\u826f\u3044\u98df\u4e8b\u3092\u5fc3\u304c\u3051\u307e\u3057\u3087\u3046\u3002\"\n    } else if (bmi &lt; 25.0) {\n      \"\u6a19\u6e96\u4f53\u91cd\u3067\u3059\u3002\u3053\u306e\u8abf\u5b50\u3092\u7dad\u6301\u3057\u307e\u3057\u3087\u3046\uff01\"\n    } else if (bmi &lt; 30.0) {\n      \"\u80a5\u6e80\uff081\u5ea6\uff09\u3067\u3059\u3002\u9069\u5ea6\u306a\u904b\u52d5\u3092\u59cb\u3081\u307e\u3057\u3087\u3046\u3002\"\n    } else {\n      \"\u80a5\u6e80\uff082\u5ea6\u4ee5\u4e0a\uff09\u3067\u3059\u3002\u533b\u5e2b\u306b\u76f8\u8ac7\u3059\u308b\u3053\u3068\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002\"\n    }\n  }\n\n  // \u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\n  val people = List(\n    (\"\u592a\u90ce\", 70.0, 1.75),\n    (\"\u82b1\u5b50\", 50.0, 1.60),\n    (\"\u6b21\u90ce\", 85.0, 1.70)\n  )\n\n  people.foreach { case (name, weight, height) =&gt;\n    val bmi = calculateBMI(weight, height)\n    println(f\"$name \u3055\u3093: BMI = $bmi%.1f\")\n    println(s\"  \u2192 ${getHealthAdvice(bmi)}\")\n    println()\n  }\n}\n</code></pre>"},{"location":"part4/chapter14/#_7","title":"\u30b2\u30fc\u30e0\uff1a\u3058\u3083\u3093\u3051\u3093\u5224\u5b9a","text":"<pre><code>// RockPaperScissors.scala\n@main def rockPaperScissors(): Unit = {\n  def judge(player1: String, player2: String): String = {\n    if (player1 == player2) {\n      \"\u5f15\u304d\u5206\u3051\"\n    } else if ((player1 == \"\u30b0\u30fc\" &amp;&amp; player2 == \"\u30c1\u30e7\u30ad\") ||\n               (player1 == \"\u30c1\u30e7\u30ad\" &amp;&amp; player2 == \"\u30d1\u30fc\") ||\n               (player1 == \"\u30d1\u30fc\" &amp;&amp; player2 == \"\u30b0\u30fc\")) {\n      \"\u30d7\u30ec\u30a4\u30e4\u30fc1\u306e\u52dd\u3061\uff01\"\n    } else {\n      \"\u30d7\u30ec\u30a4\u30e4\u30fc2\u306e\u52dd\u3061\uff01\"\n    }\n  }\n\n  // \u5bfe\u6226\n  println(\"=== \u3058\u3083\u3093\u3051\u3093\u5927\u4f1a ===\")\n  val matches = List(\n    (\"\u30b0\u30fc\", \"\u30c1\u30e7\u30ad\"),\n    (\"\u30d1\u30fc\", \"\u30d1\u30fc\"),\n    (\"\u30c1\u30e7\u30ad\", \"\u30b0\u30fc\"),\n    (\"\u30d1\u30fc\", \"\u30b0\u30fc\")\n  )\n\n  matches.foreach { case (p1, p2) =&gt;\n    println(s\"$p1 vs $p2 \u2192 ${judge(p1, p2)}\")\n  }\n\n  // \u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3068\u5bfe\u6226\n  import scala.util.Random\n\n  val hands = List(\"\u30b0\u30fc\", \"\u30c1\u30e7\u30ad\", \"\u30d1\u30fc\")\n  val playerHand = \"\u30b0\u30fc\"  // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u624b\n  val computerHand = hands(Random.nextInt(3))  // \u30e9\u30f3\u30c0\u30e0\u306b\u9078\u3076\n\n  println(s\"\\n\u3042\u306a\u305f: $playerHand\")\n  println(s\"\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf: $computerHand\")\n  println(s\"\u7d50\u679c: ${judge(playerHand, computerHand)}\")\n}\n</code></pre>"},{"location":"part4/chapter14/#_8","title":"\u30cd\u30b9\u30c8\u3057\u305f\u6761\u4ef6\u5206\u5c90","text":"<pre><code>// NestedIf.scala\n@main def nestedIf(): Unit = {\n  // \u904a\u5712\u5730\u306e\u4e57\u308a\u7269\u5236\u9650\n  def canRide(age: Int, height: Int, withParent: Boolean): String = {\n    if (age &lt; 6) {\n      if (withParent) {\n        \"\u4fdd\u8b77\u8005\u540c\u4f34\u3067\u4e57\u308c\u307e\u3059\"\n      } else {\n        \"\u4fdd\u8b77\u8005\u306e\u540c\u4f34\u304c\u5fc5\u8981\u3067\u3059\"\n      }\n    } else if (age &lt; 12) {\n      if (height &gt;= 120) {\n        \"\u4e57\u308c\u307e\u3059\uff01\"\n      } else {\n        \"\u8eab\u9577\u304c120cm\u4ee5\u4e0a\u5fc5\u8981\u3067\u3059\"\n      }\n    } else {\n      if (height &gt;= 140) {\n        \"\u4e57\u308c\u307e\u3059\uff01\"\n      } else {\n        \"\u8eab\u9577\u304c140cm\u4ee5\u4e0a\u5fc5\u8981\u3067\u3059\"\n      }\n    }\n  }\n\n  // \u30c6\u30b9\u30c8\n  println(\"=== \u30b8\u30a7\u30c3\u30c8\u30b3\u30fc\u30b9\u30bf\u30fc\u4e57\u8eca\u5224\u5b9a ===\")\n  println(s\"5\u6b73\u30fb110cm\u30fb\u89aa\u306a\u3057: ${canRide(5, 110, false)}\")\n  println(s\"5\u6b73\u30fb110cm\u30fb\u89aa\u3042\u308a: ${canRide(5, 110, true)}\")\n  println(s\"10\u6b73\u30fb125cm\u30fb\u89aa\u306a\u3057: ${canRide(10, 125, false)}\")\n  println(s\"15\u6b73\u30fb135cm\u30fb\u89aa\u306a\u3057: ${canRide(15, 135, false)}\")\n}\n</code></pre>"},{"location":"part4/chapter14/#_9","title":"\u3088\u304f\u3042\u308b\u9593\u9055\u3044\u3068\u6ce8\u610f\u70b9","text":""},{"location":"part4/chapter14/#1","title":"\u9593\u9055\u30441\uff1a=\u3068==\u3092\u6df7\u540c","text":"<pre><code>// CommonMistakes1.scala\n@main def commonMistakes1(): Unit = {\n  val x = 10\n\n  // \u9593\u9055\u3044\uff08\u3053\u308c\u306f\u4ee3\u5165\u306b\u306a\u3063\u3066\u3057\u307e\u3046\uff09\n  // if x = 10 then  // \u30a8\u30e9\u30fc\uff01\n\n  // \u6b63\u3057\u3044\uff08\u6bd4\u8f03\uff09\n  if (x == 10) {\n    println(\"x\u306f10\u3067\u3059\")\n  }\n\n  // \u5426\u5b9a\u306e\u5834\u5408\n  if (x != 5) {\n    println(\"x\u306f5\u3067\u306f\u3042\u308a\u307e\u305b\u3093\")\n  }\n}\n</code></pre>"},{"location":"part4/chapter14/#2","title":"\u9593\u9055\u30442\uff1a\u6761\u4ef6\u306e\u7bc4\u56f2","text":"<pre><code>// CommonMistakes2.scala\n@main def commonMistakes2(): Unit = {\n  val score = 75\n\n  // \u9593\u9055\u3044\uff1a\u6761\u4ef6\u304c\u91cd\u8907\u3057\u3066\u3044\u308b\n  if (score &gt;= 70) {\n    println(\"C\")\n  } else if (score &gt;= 80) {  // \u3053\u306e\u6761\u4ef6\u306b\u306f\u5230\u9054\u3057\u306a\u3044\uff01\n    println(\"B\")\n  }\n\n  // \u6b63\u3057\u3044\uff1a\u5927\u304d\u3044\u5024\u304b\u3089\u9806\u306b\n  if (score &gt;= 80) {\n    println(\"B\")\n  } else if (score &gt;= 70) {\n    println(\"C\")\n  }\n}\n</code></pre>"},{"location":"part4/chapter14/#3","title":"\u9593\u9055\u30443\uff1a\u578b\u306e\u4e0d\u4e00\u81f4","text":"<pre><code>// CommonMistakes3.scala\n@main def commonMistakes3(): Unit = {\n  val age = \"20\"  // \u6587\u5b57\u5217\n\n  // \u9593\u9055\u3044\uff1a\u6587\u5b57\u5217\u3068\u6570\u5024\u3092\u6bd4\u8f03\n  // if age &gt; 18 then  // \u30a8\u30e9\u30fc\uff01\n\n  // \u6b63\u3057\u3044\uff1a\u6570\u5024\u306b\u5909\u63db\u3057\u3066\u304b\u3089\u6bd4\u8f03\n  if (age.toInt &gt; 18) {\n    println(\"\u6210\u4eba\u3067\u3059\")\n  }\n\n  // \u307e\u305f\u306f\u6700\u521d\u304b\u3089\u6570\u5024\u3067\u6271\u3046\n  val ageNum = 20\n  if (ageNum &gt; 18) {\n    println(\"\u6210\u4eba\u3067\u3059\")\n  }\n}\n</code></pre>"},{"location":"part4/chapter14/#_10","title":"\u7df4\u7fd2\u3057\u3066\u307f\u3088\u3046\uff01","text":""},{"location":"part4/chapter14/#1_1","title":"\u7df4\u7fd21\uff1a\u6210\u7e3e\u8a55\u4fa1","text":"<p>\u70b9\u6570\uff080-100\uff09\u3092\u53d7\u3051\u53d6\u3063\u3066\u3001\u4ee5\u4e0b\u306e\u8a55\u4fa1\u3092\u8fd4\u3059\u95a2\u6570\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\uff1a - 90\u4ee5\u4e0a\uff1aS - 80\u4ee5\u4e0a\uff1aA - 70\u4ee5\u4e0a\uff1aB - 60\u4ee5\u4e0a\uff1aC - 60\u672a\u6e80\uff1aD</p>"},{"location":"part4/chapter14/#2_1","title":"\u7df4\u7fd22\uff1a\u96fb\u6c17\u6599\u91d1\u8a08\u7b97","text":"<p>\u4f7f\u7528\u91cf\u306b\u5fdc\u3058\u3066\u96fb\u6c17\u6599\u91d1\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\uff1a - \u57fa\u672c\u6599\u91d1\uff1a1000\u5186 - 0-100kWh\uff1a1kWh\u3042\u305f\u308a20\u5186 - 101-200kWh\uff1a1kWh\u3042\u305f\u308a25\u5186 - 201kWh\u4ee5\u4e0a\uff1a1kWh\u3042\u305f\u308a30\u5186</p>"},{"location":"part4/chapter14/#3_1","title":"\u7df4\u7fd23\uff1a\u66dc\u65e5\u5224\u5b9a","text":"<p>\u65e5\u4ed8\uff081-31\uff09\u3092\u53d7\u3051\u53d6\u3063\u3066\u3001\u4eca\u6708\u306e\u7b2c\u4f55\u9031\u306e\u4f55\u66dc\u65e5\u304b\u3092\u5224\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \uff081\u65e5\u304c\u6708\u66dc\u65e5\u3068\u4eee\u5b9a\uff09</p>"},{"location":"part4/chapter14/#_11","title":"\u3053\u306e\u7ae0\u306e\u307e\u3068\u3081","text":"<p>\u6761\u4ef6\u5206\u5c90\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3057\u305f\uff01</p>"},{"location":"part4/chapter14/#_12","title":"\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3053\u3068","text":"<p>\u2705 if\u5f0f\u306e\u57fa\u672c - if-then \u3067\u6761\u4ef6\u5b9f\u884c - if-else \u3067\u4e8c\u8005\u629e\u4e00 - if-else if-else \u3067\u8907\u6570\u6761\u4ef6</p> <p>\u2705 \u6761\u4ef6\u306e\u66f8\u304d\u65b9 - \u6bd4\u8f03\u6f14\u7b97\u5b50\uff08==, !=, &lt;, &gt;, &lt;=, &gt;=\uff09 - \u8ad6\u7406\u6f14\u7b97\u5b50\uff08&amp;&amp;, ||, !\uff09 - \u8907\u5408\u6761\u4ef6\u306e\u7d44\u307f\u7acb\u3066</p> <p>\u2705 \u5024\u3068\u3057\u3066\u306eif - if\u5f0f\u306f\u5024\u3092\u8fd4\u3059 - \u5909\u6570\u3078\u306e\u4ee3\u5165 - \u5f0f\u306e\u4e2d\u3067\u306e\u5229\u7528</p> <p>\u2705 \u5b9f\u8df5\u7684\u306a\u4f7f\u3044\u65b9 - \u6599\u91d1\u8a08\u7b97 - \u5224\u5b9a\u30ed\u30b8\u30c3\u30af - \u8907\u96d1\u306a\u6761\u4ef6\u306e\u6574\u7406</p>"},{"location":"part4/chapter14/#_13","title":"\u6761\u4ef6\u5206\u5c90\u3092\u4f7f\u3046\u30b3\u30c4","text":"<ol> <li> <p>\u30b7\u30f3\u30d7\u30eb\u306b\u59cb\u3081\u308b</p> <ul> <li>\u307e\u305a\u5358\u7d14\u306a\u6761\u4ef6\u304b\u3089</li> <li>\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u8907\u96d1\u5316</li> <li>\u8aad\u307f\u3084\u3059\u3055\u3092\u91cd\u8996</li> </ul> </li> <li> <p>\u6761\u4ef6\u306e\u9806\u5e8f</p> <ul> <li>\u7279\u6b8a\u306a\u30b1\u30fc\u30b9\u3092\u5148\u306b</li> <li>\u7bc4\u56f2\u306f\u5927\u304d\u3044\u65b9\u304b\u3089</li> <li>\u30c7\u30d5\u30a9\u30eb\u30c8\u306f\u6700\u5f8c\u306b</li> </ul> </li> <li> <p>\u9069\u5207\u306a\u7c92\u5ea6</p> <ul> <li>\u6761\u4ef6\u304c\u591a\u3059\u304e\u305f\u3089\u6574\u7406</li> <li>\u95a2\u6570\u306b\u5206\u5272</li> <li>\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0\uff08\u6b21\u7ae0\uff09\u306e\u691c\u8a0e</li> </ul> </li> </ol>"},{"location":"part4/chapter14/#_14","title":"\u6b21\u306e\u7ae0\u3067\u306f...","text":"<p>\u3082\u3063\u3068\u5f37\u529b\u306a\u6761\u4ef6\u5206\u5c90\u300c\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0\u300d\u3092\u5b66\u3073\u307e\u3059\u3002Scala\u306e\u771f\u9aa8\u9802\u306e\u4e00\u3064\u3067\u3059\uff01</p>"},{"location":"part4/chapter14/#_15","title":"\u6700\u5f8c\u306b","text":"<p>\u6761\u4ef6\u5206\u5c90\u306f\u300c\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u982d\u8133\u300d\u3067\u3059\u3002\u3053\u308c\u3067\u3001\u3042\u306a\u305f\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u72b6\u6cc1\u306b\u5fdc\u3058\u3066\u8ce2\u304f\u632f\u308b\u821e\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\u307e\u308b\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u77e5\u80fd\u3092\u4e0e\u3048\u305f\u3088\u3046\u3067\u3059\u306d\uff01</p>"},{"location":"part4/chapter15/","title":"\u7b2c15\u7ae0 \u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0\u306e\u5a01\u529b","text":""},{"location":"part4/chapter15/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u524d\u7ae0\u3067\u5b66\u3093\u3060if\u5f0f\u306f\u4fbf\u5229\u3067\u3057\u305f\u304c\u3001Scala\u306b\u306f\u3082\u3063\u3068\u5f37\u529b\u306a\u300c\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0\u300d\u3068\u3044\u3046\u6a5f\u80fd\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0\u306f\u3001\u30c7\u30fc\u30bf\u306e\u300c\u5f62\u300d\u3092\u898b\u3066\u51e6\u7406\u3092\u5206\u5c90\u3067\u304d\u308b\u3001\u307e\u308b\u3067\u300c\u4ed5\u5206\u3051\u540d\u4eba\u300d\u306e\u3088\u3046\u306a\u6a5f\u80fd\u3067\u3059\u3002\u90f5\u4fbf\u5c40\u3067\u624b\u7d19\u3092\u4ed5\u5206\u3051\u308b\u3088\u3046\u306b\u3001\u30c7\u30fc\u30bf\u3092\u898b\u3066\u9069\u5207\u306a\u51e6\u7406\u306b\u632f\u308a\u5206\u3051\u3089\u308c\u307e\u3059\u3002</p> <p>\u3053\u306e\u7ae0\u3067\u306f\u3001Scala\u306e\u771f\u9aa8\u9802\u3067\u3042\u308b\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0\u3092\u697d\u3057\u304f\u5b66\u3093\u3067\u3044\u304d\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part4/chapter15/#match","title":"match\u5f0f\u306e\u57fa\u672c","text":""},{"location":"part4/chapter15/#_2","title":"\u30b7\u30f3\u30d7\u30eb\u306a\u30de\u30c3\u30c1\u30f3\u30b0","text":"<pre><code>// BasicMatch.scala\n@main def basicMatch(): Unit = {\n  val day = \"\u6708\u66dc\u65e5\"\n\n  val message = day match {\n    case \"\u6708\u66dc\u65e5\" =&gt; \"\u4eca\u9031\u3082\u9811\u5f35\u308a\u307e\u3057\u3087\u3046\uff01\"\n    case \"\u91d1\u66dc\u65e5\" =&gt; \"\u3082\u3046\u3059\u3050\u9031\u672b\u3067\u3059\u306d\uff01\"\n    case \"\u571f\u66dc\u65e5\" | \"\u65e5\u66dc\u65e5\" =&gt; \"\u4f11\u65e5\u3092\u697d\u3057\u307f\u307e\u3057\u3087\u3046\uff01\"\n    case _ =&gt; \"\u4eca\u65e5\u3082\u4e00\u65e5\u304a\u75b2\u308c\u3055\u307e\u3067\u3059\"\n  }\n\n  println(message)\n\n  // \u6570\u5024\u306e\u30de\u30c3\u30c1\u30f3\u30b0\n  val number = 3\n\n  number match {\n    case 1 =&gt; println(\"\u6700\u521d\u306e\u6570\")\n    case 2 =&gt; println(\"2\u756a\u76ee\")\n    case 3 =&gt; println(\"3\u756a\u76ee\")\n    case n =&gt; println(s\"\u305d\u306e\u4ed6\u306e\u6570: $n\")\n  }\n}\n</code></pre> <p><code>match</code>\u306f\u5024\u3092\u898b\u3066\u3001\u6700\u521d\u306b\u30de\u30c3\u30c1\u3057\u305f<code>case</code>\u306e\u51e6\u7406\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002<code>_</code>\u306f\u300c\u305d\u306e\u4ed6\u3059\u3079\u3066\u300d\u3092\u8868\u3059\u7279\u5225\u306a\u8a18\u53f7\u3067\u3059\u3002</p>"},{"location":"part4/chapter15/#_3","title":"\u578b\u3067\u30de\u30c3\u30c1\u30f3\u30b0","text":"<pre><code>// TypeMatching.scala\n@main def typeMatching(): Unit = {\n  def describe(x: Any): String = x match {\n    case i: Int =&gt; s\"\u6574\u6570: $i\"\n    case d: Double =&gt; s\"\u5c0f\u6570: $d\"\n    case s: String =&gt; s\"\u6587\u5b57\u5217: '$s'\"\n    case b: Boolean =&gt; s\"\u771f\u507d\u5024: $b\"\n    case _ =&gt; \"\u305d\u306e\u4ed6\u306e\u578b\"\n  }\n\n  println(describe(42))\n  println(describe(3.14))\n  println(describe(\"Hello\"))\n  println(describe(true))\n  println(describe(List(1, 2, 3)))\n</code></pre>"},{"location":"part4/chapter15/#_4","title":"\u30d1\u30bf\u30fc\u30f3\u306e\u7a2e\u985e","text":""},{"location":"part4/chapter15/#_5","title":"\u30ea\u30b9\u30c8\u306e\u30d1\u30bf\u30fc\u30f3","text":"<pre><code>// ListPatterns.scala\n@main def listPatterns(): Unit = {\n  def describeList(list: List[Int]): String = list match {\n    case Nil =&gt; \"\u7a7a\u306e\u30ea\u30b9\u30c8\"\n    case head :: Nil =&gt; s\"\u8981\u7d20\u304c1\u3064: $head\"\n    case head :: tail =&gt; s\"\u5148\u982d: $head, \u6b8b\u308a: $tail\"\n  }\n\n  println(describeList(List()))\n  println(describeList(List(1)))\n  println(describeList(List(1, 2, 3)))\n\n  // \u3088\u308a\u8907\u96d1\u306a\u30d1\u30bf\u30fc\u30f3\n  def sumFirstTwo(list: List[Int]): Int = list match {\n    case first :: second :: _ =&gt; first + second\n    case first :: Nil =&gt; first\n    case Nil =&gt; 0\n  }\n\n  println(s\"\u6700\u521d\u306e2\u3064\u306e\u548c: ${sumFirstTwo(List(10, 20, 30))}\")\n  println(s\"\u8981\u7d201\u3064: ${sumFirstTwo(List(5))}\")\n  println(s\"\u7a7a\u30ea\u30b9\u30c8: ${sumFirstTwo(List())}\")\n}\n</code></pre>"},{"location":"part4/chapter15/#_6","title":"\u30bf\u30d7\u30eb\u306e\u30d1\u30bf\u30fc\u30f3","text":"<pre><code>// TuplePatterns.scala\n@main def tuplePatterns(): Unit = {\n  val person = (\"\u592a\u90ce\", 25, \"\u30a8\u30f3\u30b8\u30cb\u30a2\")\n\n  person match {\n    case (name, age, job) =&gt;\n      println(s\"$name \u3055\u3093\uff08$age\u6b73\uff09\u306f$job\u3067\u3059\")\n  }\n\n  // \u4e00\u90e8\u3060\u3051\u4f7f\u3046\n  val point = (10, 20)\n\n  point match {\n    case (0, 0) =&gt; println(\"\u539f\u70b9\")\n    case (x, 0) =&gt; println(s\"X\u8ef8\u4e0a\u306e\u70b9: ($x, 0)\")\n    case (0, y) =&gt; println(s\"Y\u8ef8\u4e0a\u306e\u70b9: (0, $y)\")\n    case (x, y) =&gt; println(s\"\u4e00\u822c\u306e\u70b9: ($x, $y)\")\n  }\n\n  // \u8907\u6570\u306e\u5024\u3092\u8fd4\u3059\u95a2\u6570\u3068\u7d44\u307f\u5408\u308f\u305b\n  def divide(a: Int, b: Int): (Boolean, Int, Int) =\n    if (b == 0) (false, 0, 0)\n    else (true, a / b, a % b)\n\n  divide(17, 5) match {\n    case (false, _, _) =&gt; println(\"\u30a8\u30e9\u30fc\uff1a\u30bc\u30ed\u9664\u7b97\")\n    case (true, q, r) =&gt; println(s\"17 \u00f7 5 = $q \u4f59\u308a $r\")\n  }\n}\n</code></pre>"},{"location":"part4/chapter15/#_7","title":"\u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u306e\u30d1\u30bf\u30fc\u30f3","text":"<pre><code>// CaseClassPatterns.scala\n@main def caseClassPatterns(): Unit = {\n  // \u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u306e\u5b9a\u7fa9\n  case class Person(name: String, age: Int)\n  case class Book(title: String, author: String, year: Int)\n\n  val item1: Any = Person(\"\u7530\u4e2d\u592a\u90ce\", 30)\n  val item2: Any = Book(\"Scala\u5165\u9580\", \"\u5c71\u7530\u82b1\u5b50\", 2024)\n\n  def describe(item: Any): String = item match {\n    case Person(name, age) =&gt;\n      s\"$name \u3055\u3093\u3001$age \u6b73\"\n    case Book(title, author, year) =&gt;\n      s\"\u300c$title\u300d \u8457\u8005: $author ($year\u5e74)\"\n    case _ =&gt;\n      \"\u4e0d\u660e\u306a\u30a2\u30a4\u30c6\u30e0\"\n  }\n\n  println(describe(item1))\n  println(describe(item2))\n\n  // \u3088\u308a\u5b9f\u8df5\u7684\u306a\u4f8b\n  case class Student(name: String, score: Int, passed: Boolean)\n\n  val students = List(\n    Student(\"\u592a\u90ce\", 85, true),\n    Student(\"\u82b1\u5b50\", 92, true),\n    Student(\"\u6b21\u90ce\", 58, false)\n  )\n\n  students.foreach {\n    case Student(name, score, true) =&gt;\n      println(s\"$name: \u5408\u683c\uff01($score\u70b9)\")\n    case Student(name, score, false) =&gt;\n      println(s\"$name: \u4e0d\u5408\u683c($score\u70b9)\")\n  }\n}\n</code></pre>"},{"location":"part4/chapter15/#_8","title":"\u30ac\u30fc\u30c9\u6761\u4ef6","text":""},{"location":"part4/chapter15/#if","title":"if\u30ac\u30fc\u30c9\u3092\u4f7f\u3063\u305f\u8a73\u7d30\u306a\u6761\u4ef6","text":"<pre><code>// PatternGuards.scala\n@main def patternGuards(): Unit = {\n  def categorizeNumber(x: Int): String = x match {\n    case n if n &lt; 0 =&gt; \"\u8ca0\u306e\u6570\"\n    case 0 =&gt; \"\u30bc\u30ed\"\n    case n if n % 2 == 0 =&gt; \"\u6b63\u306e\u5076\u6570\"\n    case n if n % 2 == 1 =&gt; \"\u6b63\u306e\u5947\u6570\"\n  }\n\n  List(-5, 0, 4, 7).foreach { n =&gt;\n    println(s\"$n \u306f ${categorizeNumber(n)}\")\n  }\n\n  // \u6210\u7e3e\u8a55\u4fa1\n  case class Score(subject: String, point: Int)\n\n  def evaluate(score: Score): String = score match {\n    case Score(_, p) if p &gt;= 90 =&gt; \"S\"\n    case Score(_, p) if p &gt;= 80 =&gt; \"A\"\n    case Score(_, p) if p &gt;= 70 =&gt; \"B\"\n    case Score(_, p) if p &gt;= 60 =&gt; \"C\"\n    case Score(_, _) =&gt; \"D\"\n  }\n\n  val scores = List(\n    Score(\"\u6570\u5b66\", 95),\n    Score(\"\u82f1\u8a9e\", 82),\n    Score(\"\u7406\u79d1\", 68)\n  )\n\n  scores.foreach { s =&gt;\n    println(s\"${s.subject}: ${s.point}\u70b9 \u2192 ${evaluate(s)}\u8a55\u4fa1\")\n  }\n}\n</code></pre>"},{"location":"part4/chapter15/#_9","title":"\u5b9f\u8df5\u7684\u306a\u4f8b","text":""},{"location":"part4/chapter15/#_10","title":"\u96fb\u5353\u30d7\u30ed\u30b0\u30e9\u30e0","text":"<pre><code>// Calculator.scala\n@main def calculator(): Unit = {\n  sealed trait Operation\n  case class Add(a: Double, b: Double) extends Operation\n  case class Subtract(a: Double, b: Double) extends Operation\n  case class Multiply(a: Double, b: Double) extends Operation\n  case class Divide(a: Double, b: Double) extends Operation\n\n  def calculate(op: Operation): Either[String, Double] = op match {\n    case Add(a, b) =&gt; Right(a + b)\n    case Subtract(a, b) =&gt; Right(a - b)\n    case Multiply(a, b) =&gt; Right(a * b)\n    case Divide(a, b) if b != 0 =&gt; Right(a / b)\n    case Divide(_, _) =&gt; Left(\"\u30a8\u30e9\u30fc\uff1a\u30bc\u30ed\u3067\u9664\u7b97\u306f\u3067\u304d\u307e\u305b\u3093\")\n  }\n\n  val operations = List(\n    Add(10, 5),\n    Subtract(10, 3),\n    Multiply(4, 7),\n    Divide(20, 4),\n    Divide(10, 0)\n  )\n\n  operations.foreach { op =&gt;\n    val opStr = op match {\n      case Add(a, b) =&gt; s\"$a + $b\"\n      case Subtract(a, b) =&gt; s\"$a - $b\"\n      case Multiply(a, b) =&gt; s\"$a \u00d7 $b\"\n      case Divide(a, b) =&gt; s\"$a \u00f7 $b\"\n    }\n\n    calculate(op) match {\n      case Right(result) =&gt; println(s\"$opStr = $result\")\n      case Left(error) =&gt; println(s\"$opStr \u2192 $error\")\n    }\n  }\n}\n</code></pre>"},{"location":"part4/chapter15/#json","title":"JSON\u30e9\u30a4\u30af\u306a\u30c7\u30fc\u30bf\u51e6\u7406","text":"<pre><code>// JsonLikeData.scala\n@main def jsonLikeData(): Unit = {\n  // \u30b7\u30f3\u30d7\u30eb\u306aJSON\u30e9\u30a4\u30af\u306a\u578b\n  sealed trait JsonValue\n  case class JsonString(value: String) extends JsonValue\n  case class JsonNumber(value: Double) extends JsonValue\n  case class JsonBoolean(value: Boolean) extends JsonValue\n  case object JsonNull extends JsonValue\n  case class JsonArray(values: List[JsonValue]) extends JsonValue\n  case class JsonObject(fields: Map[String, JsonValue]) extends JsonValue\n\n  // JSON\u30c7\u30fc\u30bf\u3092\u6587\u5b57\u5217\u306b\u5909\u63db\n  def stringify(json: JsonValue): String = json match {\n    case JsonString(s) =&gt; s\"\"\"\"$s\"\"\"\"\n    case JsonNumber(n) =&gt; n.toString\n    case JsonBoolean(b) =&gt; b.toString\n    case JsonNull =&gt; \"null\"\n    case JsonArray(values) =&gt;\n      values.map(stringify).mkString(\"[\", \", \", \"]\")\n    case JsonObject(fields) =&gt;\n      fields.map { case (k, v) =&gt; s\"\"\"\"$k\": ${stringify(v)}\"\"\" }\n        .mkString(\"{\", \", \", \"}\")\n  }\n\n  // \u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\n  val person = JsonObject(Map(\n    \"name\" -&gt; JsonString(\"\u7530\u4e2d\u592a\u90ce\"),\n    \"age\" -&gt; JsonNumber(30),\n    \"active\" -&gt; JsonBoolean(true),\n    \"skills\" -&gt; JsonArray(List(\n      JsonString(\"Scala\"),\n      JsonString(\"Python\"),\n      JsonString(\"JavaScript\")\n    ))\n  ))\n\n  println(stringify(person))\n\n  // \u7279\u5b9a\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u53d6\u5f97\n  def getField(json: JsonValue, path: String): Option[JsonValue] = \n    (json, path) match {\n      case (JsonObject(fields), fieldName) =&gt; fields.get(fieldName)\n      case _ =&gt; None\n    }\n\n  getField(person, \"name\") match {\n    case Some(JsonString(name)) =&gt; println(s\"\u540d\u524d: $name\")\n    case _ =&gt; println(\"\u540d\u524d\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\")\n  }\n}\n</code></pre>"},{"location":"part4/chapter15/#_11","title":"\u72b6\u614b\u7ba1\u7406","text":"<pre><code>// StateManagement.scala\n@main def stateManagement(): Unit = {\n  // \u4fe1\u53f7\u6a5f\u306e\u72b6\u614b\n  sealed trait TrafficLight\n  case object Red extends TrafficLight\n  case object Yellow extends TrafficLight\n  case object Green extends TrafficLight\n\n  def nextLight(current: TrafficLight): TrafficLight = current match {\n    case Red =&gt; Green\n    case Green =&gt; Yellow\n    case Yellow =&gt; Red\n  }\n\n  def action(light: TrafficLight): String = light match {\n    case Red =&gt; \"\u6b62\u307e\u308c\"\n    case Yellow =&gt; \"\u6ce8\u610f\"\n    case Green =&gt; \"\u9032\u3081\"\n  }\n\n  // \u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\n  var light = Red\n  for (i &lt;- 1 to 6) {\n    println(s\"${i}. ${action(light)} ($light)\")\n    light = nextLight(light)\n  }\n\n  // \u81ea\u52d5\u8ca9\u58f2\u6a5f\u306e\u72b6\u614b\n  case class VendingMachine(money: Int, stock: Map[String, Int])\n\n  sealed trait Command\n  case class InsertMoney(amount: Int) extends Command\n  case class SelectItem(name: String) extends Command\n  case object ReturnMoney extends Command\n\n  def processCommand(vm: VendingMachine, cmd: Command): VendingMachine = \n    cmd match {\n      case InsertMoney(amount) =&gt;\n        println(s\"${amount}\u5186\u6295\u5165\u3057\u307e\u3057\u305f\")\n        vm.copy(money = vm.money + amount)\n\n      case SelectItem(name) =&gt;\n        vm.stock.get(name) match {\n          case Some(count) if count &gt; 0 &amp;&amp; vm.money &gt;= 120 =&gt;\n            println(s\"$name \u3092\u8cfc\u5165\u3057\u307e\u3057\u305f\")\n            vm.copy(\n              money = vm.money - 120,\n              stock = vm.stock + (name -&gt; (count - 1))\n            )\n          case Some(count) if count == 0 =&gt;\n            println(s\"$name \u306f\u58f2\u308a\u5207\u308c\u3067\u3059\")\n            vm\n          case _ =&gt;\n            println(\"\u304a\u91d1\u304c\u8db3\u308a\u307e\u305b\u3093\")\n            vm\n        }\n\n      case ReturnMoney =&gt;\n        println(s\"${vm.money}\u5186\u8fd4\u5374\u3057\u307e\u3057\u305f\")\n        vm.copy(money = 0)\n    }\n\n  // \u4f7f\u3063\u3066\u307f\u308b\n  var machine = VendingMachine(0, Map(\"\u30b3\u30fc\u30e9\" -&gt; 3, \"\u6c34\" -&gt; 2))\n\n  val commands = List(\n    InsertMoney(100),\n    SelectItem(\"\u30b3\u30fc\u30e9\"),  // \u304a\u91d1\u4e0d\u8db3\n    InsertMoney(50),\n    SelectItem(\"\u30b3\u30fc\u30e9\"),  // \u8cfc\u5165\u6210\u529f\n    ReturnMoney\n  )\n\n  println(\"\\n=== \u81ea\u52d5\u8ca9\u58f2\u6a5f\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3 ===\")\n  commands.foreach { cmd =&gt;\n    machine = processCommand(machine, cmd)\n  }\n}\n</code></pre>"},{"location":"part4/chapter15/#_12","title":"\u90e8\u5206\u95a2\u6570","text":"<pre><code>// PartialFunctions.scala\n@main def partialFunctions(): Unit = {\n  // \u90e8\u5206\u95a2\u6570\u306e\u5b9a\u7fa9\n  val doubleEvens: PartialFunction[Int, Int] = {\n    case x if x % 2 == 0 =&gt; x * 2\n  }\n\n  // collect\u3067\u4f7f\u3046\n  val numbers = List(1, 2, 3, 4, 5, 6)\n  val doubled = numbers.collect(doubleEvens)\n  println(s\"\u5076\u6570\u30922\u500d: $doubled\")\n\n  // \u8907\u6570\u306e\u90e8\u5206\u95a2\u6570\u3092\u7d44\u307f\u5408\u308f\u305b\n  val processSpecial: PartialFunction[Int, String] = {\n    case 0 =&gt; \"\u30bc\u30ed\"\n    case n if n &gt; 0 &amp;&amp; n % 2 == 0 =&gt; s\"\u6b63\u306e\u5076\u6570: $n\"\n    case n if n &lt; 0 =&gt; s\"\u8ca0\u306e\u6570: $n\"\n  }\n\n  val special = List(-5, 0, 2, 3, 4, -2)\n  val processed = special.collect(processSpecial)\n  println(s\"\u7279\u5225\u306a\u6570: $processed\")\n\n  // \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3067\u306e\u6d3b\u7528\n  def safeDivide(a: Int, b: Int): Either[String, Int] =\n    try Right(a / b)\n    catch {\n      case _: ArithmeticException =&gt; Left(\"\u30bc\u30ed\u9664\u7b97\u30a8\u30e9\u30fc\")\n      case _: Exception =&gt; Left(\"\u4e88\u671f\u3057\u306a\u3044\u30a8\u30e9\u30fc\")\n    }\n\n  List((10, 2), (10, 0), (20, 4)).foreach { case (a, b) =&gt;\n    safeDivide(a, b) match {\n      case Right(result) =&gt; println(s\"$a \u00f7 $b = $result\")\n      case Left(error) =&gt; println(s\"$a \u00f7 $b \u2192 $error\")\n    }\n  }\n}\n</code></pre>"},{"location":"part4/chapter15/#_13","title":"\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0\u306e\u30b3\u30c4","text":""},{"location":"part4/chapter15/#_14","title":"\u7db2\u7f85\u6027\u306e\u78ba\u8a8d","text":"<pre><code>// ExhaustiveMatching.scala\n@main def exhaustiveMatching(): Unit = {\n  sealed trait Color\n  case object Red extends Color\n  case object Green extends Color\n  case object Blue extends Color\n\n  // \u3059\u3079\u3066\u306e\u30b1\u30fc\u30b9\u3092\u7db2\u7f85\n  def toRGB(color: Color): String = color match {\n    case Red =&gt; \"#FF0000\"\n    case Green =&gt; \"#00FF00\"\n    case Blue =&gt; \"#0000FF\"\n    // sealed trait\u306a\u306e\u3067\u3001\u3059\u3079\u3066\u306e\u30b1\u30fc\u30b9\u304c\u7db2\u7f85\u3055\u308c\u3066\u3044\u308b\u304b\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u30c1\u30a7\u30c3\u30af\n  }\n\n  // Option\u578b\u3067\u306e\u7db2\u7f85\n  def processOption(opt: Option[String]): String = opt match {\n    case Some(value) =&gt; s\"\u5024\u3042\u308a: $value\"\n    case None =&gt; \"\u5024\u306a\u3057\"\n  }\n\n  println(processOption(Some(\"Hello\")))\n  println(processOption(None))\n}\n</code></pre>"},{"location":"part4/chapter15/#_15","title":"\u7df4\u7fd2\u3057\u3066\u307f\u3088\u3046\uff01","text":""},{"location":"part4/chapter15/#1","title":"\u7df4\u7fd21\uff1a\u66dc\u65e5\u5224\u5b9a","text":"<p>\u6570\u5024\uff081-7\uff09\u3092\u53d7\u3051\u53d6\u3063\u3066\u66dc\u65e5\u540d\u3092\u8fd4\u3059\u95a2\u6570\u3092\u3001\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0\u3067\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\u3002 \u7bc4\u56f2\u5916\u306e\u6570\u5024\u306e\u5834\u5408\u306f\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8fd4\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"part4/chapter15/#2","title":"\u7df4\u7fd22\uff1a\u56f3\u5f62\u306e\u9762\u7a4d\u8a08\u7b97","text":"<p>\u4ee5\u4e0b\u306e\u56f3\u5f62\u3092\u8868\u3059\u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3057\u3001\u9762\u7a4d\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\uff1a - Circle(radius: Double) - Rectangle(width: Double, height: Double) - Triangle(base: Double, height: Double)</p>"},{"location":"part4/chapter15/#3","title":"\u7df4\u7fd23\uff1a\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30d1\u30fc\u30b5\u30fc","text":"<p>\u6587\u5b57\u5217\u306e\u30b3\u30de\u30f3\u30c9\u3092\u30d1\u30fc\u30b9\u3057\u3066\u9069\u5207\u306a\u51e6\u7406\u3092\u884c\u3046\u95a2\u6570\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\uff1a - \"help\" \u2192 \u30d8\u30eb\u30d7\u3092\u8868\u793a - \"add \u6570\u5024 \u6570\u5024\" \u2192 2\u3064\u306e\u6570\u5024\u3092\u8db3\u3059 - \"multiply \u6570\u5024 \u6570\u5024\" \u2192 2\u3064\u306e\u6570\u5024\u3092\u639b\u3051\u308b - \u305d\u306e\u4ed6 \u2192 \"\u4e0d\u660e\u306a\u30b3\u30de\u30f3\u30c9\"</p>"},{"location":"part4/chapter15/#_16","title":"\u3053\u306e\u7ae0\u306e\u307e\u3068\u3081","text":"<p>\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0\u306e\u5a01\u529b\u3092\u4f53\u9a13\u3067\u304d\u307e\u3057\u305f\u306d\uff01</p>"},{"location":"part4/chapter15/#_17","title":"\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3053\u3068","text":"<p>\u2705 match\u5f0f\u306e\u57fa\u672c - \u5024\u306e\u30de\u30c3\u30c1\u30f3\u30b0 - \u578b\u306e\u30de\u30c3\u30c1\u30f3\u30b0 - \u30c7\u30d5\u30a9\u30eb\u30c8\u30b1\u30fc\u30b9\uff08_\uff09</p> <p>\u2705 \u69d8\u3005\u306a\u30d1\u30bf\u30fc\u30f3 - \u30ea\u30b9\u30c8\u306e\u30d1\u30bf\u30fc\u30f3 - \u30bf\u30d7\u30eb\u306e\u30d1\u30bf\u30fc\u30f3 - \u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u306e\u30d1\u30bf\u30fc\u30f3</p> <p>\u2705 \u9ad8\u5ea6\u306a\u6a5f\u80fd - \u30ac\u30fc\u30c9\u6761\u4ef6 - \u90e8\u5206\u95a2\u6570 - \u7db2\u7f85\u6027\u30c1\u30a7\u30c3\u30af</p> <p>\u2705 \u5b9f\u8df5\u7684\u306a\u4f7f\u3044\u65b9 - \u72b6\u614b\u7ba1\u7406 - \u30c7\u30fc\u30bf\u51e6\u7406 - \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0</p>"},{"location":"part4/chapter15/#_18","title":"\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0\u3092\u4f7f\u3046\u3079\u304d\u5834\u9762","text":"<ol> <li> <p>\u8907\u96d1\u306a\u6761\u4ef6\u5206\u5c90</p> <ul> <li>if-else\u304c\u8907\u96d1\u306b\u306a\u3063\u305f\u3068\u304d</li> <li>\u30c7\u30fc\u30bf\u306e\u69cb\u9020\u3067\u5206\u5c90\u3057\u305f\u3044\u3068\u304d</li> </ul> </li> <li> <p>\u30c7\u30fc\u30bf\u306e\u5206\u89e3</p> <ul> <li>\u30bf\u30d7\u30eb\u3084\u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u304b\u3089\u5024\u3092\u53d6\u308a\u51fa\u3059</li> <li>\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9</li> </ul> </li> <li> <p>\u578b\u5b89\u5168\u306a\u51e6\u7406</p> <ul> <li>sealed trait\u3067\u7db2\u7f85\u6027\u3092\u4fdd\u8a3c</li> <li>\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306e\u30c1\u30a7\u30c3\u30af</li> </ul> </li> </ol>"},{"location":"part4/chapter15/#_19","title":"\u6b21\u306e\u7ae0\u3067\u306f...","text":"<p>\u95a2\u6570\u306e\u5b9a\u7fa9\u3068\u5229\u7528\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u5b66\u3073\u307e\u3059\u3002\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\u3001\u3055\u3089\u306b\u5f37\u529b\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3088\uff01</p>"},{"location":"part4/chapter15/#_20","title":"\u6700\u5f8c\u306b","text":"<p>\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0\u306f\u300cScala\u306e\u82b1\u5f62\u6a5f\u80fd\u300d\u3068\u8a00\u308f\u308c\u3066\u3044\u307e\u3059\u3002\u6700\u521d\u306f\u96e3\u3057\u304f\u611f\u3058\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u4f7f\u3044\u3053\u306a\u305b\u308b\u3088\u3046\u306b\u306a\u308b\u3068\u3001\u3068\u3066\u3082\u30a8\u30ec\u30ac\u30f3\u30c8\u306a\u30b3\u30fc\u30c9\u304c\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u307e\u308b\u3067\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u81ea\u7136\u8a00\u8a9e\u306e\u3088\u3046\u306b\u8aad\u3081\u308b\u3088\u3046\u306b\u306a\u308b\u3093\u3067\u3059\uff01</p>"},{"location":"part4/chapter16/","title":"\u7b2c16\u7ae0 \u95a2\u6570\u306e\u5b9a\u7fa9\u3068\u5229\u7528","text":""},{"location":"part4/chapter16/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u6599\u7406\u306e\u30ec\u30b7\u30d4\u3092\u601d\u3044\u51fa\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u300c\u5375\u3092\u5272\u308b\u300d\u300c\u91ce\u83dc\u3092\u5207\u308b\u300d\u300c\u7092\u3081\u308b\u300d\u306a\u3069\u3001\u540c\u3058\u4f5c\u696d\u3092\u4f55\u5ea6\u3082\u7e70\u308a\u8fd4\u3057\u307e\u3059\u3088\u306d\u3002\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u3082\u540c\u3058\u3088\u3046\u306b\u3001\u3088\u304f\u4f7f\u3046\u51e6\u7406\u3092\u307e\u3068\u3081\u3066\u540d\u524d\u3092\u3064\u3051\u3066\u304a\u304f\u3068\u4fbf\u5229\u3067\u3059\u3002</p> <p>\u3053\u308c\u304c\u300c\u95a2\u6570\u300d\u3067\u3059\uff01\u95a2\u6570\u3092\u4f7f\u3048\u3070\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u30b9\u30c3\u30ad\u30ea\u3057\u3066\u3001\u540c\u3058\u30b3\u30fc\u30c9\u3092\u4f55\u5ea6\u3082\u66f8\u304b\u306a\u304f\u3066\u6e08\u307f\u307e\u3059\u3002</p>"},{"location":"part4/chapter16/#_2","title":"\u95a2\u6570\u3063\u3066\u4f55\u3060\u308d\u3046\uff1f","text":""},{"location":"part4/chapter16/#_3","title":"\u65e5\u5e38\u751f\u6d3b\u306e\u95a2\u6570","text":"<pre><code>// FunctionsInLife.scala\n@main def functionsInLife(): Unit = {\n  // \u95a2\u6570\u306f\u300c\u5165\u529b\u300d\u3092\u53d7\u3051\u53d6\u3063\u3066\u300c\u51fa\u529b\u300d\u3092\u8fd4\u3059\u6a5f\u68b0\u306e\u3088\u3046\u306a\u3082\u306e\n\n  // \u4f8b1\uff1a\u6d88\u8cbb\u7a0e\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\n  def addTax(price: Int): Int =\n    (price * 1.1).toInt\n\n  println(s\"100\u5186\u306e\u7a0e\u8fbc\u4fa1\u683c: ${addTax(100)}\u5186\")\n  println(s\"500\u5186\u306e\u7a0e\u8fbc\u4fa1\u683c: ${addTax(500)}\u5186\")\n\n  // \u4f8b2\uff1a\u3042\u3044\u3055\u3064\u3092\u4f5c\u308b\u95a2\u6570\n  def greet(name: String): String =\n    s\"\u3053\u3093\u306b\u3061\u306f\u3001${name}\u3055\u3093\uff01\"\n\n  println(greet(\"\u592a\u90ce\"))\n  println(greet(\"\u82b1\u5b50\"))\n}\n</code></pre>"},{"location":"part4/chapter16/#_4","title":"\u95a2\u6570\u306e\u5b9a\u7fa9","text":""},{"location":"part4/chapter16/#_5","title":"\u57fa\u672c\u7684\u306a\u95a2\u6570","text":"<pre><code>// BasicFunctions.scala\n@main def basicFunctions(): Unit = {\n  // \u6700\u3082\u30b7\u30f3\u30d7\u30eb\u306a\u95a2\u6570\n  def sayHello(): Unit =\n    println(\"Hello, Scala!\")\n\n  // \u547c\u3073\u51fa\u3057\n  sayHello()\n\n  // \u5f15\u6570\uff08\u30d1\u30e9\u30e1\u30fc\u30bf\uff09\u304c\u3042\u308b\u95a2\u6570\n  def greetPerson(name: String): Unit =\n    println(s\"\u3053\u3093\u306b\u3061\u306f\u3001${name}\u3055\u3093\uff01\")\n\n  greetPerson(\"\u5c71\u7530\u592a\u90ce\")\n\n  // \u5024\u3092\u8fd4\u3059\u95a2\u6570\n  def double(x: Int): Int =\n    x * 2\n\n  val result = double(5)\n  println(s\"5\u306e2\u500d\u306f$result\")\n\n  // \u8907\u6570\u306e\u5f15\u6570\n  def add(a: Int, b: Int): Int =\n    a + b\n\n  println(s\"3 + 4 = ${add(3, 4)}\")\n}\n</code></pre>"},{"location":"part4/chapter16/#_6","title":"\u95a2\u6570\u306e\u69cb\u6210\u8981\u7d20","text":"<pre><code>// FunctionComponents.scala\n@main def functionComponents(): Unit = {\n  // \u95a2\u6570\u306e\u69cb\u6210\u8981\u7d20\u3092\u8a73\u3057\u304f\u898b\u3066\u307f\u3088\u3046\n\n  def calculateArea(width: Double, height: Double): Double =\n    width * height\n\n  // def\uff1a\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u30ad\u30fc\u30ef\u30fc\u30c9\n  // calculateArea\uff1a\u95a2\u6570\u540d\n  // (width: Double, height: Double)\uff1a\u5f15\u6570\u30ea\u30b9\u30c8\n  // Double\uff1a\u623b\u308a\u5024\u306e\u578b\n  // width * height\uff1a\u95a2\u6570\u672c\u4f53\n\n  val area = calculateArea(5.0, 3.0)\n  println(f\"\u9762\u7a4d: $area%.2f\")\n\n  // \u8907\u6570\u884c\u306e\u95a2\u6570\n  def describePerson(name: String, age: Int): String =\n    val category = if (age &lt; 20) \"\u82e5\u8005\" else \"\u5927\u4eba\"\n    val message = s\"$name \u3055\u3093\u306f $age \u6b73\u306e $category \u3067\u3059\u3002\"\n    message  // \u6700\u5f8c\u306e\u5f0f\u304c\u623b\u308a\u5024\n\n  println(describePerson(\"\u7530\u4e2d\", 25))\n}\n</code></pre>"},{"location":"part4/chapter16/#_7","title":"\u3044\u308d\u3044\u308d\u306a\u95a2\u6570\u306e\u66f8\u304d\u65b9","text":""},{"location":"part4/chapter16/#_8","title":"\u5358\u4e00\u5f0f\u95a2\u6570","text":"<pre><code>// SingleExpressionFunctions.scala\n@main def singleExpressionFunctions(): Unit = {\n  // 1\u884c\u3067\u66f8\u3051\u308b\u95a2\u6570\n  def square(x: Int): Int = x * x\n  def isEven(n: Int): Boolean = n % 2 == 0\n  def max(a: Int, b: Int): Int = if (a &gt; b) a else b\n\n  println(s\"3\u306e2\u4e57: ${square(3)}\")\n  println(s\"4\u306f\u5076\u6570\uff1f: ${isEven(4)}\")\n  println(s\"10\u306820\u306e\u5927\u304d\u3044\u65b9: ${max(10, 20)}\")\n}\n</code></pre>"},{"location":"part4/chapter16/#_9","title":"\u30d6\u30ed\u30c3\u30af\u5f0f\u95a2\u6570","text":"<pre><code>// BlockFunctions.scala\n@main def blockFunctions(): Unit = {\n  def calculateBMI(weight: Double, height: Double): (Double, String) =\n    val heightInMeters = height / 100  // cm\u3092m\u306b\u5909\u63db\n    val bmi = weight / (heightInMeters * heightInMeters)\n\n    val category = if (bmi &lt; 18.5) \"\u4f4e\u4f53\u91cd\"\n                   else if (bmi &lt; 25) \"\u6a19\u6e96\"\n                   else if (bmi &lt; 30) \"\u80a5\u6e801\u5ea6\"\n                   else \"\u80a5\u6e802\u5ea6\"\n\n    (bmi, category)  // \u30bf\u30d7\u30eb\u3067\u8fd4\u3059\n\n  val (bmi, category) = calculateBMI(65, 170)\n  println(f\"BMI: $bmi%.1f ($category)\")\n}\n</code></pre>"},{"location":"part4/chapter16/#_10","title":"\u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570","text":"<pre><code>// DefaultArguments.scala\n@main def defaultArguments(): Unit = {\n  // \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u6301\u3064\u5f15\u6570\n  def greet(name: String, greeting: String = \"\u3053\u3093\u306b\u3061\u306f\"): String =\n    s\"$greeting\u3001$name \u3055\u3093\uff01\"\n\n  println(greet(\"\u592a\u90ce\"))  // \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u6328\u62f6\n  println(greet(\"\u82b1\u5b50\", \"\u304a\u306f\u3088\u3046\"))  // \u30ab\u30b9\u30bf\u30e0\u6328\u62f6\n\n  // \u8907\u6570\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\n  def createProfile(\n    name: String,\n    age: Int = 20,\n    city: String = \"\u6771\u4eac\"\n  ): String =\n    s\"$name\uff08$age\u6b73\uff09- $city\u5728\u4f4f\"\n\n  println(createProfile(\"\u5c71\u7530\"))\n  println(createProfile(\"\u7530\u4e2d\", 25))\n  println(createProfile(\"\u4f50\u85e4\", 30, \"\u5927\u962a\"))\n}\n</code></pre>"},{"location":"part4/chapter16/#_11","title":"\u540d\u524d\u4ed8\u304d\u5f15\u6570","text":"<pre><code>// NamedArguments.scala\n@main def namedArguments(): Unit = {\n  def orderCoffee(\n    size: String = \"M\",\n    sugar: Boolean = false,\n    milk: Boolean = false\n  ): String =\n    val additions = List(\n      if (sugar) \"\u7802\u7cd6\" else \"\",\n      if (milk) \"\u30df\u30eb\u30af\" else \"\"\n    ).filter(_.nonEmpty)\n\n    val addStr = if (additions.isEmpty) \"\" \n                 else s\"\uff08${additions.mkString(\"\u3001\")}\u5165\u308a\uff09\"\n\n    s\"${size}\u30b5\u30a4\u30ba\u306e\u30b3\u30fc\u30d2\u30fc$addStr\"\n\n  // \u540d\u524d\u3092\u6307\u5b9a\u3057\u3066\u547c\u3073\u51fa\u3057\n  println(orderCoffee(milk = true))\n  println(orderCoffee(size = \"L\", sugar = true))\n  println(orderCoffee(sugar = true, milk = true, size = \"S\"))\n}\n</code></pre>"},{"location":"part4/chapter16/#_12","title":"\u5b9f\u8df5\u7684\u306a\u95a2\u6570\u306e\u4f8b","text":""},{"location":"part4/chapter16/#_13","title":"\u691c\u8a3c\u95a2\u6570","text":"<pre><code>// ValidationFunctions.scala\n@main def validationFunctions(): Unit = {\n  // \u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u306e\u7c21\u6613\u30c1\u30a7\u30c3\u30af\n  def isValidEmail(email: String): Boolean =\n    email.contains(\"@\") &amp;&amp; email.contains(\".\")\n\n  // \u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u5f37\u5ea6\u30c1\u30a7\u30c3\u30af\n  def checkPasswordStrength(password: String): String =\n    val length = password.length\n    val hasUpper = password.exists(_.isUpper)\n    val hasLower = password.exists(_.isLower)\n    val hasDigit = password.exists(_.isDigit)\n\n    val score = List(\n      if (length &gt;= 8) 1 else 0,\n      if (hasUpper) 1 else 0,\n      if (hasLower) 1 else 0,\n      if (hasDigit) 1 else 0\n    ).sum\n\n    score match {\n      case 4 =&gt; \"\u5f37\u3044\"\n      case 3 =&gt; \"\u666e\u901a\"\n      case 2 =&gt; \"\u5f31\u3044\"\n      case _ =&gt; \"\u3068\u3066\u3082\u5f31\u3044\"\n    }\n\n  // \u30c6\u30b9\u30c8\n  val emails = List(\"test@example.com\", \"invalid-email\", \"user@domain\")\n  emails.foreach { email =&gt;\n    println(s\"$email: ${if (isValidEmail(email)) \"\u6709\u52b9\" else \"\u7121\u52b9\"}\")\n  }\n\n  val passwords = List(\"abc\", \"Abc123\", \"MyP@ssw0rd\", \"password123\")\n  passwords.foreach { pwd =&gt;\n    println(s\"$pwd: ${checkPasswordStrength(pwd)}\")\n  }\n}\n</code></pre>"},{"location":"part4/chapter16/#_14","title":"\u8a08\u7b97\u95a2\u6570","text":"<pre><code>// CalculationFunctions.scala\n@main def calculationFunctions(): Unit = {\n  // \u968e\u4e57\u3092\u8a08\u7b97\n  def factorial(n: Int): Long =\n    if (n &lt;= 1) 1\n    else n * factorial(n - 1)\n\n  // \u6700\u5927\u516c\u7d04\u6570\n  def gcd(a: Int, b: Int): Int =\n    if (b == 0) a\n    else gcd(b, a % b)\n\n  // \u7d20\u6570\u5224\u5b9a\n  def isPrime(n: Int): Boolean =\n    if (n &lt;= 1) false\n    else if (n == 2) true\n    else !(2 to math.sqrt(n).toInt).exists(n % _ == 0)\n\n  println(s\"5! = ${factorial(5)}\")\n  println(s\"gcd(48, 18) = ${gcd(48, 18)}\")\n  println(s\"17\u306f\u7d20\u6570\uff1f: ${isPrime(17)}\")\n\n  // \u7d71\u8a08\u95a2\u6570\n  def statistics(numbers: List[Double]): (Double, Double, Double) =\n    val sum = numbers.sum\n    val mean = sum / numbers.length\n    val variance = numbers.map(x =&gt; math.pow(x - mean, 2)).sum / numbers.length\n    val stdDev = math.sqrt(variance)\n\n    (mean, variance, stdDev)\n\n  val data = List(10.0, 20.0, 30.0, 40.0, 50.0)\n  val (mean, variance, stdDev) = statistics(data)\n  println(f\"\u5e73\u5747: $mean%.2f, \u5206\u6563: $variance%.2f, \u6a19\u6e96\u504f\u5dee: $stdDev%.2f\")\n}\n</code></pre>"},{"location":"part4/chapter16/#_15","title":"\u6587\u5b57\u5217\u51e6\u7406\u95a2\u6570","text":"<pre><code>// StringFunctions.scala\n@main def stringFunctions(): Unit = {\n  // \u6587\u5b57\u5217\u3092\u4e2d\u592e\u5bc4\u305b\n  def center(text: String, width: Int, fill: Char = ' '): String =\n    val padding = (width - text.length) / 2\n    if (padding &lt;= 0) text\n    else fill.toString * padding + text + fill.toString * padding\n\n  // \u5358\u8a9e\u306e\u983b\u5ea6\u3092\u30ab\u30a6\u30f3\u30c8\n  def wordFrequency(text: String): Map[String, Int] =\n    text.toLowerCase\n        .split(\"\\\\s+\")\n        .filter(_.nonEmpty)\n        .groupBy(identity)\n        .view.mapValues(_.length)\n        .toMap\n\n  // \u30ad\u30e3\u30e1\u30eb\u30b1\u30fc\u30b9\u306b\u5909\u63db\n  def toCamelCase(text: String): String =\n    text.split(\"[-_\\\\s]+\")\n        .filter(_.nonEmpty)\n        .zipWithIndex\n        .map { case (word, index) =&gt;\n          if (index == 0) word.toLowerCase\n          else word.capitalize\n        }\n        .mkString\n\n  // \u4f7f\u7528\u4f8b\n  println(center(\"Title\", 20, '*'))\n\n  val text = \"Scala is fun Scala is powerful\"\n  println(s\"\u5358\u8a9e\u306e\u983b\u5ea6: ${wordFrequency(text)}\")\n\n  println(s\"\u30ad\u30e3\u30e1\u30eb\u30b1\u30fc\u30b9: ${toCamelCase(\"hello-world-example\")}\")\n}\n</code></pre>"},{"location":"part4/chapter16/#_16","title":"\u95a2\u6570\u3092\u4f7f\u3046\u5229\u70b9","text":""},{"location":"part4/chapter16/#_17","title":"\u30b3\u30fc\u30c9\u306e\u518d\u5229\u7528","text":"<pre><code>// CodeReuse.scala\n@main def codeReuse(): Unit = {\n  // \u95a2\u6570\u3092\u4f7f\u308f\u306a\u3044\u5834\u5408\uff08\u540c\u3058\u30b3\u30fc\u30c9\u306e\u7e70\u308a\u8fd4\u3057\uff09\n  println(\"=== \u95a2\u6570\u306a\u3057 ===\")\n  val price1 = 100\n  val tax1 = (price1 * 0.1).toInt\n  val total1 = price1 + tax1\n  println(s\"\u5546\u54c11: ${price1}\u5186 + \u7a0e${tax1}\u5186 = ${total1}\u5186\")\n\n  val price2 = 250\n  val tax2 = (price2 * 0.1).toInt\n  val total2 = price2 + tax2\n  println(s\"\u5546\u54c12: ${price2}\u5186 + \u7a0e${tax2}\u5186 = ${total2}\u5186\")\n\n  // \u95a2\u6570\u3092\u4f7f\u3046\u5834\u5408\uff08\u30b9\u30c3\u30ad\u30ea\uff01\uff09\n  println(\"\\n=== \u95a2\u6570\u3042\u308a ===\")\n  def calculateTotal(price: Int): (Int, Int, Int) =\n    val tax = (price * 0.1).toInt\n    val total = price + tax\n    (price, tax, total)\n\n  List(100, 250, 500).foreach { price =&gt;\n    val (p, t, total) = calculateTotal(price)\n    println(s\"\u5546\u54c1: ${p}\u5186 + \u7a0e${t}\u5186 = ${total}\u5186\")\n  }\n}\n</code></pre>"},{"location":"part4/chapter16/#_18","title":"\u30c6\u30b9\u30c8\u3057\u3084\u3059\u3044","text":"<pre><code>// TestableFunctions.scala\n@main def testableFunctions(): Unit = {\n  // \u30c6\u30b9\u30c8\u3057\u3084\u3059\u3044\u7d14\u7c8b\u95a2\u6570\n  def discount(price: Int, rate: Double): Int =\n    (price * (1 - rate)).toInt\n\n  // \u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\n  val testCases = List(\n    (1000, 0.1, 900),   // 10%\u30aa\u30d5\n    (500, 0.2, 400),    // 20%\u30aa\u30d5\n    (2000, 0.3, 1400)   // 30%\u30aa\u30d5\n  )\n\n  println(\"=== \u5272\u5f15\u8a08\u7b97\u306e\u30c6\u30b9\u30c8 ===\")\n  testCases.foreach { case (price, rate, expected) =&gt;\n    val result = discount(price, rate)\n    val status = if (result == expected) \"\u2713\" else \"\u2717\"\n    println(f\"$status $price\u5186\u306e${(rate*100).toInt}%%\u30aa\u30d5 = $result\u5186 (\u671f\u5f85\u5024: $expected\u5186)\")\n  }\n}\n</code></pre>"},{"location":"part4/chapter16/#_19","title":"\u30ed\u30fc\u30ab\u30eb\u95a2\u6570","text":"<pre><code>// LocalFunctions.scala\n@main def localFunctions(): Unit = {\n  def processOrder(items: List[(String, Int, Int)]): Int =\n    // \u95a2\u6570\u306e\u4e2d\u3067\u95a2\u6570\u3092\u5b9a\u7fa9\n    def calculateSubtotal(quantity: Int, price: Int): Int =\n      quantity * price\n\n    def applyDiscount(subtotal: Int): Int =\n      if (subtotal &gt;= 5000) (subtotal * 0.9).toInt\n      else subtotal\n\n    // \u30e1\u30a4\u30f3\u306e\u51e6\u7406\n    val subtotal = items.map { case (_, qty, price) =&gt;\n      calculateSubtotal(qty, price)\n    }.sum\n\n    val total = applyDiscount(subtotal)\n\n    println(s\"\u5c0f\u8a08: ${subtotal}\u5186\")\n    if (subtotal &gt;= 5000) {\n      println(\"10%\u5272\u5f15\u304c\u9069\u7528\u3055\u308c\u307e\u3057\u305f\")\n    }\n    println(s\"\u5408\u8a08: ${total}\u5186\")\n\n    total\n\n  val order = List(\n    (\"\u5546\u54c1A\", 2, 1500),\n    (\"\u5546\u54c1B\", 1, 2000),\n    (\"\u5546\u54c1C\", 3, 800)\n  )\n\n  processOrder(order)\n}\n</code></pre>"},{"location":"part4/chapter16/#_20","title":"\u518d\u5e30\u95a2\u6570","text":"<pre><code>// RecursiveFunctions.scala\n@main def recursiveFunctions(): Unit = {\n  // \u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\n  def fibonacci(n: Int): Int =\n    if (n &lt;= 1) n\n    else fibonacci(n - 1) + fibonacci(n - 2)\n\n  // \u30ea\u30b9\u30c8\u306e\u5408\u8a08\uff08\u518d\u5e30\u7248\uff09\n  def sumList(list: List[Int]): Int = list match {\n    case Nil =&gt; 0\n    case head :: tail =&gt; head + sumList(tail)\n  }\n\n  // \u30c4\u30ea\u30fc\u69cb\u9020\u306e\u63a2\u7d22\n  case class TreeNode(value: Int, left: Option[TreeNode], right: Option[TreeNode])\n\n  def treeSum(node: Option[TreeNode]): Int = node match {\n    case None =&gt; 0\n    case Some(TreeNode(value, left, right)) =&gt;\n      value + treeSum(left) + treeSum(right)\n  }\n\n  // \u4f7f\u7528\u4f8b\n  println(\"\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217:\")\n  (0 to 10).foreach { n =&gt;\n    print(s\"${fibonacci(n)} \")\n  }\n  println()\n\n  println(s\"\\n\u30ea\u30b9\u30c8\u306e\u5408\u8a08: ${sumList(List(1, 2, 3, 4, 5))}\")\n\n  val tree = Some(TreeNode(\n    10,\n    Some(TreeNode(5, None, None)),\n    Some(TreeNode(15, None, None))\n  ))\n  println(s\"\u30c4\u30ea\u30fc\u306e\u5408\u8a08: ${treeSum(tree)}\")\n}\n</code></pre>"},{"location":"part4/chapter16/#_21","title":"\u7df4\u7fd2\u3057\u3066\u307f\u3088\u3046\uff01","text":""},{"location":"part4/chapter16/#1","title":"\u7df4\u7fd21\uff1a\u6e29\u5ea6\u5909\u63db","text":"<p>\u6442\u6c0f\u3092\u83ef\u6c0f\u306b\u3001\u83ef\u6c0f\u3092\u6442\u6c0f\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\u3002 - \u6442\u6c0f\u2192\u83ef\u6c0f: F = C \u00d7 9/5 + 32 - \u83ef\u6c0f\u2192\u6442\u6c0f: C = (F - 32) \u00d7 5/9</p>"},{"location":"part4/chapter16/#2","title":"\u7df4\u7fd22\uff1a\u6587\u5b57\u5217\u64cd\u4f5c","text":"<p>\u6587\u5b57\u5217\u3092\u53d7\u3051\u53d6\u3063\u3066\u3001\u4ee5\u4e0b\u3092\u884c\u3046\u95a2\u6570\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\uff1a - \u56de\u6587\uff08\u524d\u304b\u3089\u8aad\u3093\u3067\u3082\u5f8c\u308d\u304b\u3089\u8aad\u3093\u3067\u3082\u540c\u3058\uff09\u304b\u3069\u3046\u304b\u5224\u5b9a - \u6587\u5b57\u5217\u4e2d\u306e\u6bcd\u97f3\u306e\u6570\u3092\u6570\u3048\u308b - \u5404\u5358\u8a9e\u306e\u6700\u521d\u306e\u6587\u5b57\u3092\u5927\u6587\u5b57\u306b\u3059\u308b</p>"},{"location":"part4/chapter16/#3","title":"\u7df4\u7fd23\uff1a\u30ea\u30b9\u30c8\u51e6\u7406","text":"<p>\u6570\u5024\u306e\u30ea\u30b9\u30c8\u3092\u53d7\u3051\u53d6\u3063\u3066\u3001\u4ee5\u4e0b\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\uff1a - \u5076\u6570\u306e\u307f\u306e\u5408\u8a08 - \u6700\u5927\u5024\u3068\u6700\u5c0f\u5024\u306e\u5dee - \u5e73\u5747\u5024\u3088\u308a\u5927\u304d\u3044\u8981\u7d20\u306e\u500b\u6570</p>"},{"location":"part4/chapter16/#_22","title":"\u3053\u306e\u7ae0\u306e\u307e\u3068\u3081","text":"<p>\u95a2\u6570\u306e\u5b9a\u7fa9\u3068\u5229\u7528\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3057\u305f\uff01</p>"},{"location":"part4/chapter16/#_23","title":"\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3053\u3068","text":"<p>\u2705 \u95a2\u6570\u306e\u57fa\u672c - \u95a2\u6570\u306e\u5b9a\u7fa9\u65b9\u6cd5 - \u5f15\u6570\u3068\u623b\u308a\u5024 - \u95a2\u6570\u306e\u547c\u3073\u51fa\u3057</p> <p>\u2705 \u3044\u308d\u3044\u308d\u306a\u66f8\u304d\u65b9 - \u5358\u4e00\u5f0f\u95a2\u6570 - \u30d6\u30ed\u30c3\u30af\u5f0f\u95a2\u6570 - \u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570 - \u540d\u524d\u4ed8\u304d\u5f15\u6570</p> <p>\u2705 \u5b9f\u8df5\u7684\u306a\u95a2\u6570 - \u691c\u8a3c\u95a2\u6570 - \u8a08\u7b97\u95a2\u6570 - \u6587\u5b57\u5217\u51e6\u7406</p> <p>\u2705 \u9ad8\u5ea6\u306a\u6a5f\u80fd - \u30ed\u30fc\u30ab\u30eb\u95a2\u6570 - \u518d\u5e30\u95a2\u6570 - \u95a2\u6570\u306e\u8a2d\u8a08\u539f\u5247</p>"},{"location":"part4/chapter16/#_24","title":"\u95a2\u6570\u3092\u4f7f\u3046\u30b3\u30c4","text":"<ol> <li> <p>\u5358\u4e00\u8cac\u4efb\u306e\u539f\u5247</p> <ul> <li>1\u3064\u306e\u95a2\u6570\u306f1\u3064\u306e\u3053\u3068\u3092\u3059\u308b</li> <li>\u540d\u524d\u304b\u3089\u6a5f\u80fd\u304c\u5206\u304b\u308b\u3088\u3046\u306b</li> <li>\u77ed\u304f\u3001\u7406\u89e3\u3057\u3084\u3059\u304f</li> </ul> </li> <li> <p>\u9069\u5207\u306a\u62bd\u8c61\u5316</p> <ul> <li>\u5171\u901a\u90e8\u5206\u3092\u95a2\u6570\u306b</li> <li>\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u67d4\u8edf\u6027\u3092</li> <li>\u518d\u5229\u7528\u3092\u610f\u8b58</li> </ul> </li> <li> <p>\u30c6\u30b9\u30c8\u3057\u3084\u3059\u3055</p> <ul> <li>\u5165\u529b\u3068\u51fa\u529b\u304c\u660e\u78ba</li> <li>\u526f\u4f5c\u7528\u3092\u907f\u3051\u308b</li> <li>\u7d14\u7c8b\u95a2\u6570\u3092\u5fc3\u304c\u3051\u308b</li> </ul> </li> </ol>"},{"location":"part4/chapter16/#_25","title":"\u6b21\u306e\u7ae0\u3067\u306f...","text":"<p>\u95a2\u6570\u306e\u5f15\u6570\u3092\u3082\u3063\u3068\u8ce2\u304f\u4f7f\u3046\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002\u53ef\u5909\u9577\u5f15\u6570\u3084\u30ab\u30ea\u30fc\u5316\u306a\u3069\u3001\u3055\u3089\u306b\u9ad8\u5ea6\u306a\u6a5f\u80fd\u3092\u7fd2\u5f97\u3057\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part4/chapter16/#_26","title":"\u6700\u5f8c\u306b","text":"<p>\u95a2\u6570\u306f\u300c\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u90e8\u54c1\u300d\u3067\u3059\u3002\u826f\u3044\u90e8\u54c1\u3092\u4f5c\u308c\u3070\u3001\u8907\u96d1\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3082\u7c21\u5358\u306b\u7d44\u307f\u7acb\u3066\u3089\u308c\u307e\u3059\u3002\u30ec\u30b4\u30d6\u30ed\u30c3\u30af\u306e\u3088\u3046\u306b\u3001\u5c0f\u3055\u306a\u95a2\u6570\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u5927\u304d\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u308b\u697d\u3057\u3055\u3092\u5473\u308f\u3063\u3066\u304f\u3060\u3055\u3044\uff01</p>"},{"location":"part4/chapter17/","title":"\u7b2c17\u7ae0 \u95a2\u6570\u306e\u5f15\u6570\u3092\u3082\u3063\u3068\u8ce2\u304f","text":""},{"location":"part4/chapter17/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u30ec\u30b9\u30c8\u30e9\u30f3\u3067\u6ce8\u6587\u3059\u308b\u3068\u304d\u3001\u300c\u30cf\u30f3\u30d0\u30fc\u30ac\u30fc\u300d\u3068\u8a00\u3048\u3070\u57fa\u672c\u306e\u30cf\u30f3\u30d0\u30fc\u30ac\u30fc\u304c\u51fa\u3066\u304d\u307e\u3059\u304c\u3001\u300c\u30c1\u30fc\u30ba\u3092\u8ffd\u52a0\u300d\u300c\u30d4\u30af\u30eb\u30b9\u629c\u304d\u300d\u300c\u30dd\u30c6\u30c8L\u30b5\u30a4\u30ba\u300d\u306e\u3088\u3046\u306b\u3001\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\u3088\u306d\u3002</p> <p>\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u95a2\u6570\u3082\u540c\u3058\u3067\u3059\uff01\u3053\u306e\u7ae0\u3067\u306f\u3001\u95a2\u6570\u306e\u5f15\u6570\u3092\u3082\u3063\u3068\u67d4\u8edf\u306b\u3001\u3082\u3063\u3068\u8ce2\u304f\u4f7f\u3046\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002</p>"},{"location":"part4/chapter17/#_2","title":"\u53ef\u5909\u9577\u5f15\u6570\uff1a\u3044\u304f\u3064\u3067\u3082\u53d7\u3051\u53d6\u308c\u308b","text":""},{"location":"part4/chapter17/#_3","title":"\u57fa\u672c\u306e\u53ef\u5909\u9577\u5f15\u6570","text":"<pre><code>// VarArgs.scala\n@main def varArgs(): Unit = {\n  // * \u3092\u3064\u3051\u308b\u3068\u3001\u3044\u304f\u3064\u3067\u3082\u5f15\u6570\u3092\u53d7\u3051\u53d6\u308c\u308b\n  def sum(numbers: Int*): Int =\n    numbers.sum\n\n  println(sum(1))           // 1\u500b\n  println(sum(1, 2, 3))     // 3\u500b\n  println(sum(1, 2, 3, 4, 5)) // 5\u500b\n  println(sum())            // 0\u500b\u3067\u3082OK\uff01\n\n  // \u6587\u5b57\u5217\u3092\u9023\u7d50\n  def joinWords(words: String*): String =\n    words.mkString(\" \")\n\n  println(joinWords(\"Hello\", \"Scala\", \"World\"))\n  println(joinWords(\"\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\", \"\u306f\", \"\u697d\u3057\u3044\"))\n}\n</code></pre>"},{"location":"part4/chapter17/#_4","title":"\u53ef\u5909\u9577\u5f15\u6570\u306e\u5b9f\u7528\u4f8b","text":"<pre><code>// VarArgsExamples.scala\n@main def varArgsExamples(): Unit = {\n  // \u30ed\u30b0\u51fa\u529b\u95a2\u6570\n  def log(level: String, messages: String*): Unit =\n    val timestamp = java.time.LocalDateTime.now()\n    val allMessages = messages.mkString(\" \")\n    println(s\"[$timestamp] [$level] $allMessages\")\n\n  log(\"INFO\", \"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u958b\u59cb\")\n  log(\"ERROR\", \"\u30d5\u30a1\u30a4\u30eb\u304c\", \"\u898b\u3064\u304b\u308a\u307e\u305b\u3093:\", \"data.txt\")\n  log(\"DEBUG\", \"\u5909\u6570x =\", \"42,\", \"\u5909\u6570y =\", \"13\")\n\n  // \u6700\u5927\u5024\u3092\u6c42\u3081\u308b\uff08\u3044\u304f\u3064\u3067\u3082\uff09\n  def maxOf(first: Int, rest: Int*): Int =\n    (first +: rest).max  // first\u3068rest\u3092\u7d50\u5408\u3057\u3066max\n\n  println(s\"\u6700\u5927\u5024: ${maxOf(5)}\")\n  println(s\"\u6700\u5927\u5024: ${maxOf(3, 7, 2)}\")\n  println(s\"\u6700\u5927\u5024: ${maxOf(10, 20, 15, 25, 8)}\")\n}\n</code></pre>"},{"location":"part4/chapter17/#_5","title":"\u30ea\u30b9\u30c8\u3092\u53ef\u5909\u9577\u5f15\u6570\u3068\u3057\u3066\u6e21\u3059","text":"<pre><code>// SpreadOperator.scala\n@main def spreadOperator(): Unit = {\n  def multiply(numbers: Int*): Int =\n    numbers.product\n\n  // \u30ea\u30b9\u30c8\u3092\u6301\u3063\u3066\u3044\u308b\u5834\u5408\n  val myList = List(2, 3, 4)\n\n  // \u305d\u306e\u307e\u307e\u3067\u306f\u6e21\u305b\u306a\u3044\n  // multiply(myList)  // \u30a8\u30e9\u30fc\uff01\n\n  // _* \u3092\u4f7f\u3063\u3066\u5c55\u958b\n  println(s\"\u7a4d: ${multiply(myList*)}\")  // OK\uff01\n\n  // \u5b9f\u7528\u4f8b\uff1a\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u95a2\u6570\n  def format(template: String, values: Any*): String =\n    var result = template\n    values.zipWithIndex.foreach { case (value, index) =&gt;\n      result = result.replace(s\"{$index}\", value.toString)\n    }\n    result\n\n  val data = List(\"\u592a\u90ce\", 25, \"\u30a8\u30f3\u30b8\u30cb\u30a2\")\n  val message = format(\"{0}\u3055\u3093\uff08{1}\u6b73\uff09\u306f{2}\u3067\u3059\", data*)\n  println(message)\n}\n</code></pre>"},{"location":"part4/chapter17/#_6","title":"\u30ab\u30ea\u30fc\u5316\uff1a\u95a2\u6570\u3092\u5206\u5272\u3059\u308b","text":""},{"location":"part4/chapter17/#_7","title":"\u30ab\u30ea\u30fc\u5316\u306e\u57fa\u672c","text":"<pre><code>// Currying.scala\n@main def currying(): Unit = {\n  // \u901a\u5e38\u306e\u95a2\u6570\n  def add(x: Int, y: Int): Int = x + y\n\n  // \u30ab\u30ea\u30fc\u5316\u3057\u305f\u95a2\u6570\n  def addCurried(x: Int)(y: Int): Int = x + y\n\n  // \u4f7f\u3044\u65b9\n  println(add(3, 4))        // \u901a\u5e38\n  println(addCurried(3)(4)) // \u30ab\u30ea\u30fc\u5316\n\n  // \u90e8\u5206\u9069\u7528\n  val add3 = addCurried(3)  // 3\u3092\u8db3\u3059\u95a2\u6570\n  println(add3(4))  // 7\n  println(add3(10)) // 13\n\n  // \u5b9f\u7528\u4f8b\uff1a\u7a0e\u7387\u8a08\u7b97\n  def calculatePrice(taxRate: Double)(price: Int): Int =\n    (price * (1 + taxRate)).toInt\n\n  val withTax10 = calculatePrice(0.10)  // 10%\u7a0e\u7387\n  val withTax8 = calculatePrice(0.08)   // 8%\u7a0e\u7387\n\n  println(s\"1000\u5186\uff0810%\u7a0e\uff09: ${withTax10(1000)}\u5186\")\n  println(s\"1000\u5186\uff088%\u7a0e\uff09: ${withTax8(1000)}\u5186\")\n}\n</code></pre>"},{"location":"part4/chapter17/#_8","title":"\u30ab\u30ea\u30fc\u5316\u306e\u5b9f\u8df5\u4f8b","text":"<pre><code>// CurryingExamples.scala\n@main def curryingExamples(): Unit = {\n  // \u30ed\u30b0\u51fa\u529b\uff08\u30ec\u30d9\u30eb\u56fa\u5b9a\uff09\n  def log(level: String)(message: String): Unit =\n    println(s\"[$level] $message\")\n\n  val info = log(\"INFO\")\n  val error = log(\"ERROR\")\n  val debug = log(\"DEBUG\")\n\n  info(\"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u958b\u59cb\")\n  error(\"\u63a5\u7d9a\u30a8\u30e9\u30fc\")\n  debug(\"\u5909\u6570\u306e\u5024: 42\")\n\n  // \u8a2d\u5b9a\u53ef\u80fd\u306a\u30d5\u30a9\u30fc\u30de\u30c3\u30bf\u30fc\n  def formatCurrency(symbol: String)(amount: Double): String =\n    f\"$symbol$amount%.2f\"\n\n  val formatYen = formatCurrency(\"\u00a5\")\n  val formatDollar = formatCurrency(\"$\")\n  val formatEuro = formatCurrency(\"\u20ac\")\n\n  println(formatYen(1234.5))\n  println(formatDollar(1234.5))\n  println(formatEuro(1234.5))\n\n  // \u30d5\u30a3\u30eb\u30bf\u30fc\u95a2\u6570\u306e\u751f\u6210\n  def createFilter(minValue: Int)(maxValue: Int)(value: Int): Boolean =\n    value &gt;= minValue &amp;&amp; value &lt;= maxValue\n\n  val isValidAge = createFilter(0)(120)\n  val isValidScore = createFilter(0)(100)\n\n  println(s\"\u5e74\u9f6225\u306f\u6709\u52b9\uff1f: ${isValidAge(25)}\")\n  println(s\"\u70b9\u6570150\u306f\u6709\u52b9\uff1f: ${isValidScore(150)}\")\n}\n</code></pre>"},{"location":"part4/chapter17/#usinggiven","title":"\u6697\u9ed9\u306e\u5f15\u6570\uff08using/given\uff09","text":""},{"location":"part4/chapter17/#_9","title":"\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9","text":"<pre><code>// ImplicitParams.scala\n@main def implicitParams(): Unit = {\n  // \u8a2d\u5b9a\u3092\u8868\u3059\u30b1\u30fc\u30b9\u30af\u30e9\u30b9\n  case class Config(language: String, debug: Boolean)\n\n  // \u6697\u9ed9\u306e\u5024\u3092\u5b9a\u7fa9\n  given defaultConfig: Config = Config(\"ja\", false)\n\n  // using\u3067\u6697\u9ed9\u306e\u5f15\u6570\u3092\u53d7\u3051\u53d6\u308b\n  def greet(name: String)(using config: Config): String =\n    config.language match {\n      case \"ja\" =&gt; s\"\u3053\u3093\u306b\u3061\u306f\u3001$name \u3055\u3093\"\n      case \"en\" =&gt; s\"Hello, $name\"\n      case _ =&gt; s\"Hi, $name\"\n    }\n\n  // \u6697\u9ed9\u306e\u5024\u304c\u81ea\u52d5\u7684\u306b\u6e21\u3055\u308c\u308b\n  println(greet(\"\u592a\u90ce\"))  // \u65e5\u672c\u8a9e\u3067\u3042\u3044\u3055\u3064\n\n  // \u5225\u306e\u8a2d\u5b9a\u3092\u4f7f\u3044\u305f\u3044\u5834\u5408\n  given englishConfig: Config = Config(\"en\", true)\n\n  println(greet(\"Taro\")(using englishConfig))  // \u82f1\u8a9e\u3067\u3042\u3044\u3055\u3064\n}\n</code></pre>"},{"location":"part4/chapter17/#_10","title":"\u5b9f\u8df5\u7684\u306a\u6697\u9ed9\u306e\u5f15\u6570","text":"<pre><code>// PracticalImplicits.scala\n@main def practicalImplicits(): Unit = {\n  // \u5b9f\u884c\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\n  case class ExecutionContext(user: String, timestamp: Long)\n\n  // \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\n  trait Database:\n    def save(data: String)(using ctx: ExecutionContext): Unit =\n      println(s\"[${ctx.timestamp}] User ${ctx.user} saved: $data\")\n\n    def load(id: Int)(using ctx: ExecutionContext): String =\n      println(s\"[${ctx.timestamp}] User ${ctx.user} loaded id: $id\")\n      s\"Data for id $id\"\n\n  val db = new Database {}\n\n  // \u6697\u9ed9\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u7528\u610f\n  given ctx: ExecutionContext = ExecutionContext(\"admin\", System.currentTimeMillis())\n\n  // \u81ea\u52d5\u7684\u306b\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u304c\u6e21\u3055\u308c\u308b\n  db.save(\"\u91cd\u8981\u306a\u30c7\u30fc\u30bf\")\n  val data = db.load(123)\n\n  // \u30d5\u30a9\u30fc\u30de\u30c3\u30bf\u30fc\n  trait Formatter[T]:\n    def format(value: T): String\n\n  given intFormatter: Formatter[Int] with\n    def format(value: Int): String = f\"\u6574\u6570: $value%,d\"\n\n  given doubleFormatter: Formatter[Double] with\n    def format(value: Double): String = f\"\u5c0f\u6570: $value%.2f\"\n\n  def printFormatted[T](value: T)(using fmt: Formatter[T]): Unit =\n    println(fmt.format(value))\n\n  printFormatted(1234567)\n  printFormatted(3.14159)\n}\n</code></pre>"},{"location":"part4/chapter17/#by-name","title":"by-name\u5f15\u6570\uff1a\u9045\u5ef6\u8a55\u4fa1","text":"<pre><code>// ByNameParams.scala\n@main def byNameParams(): Unit = {\n  // \u901a\u5e38\u306e\u5f15\u6570\uff08\u5373\u5ea7\u306b\u8a55\u4fa1\uff09\n  def normalParam(x: Int): Unit =\n    println(\"\u95a2\u6570\u304c\u547c\u3070\u308c\u307e\u3057\u305f\")\n    println(s\"\u5024: $x\")\n\n  // by-name\u5f15\u6570\uff08\u4f7f\u3046\u3068\u304d\u306b\u8a55\u4fa1\uff09\n  def byNameParam(x: =&gt; Int): Unit =\n    println(\"\u95a2\u6570\u304c\u547c\u3070\u308c\u307e\u3057\u305f\")\n    println(s\"\u5024: $x\")  // \u3053\u3053\u3067\u521d\u3081\u3066\u8a55\u4fa1\n\n  println(\"=== \u901a\u5e38\u306e\u5f15\u6570 ===\")\n  normalParam({\n    println(\"\u5f15\u6570\u3092\u8a55\u4fa1\u4e2d...\")\n    42\n  })\n\n  println(\"\\n=== by-name\u5f15\u6570 ===\")\n  byNameParam({\n    println(\"\u5f15\u6570\u3092\u8a55\u4fa1\u4e2d...\")\n    42\n  })\n\n  // \u5b9f\u7528\u4f8b\uff1a\u6761\u4ef6\u4ed8\u304d\u5b9f\u884c\n  def whenTrue(condition: Boolean)(action: =&gt; Unit): Unit =\n    if (condition) action\n\n  var count = 0\n\n  whenTrue(true) {\n    count += 1\n    println(s\"\u5b9f\u884c\u3055\u308c\u307e\u3057\u305f: $count\")\n  }\n\n  whenTrue(false) {\n    count += 1  // \u5b9f\u884c\u3055\u308c\u306a\u3044\n    println(s\"\u5b9f\u884c\u3055\u308c\u307e\u3057\u305f: $count\")\n  }\n\n  println(s\"\u6700\u7d42\u30ab\u30a6\u30f3\u30c8: $count\")  // 1\n}\n</code></pre>"},{"location":"part4/chapter17/#_11","title":"\u95a2\u6570\u3092\u5f15\u6570\u3068\u3057\u3066\u53d7\u3051\u53d6\u308b","text":"<pre><code>// FunctionAsParams.scala\n@main def functionAsParams(): Unit = {\n  // \u95a2\u6570\u3092\u5f15\u6570\u306b\u53d6\u308b\u95a2\u6570\n  def applyTwice(f: Int =&gt; Int, x: Int): Int =\n    f(f(x))\n\n  val double = (x: Int) =&gt; x * 2\n  val addOne = (x: Int) =&gt; x + 1\n\n  println(s\"2\u500d\u30922\u56de: ${applyTwice(double, 3)}\")  // 12\n  println(s\"+1\u30922\u56de: ${applyTwice(addOne, 3)}\")   // 5\n\n  // \u30ea\u30b9\u30c8\u306e\u64cd\u4f5c\n  def processlist(\n    numbers: List[Int],\n    filter: Int =&gt; Boolean,\n    transform: Int =&gt; Int\n  ): List[Int] =\n    numbers.filter(filter).map(transform)\n\n  val data = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\n  val result1 = processlist(\n    data,\n    x =&gt; x % 2 == 0,  // \u5076\u6570\u306e\u307f\n    x =&gt; x * x        // 2\u4e57\u3059\u308b\n  )\n\n  println(s\"\u5076\u6570\u306e2\u4e57: $result1\")\n\n  // \u30ab\u30b9\u30bf\u30e0\u6bd4\u8f03\u95a2\u6570\n  def findBest[T](items: List[T], isBetter: (T, T) =&gt; Boolean): Option[T] =\n    items match {\n      case Nil =&gt; None\n      case head :: tail =&gt;\n        Some(tail.foldLeft(head)((best, item) =&gt;\n          if (isBetter(item, best)) item else best\n        ))\n    }\n\n  case class Product(name: String, price: Int, rating: Double)\n\n  val products = List(\n    Product(\"\u5546\u54c1A\", 1000, 4.5),\n    Product(\"\u5546\u54c1B\", 1500, 4.8),\n    Product(\"\u5546\u54c1C\", 800, 4.2)\n  )\n\n  val cheapest = findBest(products, (a, b) =&gt; a.price &lt; b.price)\n  val highestRated = findBest(products, (a, b) =&gt; a.rating &gt; b.rating)\n\n  println(s\"\u6700\u5b89: $cheapest\")\n  println(s\"\u6700\u9ad8\u8a55\u4fa1: $highestRated\")\n}\n</code></pre>"},{"location":"part4/chapter17/#dsl","title":"\u5b9f\u8df5\u4f8b\uff1aDSL\uff08\u30c9\u30e1\u30a4\u30f3\u7279\u5316\u8a00\u8a9e\uff09\u306e\u4f5c\u6210","text":"<pre><code>// DSLExample.scala\n@main def dslExample(): Unit = {\n  // HTML\u30d3\u30eb\u30c0\u30fcDSL\n  class HtmlBuilder:\n    private val content = scala.collection.mutable.StringBuilder()\n\n    def tag(name: String)(body: =&gt; Unit): this.type =\n      content.append(s\"&lt;$name&gt;\")\n      body\n      content.append(s\"&lt;/$name&gt;\")\n      this\n\n    def text(value: String): this.type =\n      content.append(value)\n      this\n\n    def attr(name: String, value: String): this.type =\n      content.insert(content.lastIndexOf(\"&gt;\"), s\"\"\" $name=\"$value\"\"\"\")\n      this\n\n    override def toString: String = content.toString\n\n  // \u4f7f\u3044\u3084\u3059\u3044API\n  def html(body: HtmlBuilder =&gt; Unit): String =\n    val builder = new HtmlBuilder\n    body(builder)\n    builder.toString\n\n  // DSL\u3092\u4f7f\u3046\n  val page = html { h =&gt;\n    h.tag(\"div\") {\n      h.attr(\"class\", \"container\")\n       .tag(\"h1\") {\n         h.text(\"Scala\u3067\u4f5c\u308bDSL\")\n       }\n       .tag(\"p\") {\n         h.text(\"\u95a2\u6570\u306e\u5f15\u6570\u3092\u6d3b\u7528\u3059\u308b\u3068\u3001\")\n          .tag(\"strong\") {\n            h.text(\"\u8aad\u307f\u3084\u3059\u3044\")\n          }\n          .text(\"\u30b3\u30fc\u30c9\u304c\u66f8\u3051\u307e\u3059\u3002\")\n       }\n    }\n  }\n\n  println(page)\n\n  // \u8a2d\u5b9aDSL\n  case class ServerConfig(\n    host: String = \"localhost\",\n    port: Int = 8080,\n    ssl: Boolean = false\n  )\n\n  def server(configure: ServerConfig =&gt; ServerConfig): ServerConfig =\n    configure(ServerConfig())\n\n  val config = server { c =&gt;\n    c.copy(\n      host = \"example.com\",\n      port = 443,\n      ssl = true\n    )\n  }\n\n  println(s\"\u30b5\u30fc\u30d0\u30fc\u8a2d\u5b9a: $config\")\n}\n</code></pre>"},{"location":"part4/chapter17/#_12","title":"\u7df4\u7fd2\u3057\u3066\u307f\u3088\u3046\uff01","text":""},{"location":"part4/chapter17/#1","title":"\u7df4\u7fd21\uff1a\u53ef\u5909\u9577\u5f15\u6570","text":"<p>\u4ee5\u4e0b\u306e\u95a2\u6570\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\uff1a - \u8907\u6570\u306e\u6587\u5b57\u5217\u3092\u53d7\u3051\u53d6\u308a\u3001\u6307\u5b9a\u3055\u308c\u305f\u533a\u5207\u308a\u6587\u5b57\u3067\u9023\u7d50\u3059\u308b - \u6570\u5024\u3092\u3044\u304f\u3064\u3067\u3082\u53d7\u3051\u53d6\u308a\u3001\u5e73\u5747\u5024\u3092\u8a08\u7b97\u3059\u308b - \u53ef\u5909\u9577\u5f15\u6570\u3067\u53d7\u3051\u53d6\u3063\u305f\u5024\u306e\u4e2d\u304b\u3089\u3001\u6761\u4ef6\u306b\u5408\u3046\u3082\u306e\u3060\u3051\u3092\u8fd4\u3059</p>"},{"location":"part4/chapter17/#2","title":"\u7df4\u7fd22\uff1a\u30ab\u30ea\u30fc\u5316","text":"<p>\u4ee5\u4e0b\u3092\u30ab\u30ea\u30fc\u5316\u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - \u5272\u5f15\u7387\u3092\u56fa\u5b9a\u3057\u305f\u4fa1\u683c\u8a08\u7b97\u95a2\u6570 - \u30ed\u30b0\u30ec\u30d9\u30eb\u3092\u56fa\u5b9a\u3057\u305f\u30ed\u30ac\u30fc\u95a2\u6570 - \u7bc4\u56f2\u30c1\u30a7\u30c3\u30af\u95a2\u6570\uff08\u6700\u5c0f\u5024\u3068\u6700\u5927\u5024\u3092\u6bb5\u968e\u7684\u306b\u8a2d\u5b9a\uff09</p>"},{"location":"part4/chapter17/#3","title":"\u7df4\u7fd23\uff1a\u9ad8\u968e\u95a2\u6570","text":"<p>\u30ea\u30b9\u30c8\u3068\u8907\u6570\u306e\u95a2\u6570\u3092\u53d7\u3051\u53d6\u3063\u3066\u3001\u9806\u756a\u306b\u9069\u7528\u3059\u308b\u95a2\u6570\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\u3002 \u4f8b\uff1afilter \u2192 map \u2192 reduce \u306e\u3088\u3046\u306a\u51e6\u7406\u306e\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3</p>"},{"location":"part4/chapter17/#_13","title":"\u3053\u306e\u7ae0\u306e\u307e\u3068\u3081","text":"<p>\u95a2\u6570\u306e\u5f15\u6570\u306e\u9ad8\u5ea6\u306a\u4f7f\u3044\u65b9\u3092\u5b66\u3073\u307e\u3057\u305f\uff01</p>"},{"location":"part4/chapter17/#_14","title":"\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3053\u3068","text":"<p>\u2705 \u53ef\u5909\u9577\u5f15\u6570 - \u4efb\u610f\u306e\u6570\u306e\u5f15\u6570\u3092\u53d7\u3051\u53d6\u308b - \u30ea\u30b9\u30c8\u306e\u5c55\u958b - \u5b9f\u7528\u7684\u306a\u4f7f\u3044\u65b9</p> <p>\u2705 \u30ab\u30ea\u30fc\u5316 - \u95a2\u6570\u306e\u90e8\u5206\u9069\u7528 - \u8a2d\u5b9a\u306e\u56fa\u5b9a - DSL\u306e\u4f5c\u6210</p> <p>\u2705 \u7279\u6b8a\u306a\u5f15\u6570 - \u6697\u9ed9\u306e\u5f15\u6570\uff08using/given\uff09 - by-name\u5f15\u6570 - \u95a2\u6570\u3092\u5f15\u6570\u3068\u3057\u3066\u6e21\u3059</p> <p>\u2705 \u5b9f\u8df5\u7684\u306a\u5fdc\u7528 - \u67d4\u8edf\u306aAPI\u8a2d\u8a08 - DSL\u306e\u69cb\u7bc9 - \u9ad8\u968e\u95a2\u6570\u306e\u6d3b\u7528</p>"},{"location":"part4/chapter17/#_15","title":"\u8ce2\u3044\u5f15\u6570\u8a2d\u8a08\u306e\u30b3\u30c4","text":"<ol> <li> <p>\u4f7f\u3044\u3084\u3059\u3055\u3092\u91cd\u8996</p> <ul> <li>\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306e\u6d3b\u7528</li> <li>\u5fc5\u9808\u5f15\u6570\u306f\u6700\u5c0f\u9650\u306b</li> <li>\u540d\u524d\u4ed8\u304d\u5f15\u6570\u306e\u6d3b\u7528</li> </ul> </li> <li> <p>\u67d4\u8edf\u6027\u306e\u78ba\u4fdd</p> <ul> <li>\u53ef\u5909\u9577\u5f15\u6570\u3067\u62e1\u5f35\u6027</li> <li>\u30ab\u30ea\u30fc\u5316\u3067\u90e8\u5206\u9069\u7528</li> <li>\u95a2\u6570\u5f15\u6570\u3067\u30ab\u30b9\u30bf\u30de\u30a4\u30ba</li> </ul> </li> <li> <p>\u578b\u5b89\u5168\u6027</p> <ul> <li>\u6697\u9ed9\u306e\u5f15\u6570\u3067\u6587\u8108\u3092\u7ba1\u7406</li> <li>\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6d3b\u7528</li> <li>\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30c1\u30a7\u30c3\u30af</li> </ul> </li> </ol>"},{"location":"part4/chapter17/#_16","title":"\u6b21\u306e\u7ae0\u3067\u306f...","text":"<p>\u9ad8\u968e\u95a2\u6570\u306b\u3064\u3044\u3066\u3055\u3089\u306b\u6df1\u304f\u5b66\u3073\u307e\u3059\u3002\u95a2\u6570\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\u3088\u308a\u5f37\u529b\u3067\u8868\u73fe\u529b\u8c4a\u304b\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u308b\u65b9\u6cd5\u3092\u7fd2\u5f97\u3057\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part4/chapter17/#_17","title":"\u6700\u5f8c\u306b","text":"<p>\u95a2\u6570\u306e\u5f15\u6570\u306f\u300c\u95a2\u6570\u3078\u306e\u5165\u53e3\u300d\u3067\u3059\u3002\u3053\u306e\u5165\u53e3\u3092\u4e0a\u624b\u306b\u8a2d\u8a08\u3059\u308c\u3070\u3001\u4f7f\u3044\u3084\u3059\u304f\u3001\u5f37\u529b\u3067\u3001\u7f8e\u3057\u3044API\u304c\u4f5c\u308c\u307e\u3059\u3002\u307e\u308b\u3067\u3001\u826f\u3044\u30c7\u30b6\u30a4\u30f3\u306e\u5efa\u7269\u306e\u5165\u53e3\u306e\u3088\u3046\u306b\u3001\u5165\u3063\u305f\u77ac\u9593\u304b\u3089\u4f7f\u3044\u65b9\u304c\u5206\u304b\u308b\u3001\u305d\u3093\u306a\u95a2\u6570\u3092\u76ee\u6307\u3057\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part4/chapter18/","title":"\u7b2c18\u7ae0 \u9ad8\u968e\u95a2\u6570\u3068\u306f\u4f55\u304b","text":""},{"location":"part4/chapter18/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u300c\u9ad8\u968e\u95a2\u6570\u300d\u3068\u3044\u3046\u540d\u524d\u3092\u805e\u304f\u3068\u96e3\u3057\u305d\u3046\u306b\u611f\u3058\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u3067\u3082\u3001\u5b9f\u306f\u79c1\u305f\u3061\u306e\u65e5\u5e38\u306b\u3082\u3042\u308b\u3093\u3067\u3059\u3002</p> <p>\u4f8b\u3048\u3070\u3001\u300c\u3084\u308b\u3053\u3068\u30ea\u30b9\u30c8\u300d\u30a2\u30d7\u30ea\u3092\u8003\u3048\u3066\u304f\u3060\u3055\u3044\u3002\u300c\u5b8c\u4e86\u3057\u305f\u30bf\u30b9\u30af\u3060\u3051\u8868\u793a\u300d\u300c\u91cd\u8981\u306a\u30bf\u30b9\u30af\u3092\u8d64\u8272\u3067\u8868\u793a\u300d\u306a\u3069\u3001\u8868\u793a\u65b9\u6cd5\u3092\u5207\u308a\u66ff\u3048\u3089\u308c\u307e\u3059\u3088\u306d\u3002\u3053\u308c\u306f\u300c\u3069\u3046\u51e6\u7406\u3059\u308b\u304b\u300d\u3092\u6307\u5b9a\u3067\u304d\u308b\u3001\u9ad8\u968e\u95a2\u6570\u306e\u8003\u3048\u65b9\u305d\u306e\u3082\u306e\u3067\u3059\uff01</p>"},{"location":"part4/chapter18/#_2","title":"\u9ad8\u968e\u95a2\u6570\u3063\u3066\u4f55\u3060\u308d\u3046\uff1f","text":""},{"location":"part4/chapter18/#_3","title":"\u95a2\u6570\u3092\u53d7\u3051\u53d6\u308b\u95a2\u6570","text":"<pre><code>// FunctionAsArgument.scala\n@main def functionAsArgument(): Unit = {\n  // \u9ad8\u968e\u95a2\u6570\uff1a\u95a2\u6570\u3092\u5f15\u6570\u306b\u53d6\u308b\n  def doTwice(action: () =&gt; Unit): Unit = {\n    action()\n    action()\n  }\n\n  // \u4f7f\u3063\u3066\u307f\u308b\n  doTwice(() =&gt; println(\"Hello!\"))\n\n  // \u3082\u3063\u3068\u5b9f\u7528\u7684\u306a\u4f8b\n  def measureTime(action: () =&gt; Unit): Long = {\n    val start = System.currentTimeMillis()\n    action()\n    val end = System.currentTimeMillis()\n    end - start\n  }\n\n  val time = measureTime(() =&gt; {\n    Thread.sleep(100)  // 100\u30df\u30ea\u79d2\u5f85\u3064\n    println(\"\u51e6\u7406\u5b8c\u4e86\")\n  })\n\n  println(s\"\u5b9f\u884c\u6642\u9593: ${time}\u30df\u30ea\u79d2\")\n}\n</code></pre>"},{"location":"part4/chapter18/#_4","title":"\u95a2\u6570\u3092\u8fd4\u3059\u95a2\u6570","text":"<pre><code>// FunctionReturningFunction.scala\n@main def functionReturningFunction(): Unit = {\n  // \u95a2\u6570\u3092\u8fd4\u3059\u95a2\u6570\n  def createGreeter(greeting: String): String =&gt; String =\n    (name: String) =&gt; s\"$greeting, $name!\"\n\n  val morningGreeter = createGreeter(\"\u304a\u306f\u3088\u3046\")\n  val eveningGreeter = createGreeter(\"\u3053\u3093\u3070\u3093\u306f\")\n\n  println(morningGreeter(\"\u592a\u90ce\"))\n  println(eveningGreeter(\"\u82b1\u5b50\"))\n\n  // \u8a08\u7b97\u95a2\u6570\u3092\u4f5c\u308b\u95a2\u6570\n  def createCalculator(operation: String): (Int, Int) =&gt; Int =\n    operation match {\n      case \"+\" =&gt; (a, b) =&gt; a + b\n      case \"-\" =&gt; (a, b) =&gt; a - b\n      case \"*\" =&gt; (a, b) =&gt; a * b\n      case \"/\" =&gt; (a, b) =&gt; if (b != 0) a / b else 0\n      case _ =&gt; (a, b) =&gt; 0\n    }\n\n  val adder = createCalculator(\"+\")\n  val multiplier = createCalculator(\"*\")\n\n  println(s\"10 + 5 = ${adder(10, 5)}\")\n  println(s\"10 * 5 = ${multiplier(10, 5)}\")\n}\n</code></pre>"},{"location":"part4/chapter18/#_5","title":"\u3088\u304f\u4f7f\u3046\u9ad8\u968e\u95a2\u6570","text":""},{"location":"part4/chapter18/#map","title":"map\uff1a\u5909\u63db\u3059\u308b","text":"<pre><code>// MapFunction.scala\n@main def mapFunction(): Unit = {\n  val numbers = List(1, 2, 3, 4, 5)\n\n  // \u5404\u8981\u7d20\u30922\u500d\u306b\u3059\u308b\n  val doubled = numbers.map(x =&gt; x * 2)\n  println(s\"2\u500d: $doubled\")\n\n  // \u6587\u5b57\u5217\u306b\u5909\u63db\n  val strings = numbers.map(x =&gt; s\"\u6570\u5024$x\")\n  println(s\"\u6587\u5b57\u5217\u5316: $strings\")\n\n  // \u5b9f\u7528\u4f8b\uff1a\u5546\u54c1\u306e\u4fa1\u683c\u3092\u7a0e\u8fbc\u307f\u306b\n  case class Product(name: String, price: Int)\n\n  val products = List(\n    Product(\"\u30da\u30f3\", 100),\n    Product(\"\u30ce\u30fc\u30c8\", 200),\n    Product(\"\u6d88\u3057\u30b4\u30e0\", 50)\n  )\n\n  val withTax = products.map(p =&gt; \n    p.copy(price = (p.price * 1.1).toInt)\n  )\n\n  withTax.foreach(p =&gt; \n    println(s\"${p.name}: ${p.price}\u5186\uff08\u7a0e\u8fbc\uff09\")\n  )\n}\n</code></pre>"},{"location":"part4/chapter18/#filter","title":"filter\uff1a\u9078\u5225\u3059\u308b","text":"<pre><code>// FilterFunction.scala\n@main def filterFunction(): Unit = {\n  val numbers = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\n  // \u5076\u6570\u3060\u3051\u9078\u3076\n  val evens = numbers.filter(x =&gt; x % 2 == 0)\n  println(s\"\u5076\u6570: $evens\")\n\n  // 5\u3088\u308a\u5927\u304d\u3044\u6570\n  val largeNumbers = numbers.filter(_ &gt; 5)\n  println(s\"5\u3088\u308a\u5927: $largeNumbers\")\n\n  // \u5b9f\u7528\u4f8b\uff1a\u5408\u683c\u8005\u306e\u9078\u5225\n  case class Student(name: String, score: Int)\n\n  val students = List(\n    Student(\"\u592a\u90ce\", 85),\n    Student(\"\u82b1\u5b50\", 92),\n    Student(\"\u6b21\u90ce\", 68),\n    Student(\"\u685c\", 78)\n  )\n\n  val passed = students.filter(_.score &gt;= 80)\n\n  println(\"\u5408\u683c\u8005:\")\n  passed.foreach(s =&gt; println(s\"  ${s.name}: ${s.score}\u70b9\"))\n}\n</code></pre>"},{"location":"part4/chapter18/#reducefold","title":"reduce/fold\uff1a\u96c6\u7d04\u3059\u308b","text":"<pre><code>// ReduceFoldFunction.scala\n@main def reduceFoldFunction(): Unit = {\n  val numbers = List(1, 2, 3, 4, 5)\n\n  // reduce\uff1a\u8981\u7d20\u30921\u3064\u306b\u96c6\u7d04\n  val sum = numbers.reduce((a, b) =&gt; a + b)\n  val product = numbers.reduce(_ * _)\n\n  println(s\"\u5408\u8a08: $sum\")\n  println(s\"\u7a4d: $product\")\n\n  // fold\uff1a\u521d\u671f\u5024\u3092\u6307\u5b9a\u3057\u3066\u96c6\u7d04\n  val sumWithInit = numbers.fold(100)(_ + _)  // 100\u304b\u3089\u59cb\u3081\u308b\n  println(s\"100 + \u5408\u8a08: $sumWithInit\")\n\n  // \u6587\u5b57\u5217\u306e\u9023\u7d50\n  val words = List(\"Scala\", \"is\", \"awesome\")\n  val sentence = words.fold(\"\")((acc, word) =&gt; \n    if (acc.isEmpty) word else s\"$acc $word\"\n  )\n  println(s\"\u6587\u7ae0: $sentence\")\n\n  // \u5b9f\u7528\u4f8b\uff1a\u8cb7\u3044\u7269\u30ab\u30fc\u30c8\u306e\u5408\u8a08\n  case class Item(name: String, price: Int, quantity: Int)\n\n  val cart = List(\n    Item(\"\u308a\u3093\u3054\", 100, 3),\n    Item(\"\u30d0\u30ca\u30ca\", 80, 5),\n    Item(\"\u30aa\u30ec\u30f3\u30b8\", 120, 2)\n  )\n\n  val total = cart.map(item =&gt; item.price * item.quantity).sum\n  println(f\"\u5408\u8a08\u91d1\u984d: $total%,d\u5186\")\n}\n</code></pre>"},{"location":"part4/chapter18/#_6","title":"\u95a2\u6570\u306e\u7d44\u307f\u5408\u308f\u305b","text":""},{"location":"part4/chapter18/#_7","title":"\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3","text":"<pre><code>// MethodChaining.scala\n@main def methodChaining(): Unit = {\n  val numbers = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\n  // \u8907\u6570\u306e\u64cd\u4f5c\u3092\u9023\u9396\n  val result = numbers\n    .filter(_ % 2 == 0)      // \u5076\u6570\u306e\u307f\n    .map(_ * 3)              // 3\u500d\n    .filter(_ &gt; 10)          // 10\u3088\u308a\u5927\n    .sorted                  // \u30bd\u30fc\u30c8\n\n  println(s\"\u7d50\u679c: $result\")\n\n  // \u5b9f\u7528\u4f8b\uff1a\u30c7\u30fc\u30bf\u51e6\u7406\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\n  case class Sale(product: String, amount: Int, date: String)\n\n  val sales = List(\n    Sale(\"\u5546\u54c1A\", 1000, \"2024-01-01\"),\n    Sale(\"\u5546\u54c1B\", 2000, \"2024-01-01\"),\n    Sale(\"\u5546\u54c1A\", 1500, \"2024-01-02\"),\n    Sale(\"\u5546\u54c1C\", 3000, \"2024-01-02\"),\n    Sale(\"\u5546\u54c1A\", 2500, \"2024-01-03\")\n  )\n\n  // \u5546\u54c1A\u306e\u58f2\u4e0a\u3092\u96c6\u8a08\n  val productASales = sales\n    .filter(_.product == \"\u5546\u54c1A\")\n    .map(_.amount)\n    .sum\n\n  println(s\"\u5546\u54c1A\u306e\u7dcf\u58f2\u4e0a: ${productASales}\u5186\")\n\n  // \u65e5\u4ed8\u3054\u3068\u306e\u58f2\u4e0aTOP\u5546\u54c1\n  val topByDate = sales\n    .groupBy(_.date)\n    .view.mapValues(_.maxBy(_.amount))\n    .toMap\n\n  topByDate.foreach { case (date, sale) =&gt;\n    println(s\"$date \u306e\u6700\u9ad8\u58f2\u4e0a: ${sale.product} (${sale.amount}\u5186)\")\n  }\n}\n</code></pre>"},{"location":"part4/chapter18/#_8","title":"\u95a2\u6570\u5408\u6210","text":"<pre><code>// FunctionComposition.scala\n@main def functionComposition(): Unit = {\n  // \u95a2\u6570\u3092\u5b9a\u7fa9\n  val double = (x: Int) =&gt; x * 2\n  val addTen = (x: Int) =&gt; x + 10\n  val square = (x: Int) =&gt; x * x\n\n  // andThen\u3067\u9806\u6b21\u5b9f\u884c\n  val doubleThenAdd = double.andThen(addTen)\n  println(s\"5\u30922\u500d\u3057\u306610\u8db3\u3059: ${doubleThenAdd(5)}\")  // 20\n\n  // compose\u3067\u9006\u9806\u5b9f\u884c\n  val addThenDouble = double.compose(addTen)\n  println(s\"5\u306b10\u8db3\u3057\u30662\u500d: ${addThenDouble(5)}\")  // 30\n\n  // 3\u3064\u4ee5\u4e0a\u306e\u95a2\u6570\u3092\u7d44\u307f\u5408\u308f\u305b\n  val combined = double\n    .andThen(addTen)\n    .andThen(square)\n\n  println(s\"5\u3092\u51e6\u7406: ${combined(5)}\")  // 400\n\n  // \u5b9f\u7528\u4f8b\uff1a\u30c7\u30fc\u30bf\u5909\u63db\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\n  val trimSpace = (s: String) =&gt; s.trim\n  val toLowerCase = (s: String) =&gt; s.toLowerCase\n  val removeSpecial = (s: String) =&gt; s.replaceAll(\"[^a-z0-9]\", \"\")\n\n  val normalize = trimSpace\n    .andThen(toLowerCase)\n    .andThen(removeSpecial)\n\n  val inputs = List(\n    \"  Hello World!  \",\n    \"Scala-Programming\",\n    \"123 ABC xyz\"\n  )\n\n  inputs.foreach { input =&gt;\n    println(s\"'$input' \u2192 '${normalize(input)}'\")\n  }\n}\n</code></pre>"},{"location":"part4/chapter18/#_9","title":"\u5b9f\u8df5\u7684\u306a\u9ad8\u968e\u95a2\u6570","text":""},{"location":"part4/chapter18/#_10","title":"\u30ab\u30b9\u30bf\u30e0\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u64cd\u4f5c","text":"<pre><code>// CustomCollectionOps.scala\n@main def customCollectionOps(): Unit = {\n  // takeWhile: \u6761\u4ef6\u3092\u6e80\u305f\u3059\u9593\u3060\u3051\u53d6\u308b\n  def takeWhileCustom[A](list: List[A], p: A =&gt; Boolean): List[A] =\n    list match {\n      case Nil =&gt; Nil\n      case head :: tail =&gt;\n        if (p(head)) head :: takeWhileCustom(tail, p)\n        else Nil\n    }\n\n  val numbers = List(1, 2, 3, 4, 5, 1, 2, 3)\n  val result = takeWhileCustom(numbers, _ &lt; 4)\n  println(s\"4\u672a\u6e80\u306e\u8981\u7d20: $result\")\n\n  // groupBy: \u8981\u7d20\u3092\u30b0\u30eb\u30fc\u30d7\u5316\n  case class Person(name: String, age: Int, city: String)\n\n  val people = List(\n    Person(\"\u592a\u90ce\", 25, \"\u6771\u4eac\"),\n    Person(\"\u82b1\u5b50\", 30, \"\u5927\u962a\"),\n    Person(\"\u6b21\u90ce\", 28, \"\u6771\u4eac\"),\n    Person(\"\u685c\", 35, \"\u5927\u962a\")\n  )\n\n  val byCity = people.groupBy(_.city)\n  byCity.foreach { case (city, persons) =&gt;\n    println(s\"$city: ${persons.map(_.name).mkString(\", \")}\")\n  }\n\n  // partition: 2\u3064\u306b\u5206\u5272\n  val (adults, young) = people.partition(_.age &gt;= 30)\n  println(s\"30\u6b73\u4ee5\u4e0a: ${adults.map(_.name)}\")\n  println(s\"30\u6b73\u672a\u6e80: ${young.map(_.name)}\")\n}\n</code></pre>"},{"location":"part4/chapter18/#_11","title":"\u30ea\u30c8\u30e9\u30a4\u6a5f\u69cb","text":"<pre><code>// RetryMechanism.scala\n@main def retryMechanism(): Unit = {\n  import scala.util.{Try, Success, Failure}\n  import scala.util.Random\n\n  // \u30ea\u30c8\u30e9\u30a4\u6a5f\u80fd\u3092\u6301\u3064\u9ad8\u968e\u95a2\u6570\n  def retry[T](times: Int)(action: () =&gt; T): Try[T] = {\n    var lastError: Option[Throwable] = None\n\n    for (i &lt;- 1 to times) {\n      Try(action()) match {\n        case Success(value) =&gt;\n          println(s\"\u6210\u529f\uff01\uff08${i}\u56de\u76ee\uff09\")\n          return Success(value)\n        case Failure(e) =&gt;\n          lastError = Some(e)\n          println(s\"\u5931\u6557\uff08${i}\u56de\u76ee\uff09: ${e.getMessage}\")\n      }\n    }\n\n    Failure(lastError.getOrElse(new Exception(\"Unknown error\")))\n  }\n\n  // \u4e0d\u5b89\u5b9a\u306a\u51e6\u7406\uff0850%\u306e\u78ba\u7387\u3067\u5931\u6557\uff09\n  def unstableOperation(): String = {\n    if (Random.nextBoolean()) \"\u6210\u529f\u30c7\u30fc\u30bf\"\n    else throw new Exception(\"\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a8\u30e9\u30fc\")\n  }\n\n  // 3\u56de\u307e\u3067\u30ea\u30c8\u30e9\u30a4\n  retry(3)(() =&gt; unstableOperation()) match {\n    case Success(data) =&gt; println(s\"\u6700\u7d42\u7d50\u679c: $data\")\n    case Failure(e) =&gt; println(s\"\u3059\u3079\u3066\u5931\u6557: ${e.getMessage}\")\n  }\n}\n</code></pre>"},{"location":"part4/chapter18/#_12","title":"\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u30fc","text":"<pre><code>// EventHandler.scala\n@main def eventHandler(): Unit = {\n  // \u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u30fc\u30b7\u30b9\u30c6\u30e0\n  class EventSystem {\n    private var handlers = Map[String, List[() =&gt; Unit]]()\n\n    def on(event: String)(handler: () =&gt; Unit): Unit = {\n      handlers = handlers.updatedWith(event) {\n        case Some(list) =&gt; Some(handler :: list)\n        case None =&gt; Some(List(handler))\n      }\n    }\n\n    def trigger(event: String): Unit = {\n      handlers.get(event).foreach { handlerList =&gt;\n        handlerList.foreach(handler =&gt; handler())\n      }\n    }\n  }\n\n  val events = new EventSystem\n\n  // \u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u30fc\u3092\u767b\u9332\n  events.on(\"login\") { () =&gt;\n    println(\"\u30ed\u30b0\u30a4\u30f3\u3057\u307e\u3057\u305f\")\n  }\n\n  events.on(\"login\") { () =&gt;\n    println(\"\u6700\u7d42\u30ed\u30b0\u30a4\u30f3\u6642\u523b\u3092\u66f4\u65b0\")\n  }\n\n  events.on(\"logout\") { () =&gt;\n    println(\"\u30ed\u30b0\u30a2\u30a6\u30c8\u3057\u307e\u3057\u305f\")\n  }\n\n  // \u30a4\u30d9\u30f3\u30c8\u3092\u767a\u706b\n  println(\"=== \u30ed\u30b0\u30a4\u30f3\u30a4\u30d9\u30f3\u30c8 ===\")\n  events.trigger(\"login\")\n\n  println(\"\\n=== \u30ed\u30b0\u30a2\u30a6\u30c8\u30a4\u30d9\u30f3\u30c8 ===\")\n  events.trigger(\"logout\")\n}\n</code></pre>"},{"location":"part4/chapter18/#_13","title":"\u9ad8\u968e\u95a2\u6570\u3092\u4f7f\u3063\u305f\u554f\u984c\u89e3\u6c7a","text":""},{"location":"part4/chapter18/#_14","title":"\u30c7\u30fc\u30bf\u691c\u8a3c\u30b7\u30b9\u30c6\u30e0","text":"<pre><code>// ValidationSystem.scala\n@main def validationSystem(): Unit = {\n  type Validator[T] = T =&gt; Either[String, T]\n\n  // \u30d0\u30ea\u30c7\u30fc\u30bf\u30fc\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u9ad8\u968e\u95a2\u6570\n  def combine[T](validators: Validator[T]*): Validator[T] =\n    (value: T) =&gt;\n      validators.foldLeft[Either[String, T]](Right(value)) {\n        case (Right(v), validator) =&gt; validator(v)\n        case (error, _) =&gt; error\n      }\n\n  // \u500b\u5225\u306e\u30d0\u30ea\u30c7\u30fc\u30bf\u30fc\n  val notEmpty: Validator[String] = s =&gt;\n    if (s.trim.nonEmpty) Right(s)\n    else Left(\"\u7a7a\u6587\u5b57\u306f\u8a31\u53ef\u3055\u308c\u307e\u305b\u3093\")\n\n  val minLength: Int =&gt; Validator[String] = min =&gt; s =&gt;\n    if (s.length &gt;= min) Right(s)\n    else Left(s\"${min}\u6587\u5b57\u4ee5\u4e0a\u5fc5\u8981\u3067\u3059\")\n\n  val maxLength: Int =&gt; Validator[String] = max =&gt; s =&gt;\n    if (s.length &lt;= max) Right(s)\n    else Left(s\"${max}\u6587\u5b57\u4ee5\u4e0b\u306b\u3057\u3066\u304f\u3060\u3055\u3044\")\n\n  val alphaNumeric: Validator[String] = s =&gt;\n    if (s.matches(\"^[a-zA-Z0-9]+$\")) Right(s)\n    else Left(\"\u82f1\u6570\u5b57\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\")\n\n  // \u30d0\u30ea\u30c7\u30fc\u30bf\u30fc\u3092\u7d44\u307f\u5408\u308f\u305b\n  val usernameValidator = combine(\n    notEmpty,\n    minLength(3),\n    maxLength(20),\n    alphaNumeric\n  )\n\n  // \u30c6\u30b9\u30c8\n  val testCases = List(\n    \"abc\",\n    \"ab\",\n    \"verylongusernamethatexceedslimit\",\n    \"user123\",\n    \"user-name\",\n    \"\"\n  )\n\n  testCases.foreach { username =&gt;\n    usernameValidator(username) match {\n      case Right(valid) =&gt; println(s\"\u2713 '$valid' \u306f\u6709\u52b9\u3067\u3059\")\n      case Left(error) =&gt; println(s\"\u2717 '$username': $error\")\n    }\n  }\n}\n</code></pre>"},{"location":"part4/chapter18/#_15","title":"\u7df4\u7fd2\u3057\u3066\u307f\u3088\u3046\uff01","text":""},{"location":"part4/chapter18/#1map","title":"\u7df4\u7fd21\uff1a\u72ec\u81ea\u306emap\u95a2\u6570","text":"<p>\u30ea\u30b9\u30c8\u3068\u3092\u53d7\u3051\u53d6\u3063\u3066\u3001\u5404\u8981\u7d20\u3092\u5909\u63db\u3059\u308b\u72ec\u81ea\u306emap\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u3066\u304f\u3060\u3055\u3044\u3002 \u518d\u5e30\u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p>"},{"location":"part4/chapter18/#2","title":"\u7df4\u7fd22\uff1a\u30d5\u30a3\u30eb\u30bf\u30fc\u30c1\u30a7\u30fc\u30f3","text":"<p>\u8907\u6570\u306e\u30d5\u30a3\u30eb\u30bf\u30fc\u95a2\u6570\u3092\u53d7\u3051\u53d6\u3063\u3066\u3001\u3059\u3079\u3066\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u8981\u7d20\u3060\u3051\u3092\u8fd4\u3059\u95a2\u6570\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"part4/chapter18/#3","title":"\u7df4\u7fd23\uff1a\u51e6\u7406\u6642\u9593\u8a08\u6e2c","text":"<p>\u4efb\u610f\u306e\u95a2\u6570\u306e\u5b9f\u884c\u6642\u9593\u3092\u8a08\u6e2c\u3057\u3001\u7d50\u679c\u3068\u5b9f\u884c\u6642\u9593\u306e\u4e21\u65b9\u3092\u8fd4\u3059\u9ad8\u968e\u95a2\u6570\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"part4/chapter18/#_16","title":"\u3053\u306e\u7ae0\u306e\u307e\u3068\u3081","text":"<p>\u9ad8\u968e\u95a2\u6570\u306e\u529b\u3092\u4f53\u9a13\u3067\u304d\u307e\u3057\u305f\u306d\uff01</p>"},{"location":"part4/chapter18/#_17","title":"\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3053\u3068","text":"<p>\u2705 \u9ad8\u968e\u95a2\u6570\u306e\u57fa\u672c - \u95a2\u6570\u3092\u5f15\u6570\u306b\u53d6\u308b - \u95a2\u6570\u3092\u8fd4\u3059 - \u95a2\u6570\u306e\u5408\u6210</p> <p>\u2705 \u6a19\u6e96\u7684\u306a\u9ad8\u968e\u95a2\u6570 - map\uff08\u5909\u63db\uff09 - filter\uff08\u9078\u5225\uff09 - reduce/fold\uff08\u96c6\u7d04\uff09</p> <p>\u2705 \u5b9f\u8df5\u7684\u306a\u4f7f\u3044\u65b9 - \u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3 - \u30ab\u30b9\u30bf\u30e0\u64cd\u4f5c - \u30a4\u30d9\u30f3\u30c8\u30b7\u30b9\u30c6\u30e0</p> <p>\u2705 \u554f\u984c\u89e3\u6c7a - \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3 - \u30ea\u30c8\u30e9\u30a4\u6a5f\u69cb - \u30c7\u30fc\u30bf\u51e6\u7406\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3</p>"},{"location":"part4/chapter18/#_18","title":"\u9ad8\u968e\u95a2\u6570\u3092\u4f7f\u3046\u30b3\u30c4","text":"<ol> <li> <p>\u5c0f\u3055\u304f\u59cb\u3081\u308b</p> <ul> <li>\u5358\u7d14\u306a\u95a2\u6570\u304b\u3089</li> <li>\u5f90\u3005\u306b\u7d44\u307f\u5408\u308f\u305b\u308b</li> <li>\u8aad\u307f\u3084\u3059\u3055\u3092\u91cd\u8996</li> </ul> </li> <li> <p>\u65e2\u5b58\u306e\u95a2\u6570\u3092\u6d3b\u7528</p> <ul> <li>map, filter, fold\u3092\u4f7f\u3044\u3053\u306a\u3059</li> <li>\u8eca\u8f2a\u306e\u518d\u767a\u660e\u3092\u907f\u3051\u308b</li> <li>\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u77e5\u308b</li> </ul> </li> <li> <p>\u95a2\u6570\u306e\u7d44\u307f\u5408\u308f\u305b</p> <ul> <li>\u5358\u4e00\u8cac\u4efb\u306e\u539f\u5247</li> <li>\u518d\u5229\u7528\u53ef\u80fd\u306a\u90e8\u54c1</li> <li>\u30c6\u30b9\u30c8\u3057\u3084\u3059\u3044\u8a2d\u8a08</li> </ul> </li> </ol>"},{"location":"part4/chapter18/#_19","title":"\u6b21\u306e\u7ae0\u3067\u306f...","text":"<p>Option\u3068Either\u3092\u4f7f\u3063\u305f\u3001\u3088\u308a\u5b89\u5168\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u624b\u6cd5\u3092\u5b66\u3073\u307e\u3059\u3002\u30a8\u30e9\u30fc\u3092\u30b9\u30de\u30fc\u30c8\u306b\u6271\u3046\u65b9\u6cd5\u3092\u8eab\u306b\u3064\u3051\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part4/chapter18/#_20","title":"\u6700\u5f8c\u306b","text":"<p>\u9ad8\u968e\u95a2\u6570\u306f\u300c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u9b54\u6cd5\u300d\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002\u95a2\u6570\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u3001\u8907\u96d1\u306a\u51e6\u7406\u3082\u7c21\u6f54\u306b\u8868\u73fe\u3067\u304d\u307e\u3059\u3002\u6700\u521d\u306f\u96e3\u3057\u304f\u611f\u3058\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u4f7f\u3044\u3053\u306a\u305b\u308b\u3088\u3046\u306b\u306a\u308b\u3068\u3001\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u65b0\u3057\u3044\u4e16\u754c\u304c\u958b\u3051\u307e\u3059\u3002\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u918d\u9190\u5473\u3092\u5473\u308f\u3063\u3066\u304f\u3060\u3055\u3044\uff01</p>"},{"location":"part4/chapter19/","title":"\u7b2c19\u7ae0 Option\u3068Either\u3067\u5b89\u5168\u306b","text":""},{"location":"part4/chapter19/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u3088\u304f\u3042\u308b\u554f\u984c\uff1a\u300c\u3053\u306e\u5024\u3001\u3042\u308b\u304b\u306a\u3044\u304b\u5206\u304b\u3089\u306a\u3044\u300d\u300c\u30a8\u30e9\u30fc\u304c\u8d77\u304d\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u300d</p> <p>\u4f8b\u3048\u3070\u3001\u8f9e\u66f8\u3067\u5358\u8a9e\u3092\u8abf\u3079\u305f\u3068\u304d\u3001\u305d\u306e\u5358\u8a9e\u304c\u8f09\u3063\u3066\u3044\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u5272\u308a\u7b97\u3092\u3059\u308b\u3068\u304d\u3001\u30bc\u30ed\u3067\u5272\u3063\u3066\u3057\u307e\u3046\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002</p> <p>Scala\u306b\u306f\u3001\u3053\u3046\u3057\u305f\u300c\u4e0d\u78ba\u5b9f\u6027\u300d\u3092\u5b89\u5168\u306b\u6271\u3046\u305f\u3081\u306e\u7d20\u6674\u3089\u3057\u3044\u4ed5\u7d44\u307f\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u308c\u304c<code>Option</code>\u3068<code>Either</code>\u3067\u3059\uff01</p>"},{"location":"part4/chapter19/#option","title":"Option\uff1a\u5024\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044","text":""},{"location":"part4/chapter19/#option_1","title":"Option\u306e\u57fa\u672c","text":"<pre><code>// OptionBasics.scala\n@main def optionBasics(): Unit = {\n  // Option\u306f\u300c\u5024\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u300d\u3092\u8868\u3059\n  val some: Option[Int] = Some(42)      // \u5024\u304c\u3042\u308b\n  val none: Option[Int] = None          // \u5024\u304c\u306a\u3044\n\n  println(s\"\u5024\u3042\u308a: $some\")\n  println(s\"\u5024\u306a\u3057: $none\")\n\n  // \u5b9f\u7528\u4f8b\uff1a\u8f9e\u66f8\u691c\u7d22\n  val dictionary = Map(\n    \"apple\" -&gt; \"\u308a\u3093\u3054\",\n    \"banana\" -&gt; \"\u30d0\u30ca\u30ca\",\n    \"orange\" -&gt; \"\u30aa\u30ec\u30f3\u30b8\"\n  )\n\n  val result1 = dictionary.get(\"apple\")    // Some(\"\u308a\u3093\u3054\")\n  val result2 = dictionary.get(\"grape\")    // None\n\n  println(s\"apple\u306e\u610f\u5473: $result1\")\n  println(s\"grape\u306e\u610f\u5473: $result2\")\n\n  // \u5b89\u5168\u306b\u5024\u3092\u53d6\u308a\u51fa\u3059\n  result1 match {\n    case Some(meaning) =&gt; println(s\"\u898b\u3064\u304b\u3063\u305f: $meaning\")\n    case None =&gt; println(\"\u898b\u3064\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\")\n  }\n}\n</code></pre>"},{"location":"part4/chapter19/#option_2","title":"Option\u306e\u4fbf\u5229\u306a\u30e1\u30bd\u30c3\u30c9","text":"<pre><code>// OptionMethods.scala\n@main def optionMethods(): Unit = {\n  val someValue: Option[Int] = Some(10)\n  val noneValue: Option[Int] = None\n\n  // getOrElse\uff1a\u5024\u304c\u306a\u3051\u308c\u3070\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\n  println(s\"\u5024\u3042\u308a: ${someValue.getOrElse(0)}\")\n  println(s\"\u5024\u306a\u3057: ${noneValue.getOrElse(0)}\")\n\n  // map\uff1a\u5024\u304c\u3042\u308c\u3070\u5909\u63db\n  val doubled = someValue.map(_ * 2)\n  println(s\"2\u500d: $doubled\")\n\n  // filter\uff1a\u6761\u4ef6\u3092\u6e80\u305f\u3055\u306a\u3051\u308c\u3070None\n  val filtered = someValue.filter(_ &gt; 5)\n  println(s\"5\u3088\u308a\u5927: $filtered\")\n\n  // flatMap\uff1aOption\u3092\u8fd4\u3059\u95a2\u6570\u3068\u7d44\u307f\u5408\u308f\u305b\n  def half(n: Int): Option[Int] =\n    if (n % 2 == 0) Some(n / 2)\n    else None\n\n  val result = someValue.flatMap(half)\n  println(s\"\u534a\u5206: $result\")\n\n  // \u8907\u6570\u306eOption\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\n  val opt1 = Some(10)\n  val opt2 = Some(20)\n  val opt3: Option[Int] = None\n\n  val sum = for {\n    a &lt;- opt1\n    b &lt;- opt2\n    c &lt;- opt3\n  } yield a + b + c\n\n  println(s\"\u5408\u8a08: $sum\")  // None\uff081\u3064\u3067\u3082None\u304c\u3042\u308c\u3070\u7d50\u679c\u3082None\uff09\n}\n</code></pre>"},{"location":"part4/chapter19/#_2","title":"\u5b9f\u8df5\u7684\u306a\u4f7f\u3044\u65b9","text":"<pre><code>// PracticalOption.scala\n@main def practicalOption(): Unit =\n  // \u30e6\u30fc\u30b6\u30fc\u691c\u7d22\u30b7\u30b9\u30c6\u30e0\n  case class User(id: Int, name: String, email: Option[String])\n\n  val users = List(\n    User(1, \"\u592a\u90ce\", Some(\"taro@example.com\")),\n    User(2, \"\u82b1\u5b50\", None),  // \u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u672a\u767b\u9332\n    User(3, \"\u6b21\u90ce\", Some(\"jiro@example.com\"))\n  )\n\n  def findUserById(id: Int): Option[User] =\n    users.find(_.id == id)\n\n  def sendEmail(userId: Int, message: String): String =\n    findUserById(userId) match {\n      case Some(user) =&gt;\n        user.email match {\n          case Some(email) =&gt;\n            s\"${user.name}\u3055\u3093($email)\u306b\u30e1\u30fc\u30eb\u3092\u9001\u4fe1: $message\"\n          case None =&gt;\n            s\"${user.name}\u3055\u3093\u306f\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u304c\u672a\u767b\u9332\u3067\u3059\"\n        }\n      case None =&gt;\n        \"\u30e6\u30fc\u30b6\u30fc\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\"\n    }\n\n  println(sendEmail(1, \"\u304a\u77e5\u3089\u305b\"))\n  println(sendEmail(2, \"\u304a\u77e5\u3089\u305b\"))\n  println(sendEmail(99, \"\u304a\u77e5\u3089\u305b\"))\n\n  // \u3088\u308a\u7c21\u6f54\u306b\u66f8\u304f\u65b9\u6cd5\n  def sendEmailV2(userId: Int, message: String): String =\n    (for {\n      user &lt;- findUserById(userId)\n      email &lt;- user.email\n    } yield s\"${user.name}\u3055\u3093($email)\u306b\u30e1\u30fc\u30eb\u3092\u9001\u4fe1: $message\")\n      .getOrElse(\"\u9001\u4fe1\u3067\u304d\u307e\u305b\u3093\uff08\u30e6\u30fc\u30b6\u30fc\u4e0d\u5728\u307e\u305f\u306f\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u672a\u767b\u9332\uff09\")\n\n  println(\"\\n=== \u7c21\u6f54\u7248 ===\")\n  println(sendEmailV2(1, \"\u304a\u77e5\u3089\u305b\"))\n  println(sendEmailV2(2, \"\u304a\u77e5\u3089\u305b\"))\n}\n</code></pre>"},{"location":"part4/chapter19/#either","title":"Either\uff1a\u6210\u529f\u304b\u5931\u6557\u304b","text":""},{"location":"part4/chapter19/#either_1","title":"Either\u306e\u57fa\u672c","text":"<pre><code>// EitherBasics.scala\n@main def eitherBasics(): Unit = {\n  // Either\u306f\u300c\u6210\u529f(Right)\u304b\u5931\u6557(Left)\u304b\u300d\u3092\u8868\u3059\n  val success: Either[String, Int] = Right(42)\n  val failure: Either[String, Int] = Left(\"\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\")\n\n  println(s\"\u6210\u529f: $success\")\n  println(s\"\u5931\u6557: $failure\")\n\n  // \u5b9f\u7528\u4f8b\uff1a\u5272\u308a\u7b97\n  def divide(a: Int, b: Int): Either[String, Double] =\n    if (b == 0) Left(\"\u30bc\u30ed\u3067\u5272\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\")\n    else Right(a.toDouble / b)\n\n  println(divide(10, 2))\n  println(divide(10, 0))\n\n  // \u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u3067\u51e6\u7406\n  divide(20, 4) match {\n    case Right(result) =&gt; println(s\"\u7d50\u679c: $result\")\n    case Left(error) =&gt; println(s\"\u30a8\u30e9\u30fc: $error\")\n  }\n}\n</code></pre>"},{"location":"part4/chapter19/#either_2","title":"Either\u306e\u4fbf\u5229\u306a\u64cd\u4f5c","text":"<pre><code>// EitherOperations.scala\n@main def eitherOperations(): Unit = {\n  // \u5e74\u9f62\u691c\u8a3c\n  def validateAge(age: Int): Either[String, Int] =\n    if (age &lt; 0) Left(\"\u5e74\u9f62\u306f\u8ca0\u306e\u6570\u306b\u3067\u304d\u307e\u305b\u3093\")\n    else if (age &gt; 150) Left(\"\u5e74\u9f62\u304c\u5927\u304d\u3059\u304e\u307e\u3059\")\n    else Right(age)\n\n  // \u540d\u524d\u691c\u8a3c\n  def validateName(name: String): Either[String, String] =\n    if (name.trim.isEmpty) Left(\"\u540d\u524d\u304c\u7a7a\u3067\u3059\")\n    else if (name.length &gt; 50) Left(\"\u540d\u524d\u304c\u9577\u3059\u304e\u307e\u3059\")\n    else Right(name.trim)\n\n  // \u8907\u6570\u306e\u691c\u8a3c\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\n  def createUser(name: String, age: Int): Either[String, String] =\n    for {\n      validName &lt;- validateName(name)\n      validAge &lt;- validateAge(age)\n    } yield s\"\u30e6\u30fc\u30b6\u30fc\u4f5c\u6210: $validName\uff08$validAge\u6b73\uff09\"\n\n  println(createUser(\"\u592a\u90ce\", 25))\n  println(createUser(\"\", 25))\n  println(createUser(\"\u82b1\u5b50\", -5))\n\n  // map, flatMap\u3082\u4f7f\u3048\u308b\n  val result = validateAge(30)\n    .map(_ * 2)\n    .flatMap(validateAge)\n\n  println(s\"30\u6b73\u30922\u500d\u3057\u3066\u691c\u8a3c: $result\")\n}\n</code></pre>"},{"location":"part4/chapter19/#optioneither","title":"Option\u3068Either\u306e\u5909\u63db","text":"<pre><code>// OptionEitherConversion.scala\n@main def optionEitherConversion(): Unit = {\n  // Option \u2192 Either\n  val opt1: Option[Int] = Some(42)\n  val opt2: Option[Int] = None\n\n  val either1 = opt1.toRight(\"\u5024\u304c\u3042\u308a\u307e\u305b\u3093\")\n  val either2 = opt2.toRight(\"\u5024\u304c\u3042\u308a\u307e\u305b\u3093\")\n\n  println(s\"Some \u2192 Either: $either1\")\n  println(s\"None \u2192 Either: $either2\")\n\n  // Either \u2192 Option\n  val right: Either[String, Int] = Right(100)\n  val left: Either[String, Int] = Left(\"\u30a8\u30e9\u30fc\")\n\n  println(s\"Right \u2192 Option: ${right.toOption}\")\n  println(s\"Left \u2192 Option: ${left.toOption}\")\n\n  // \u5b9f\u7528\u4f8b\uff1a\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\n  def loadConfig(key: String): Option[String] =\n    Map(\n      \"host\" -&gt; \"localhost\",\n      \"port\" -&gt; \"8080\"\n    ).get(key)\n\n  def parsePort(portStr: String): Either[String, Int] =\n    try Right(portStr.toInt)\n    catch \n      case _: NumberFormatException =&gt; \n        Left(s\"'$portStr'\u306f\u6709\u52b9\u306a\u30dd\u30fc\u30c8\u756a\u53f7\u3067\u306f\u3042\u308a\u307e\u305b\u3093\")\n\n  def getPort(): Either[String, Int] =\n    loadConfig(\"port\")\n      .toRight(\"\u30dd\u30fc\u30c8\u8a2d\u5b9a\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\")\n      .flatMap(parsePort)\n\n  println(s\"\u30dd\u30fc\u30c8\u53d6\u5f97: ${getPort()}\")\n}\n</code></pre>"},{"location":"part4/chapter19/#_3","title":"\u5b9f\u8df5\u4f8b\uff1a\u30d5\u30a9\u30fc\u30e0\u691c\u8a3c","text":"<pre><code>// FormValidation.scala\n@main def formValidation(): Unit = {\n  case class RegistrationForm(\n    username: String,\n    email: String,\n    password: String,\n    age: String\n  )\n\n  // \u500b\u5225\u306e\u691c\u8a3c\u95a2\u6570\n  def validateUsername(username: String): Either[String, String] = {\n    if (username.length &lt; 3) {\n      Left(\"\u30e6\u30fc\u30b6\u30fc\u540d\u306f3\u6587\u5b57\u4ee5\u4e0a\u5fc5\u8981\u3067\u3059\")\n    } else if (!username.matches(\"^[a-zA-Z0-9]+$\")) {\n      Left(\"\u30e6\u30fc\u30b6\u30fc\u540d\u306f\u82f1\u6570\u5b57\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\")\n    } else {\n      Right(username)\n    }\n  }\n\n  def validateEmail(email: String): Either[String, String] = {\n    if (!email.contains(\"@\")) {\n      Left(\"\u6709\u52b9\u306a\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3067\u306f\u3042\u308a\u307e\u305b\u3093\")\n    } else {\n      Right(email)\n    }\n  }\n\n  def validatePassword(password: String): Either[String, String] = {\n    if (password.length &lt; 8) {\n      Left(\"\u30d1\u30b9\u30ef\u30fc\u30c9\u306f8\u6587\u5b57\u4ee5\u4e0a\u5fc5\u8981\u3067\u3059\")\n    } else if (!password.exists(_.isDigit)) {\n      Left(\"\u30d1\u30b9\u30ef\u30fc\u30c9\u306b\u306f\u6570\u5b57\u3092\u542b\u3081\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\")\n    } else {\n      Right(password)\n    }\n  }\n\n  def validateAge(ageStr: String): Either[String, Int] = {\n    try {\n      val age = ageStr.toInt\n      if (age &lt; 13) Left(\"13\u6b73\u4ee5\u4e0a\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\")\n      else if (age &gt; 120) Left(\"\u5e74\u9f62\u304c\u4e0d\u6b63\u3067\u3059\")\n      else Right(age)\n    } catch {\n      case _: NumberFormatException =&gt;\n        Left(\"\u5e74\u9f62\u306f\u6570\u5024\u3067\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\")\n    }\n  }\n\n  // \u3059\u3079\u3066\u306e\u691c\u8a3c\u3092\u5b9f\u884c\n  def validateForm(form: RegistrationForm): Either[List[String], String] =\n    val validations = List(\n      validateUsername(form.username),\n      validateEmail(form.email),\n      validatePassword(form.password),\n      validateAge(form.age).map(_.toString)\n    )\n\n    val errors = validations.collect {\n      case Left(error) =&gt; error\n    }\n\n    if (errors.isEmpty) {\n      Right(s\"\u767b\u9332\u6210\u529f: ${form.username}\")\n    } else {\n      Left(errors)\n    }\n\n  // \u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\n  val forms = List(\n    RegistrationForm(\"user123\", \"user@example.com\", \"pass1234\", \"25\"),\n    RegistrationForm(\"ab\", \"invalid-email\", \"short\", \"abc\"),\n    RegistrationForm(\"validuser\", \"valid@email.com\", \"weak\", \"10\")\n  )\n\n  forms.zipWithIndex.foreach { case (form, index) =&gt;\n    println(s\"\\n=== \u30d5\u30a9\u30fc\u30e0${index + 1} ===\")\n    validateForm(form) match {\n      case Right(message) =&gt; println(s\"\u2713 $message\")\n      case Left(errors) =&gt;\n        println(\"\u2717 \u30a8\u30e9\u30fc:\")\n        errors.foreach(e =&gt; println(s\"  - $e\"))\n    }\n  }\n}\n</code></pre>"},{"location":"part4/chapter19/#try","title":"Try\uff1a\u4f8b\u5916\u3092\u5b89\u5168\u306b\u6271\u3046","text":"<pre><code>// TryExample.scala\n@main def tryExample(): Unit = {\n  import scala.util.{Try, Success, Failure}\n\n  // Try\u306f\u4f8b\u5916\u3092\u5024\u3068\u3057\u3066\u6271\u3046\n  def parseNumber(str: String): Try[Int] =\n    Try(str.toInt)\n\n  println(parseNumber(\"123\"))    // Success(123)\n  println(parseNumber(\"abc\"))    // Failure(...)\n\n  // \u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\n  import scala.io.Source\n\n  def readFile(filename: String): Try[String] =\n    Try {\n      val source = Source.fromFile(filename)\n      try source.mkString\n      finally source.close()\n    }\n\n  // Try \u2192 Either\n  def loadConfigFile(filename: String): Either[String, String] =\n    readFile(filename) match {\n      case Success(content) =&gt; Right(content)\n      case Failure(e) =&gt; Left(s\"\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\u30a8\u30e9\u30fc: ${e.getMessage}\")\n    }\n\n  println(loadConfigFile(\"config.txt\"))\n\n  // Try\u306e\u30c1\u30a7\u30fc\u30f3\n  val calculation = for {\n    a &lt;- Try(\"10\".toInt)\n    b &lt;- Try(\"20\".toInt)\n    c &lt;- Try((a + b) / (a - 10))  // \u30bc\u30ed\u9664\u7b97\u306e\u53ef\u80fd\u6027\n  } yield c\n\n  calculation match {\n    case Success(result) =&gt; println(s\"\u8a08\u7b97\u7d50\u679c: $result\")\n    case Failure(e) =&gt; println(s\"\u8a08\u7b97\u30a8\u30e9\u30fc: ${e.getMessage}\")\n  }\n}\n</code></pre>"},{"location":"part4/chapter19/#_4","title":"\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9","text":"<pre><code>// BestPractices.scala\n@main def bestPractices(): Unit = {\n  // 1. null\u306e\u4ee3\u308f\u308a\u306bOption\u3092\u4f7f\u3046\n  case class Config(\n    host: String,\n    port: Int,\n    timeout: Option[Int] = None  // null\u3067\u306f\u306a\u304fOption\n  )\n\n  val config = Config(\"localhost\", 8080, Some(5000))\n  val defaultTimeout = 3000\n  val actualTimeout = config.timeout.getOrElse(defaultTimeout)\n  println(s\"\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8: ${actualTimeout}ms\")\n\n  // 2. \u4f8b\u5916\u306e\u4ee3\u308f\u308a\u306bEither\u3092\u4f7f\u3046\n  def findUser(id: Int): Either[String, String] =\n    if (id == 1) Right(\"\u592a\u90ce\")\n    else Left(s\"\u30e6\u30fc\u30b6\u30fcID $id \u306f\u5b58\u5728\u3057\u307e\u305b\u3093\")\n\n  // 3. for\u5f0f\u3067\u8907\u6570\u306e\u64cd\u4f5c\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\n  def processUser(userId: Int): Either[String, String] =\n    for {\n      user &lt;- findUser(userId)\n      upper = user.toUpperCase  // \u901a\u5e38\u306e\u51e6\u7406\u3082\u6df7\u305c\u3089\u308c\u308b\n      result &lt;- Right(s\"\u51e6\u7406\u5b8c\u4e86: $upper\")\n    } yield result\n\n  println(processUser(1))\n  println(processUser(99))\n\n  // 4. \u30a8\u30e9\u30fc\u306e\u8a73\u7d30\u60c5\u5831\u3092\u4fdd\u6301\n  sealed trait AppError\n  case class ValidationError(field: String, message: String) extends AppError\n  case class DatabaseError(cause: String) extends AppError\n  case object NetworkError extends AppError\n\n  def complexOperation(): Either[AppError, String] =\n    Left(ValidationError(\"email\", \"\u7121\u52b9\u306a\u5f62\u5f0f\u3067\u3059\"))\n\n  complexOperation() match {\n    case Right(result) =&gt; println(s\"\u6210\u529f: $result\")\n    case Left(ValidationError(field, msg)) =&gt; println(s\"\u691c\u8a3c\u30a8\u30e9\u30fc[$field]: $msg\")\n    case Left(DatabaseError(cause)) =&gt; println(s\"DB\u30a8\u30e9\u30fc: $cause\")\n    case Left(NetworkError) =&gt; println(\"\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a8\u30e9\u30fc\")\n  }\n}\n</code></pre>"},{"location":"part4/chapter19/#_5","title":"\u7df4\u7fd2\u3057\u3066\u307f\u3088\u3046\uff01","text":""},{"location":"part4/chapter19/#1","title":"\u7df4\u7fd21\uff1a\u5b89\u5168\u306a\u8a08\u7b97\u6a5f","text":"<p>\u6587\u5b57\u5217\u3092\u53d7\u3051\u53d6\u3063\u3066\u56db\u5247\u6f14\u7b97\u3092\u884c\u3046\u8a08\u7b97\u6a5f\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\u3002 - \u6570\u5024\u5909\u63db\u306e\u5931\u6557 - \u30bc\u30ed\u9664\u7b97 - \u4e0d\u6b63\u306a\u6f14\u7b97\u5b50 \u3053\u308c\u3089\u306e\u30a8\u30e9\u30fc\u3092Either\u3067\u9069\u5207\u306b\u51e6\u7406\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"part4/chapter19/#2","title":"\u7df4\u7fd22\uff1a\u30e6\u30fc\u30b6\u30fc\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb","text":"<p>\u4ee5\u4e0b\u306e\u60c5\u5831\u3092\u6301\u3064\u30e6\u30fc\u30b6\u30fc\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u3092\u4f5c\u6210\u3059\u308b\u95a2\u6570\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\uff1a - \u5fc5\u9808\uff1a\u540d\u524d\u3001\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9 - \u4efb\u610f\uff1a\u96fb\u8a71\u756a\u53f7\u3001\u4f4f\u6240 Option\u3068Either\u3092\u9069\u5207\u306b\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"part4/chapter19/#3","title":"\u7df4\u7fd23\uff1a\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u30d1\u30fc\u30b5\u30fc","text":"<p>\u30ad\u30fc\u3068\u5024\u306e\u30da\u30a2\u304b\u3089\u8a2d\u5b9a\u3092\u8aad\u307f\u8fbc\u3080\u95a2\u6570\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\u3002 - \u5fc5\u9808\u9805\u76ee\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306f\u30a8\u30e9\u30fc - \u6570\u5024\u9805\u76ee\u304c\u4e0d\u6b63\u306a\u5834\u5408\u306f\u30a8\u30e9\u30fc - \u30aa\u30d7\u30b7\u30e7\u30f3\u9805\u76ee\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u4f7f\u7528</p>"},{"location":"part4/chapter19/#_6","title":"\u3053\u306e\u7ae0\u306e\u307e\u3068\u3081","text":"<p>\u5b89\u5168\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3057\u305f\uff01</p>"},{"location":"part4/chapter19/#_7","title":"\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3053\u3068","text":"<p>\u2705 Option - \u5024\u306e\u6709\u7121\u3092\u8868\u73fe - \u5b89\u5168\u306a\u5024\u306e\u53d6\u308a\u51fa\u3057 - map, flatMap\u3067\u306e\u64cd\u4f5c</p> <p>\u2705 Either - \u6210\u529f\u3068\u5931\u6557\u3092\u8868\u73fe - \u30a8\u30e9\u30fc\u60c5\u5831\u306e\u4fdd\u6301 - \u8907\u6570\u306e\u691c\u8a3c\u306e\u7d44\u307f\u5408\u308f\u305b</p> <p>\u2705 \u5b9f\u8df5\u7684\u306a\u4f7f\u3044\u65b9 - null\u306e\u56de\u907f - \u4f8b\u5916\u306e\u56de\u907f - \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0</p> <p>\u2705 \u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9 - \u9069\u5207\u306a\u578b\u306e\u9078\u629e - for\u5f0f\u3067\u306e\u7d44\u307f\u5408\u308f\u305b - \u30a8\u30e9\u30fc\u306e\u8a73\u7d30\u60c5\u5831</p>"},{"location":"part4/chapter19/#_8","title":"\u4f7f\u3044\u5206\u3051\u306e\u30b3\u30c4","text":"<ol> <li> <p>Option</p> <ul> <li>\u5024\u304c\u3042\u308b\u304b\u306a\u3044\u304b</li> <li>\u30a8\u30e9\u30fc\u306e\u8a73\u7d30\u4e0d\u8981</li> <li>\u30b7\u30f3\u30d7\u30eb\u306a\u6709\u7121</li> </ul> </li> <li> <p>Either</p> <ul> <li>\u30a8\u30e9\u30fc\u60c5\u5831\u304c\u5fc5\u8981</li> <li>\u8907\u6570\u306e\u5931\u6557\u30d1\u30bf\u30fc\u30f3</li> <li>\u51e6\u7406\u306e\u6210\u529f/\u5931\u6557</li> </ul> </li> <li> <p>Try</p> <ul> <li>\u65e2\u5b58\u306e\u4f8b\u5916\u3092\u6271\u3046</li> <li>\u5916\u90e8\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u306e\u9023\u643a</li> <li>I/O\u64cd\u4f5c</li> </ul> </li> </ol>"},{"location":"part4/chapter19/#_9","title":"\u6b21\u306e\u90e8\u3067\u306f...","text":"<p>\u7b2cV\u90e8\u3067\u306f\u3001\u975e\u540c\u671f\u51e6\u7406\u3068\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306b\u3064\u3044\u3066\u3055\u3089\u306b\u6df1\u304f\u5b66\u3093\u3067\u3044\u304d\u307e\u3059\u3002Future\u3068Try\u3092\u4f7f\u3063\u305f\u5b9f\u8df5\u7684\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u7fd2\u5f97\u3057\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part4/chapter19/#_10","title":"\u6700\u5f8c\u306b","text":"<p>Option\u3068Either\u306f\u300c\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b89\u5168\u88c5\u7f6e\u300d\u3067\u3059\u3002\u8eca\u306e\u30b7\u30fc\u30c8\u30d9\u30eb\u30c8\u306e\u3088\u3046\u306b\u3001\u554f\u984c\u304c\u8d77\u304d\u305f\u3068\u304d\u306b\u79c1\u305f\u3061\u3092\u5b88\u3063\u3066\u304f\u308c\u307e\u3059\u3002\u6700\u521d\u306f\u9762\u5012\u306b\u611f\u3058\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u6163\u308c\u308c\u3070\u300c\u3053\u308c\u306a\u3057\u3067\u306f\u4e0d\u5b89\u300d\u3068\u611f\u3058\u308b\u3088\u3046\u306b\u306a\u308b\u3067\u3057\u3087\u3046\u3002\u5b89\u5168\u3067\u5805\u7262\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u308b\u7fd2\u6163\u3092\u8eab\u306b\u3064\u3051\u3066\u304f\u3060\u3055\u3044\uff01</p>"},{"location":"part5/chapter20/","title":"\u7b2c20\u7ae0 Future[T]\u3067\u975e\u540c\u671f\u51e6\u7406","text":""},{"location":"part5/chapter20/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u30ec\u30b9\u30c8\u30e9\u30f3\u3067\u6ce8\u6587\u3092\u3057\u305f\u3068\u304d\u3001\u6599\u7406\u304c\u3067\u304d\u308b\u307e\u3067\u5e2d\u3067\u5f85\u3061\u307e\u3059\u3088\u306d\u3002\u305d\u306e\u9593\u3001\u30b9\u30de\u30db\u3092\u898b\u305f\u308a\u3001\u53cb\u9054\u3068\u8a71\u3057\u305f\u308a\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u304c\u300c\u975e\u540c\u671f\u51e6\u7406\u300d\u306e\u8003\u3048\u65b9\u3067\u3059\u3002</p> <p>\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3082\u3001\u6642\u9593\u306e\u304b\u304b\u308b\u51e6\u7406\uff08\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u901a\u4fe1\u306a\u3069\uff09\u3092\u5f85\u3063\u3066\u3044\u308b\u9593\u3001\u4ed6\u306e\u4f5c\u696d\u3092\u9032\u3081\u3089\u308c\u305f\u3089\u52b9\u7387\u7684\u3067\u3059\u3002Scala\u306e<code>Future</code>\u3092\u4f7f\u3048\u3070\u3001\u3053\u308c\u304c\u7c21\u5358\u306b\u3067\u304d\u307e\u3059\uff01</p>"},{"location":"part5/chapter20/#_2","title":"\u975e\u540c\u671f\u51e6\u7406\u3063\u3066\u4f55\u3060\u308d\u3046\uff1f","text":""},{"location":"part5/chapter20/#vs","title":"\u540c\u671f\u51e6\u7406 vs \u975e\u540c\u671f\u51e6\u7406","text":"<pre><code>// SyncVsAsync.scala\n@main def syncVsAsync(): Unit = {\n  import scala.concurrent.{Future, ExecutionContext}\n  import scala.concurrent.duration.*\n  import ExecutionContext.Implicits.global\n\n  // \u540c\u671f\u51e6\u7406\uff08\u9806\u756a\u306b\u5b9f\u884c\uff09\n  println(\"=== \u540c\u671f\u51e6\u7406 ===\")\n  def cookSync(dish: String): String = {\n    println(s\"$dish \u306e\u8abf\u7406\u958b\u59cb...\")\n    Thread.sleep(2000)  // 2\u79d2\u304b\u304b\u308b\n    println(s\"$dish \u5b8c\u6210\uff01\")\n    dish\n  }\n\n  val start1 = System.currentTimeMillis()\n  cookSync(\"\u30d1\u30b9\u30bf\")\n  cookSync(\"\u30b5\u30e9\u30c0\")\n  cookSync(\"\u30b9\u30fc\u30d7\")\n  val end1 = System.currentTimeMillis()\n  println(s\"\u5408\u8a08\u6642\u9593: ${end1 - start1}ms\\n\")\n\n  // \u975e\u540c\u671f\u51e6\u7406\uff08\u540c\u6642\u306b\u5b9f\u884c\uff09\n  println(\"=== \u975e\u540c\u671f\u51e6\u7406 ===\")\n  def cookAsync(dish: String): Future[String] = Future {\n    println(s\"$dish \u306e\u8abf\u7406\u958b\u59cb...\")\n    Thread.sleep(2000)  // 2\u79d2\u304b\u304b\u308b\n    println(s\"$dish \u5b8c\u6210\uff01\")\n    dish\n  }\n\n  val start2 = System.currentTimeMillis()\n  val pastaFuture = cookAsync(\"\u30d1\u30b9\u30bf\")\n  val saladFuture = cookAsync(\"\u30b5\u30e9\u30c0\")\n  val soupFuture = cookAsync(\"\u30b9\u30fc\u30d7\")\n\n  // \u3059\u3079\u3066\u306e\u6599\u7406\u304c\u5b8c\u6210\u3059\u308b\u307e\u3067\u5f85\u3064\n  Thread.sleep(3000)\n  val end2 = System.currentTimeMillis()\n  println(s\"\u5408\u8a08\u6642\u9593: ${end2 - start2}ms\")\n}\n</code></pre>"},{"location":"part5/chapter20/#future","title":"Future\u306e\u57fa\u672c","text":""},{"location":"part5/chapter20/#future_1","title":"Future\u306e\u4f5c\u6210","text":"<pre><code>// FutureBasics.scala\n@main def futureBasics(): Unit = {\n  import scala.concurrent.{Future, Await}\n  import scala.concurrent.duration.*\n  import scala.concurrent.ExecutionContext.Implicits.global\n\n  // \u5358\u7d14\u306aFuture\n  val future1: Future[Int] = Future {\n    Thread.sleep(1000)\n    42\n  }\n\n  println(\"Future\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\uff08\u307e\u3060\u5b8c\u4e86\u3057\u3066\u3044\u307e\u305b\u3093\uff09\")\n\n  // \u7d50\u679c\u3092\u5f85\u3064\n  val result = Await.result(future1, 2.seconds)\n  println(s\"\u7d50\u679c: $result\")\n\n  // \u3059\u3050\u306b\u5b8c\u4e86\u3059\u308bFuture\n  val future2 = Future.successful(100)\n  val future3 = Future.failed(new Exception(\"\u30a8\u30e9\u30fc\uff01\"))\n\n  // \u5b9f\u7528\u4f8b\uff1a\u8907\u6570\u306e\u8a08\u7b97\u3092\u4e26\u884c\u5b9f\u884c\n  def heavyCalculation(n: Int): Future[Int] = Future {\n    println(s\"\u8a08\u7b97\u958b\u59cb: $n\")\n    Thread.sleep(1000)\n    val result = n * n\n    println(s\"\u8a08\u7b97\u5b8c\u4e86: $n * $n = $result\")\n    result\n  }\n\n  val calculations = List(1, 2, 3, 4, 5).map(heavyCalculation)\n  val allResults = Future.sequence(calculations)\n\n  val results = Await.result(allResults, 3.seconds)\n  println(s\"\u3059\u3079\u3066\u306e\u7d50\u679c: $results\")\n}\n</code></pre>"},{"location":"part5/chapter20/#future_2","title":"Future\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af","text":"<pre><code>// FutureCallbacks.scala\n@main def futureCallbacks(): Unit = {\n  import scala.concurrent.Future\n  import scala.concurrent.ExecutionContext.Implicits.global\n  import scala.util.{Success, Failure}\n\n  // onComplete\uff1a\u6210\u529f\u3067\u3082\u5931\u6557\u3067\u3082\u5b9f\u884c\n  val future1 = Future {\n    Thread.sleep(500)\n    if (scala.util.Random.nextBoolean()) 42\n    else throw new Exception(\"\u30e9\u30f3\u30c0\u30e0\u30a8\u30e9\u30fc\")\n  }\n\n  future1.onComplete {\n    case Success(value) =&gt; println(s\"\u6210\u529f: $value\")\n    case Failure(error) =&gt; println(s\"\u5931\u6557: ${error.getMessage}\")\n  }\n\n  // foreach\uff1a\u6210\u529f\u6642\u306e\u307f\u5b9f\u884c\n  val future2 = Future {\n    Thread.sleep(300)\n    \"Hello, Future!\"\n  }\n\n  future2.foreach { message =&gt;\n    println(s\"\u30e1\u30c3\u30bb\u30fc\u30b8: $message\")\n  }\n\n  // \u5b9f\u7528\u4f8b\uff1a\u30d5\u30a1\u30a4\u30eb\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u901a\u77e5\n  def downloadFile(url: String): Future[String] = Future {\n    println(s\"\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u958b\u59cb: $url\")\n    Thread.sleep(1000)\n    s\"${url}\u306e\u30b3\u30f3\u30c6\u30f3\u30c4\"\n  }\n\n  val download = downloadFile(\"https://example.com/data.txt\")\n\n  download.onComplete {\n    case Success(content) =&gt;\n      println(\"\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u6210\u529f\uff01\")\n      println(s\"\u5185\u5bb9: ${content.take(20)}...\")\n    case Failure(error) =&gt;\n      println(s\"\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u5931\u6557: ${error.getMessage}\")\n  }\n\n  Thread.sleep(1500)  // \u5b8c\u4e86\u307e\u3067\u5f85\u3064\n}\n</code></pre>"},{"location":"part5/chapter20/#future_3","title":"Future\u306e\u5909\u63db\u3068\u5408\u6210","text":""},{"location":"part5/chapter20/#mapflatmapfilter","title":"map\u3001flatMap\u3001filter","text":"<pre><code>// FutureTransformations.scala\n@main def futureTransformations(): Unit = {\n  import scala.concurrent.{Future, Await}\n  import scala.concurrent.duration.*\n  import scala.concurrent.ExecutionContext.Implicits.global\n\n  // map\uff1a\u5024\u3092\u5909\u63db\n  val future1 = Future(10)\n  val doubled = future1.map(_ * 2)\n\n  println(s\"2\u500d: ${Await.result(doubled, 1.second)}\")\n\n  // flatMap\uff1aFuture\u3092\u8fd4\u3059\u95a2\u6570\u3068\u7d44\u307f\u5408\u308f\u305b\n  def getUserId(name: String): Future[Int] = Future {\n    Thread.sleep(500)\n    name.length  // \u4eee\u306eID\n  }\n\n  def getUserScore(id: Int): Future[Int] = Future {\n    Thread.sleep(500)\n    id * 100  // \u4eee\u306e\u30b9\u30b3\u30a2\n  }\n\n  val scoresFuture = for {\n    id &lt;- getUserId(\"\u592a\u90ce\")\n    score &lt;- getUserScore(id)\n  } yield score\n\n  println(s\"\u30b9\u30b3\u30a2: ${Await.result(scoresFuture, 2.seconds)}\")\n\n  // filter\uff1a\u6761\u4ef6\u3092\u6e80\u305f\u3055\u306a\u3044\u5834\u5408\u306f\u5931\u6557\n  val numbers = Future(42)\n  val filtered = numbers.filter(_ &gt; 50)\n\n  try {\n    Await.result(filtered, 1.second)\n  } catch {\n    case _: NoSuchElementException =&gt;\n      println(\"\u6761\u4ef6\u3092\u6e80\u305f\u3057\u307e\u305b\u3093\u3067\u3057\u305f\")\n  }\n}\n</code></pre>"},{"location":"part5/chapter20/#future_4","title":"\u8907\u6570\u306eFuture\u3092\u7d44\u307f\u5408\u308f\u305b\u308b","text":"<pre><code>// CombiningFutures.scala\n@main def combiningFutures(): Unit = {\n  import scala.concurrent.{Future, Await}\n  import scala.concurrent.duration.*\n  import scala.concurrent.ExecutionContext.Implicits.global\n\n  // \u8907\u6570\u306eAPI\u3092\u540c\u6642\u306b\u547c\u3076\n  def fetchUserData(userId: Int): Future[String] = Future {\n    Thread.sleep(800)\n    s\"\u30e6\u30fc\u30b6\u30fc$userId \u306e\u30c7\u30fc\u30bf\"\n  }\n\n  def fetchUserPosts(userId: Int): Future[List[String]] = Future {\n    Thread.sleep(1000)\n    List(s\"\u6295\u7a3f1\", s\"\u6295\u7a3f2\", s\"\u6295\u7a3f3\")\n  }\n\n  def fetchUserFriends(userId: Int): Future[List[String]] = Future {\n    Thread.sleep(600)\n    List(\"\u53cb\u9054A\", \"\u53cb\u9054B\")\n  }\n\n  // \u3059\u3079\u3066\u306e\u30c7\u30fc\u30bf\u3092\u540c\u6642\u306b\u53d6\u5f97\n  val userId = 123\n\n  val allDataFuture = for {\n    userData &lt;- fetchUserData(userId)\n    posts &lt;- fetchUserPosts(userId)\n    friends &lt;- fetchUserFriends(userId)\n  } yield (userData, posts, friends)\n\n  val (userData, posts, friends) = Await.result(allDataFuture, 2.seconds)\n  println(s\"\u30e6\u30fc\u30b6\u30fc\u30c7\u30fc\u30bf: $userData\")\n  println(s\"\u6295\u7a3f: $posts\")\n  println(s\"\u53cb\u9054: $friends\")\n\n  // Future.sequence\uff1a\u30ea\u30b9\u30c8\u306eFuture\u3092Future\u306e\u30ea\u30b9\u30c8\u306b\n  val userIds = List(1, 2, 3)\n  val allUsersFuture = Future.sequence(\n    userIds.map(fetchUserData)\n  )\n\n  val allUsers = Await.result(allUsersFuture, 2.seconds)\n  println(s\"\u5168\u30e6\u30fc\u30b6\u30fc: $allUsers\")\n}\n</code></pre>"},{"location":"part5/chapter20/#_3","title":"\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0","text":""},{"location":"part5/chapter20/#recoverrecoverwith","title":"recover\u3068recoverWith","text":"<pre><code>// FutureErrorHandling.scala\n@main def futureErrorHandling(): Unit = {\n  import scala.concurrent.{Future, Await}\n  import scala.concurrent.duration.*\n  import scala.concurrent.ExecutionContext.Implicits.global\n\n  // \u30a8\u30e9\u30fc\u304c\u8d77\u304d\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u51e6\u7406\n  def riskyOperation(n: Int): Future[Int] = Future {\n    if (n &lt; 0) throw new IllegalArgumentException(\"\u8ca0\u306e\u6570\u306f\u7981\u6b62\")\n    else if (n == 0) throw new ArithmeticException(\"\u30bc\u30ed\u306f\u7279\u5225\")\n    else n * 10\n  }\n\n  // recover\uff1a\u30a8\u30e9\u30fc\u3092\u5024\u306b\u5909\u63db\n  val recovered1 = riskyOperation(-5).recover {\n    case _: IllegalArgumentException =&gt; 0\n    case _: ArithmeticException =&gt; 1\n  }\n\n  println(s\"\u30ea\u30ab\u30d0\u30fc1: ${Await.result(recovered1, 1.second)}\")\n\n  // recoverWith\uff1a\u30a8\u30e9\u30fc\u3092\u5225\u306eFuture\u306b\u5909\u63db\n  def fallbackOperation(n: Int): Future[Int] = Future {\n    println(s\"\u30d5\u30a9\u30fc\u30eb\u30d0\u30c3\u30af\u51e6\u7406: $n\")\n    100\n  }\n\n  val recovered2 = riskyOperation(0).recoverWith {\n    case _: ArithmeticException =&gt; fallbackOperation(0)\n  }\n\n  println(s\"\u30ea\u30ab\u30d0\u30fc2: ${Await.result(recovered2, 1.second)}\")\n\n  // transform\uff1a\u6210\u529f\u3068\u5931\u6557\u306e\u4e21\u65b9\u3092\u5909\u63db\n  val transformed = riskyOperation(5).transform(\n    success = value =&gt; value + 1,\n    failure = {\n      case _: IllegalArgumentException =&gt; new Exception(\"\u4e0d\u6b63\u306a\u5f15\u6570\")\n      case other =&gt; other\n    }\n  )\n\n  println(s\"\u5909\u63db\u5f8c: ${Await.result(transformed, 1.second)}\")\n}\n</code></pre>"},{"location":"part5/chapter20/#web-api","title":"\u5b9f\u8df5\u4f8b\uff1aWeb API\u30af\u30e9\u30a4\u30a2\u30f3\u30c8","text":"<pre><code>// WebApiClient.scala\n@main def webApiClient(): Unit = {\n  import scala.concurrent.{Future, Promise}\n  import scala.concurrent.duration.*\n  import scala.concurrent.ExecutionContext.Implicits.global\n  import scala.util.{Try, Success, Failure}\n\n  // \u6a21\u64ec\u7684\u306aHTTP\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\n  object HttpClient {\n    def get(url: String): Future[String] = Future {\n      Thread.sleep(scala.util.Random.nextInt(1000))\n      if (scala.util.Random.nextDouble() &gt; 0.8) {\n        throw new Exception(s\"\u63a5\u7d9a\u30a8\u30e9\u30fc: $url\")\n      } else {\n        s\"\"\"{\"status\": \"ok\", \"data\": \"Response from $url\"}\"\"\"\n      }\n    }\n  }\n\n  // API\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\n  class ApiClient {\n    def fetchWithRetry(url: String, maxRetries: Int = 3): Future[String] = {\n      def attempt(retriesLeft: Int): Future[String] =\n        HttpClient.get(url).recoverWith {\n          case error if retriesLeft &gt; 0 =&gt;\n            println(s\"\u30ea\u30c8\u30e9\u30a4\u3057\u307e\u3059\uff08\u6b8b\u308a${retriesLeft}\u56de\uff09: ${error.getMessage}\")\n            Thread.sleep(500)\n            attempt(retriesLeft - 1)\n          case error =&gt;\n            Future.failed(error)\n        }\n\n      attempt(maxRetries)\n    }\n\n    def fetchMultiple(urls: List[String]): Future[List[String]] = {\n      val futures = urls.map(fetchWithRetry(_, 2))\n      Future.sequence(futures)\n    }\n\n    def fetchFirstSuccessful(urls: List[String]): Future[String] =\n      Future.firstCompletedOf(urls.map(HttpClient.get))\n  }\n\n  val client = new ApiClient\n\n  // \u5358\u4e00\u306eAPI\u30b3\u30fc\u30eb\uff08\u30ea\u30c8\u30e9\u30a4\u4ed8\u304d\uff09\n  println(\"=== \u5358\u4e00API\u30b3\u30fc\u30eb ===\")\n  client.fetchWithRetry(\"https://api.example.com/user/123\").onComplete {\n    case Success(response) =&gt; println(s\"\u6210\u529f: $response\")\n    case Failure(error) =&gt; println(s\"\u6700\u7d42\u7684\u306b\u5931\u6557: ${error.getMessage}\")\n  }\n\n  // \u8907\u6570\u306eAPI\u30b3\u30fc\u30eb\n  println(\"\\n=== \u8907\u6570API\u30b3\u30fc\u30eb ===\")\n  val urls = List(\n    \"https://api.example.com/data1\",\n    \"https://api.example.com/data2\",\n    \"https://api.example.com/data3\"\n  )\n\n  client.fetchMultiple(urls).onComplete {\n    case Success(responses) =&gt;\n      println(\"\u3059\u3079\u3066\u6210\u529f:\")\n      responses.foreach(println)\n    case Failure(error) =&gt;\n      println(s\"\u3044\u305a\u308c\u304b\u304c\u5931\u6557: ${error.getMessage}\")\n  }\n\n  Thread.sleep(5000)  // \u5b8c\u4e86\u307e\u3067\u5f85\u3064\n}\n</code></pre>"},{"location":"part5/chapter20/#_4","title":"\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3068\u30ad\u30e3\u30f3\u30bb\u30eb","text":"<pre><code>// TimeoutAndCancel.scala\n@main def timeoutAndCancel(): Unit = {\n  import scala.concurrent.{Future, Promise, TimeoutException}\n  import scala.concurrent.duration.*\n  import scala.concurrent.ExecutionContext.Implicits.global\n  import java.util.concurrent.Executors\n  import java.util.concurrent.ScheduledExecutorService\n\n  // \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u4ed8\u304dFuture\n  def withTimeout[T](future: Future[T], duration: Duration): Future[T] = {\n    val promise = Promise[T]()\n\n    future.onComplete(promise.tryComplete)\n\n    val scheduler = Executors.newScheduledThreadPool(1)\n    scheduler.schedule(\n      () =&gt; promise.tryFailure(new TimeoutException(s\"${duration}\u3067\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\")),\n      duration.toMillis,\n      java.util.concurrent.TimeUnit.MILLISECONDS\n    )\n\n    promise.future\n  }\n\n  // \u9045\u3044\u51e6\u7406\n  def slowOperation(): Future[String] = Future {\n    Thread.sleep(3000)  // 3\u79d2\u304b\u304b\u308b\n    \"\u5b8c\u4e86\uff01\"\n  }\n\n  // 2\u79d2\u3067\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\n  val timedOut = withTimeout(slowOperation(), 2.seconds)\n\n  timedOut.onComplete {\n    case Success(result) =&gt; println(s\"\u6210\u529f: $result\")\n    case Failure(_: TimeoutException) =&gt; println(\"\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3057\u307e\u3057\u305f\")\n    case Failure(error) =&gt; println(s\"\u30a8\u30e9\u30fc: ${error.getMessage}\")\n  }\n\n  Thread.sleep(4000)\n}\n</code></pre>"},{"location":"part5/chapter20/#_5","title":"\u5b9f\u7528\u7684\u306a\u30d1\u30bf\u30fc\u30f3","text":""},{"location":"part5/chapter20/#_6","title":"\u4e26\u884c\u5b9f\u884c\u306e\u5236\u9650","text":"<pre><code>// ConcurrencyControl.scala\n@main def concurrencyControl(): Unit = {\n  import scala.concurrent.{Future, ExecutionContext}\n  import scala.concurrent.duration.*\n  import java.util.concurrent.Executors\n\n  // \u540c\u6642\u5b9f\u884c\u6570\u3092\u5236\u9650\u3057\u305fExecutionContext\n  val limitedEC = ExecutionContext.fromExecutor(\n    Executors.newFixedThreadPool(2)  // \u6700\u59272\u4e26\u5217\n  )\n\n  def task(id: Int): Future[Int] = Future {\n    println(s\"\u30bf\u30b9\u30af$id \u958b\u59cb\")\n    Thread.sleep(1000)\n    println(s\"\u30bf\u30b9\u30af$id \u5b8c\u4e86\")\n    id\n  }(limitedEC)  // \u5236\u9650\u4ed8\u304dEC\u3092\u4f7f\u7528\n\n  // 5\u3064\u306e\u30bf\u30b9\u30af\u3092\u5b9f\u884c\uff08\u540c\u6642\u306b2\u3064\u307e\u3067\uff09\n  val tasks = (1 to 5).map(task)\n  val allTasks = Future.sequence(tasks)(ExecutionContext.global)\n\n  Thread.sleep(3000)\n\n  // \u30d0\u30c3\u30c1\u51e6\u7406\n  def processBatch[T, R](\n    items: List[T], \n    batchSize: Int\n  )(f: T =&gt; Future[R]): Future[List[R]] = {\n    items.grouped(batchSize).foldLeft(Future.successful(List.empty[R])) {\n      (accFuture, batch) =&gt;\n        accFuture.flatMap { acc =&gt;\n          Future.sequence(batch.map(f)).map(acc ++ _)\n        }\n    }(ExecutionContext.global)\n  }\n}\n}\n</code></pre>"},{"location":"part5/chapter20/#_7","title":"\u7df4\u7fd2\u3057\u3066\u307f\u3088\u3046\uff01","text":""},{"location":"part5/chapter20/#1","title":"\u7df4\u7fd21\uff1a\u4e26\u884c\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9","text":"<p>\u8907\u6570\u306eURL\u304b\u3089\u540c\u6642\u306b\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3001\u3059\u3079\u3066\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u304c\u5b8c\u4e86\u3057\u305f\u3089\u7d50\u679c\u3092\u307e\u3068\u3081\u308b\u95a2\u6570\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"part5/chapter20/#2","title":"\u7df4\u7fd22\uff1a\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u4ed8\u304d\u30ea\u30c8\u30e9\u30a4","text":"<p>\u6307\u5b9a\u3055\u308c\u305f\u56de\u6570\u307e\u3067\u30ea\u30c8\u30e9\u30a4\u3057\u3001\u5404\u8a66\u884c\u306b\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u8a2d\u5b9a\u3067\u304d\u308b\u95a2\u6570\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"part5/chapter20/#3","title":"\u7df4\u7fd23\uff1a\u30d7\u30ed\u30b0\u30ec\u30b9\u30d0\u30fc","text":"<p>\u8907\u6570\u306e\u975e\u540c\u671f\u30bf\u30b9\u30af\u306e\u9032\u884c\u72b6\u6cc1\u3092\u8868\u793a\u3059\u308b\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"part5/chapter20/#_8","title":"\u3053\u306e\u7ae0\u306e\u307e\u3068\u3081","text":"<p>\u975e\u540c\u671f\u51e6\u7406\u306e\u57fa\u672c\u3092\u5b66\u3073\u307e\u3057\u305f\uff01</p>"},{"location":"part5/chapter20/#_9","title":"\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3053\u3068","text":"<p>\u2705 Future\u306e\u57fa\u672c - \u975e\u540c\u671f\u51e6\u7406\u306e\u4f5c\u6210 - \u7d50\u679c\u306e\u53d6\u5f97 - \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306e\u8a2d\u5b9a</p> <p>\u2705 Future\u306e\u64cd\u4f5c - map, flatMap\u3067\u306e\u5909\u63db - \u8907\u6570Future\u306e\u7d44\u307f\u5408\u308f\u305b - \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0</p> <p>\u2705 \u5b9f\u8df5\u7684\u306a\u4f7f\u3044\u65b9 - Web API\u30af\u30e9\u30a4\u30a2\u30f3\u30c8 - \u30ea\u30c8\u30e9\u30a4\u6a5f\u69cb - \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u51e6\u7406</p> <p>\u2705 \u4e26\u884c\u5236\u5fa1 - \u5b9f\u884c\u6570\u306e\u5236\u9650 - \u30d0\u30c3\u30c1\u51e6\u7406 - \u52b9\u7387\u7684\u306a\u4e26\u884c\u5b9f\u884c</p>"},{"location":"part5/chapter20/#_10","title":"\u975e\u540c\u671f\u51e6\u7406\u306e\u30b3\u30c4","text":"<ol> <li> <p>\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u3092\u907f\u3051\u308b</p> <ul> <li>Await.result\u306f\u6700\u5c0f\u9650\u306b</li> <li>\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3084map\u3092\u6d3b\u7528</li> <li>\u975e\u540c\u671f\u306e\u9023\u9396\u3092\u4fdd\u3064</li> </ul> </li> <li> <p>\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0</p> <ul> <li>recover\u3067\u512a\u96c5\u306b\u56de\u5fa9</li> <li>\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306e\u8a2d\u5b9a</li> <li>\u30ea\u30c8\u30e9\u30a4\u306e\u5b9f\u88c5</li> </ul> </li> <li> <p>\u30ea\u30bd\u30fc\u30b9\u7ba1\u7406</p> <ul> <li>ExecutionContext\u306e\u9069\u5207\u306a\u9078\u629e</li> <li>\u4e26\u884c\u6570\u306e\u5236\u9650</li> <li>\u30ea\u30bd\u30fc\u30b9\u306e\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7</li> </ul> </li> </ol>"},{"location":"part5/chapter20/#_11","title":"\u6b21\u306e\u7ae0\u3067\u306f...","text":"<p>Try[T]\u3092\u4f7f\u3063\u305f\u4f8b\u5916\u51e6\u7406\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u5b66\u3073\u307e\u3059\u3002\u30a8\u30e9\u30fc\u3092\u5024\u3068\u3057\u3066\u6271\u3046\u3001\u3088\u308a\u5b89\u5168\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u7fd2\u5f97\u3057\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part5/chapter20/#_12","title":"\u6700\u5f8c\u306b","text":"<p>\u975e\u540c\u671f\u51e6\u7406\u306f\u300c\u4e26\u884c\u4f5c\u696d\u306e\u9054\u4eba\u300d\u3067\u3059\u3002\u30ec\u30b9\u30c8\u30e9\u30f3\u306e\u53a8\u623f\u3067\u3001\u8907\u6570\u306e\u6599\u7406\u4eba\u304c\u540c\u6642\u306b\u9055\u3046\u6599\u7406\u3092\u4f5c\u308b\u3088\u3046\u306b\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u3082\u8907\u6570\u306e\u51e6\u7406\u3092\u540c\u6642\u306b\u9032\u3081\u3089\u308c\u307e\u3059\u3002\u6700\u521d\u306f\u6df7\u4e71\u3059\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u30de\u30b9\u30bf\u30fc\u3059\u308c\u3070\u51e6\u7406\u901f\u5ea6\u304c\u5287\u7684\u306b\u5411\u4e0a\u3057\u307e\u3059\u3002\u672a\u6765\uff08Future\uff09\u306f\u660e\u308b\u3044\u3067\u3059\u3088\uff01</p>"},{"location":"part5/chapter21/","title":"\u7b2c21\u7ae0 Try[T]\u3067\u4f8b\u5916\u3092\u6271\u3046","text":""},{"location":"part5/chapter21/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u6599\u7406\u3092\u3057\u3066\u3044\u3066\u3001\u3046\u3063\u304b\u308a\u5869\u3068\u7802\u7cd6\u3092\u9593\u9055\u3048\u305f\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u304b\uff1f\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3082\u3001\u4e88\u671f\u3057\u306a\u3044\u3053\u3068\u304c\u8d77\u304d\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u304c\u5207\u308c\u308b\u3001\u8a08\u7b97\u3067\u30bc\u30ed\u9664\u7b97\u3057\u3066\u3057\u307e\u3046...</p> <p>\u5f93\u6765\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u306f\u3001\u3053\u3046\u3057\u305f\u300c\u4f8b\u5916\u300d\u304c\u8d77\u304d\u308b\u3068\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u6b62\u307e\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u3067\u3082\u3001Scala\u306e<code>Try</code>\u3092\u4f7f\u3048\u3070\u3001\u30a8\u30e9\u30fc\u3082\u300c\u666e\u901a\u306e\u5024\u300d\u3068\u3057\u3066\u6271\u3048\u308b\u3093\u3067\u3059\uff01</p>"},{"location":"part5/chapter21/#_2","title":"\u4f8b\u5916\u3063\u3066\u4f55\u3060\u308d\u3046\uff1f","text":""},{"location":"part5/chapter21/#_3","title":"\u5f93\u6765\u306e\u4f8b\u5916\u51e6\u7406","text":"<pre><code>// TraditionalExceptionHandling.scala\n@main def traditionalExceptionHandling(): Unit = {\n  // \u5371\u967a\u306a\u5272\u308a\u7b97\uff08\u30bc\u30ed\u9664\u7b97\u306e\u53ef\u80fd\u6027\uff09\n  def divide(a: Int, b: Int): Int = a / b\n\n  // try-catch\u3067\u4f8b\u5916\u3092\u6355\u307e\u3048\u308b\uff08\u5f93\u6765\u306e\u65b9\u6cd5\uff09\n  try {\n    val result = divide(10, 0)\n    println(s\"\u7d50\u679c: $result\")\n  } catch {\n    case e: ArithmeticException =&gt;\n      println(s\"\u7b97\u8853\u30a8\u30e9\u30fc: ${e.getMessage}\")\n    case e: Exception =&gt;\n      println(s\"\u305d\u306e\u4ed6\u306e\u30a8\u30e9\u30fc: ${e.getMessage}\")\n  }\n\n  // \u554f\u984c\u70b9\uff1a\n  // 1. \u30a8\u30e9\u30fc\u51e6\u7406\u3092\u5fd8\u308c\u3084\u3059\u3044\n  // 2. \u3069\u3053\u3067\u4f8b\u5916\u304c\u8d77\u304d\u308b\u304b\u5206\u304b\u308a\u306b\u304f\u3044\n  // 3. \u6b63\u5e38\u7cfb\u3068\u7570\u5e38\u7cfb\u306e\u30b3\u30fc\u30c9\u304c\u6df7\u5728\n\n  // \u3082\u3063\u3068\u826f\u3044\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\uff01\n}\n</code></pre>"},{"location":"part5/chapter21/#try","title":"Try\u306e\u57fa\u672c","text":""},{"location":"part5/chapter21/#successfailure","title":"Success\uff08\u6210\u529f\uff09\u3068Failure\uff08\u5931\u6557\uff09","text":"<pre><code>// TryBasics.scala\n@main def tryBasics(): Unit = {\n  import scala.util.{Try, Success, Failure}\n\n  // Try\u3067\u5b89\u5168\u306b\u5272\u308a\u7b97\n  def safeDivide(a: Int, b: Int): Try[Int] = Try {\n    a / b  // \u3053\u306e\u4e2d\u3067\u4f8b\u5916\u304c\u8d77\u304d\u3066\u3082OK\n  }\n\n  // \u6210\u529f\u3059\u308b\u5834\u5408\n  val result1 = safeDivide(10, 2)\n  println(s\"10 \u00f7 2 = $result1\")  // Success(5)\n\n  // \u5931\u6557\u3059\u308b\u5834\u5408\n  val result2 = safeDivide(10, 0)\n  println(s\"10 \u00f7 0 = $result2\")  // Failure(java.lang.ArithmeticException: / by zero)\n\n  // \u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u3067\u51e6\u7406\n  result1 match {\n    case Success(value) =&gt; println(s\"\u6210\u529f\uff01\u7b54\u3048\u306f $value\")\n    case Failure(error) =&gt; println(s\"\u5931\u6557: ${error.getMessage}\")\n  }\n\n  result2 match {\n    case Success(value) =&gt; println(s\"\u6210\u529f\uff01\u7b54\u3048\u306f $value\")\n    case Failure(error) =&gt; println(s\"\u5931\u6557: ${error.getMessage}\")\n  }\n}\n</code></pre>"},{"location":"part5/chapter21/#try_1","title":"Try\u306e\u4f5c\u6210\u65b9\u6cd5","text":"<pre><code>// CreatingTry.scala\n@main def creatingTry(): Unit = {\n  import scala.util.{Try, Success, Failure}\n\n  // \u65b9\u6cd51\uff1aTry { ... } \u3092\u4f7f\u3046\n  val try1 = Try {\n    \"123\".toInt\n  }\n  println(s\"\u6587\u5b57\u5217\u2192\u6570\u5024: $try1\")\n\n  // \u65b9\u6cd52\uff1a\u76f4\u63a5Success\u307e\u305f\u306fFailure\u3092\u4f5c\u308b\n  val try2 = Success(42)\n  val try3 = Failure(new IllegalArgumentException(\"\u4e0d\u6b63\u306a\u5f15\u6570\"))\n\n  // \u5b9f\u7528\u4f8b\uff1a\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\n  import scala.io.Source\n\n  def readFile(filename: String): Try[String] = Try {\n    val source = Source.fromFile(filename)\n    try {\n      source.mkString\n    } finally {\n      source.close()\n    }\n  }\n\n  val content = readFile(\"test.txt\")\n  content match {\n    case Success(text) =&gt; println(s\"\u30d5\u30a1\u30a4\u30eb\u306e\u5185\u5bb9: ${text.take(50)}...\")\n    case Failure(error) =&gt; println(s\"\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\u30a8\u30e9\u30fc: ${error.getMessage}\")\n  }\n}\n</code></pre>"},{"location":"part5/chapter21/#try_2","title":"Try\u306e\u4fbf\u5229\u306a\u30e1\u30bd\u30c3\u30c9","text":""},{"location":"part5/chapter21/#mapflatmapfilter","title":"map\u3001flatMap\u3001filter","text":"<pre><code>// TryTransformations.scala\n@main def tryTransformations(): Unit = {\n  import scala.util.{Try, Success, Failure}\n\n  // map\uff1a\u6210\u529f\u6642\u306b\u5024\u3092\u5909\u63db\n  val try1 = Try(\"123\".toInt)\n  val doubled = try1.map(_ * 2)\n  println(s\"2\u500d: $doubled\")\n\n  // \u5931\u6557\u306e\u5834\u5408\u306f\u305d\u306e\u307e\u307e\u4f1d\u64ad\n  val try2 = Try(\"abc\".toInt)\n  val doubled2 = try2.map(_ * 2)\n  println(s\"\u5931\u6557\u306e\u5834\u5408: $doubled2\")\n\n  // flatMap\uff1aTry\u3092\u8fd4\u3059\u95a2\u6570\u3068\u7d44\u307f\u5408\u308f\u305b\n  def sqrt(x: Double): Try[Double] = {\n    if (x &gt;= 0) Success(math.sqrt(x))\n    else Failure(new IllegalArgumentException(\"\u8ca0\u306e\u6570\u306e\u5e73\u65b9\u6839\u306f\u8a08\u7b97\u3067\u304d\u307e\u305b\u3093\"))\n  }\n\n  val result = for {\n    num &lt;- Try(\"16\".toDouble)\n    root &lt;- sqrt(num)\n  } yield root\n\n  println(s\"\u221a16 = $result\")\n\n  // filter\uff1a\u6761\u4ef6\u3092\u6e80\u305f\u3055\u306a\u3044\u5834\u5408\u306f\u5931\u6557\u306b\n  val filtered = Try(10).filter(_ &gt; 5)\n  println(s\"10 &gt; 5: $filtered\")\n\n  val filtered2 = Try(3).filter(_ &gt; 5)\n  println(s\"3 &gt; 5: $filtered2\")\n}\n</code></pre>"},{"location":"part5/chapter21/#getorelseorelserecover","title":"getOrElse\u3001orElse\u3001recover","text":"<pre><code>// TryRecovery.scala\n@main def tryRecovery(): Unit = {\n  import scala.util.{Try, Success, Failure}\n\n  def parseNumber(s: String): Try[Int] = Try(s.toInt)\n\n  // getOrElse\uff1a\u5931\u6557\u6642\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\n  val num1 = parseNumber(\"123\").getOrElse(0)\n  val num2 = parseNumber(\"abc\").getOrElse(0)\n\n  println(s\"\u6210\u529f\u6642: $num1\")\n  println(s\"\u5931\u6557\u6642: $num2\")\n\n  // orElse\uff1a\u5931\u6557\u6642\u306b\u5225\u306eTry\u3092\u8a66\u3059\n  val primary = parseNumber(\"abc\")\n  val fallback = parseNumber(\"999\")\n  val result = primary.orElse(fallback)\n\n  println(s\"\u30d5\u30a9\u30fc\u30eb\u30d0\u30c3\u30af: $result\")\n\n  // recover\uff1a\u7279\u5b9a\u306e\u4f8b\u5916\u304b\u3089\u56de\u5fa9\n  val recovered = parseNumber(\"xyz\").recover {\n    case _: NumberFormatException =&gt; -1\n    case _: NullPointerException =&gt; -2\n  }\n\n  println(s\"\u30ea\u30ab\u30d0\u30fc: $recovered\")\n\n  // recoverWith\uff1a\u5225\u306eTry\u3067\u56de\u5fa9\n  def parseWithDefault(s: String, default: String): Try[Int] = {\n    parseNumber(s).recoverWith {\n      case _: NumberFormatException =&gt; parseNumber(default)\n    }\n  }\n\n  println(s\"\u30c7\u30d5\u30a9\u30eb\u30c8\u4ed8\u304d: ${parseWithDefault(\"abc\", \"100\")}\")\n}\n</code></pre>"},{"location":"part5/chapter21/#_4","title":"\u5b9f\u8df5\u4f8b\uff1a\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f","text":"<pre><code>// ConfigLoader.scala\n@main def configLoader(): Unit = {\n  import scala.util.{Try, Success, Failure}\n  import scala.io.Source\n\n  case class Config(\n    host: String,\n    port: Int,\n    timeout: Int,\n    debug: Boolean\n  )\n\n  object ConfigLoader {\n    def load(filename: String): Try[Config] =\n      for {\n        content &lt;- readFile(filename)\n        parsed &lt;- parseConfig(content)\n        validated &lt;- validateConfig(parsed)\n      } yield validated\n\n    private def readFile(filename: String): Try[String] = Try {\n      val source = Source.fromFile(filename)\n      try {\n        source.mkString\n      } finally {\n        source.close()\n      }\n    }\n\n    private def parseConfig(content: String): Try[Map[String, String]] = Try {\n      content.split(\"\\n\")\n        .filter(_.contains(\"=\"))\n        .map { line =&gt;\n          val Array(key, value) = line.split(\"=\", 2)\n          key.trim -&gt; value.trim\n        }\n        .toMap\n    }\n\n    private def validateConfig(data: Map[String, String]): Try[Config] = Try {\n      Config(\n        host = data.getOrElse(\"host\", \"localhost\"),\n        port = data.get(\"port\").map(_.toInt).getOrElse(8080),\n        timeout = data.get(\"timeout\").map(_.toInt).getOrElse(30),\n        debug = data.get(\"debug\").map(_.toBoolean).getOrElse(false)\n      )\n    }\n  }\n\n  // \u30c6\u30b9\u30c8\u7528\u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\n  import java.io.PrintWriter\n  Try {\n    val writer = new PrintWriter(\"app.conf\")\n    try {\n      writer.println(\"host = example.com\")\n      writer.println(\"port = 3000\")\n      writer.println(\"timeout = 60\")\n      writer.println(\"debug = true\")\n    } finally {\n      writer.close()\n    }\n  }\n\n  // \u8a2d\u5b9a\u3092\u8aad\u307f\u8fbc\u3080\n  ConfigLoader.load(\"app.conf\") match {\n    case Success(config) =&gt;\n      println(\"\u8a2d\u5b9a\u8aad\u307f\u8fbc\u307f\u6210\u529f:\")\n      println(s\"  \u30db\u30b9\u30c8: ${config.host}\")\n      println(s\"  \u30dd\u30fc\u30c8: ${config.port}\")\n      println(s\"  \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8: ${config.timeout}\u79d2\")\n      println(s\"  \u30c7\u30d0\u30c3\u30b0: ${config.debug}\")\n    case Failure(error) =&gt;\n      println(s\"\u8a2d\u5b9a\u8aad\u307f\u8fbc\u307f\u30a8\u30e9\u30fc: ${error.getMessage}\")\n  }\n\n  // \u5b58\u5728\u3057\u306a\u3044\u30d5\u30a1\u30a4\u30eb\n  ConfigLoader.load(\"missing.conf\") match {\n    case Success(_) =&gt; println(\"\u6210\u529f\uff08\u3042\u308a\u5f97\u306a\u3044\uff09\")\n    case Failure(error) =&gt; println(s\"\u4e88\u60f3\u901a\u308a\u30a8\u30e9\u30fc: ${error.getMessage}\")\n  }\n}\n</code></pre>"},{"location":"part5/chapter21/#tryoption","title":"Try\u3068Option\u306e\u5909\u63db","text":"<pre><code>// TryOptionConversion.scala\n@main def tryOptionConversion(): Unit = {\n  import scala.util.{Try, Success, Failure}\n\n  // Try \u2192 Option\n  val try1: Try[Int] = Success(42)\n  val try2: Try[Int] = Failure(new Exception(\"\u30a8\u30e9\u30fc\"))\n\n  val opt1 = try1.toOption\n  val opt2 = try2.toOption\n\n  println(s\"Success \u2192 Option: $opt1\")  // Some(42)\n  println(s\"Failure \u2192 Option: $opt2\")  // None\n\n  // Option \u2192 Try\n  val some: Option[String] = Some(\"Hello\")\n  val none: Option[String] = None\n\n  val try3 = some.map(Success(_)).getOrElse(\n    Failure(new NoSuchElementException(\"\u5024\u304c\u3042\u308a\u307e\u305b\u3093\"))\n  )\n  val try4 = none.map(Success(_)).getOrElse(\n    Failure(new NoSuchElementException(\"\u5024\u304c\u3042\u308a\u307e\u305b\u3093\"))\n  )\n\n  println(s\"Some \u2192 Try: $try3\")\n  println(s\"None \u2192 Try: $try4\")\n\n  // \u5b9f\u7528\u4f8b\uff1a\u5b89\u5168\u306a\u30c7\u30fc\u30bf\u5909\u63db\n  def parseAndDouble(s: String): Option[Int] =\n    Try(s.toInt).map(_ * 2).toOption\n\n  println(s\"\u6b63\u5e38: ${parseAndDouble(\"5\")}\")\n  println(s\"\u30a8\u30e9\u30fc: ${parseAndDouble(\"abc\")}\")\n}\n</code></pre>"},{"location":"part5/chapter21/#tryfuture","title":"Try\u3068Future\u306e\u7d44\u307f\u5408\u308f\u305b","text":"<pre><code>// TryWithFuture.scala\n@main def tryWithFuture(): Unit = {\n  import scala.util.{Try, Success, Failure}\n  import scala.concurrent.{Future, Await}\n  import scala.concurrent.duration.*\n  import scala.concurrent.ExecutionContext.Implicits.global\n\n  // \u975e\u540c\u671f\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u3080\n  def readFileAsync(filename: String): Future[Try[String]] = Future {\n    Try {\n      val source = scala.io.Source.fromFile(filename)\n      try {\n        source.mkString\n      } finally {\n        source.close()\n      }\n    }\n  }\n\n  // \u8907\u6570\u30d5\u30a1\u30a4\u30eb\u3092\u4e26\u884c\u3067\u8aad\u3080\n  val files = List(\"file1.txt\", \"file2.txt\", \"file3.txt\")\n\n  val futureResults = Future.sequence(\n    files.map(readFileAsync)\n  )\n\n  val results = Await.result(futureResults, 5.seconds)\n\n  results.zipWithIndex.foreach { case (result, index) =&gt;\n    result match {\n      case Success(content) =&gt;\n        println(s\"\u30d5\u30a1\u30a4\u30eb${index + 1}: \u6210\u529f\uff08${content.length}\u6587\u5b57\uff09\")\n      case Failure(error) =&gt;\n        println(s\"\u30d5\u30a1\u30a4\u30eb${index + 1}: \u5931\u6557\uff08${error.getMessage}\uff09\")\n    }\n  }\n\n  // Future[Try[T]] \u3092 Try[Future[T]] \u306b\u5909\u63db\n  def sequence[T](futures: List[Future[Try[T]]]): Future[Try[List[T]]] = {\n    Future.sequence(futures).map { results =&gt;\n      results.foldLeft[Try[List[T]]](Success(Nil)) { (acc, result) =&gt;\n        acc.flatMap { list =&gt;\n          result.map(list :+ _)\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"part5/chapter21/#_5","title":"\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306e\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9","text":"<pre><code>// ErrorHandlingBestPractices.scala\n@main def errorHandlingBestPractices(): Unit = {\n  import scala.util.{Try, Success, Failure}\n\n  // \u30ab\u30b9\u30bf\u30e0\u30a8\u30e9\u30fc\u578b\n  sealed trait AppError extends Exception\n  case class ValidationError(message: String) extends AppError\n  case class NetworkError(message: String) extends AppError\n  case class DatabaseError(message: String) extends AppError\n\n  // \u30a8\u30e9\u30fc\u3092\u5206\u985e\u3057\u3066\u51e6\u7406\n  def processData(input: String): Try[String] =\n    validateInput(input)\n      .flatMap(fetchFromNetwork)\n      .flatMap(saveToDatabase)\n      .recover {\n        case ValidationError(msg) =&gt;\n          s\"\u5165\u529b\u30a8\u30e9\u30fc: $msg\"\n        case NetworkError(msg) =&gt;\n          s\"\u901a\u4fe1\u30a8\u30e9\u30fc: $msg\uff08\u30ed\u30fc\u30ab\u30eb\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u4f7f\u7528\uff09\"\n        case DatabaseError(msg) =&gt;\n          s\"\u4fdd\u5b58\u30a8\u30e9\u30fc: $msg\uff08\u30ea\u30c8\u30e9\u30a4\u304c\u5fc5\u8981\uff09\"\n      }\n\n  def validateInput(input: String): Try[String] = {\n    if (input.trim.isEmpty) {\n      Failure(ValidationError(\"\u5165\u529b\u304c\u7a7a\u3067\u3059\"))\n    } else if (input.length &gt; 100) {\n      Failure(ValidationError(\"\u5165\u529b\u304c\u9577\u3059\u304e\u307e\u3059\"))\n    } else {\n      Success(input)\n    }\n  }\n\n  def fetchFromNetwork(data: String): Try[String] = {\n    if (scala.util.Random.nextBoolean()) {\n      Success(s\"\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u304b\u3089\u53d6\u5f97: $data\")\n    } else {\n      Failure(NetworkError(\"\u63a5\u7d9a\u3067\u304d\u307e\u305b\u3093\"))\n    }\n  }\n\n  def saveToDatabase(data: String): Try[String] = {\n    if (scala.util.Random.nextBoolean()) {\n      Success(s\"\u4fdd\u5b58\u5b8c\u4e86: $data\")\n    } else {\n      Failure(DatabaseError(\"\u30c7\u30a3\u30b9\u30af\u5bb9\u91cf\u4e0d\u8db3\"))\n    }\n  }\n\n  // \u30c6\u30b9\u30c8\n  val inputs = List(\"\", \"\u6b63\u5e38\u306a\u30c7\u30fc\u30bf\", \"a\" * 150)\n\n  inputs.foreach { input =&gt;\n    println(s\"\\n\u5165\u529b: '${input.take(20)}...'\")\n    processData(input) match {\n      case Success(result) =&gt; println(s\"\u6210\u529f: $result\")\n      case Failure(error) =&gt; println(s\"\u5931\u6557: ${error.getMessage}\")\n    }\n  }\n}\n</code></pre>"},{"location":"part5/chapter21/#csv","title":"\u5b9f\u8df5\u4f8b\uff1aCSV\u30d1\u30fc\u30b5\u30fc","text":"<pre><code>// CsvParser.scala\n@main def csvParser(): Unit = {\n  import scala.util.{Try, Success, Failure}\n\n  case class Person(name: String, age: Int, email: String)\n\n  object CsvParser {\n    def parseFile(filename: String): Try[List[Person]] =\n      for {\n        content &lt;- readFile(filename)\n        lines &lt;- Try(content.split(\"\\n\").toList)\n        header &lt;- parseHeader(lines.headOption)\n        data &lt;- parseData(lines.drop(1), header)\n      } yield data\n\n    private def readFile(filename: String): Try[String] = Try {\n      val source = scala.io.Source.fromFile(filename)\n      try source.mkString\n      finally source.close()\n    }\n\n    private def parseHeader(headerOpt: Option[String]): Try[List[String]] =\n      headerOpt match {\n        case Some(header) =&gt; Success(header.split(\",\").map(_.trim).toList)\n        case None =&gt; Failure(new Exception(\"\u30d8\u30c3\u30c0\u30fc\u304c\u3042\u308a\u307e\u305b\u3093\"))\n      }\n\n    private def parseData(lines: List[String], header: List[String]): Try[List[Person]] =\n      Try {\n        lines.filter(_.trim.nonEmpty).map { line =&gt;\n          val values = line.split(\",\").map(_.trim)\n          if (values.length != header.length) {\n            throw new Exception(s\"\u5217\u6570\u304c\u4e00\u81f4\u3057\u307e\u305b\u3093: $line\")\n          }\n\n          val data = header.zip(values).toMap\n          Person(\n            name = data.getOrElse(\"name\", throw new Exception(\"\u540d\u524d\u304c\u3042\u308a\u307e\u305b\u3093\")),\n            age = data.get(\"age\").map(_.toInt).getOrElse(throw new Exception(\"\u5e74\u9f62\u304c\u3042\u308a\u307e\u305b\u3093\")),\n            email = data.getOrElse(\"email\", throw new Exception(\"\u30e1\u30fc\u30eb\u304c\u3042\u308a\u307e\u305b\u3093\"))\n          )\n        }\n      }\n  }\n\n  // \u30c6\u30b9\u30c8\u7528CSV\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\n  import java.io.PrintWriter\n  Try {\n    val writer = new PrintWriter(\"people.csv\")\n    try {\n      writer.println(\"name,age,email\")\n      writer.println(\"\u7530\u4e2d\u592a\u90ce,25,taro@example.com\")\n      writer.println(\"\u5c71\u7530\u82b1\u5b50,30,hanako@example.com\")\n      writer.println(\"\u4f50\u85e4\u6b21\u90ce,invalid,jiro@example.com\")  // \u30a8\u30e9\u30fc\u30c7\u30fc\u30bf\n    } finally {\n      writer.close()\n    }\n  }\n\n  // \u30d1\u30fc\u30b9\u5b9f\u884c\n  CsvParser.parseFile(\"people.csv\") match {\n    case Success(people) =&gt;\n      println(\"\u30d1\u30fc\u30b9\u6210\u529f:\")\n      people.foreach(println)\n    case Failure(error) =&gt;\n      println(s\"\u30d1\u30fc\u30b9\u30a8\u30e9\u30fc: ${error.getMessage}\")\n      error.printStackTrace()\n  }\n}\n</code></pre>"},{"location":"part5/chapter21/#_6","title":"\u7df4\u7fd2\u3057\u3066\u307f\u3088\u3046\uff01","text":""},{"location":"part5/chapter21/#1json","title":"\u7df4\u7fd21\uff1aJSON\u98a8\u30d1\u30fc\u30b5\u30fc","text":"<p>\u7c21\u5358\u306aJSON\u98a8\u306e\u6587\u5b57\u5217\uff08<code>key:value,key:value</code>\u5f62\u5f0f\uff09\u3092\u30d1\u30fc\u30b9\u3059\u308b\u95a2\u6570\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\u3002 \u4e0d\u6b63\u306a\u5f62\u5f0f\u306e\u5834\u5408\u306f\u9069\u5207\u306a\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8fd4\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"part5/chapter21/#2","title":"\u7df4\u7fd22\uff1a\u8a08\u7b97\u6a5f","text":"<p>\u6587\u5b57\u5217\u3067\u6570\u5f0f\u3092\u53d7\u3051\u53d6\u3063\u3066\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\u3002 \uff08\u4f8b\uff1a\"10 + 20\", \"100 / 5\"\uff09 \u4e0d\u6b63\u306a\u5165\u529b\u3084\u30bc\u30ed\u9664\u7b97\u3092\u9069\u5207\u306b\u51e6\u7406\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"part5/chapter21/#3","title":"\u7df4\u7fd23\uff1a\u30d0\u30c3\u30c1\u51e6\u7406","text":"<p>\u30d5\u30a1\u30a4\u30eb\u306e\u30ea\u30b9\u30c8\u3092\u53d7\u3051\u53d6\u3063\u3066\u3001\u3059\u3079\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u51e6\u7406\u3059\u308b\u95a2\u6570\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\u3002 \u4e00\u90e8\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u5931\u6557\u3057\u3066\u3082\u3001\u51e6\u7406\u53ef\u80fd\u306a\u30d5\u30a1\u30a4\u30eb\u306f\u3059\u3079\u3066\u51e6\u7406\u3057\u3001 \u6700\u5f8c\u306b\u6210\u529f\u6570\u3068\u5931\u6557\u6570\u3092\u30ec\u30dd\u30fc\u30c8\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"part5/chapter21/#_7","title":"\u3053\u306e\u7ae0\u306e\u307e\u3068\u3081","text":"<p>\u4f8b\u5916\u3092\u5024\u3068\u3057\u3066\u6271\u3046\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3057\u305f\uff01</p>"},{"location":"part5/chapter21/#_8","title":"\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3053\u3068","text":"<p>\u2705 Try\u306e\u57fa\u672c - Success \u3068 Failure - \u4f8b\u5916\u306e\u5b89\u5168\u306a\u51e6\u7406 - Try \u306e\u4f5c\u6210\u65b9\u6cd5</p> <p>\u2705 Try\u306e\u64cd\u4f5c - map, flatMap \u3067\u306e\u5909\u63db - recover \u3067\u306e\u30a8\u30e9\u30fc\u56de\u5fa9 - filter \u3067\u306e\u6761\u4ef6\u30c1\u30a7\u30c3\u30af</p> <p>\u2705 \u5b9f\u8df5\u7684\u306a\u4f7f\u3044\u65b9 - \u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f - \u8a2d\u5b9a\u306e\u89e3\u6790 - \u30c7\u30fc\u30bf\u5909\u63db</p> <p>\u2705 \u4ed6\u306e\u578b\u3068\u306e\u9023\u643a - Option \u3068\u306e\u5909\u63db - Future \u3068\u306e\u7d44\u307f\u5408\u308f\u305b - \u30a8\u30e9\u30fc\u306e\u5206\u985e\u3068\u51e6\u7406</p>"},{"location":"part5/chapter21/#try_3","title":"Try \u3092\u4f7f\u3046\u30b3\u30c4","text":"<ol> <li> <p>\u65e9\u671f\u306eTry\u5316</p> <ul> <li>\u4f8b\u5916\u304c\u8d77\u304d\u308b\u53ef\u80fd\u6027\u306e\u3042\u308b\u51e6\u7406\u306f\u5373Try</li> <li>\u5883\u754c\u90e8\u5206\u3067\u306e\u30a8\u30e9\u30fc\u51e6\u7406</li> <li>\u5916\u90e8\u30ea\u30bd\u30fc\u30b9\u3078\u306e\u30a2\u30af\u30bb\u30b9</li> </ul> </li> <li> <p>\u30a8\u30e9\u30fc\u306e\u5206\u985e</p> <ul> <li>\u30ab\u30b9\u30bf\u30e0\u30a8\u30e9\u30fc\u578b\u306e\u5b9a\u7fa9</li> <li>recover \u3067\u306e\u9069\u5207\u306a\u51e6\u7406</li> <li>\u30e6\u30fc\u30b6\u30fc\u30d5\u30ec\u30f3\u30c9\u30ea\u30fc\u306a\u30e1\u30c3\u30bb\u30fc\u30b8</li> </ul> </li> <li> <p>\u95a2\u6570\u578b\u30b9\u30bf\u30a4\u30eb</p> <ul> <li>for\u5f0f\u3067\u306e\u7d44\u307f\u5408\u308f\u305b</li> <li>map/flatMap\u306e\u6d3b\u7528</li> <li>\u4f8b\u5916\u3092\u6295\u3052\u306a\u3044\u8a2d\u8a08</li> </ul> </li> </ol>"},{"location":"part5/chapter21/#_9","title":"\u6b21\u306e\u90e8\u3067\u306f...","text":"<p>\u7b2cVI\u90e8\u3067\u306f\u3001\u578b\u3067\u8a2d\u8a08\u3059\u308b\u30c7\u30fc\u30bf\u69cb\u9020\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3059\u3002\u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u3084\u30b7\u30fc\u30eb\u30c9\u30c8\u30ec\u30a4\u30c8\u3092\u4f7f\u3063\u305f\u3001\u3088\u308a\u5b89\u5168\u3067\u8868\u73fe\u529b\u8c4a\u304b\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u7fd2\u5f97\u3057\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part5/chapter21/#_10","title":"\u6700\u5f8c\u306b","text":"<p>Try \u306f\u300c\u30a8\u30e9\u30fc\u306e\u6551\u6025\u7bb1\u300d\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u4f55\u304b\u554f\u984c\u304c\u8d77\u304d\u3066\u3082\u3001\u614c\u3066\u305a\u306b\u5bfe\u51e6\u3067\u304d\u307e\u3059\u3002\u4f8b\u5916\u3092\u6050\u308c\u305a\u306b\u3001\u3080\u3057\u308d\u300c\u666e\u901a\u306e\u5024\u300d\u3068\u3057\u3066\u6271\u3046\u3053\u3068\u3067\u3001\u3088\u308a\u5805\u7262\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u30a8\u30e9\u30fc\u3068\u53cb\u9054\u306b\u306a\u308a\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part6/chapter22/","title":"\u7b2c22\u7ae0 \u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u306e\u4fbf\u5229\u3055","text":""},{"location":"part6/chapter22/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u304a\u5e97\u3067\u5546\u54c1\u3092\u7ba1\u7406\u3059\u308b\u3068\u304d\u3001\u300c\u5546\u54c1\u540d\u300d\u300c\u4fa1\u683c\u300d\u300c\u5728\u5eab\u6570\u300d\u306a\u3069\u3001\u95a2\u9023\u3059\u308b\u60c5\u5831\u3092\u307e\u3068\u3081\u3066\u6271\u3044\u305f\u3044\u3067\u3059\u3088\u306d\u3002\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u3082\u540c\u3058\u3067\u3059\u3002</p> <p>Scala\u306e\u300c\u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u300d\u306f\u3001\u95a2\u9023\u3059\u308b\u30c7\u30fc\u30bf\u3092\u307e\u3068\u3081\u308b\u6700\u9ad8\u306e\u65b9\u6cd5\u3067\u3059\u3002\u307e\u308b\u3067\u3001\u5c02\u7528\u306e\u53ce\u7d0d\u30dc\u30c3\u30af\u30b9\u3092\u4f5c\u308b\u3088\u3046\u306b\u3001\u30c7\u30fc\u30bf\u3092\u6574\u7406\u6574\u9813\u3067\u304d\u307e\u3059\uff01</p>"},{"location":"part6/chapter22/#_2","title":"\u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u3063\u3066\u4f55\u3060\u308d\u3046\uff1f","text":""},{"location":"part6/chapter22/#vs","title":"\u901a\u5e38\u306e\u30af\u30e9\u30b9 vs \u30b1\u30fc\u30b9\u30af\u30e9\u30b9","text":"<pre><code>// ClassVsCaseClass.scala\n@main def classVsCaseClass(): Unit = {\n  // \u901a\u5e38\u306e\u30af\u30e9\u30b9\uff08\u9762\u5012...\uff09\n  class PersonClass(val name: String, val age: Int)\n\n  val person1 = new PersonClass(\"\u592a\u90ce\", 25)\n  // println(person1)  // \u610f\u5473\u4e0d\u660e\u306a\u51fa\u529b\n  // val person2 = person1.copy()  // copy\u30e1\u30bd\u30c3\u30c9\u304c\u306a\u3044\uff01\n\n  // \u30b1\u30fc\u30b9\u30af\u30e9\u30b9\uff08\u4fbf\u5229\uff01\uff09\n  case class Person(name: String, age: Int)\n\n  val person3 = Person(\"\u82b1\u5b50\", 30)  // new\u304c\u4e0d\u8981\n  println(person3)  // Person(\u82b1\u5b50,30) \u3068\u8aad\u307f\u3084\u3059\u3044\uff01\n\n  val person4 = person3.copy(age = 31)  // \u7c21\u5358\u306b\u30b3\u30d4\u30fc\uff06\u5909\u66f4\n  println(person4)\n\n  // \u81ea\u52d5\u7684\u306b\u4f7f\u3048\u308b\u30e1\u30bd\u30c3\u30c9\u305f\u3061\n  println(s\"\u540d\u524d: ${person3.name}\")\n  println(s\"\u5e74\u9f62: ${person3.age}\")\n  println(s\"\u540c\u3058\uff1f: ${person3 == Person(\"\u82b1\u5b50\", 30)}\")  // true\uff01\n}\n</code></pre>"},{"location":"part6/chapter22/#_3","title":"\u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u306e\u57fa\u672c\u6a5f\u80fd","text":""},{"location":"part6/chapter22/#_4","title":"\u81ea\u52d5\u751f\u6210\u3055\u308c\u308b\u4fbf\u5229\u306a\u6a5f\u80fd","text":"<pre><code>// CaseClassFeatures.scala\n@main def caseClassFeatures(): Unit = {\n  case class Product(\n    id: Int,\n    name: String,\n    price: Double,\n    inStock: Boolean = true\n  )\n\n  // 1. \u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306eapply\u30e1\u30bd\u30c3\u30c9\uff08new\u304c\u4e0d\u8981\uff09\n  val product1 = Product(1, \"\u30ce\u30fc\u30c8PC\", 89800.0)\n\n  // 2. toString\u30e1\u30bd\u30c3\u30c9\n  println(product1)  // Product(1,\u30ce\u30fc\u30c8PC,89800.0,true)\n\n  // 3. equals\u30e1\u30bd\u30c3\u30c9\uff08==\u3067\u5185\u5bb9\u3092\u6bd4\u8f03\uff09\n  val product2 = Product(1, \"\u30ce\u30fc\u30c8PC\", 89800.0)\n  println(s\"\u540c\u3058\u5546\u54c1\uff1f: ${product1 == product2}\")  // true\n\n  // 4. hashCode\u30e1\u30bd\u30c3\u30c9\uff08Map\u3084Set\u3067\u4f7f\u3048\u308b\uff09\n  val productSet = Set(product1, product2)\n  println(s\"\u30bb\u30c3\u30c8\u306e\u30b5\u30a4\u30ba: ${productSet.size}\")  // 1\uff08\u91cd\u8907\u9664\u53bb\uff09\n\n  // 5. copy\u30e1\u30bd\u30c3\u30c9\n  val discounted = product1.copy(price = 79800.0)\n  println(s\"\u5272\u5f15\u5f8c: $discounted\")\n\n  // 6. \u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u3067\u5206\u89e3\n  product1 match {\n    case Product(id, name, price, true) =&gt;\n      println(f\"$name (ID:$id) \u306f ${price}%.0f\u5186\u3067\u5728\u5eab\u3042\u308a\")\n    case Product(_, name, _, false) =&gt;\n      println(s\"$name \u306f\u5728\u5eab\u5207\u308c\")\n  }\n}\n</code></pre>"},{"location":"part6/chapter22/#unapply","title":"unapply\u30e1\u30bd\u30c3\u30c9\u3068\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1","text":"<pre><code>// PatternMatchingCaseClass.scala\n@main def patternMatchingCaseClass(): Unit = {\n  // \u7570\u306a\u308b\u7a2e\u985e\u306e\u901a\u77e5\n  sealed trait Notification\n  case class Email(sender: String, title: String, body: String) extends Notification\n  case class SMS(caller: String, message: String) extends Notification\n  case class Push(app: String, content: String, urgent: Boolean) extends Notification\n\n  def handleNotification(notification: Notification): String =\n    notification match {\n      case Email(sender, title, _) =&gt;\n        s\"\ud83d\udce7 \u30e1\u30fc\u30eb: $sender \u304b\u3089\u300c$title\u300d\"\n\n      case SMS(caller, message) if message.length &gt; 50 =&gt;\n        s\"\ud83d\udcf1 \u9577\u3044SMS: $caller \u304b\u3089\uff08${message.take(20)}...\uff09\"\n\n      case SMS(caller, message) =&gt;\n        s\"\ud83d\udcf1 SMS: $caller \u304b\u3089\u300c$message\u300d\"\n\n      case Push(app, content, true) =&gt;\n        s\"\ud83d\udd34 \u7dca\u6025\u901a\u77e5: $app - $content\"\n\n      case Push(app, content, false) =&gt;\n        s\"\ud83d\udd35 \u901a\u77e5: $app - $content\"\n    }\n\n  // \u3044\u308d\u3044\u308d\u306a\u901a\u77e5\u3092\u51e6\u7406\n  val notifications = List(\n    Email(\"boss@company.com\", \"\u4f1a\u8b70\u306e\u4ef6\", \"\u660e\u65e5\u306e\u4f1a\u8b70\u306f10\u6642\u304b\u3089\u3067\u3059\"),\n    SMS(\"090-1234-5678\", \"\u4eca\u3069\u3053\uff1f\"),\n    SMS(\"080-9876-5432\", \"\u4eca\u65e5\u306f\u3042\u308a\u304c\u3068\u3046\uff01\u3068\u3066\u3082\u697d\u3057\u304b\u3063\u305f\u3067\u3059\u3002\u307e\u305f\u4f1a\u3044\u307e\u3057\u3087\u3046\"),\n    Push(\"\u30ab\u30ec\u30f3\u30c0\u30fc\", \"15\u5206\u5f8c\u306b\u4f1a\u8b70\", true),\n    Push(\"\u30cb\u30e5\u30fc\u30b9\", \"\u65b0\u7740\u8a18\u4e8b\u304c\u3042\u308a\u307e\u3059\", false)\n  )\n\n  notifications.foreach { n =&gt;\n    println(handleNotification(n))\n  }\n}\n</code></pre>"},{"location":"part6/chapter22/#_5","title":"\u5b9f\u8df5\u7684\u306a\u4f7f\u3044\u65b9","text":""},{"location":"part6/chapter22/#_6","title":"\u30b7\u30e7\u30c3\u30d4\u30f3\u30b0\u30ab\u30fc\u30c8\u30b7\u30b9\u30c6\u30e0","text":"<pre><code>// ShoppingCartSystem.scala\n@main def shoppingCartSystem(): Unit = {\n  // \u5546\u54c1\u60c5\u5831\n  case class Product(\n    id: String,\n    name: String,\n    price: Int,\n    category: String\n  )\n\n  // \u30ab\u30fc\u30c8\u30a2\u30a4\u30c6\u30e0\uff08\u5546\u54c1\u3068\u6570\u91cf\uff09\n  case class CartItem(\n    product: Product,\n    quantity: Int\n  ):\n    def subtotal: Int = product.price * quantity\n\n  // \u30b7\u30e7\u30c3\u30d4\u30f3\u30b0\u30ab\u30fc\u30c8\n  case class Cart(\n    items: List[CartItem] = List.empty\n  ):\n    def addItem(product: Product, quantity: Int = 1): Cart =\n      val existingItem = items.find(_.product.id == product.id)\n\n      existingItem match {\n        case Some(item) =&gt;\n          val updated = item.copy(quantity = item.quantity + quantity)\n          val newItems = items.map(i =&gt; \n            if (i.product.id == product.id) updated else i\n          )\n          copy(items = newItems)\n\n        case None =&gt;\n          copy(items = items :+ CartItem(product, quantity))\n      }\n\n    def removeItem(productId: String): Cart =\n      copy(items = items.filterNot(_.product.id == productId))\n\n    def updateQuantity(productId: String, newQuantity: Int): Cart =\n      if (newQuantity &lt;= 0) {\n        removeItem(productId)\n      } else {\n        val newItems = items.map { item =&gt;\n          if (item.product.id == productId) {\n            item.copy(quantity = newQuantity)\n          } else {\n            item\n          }\n        }\n        copy(items = newItems)\n      }\n\n    def total: Int = items.map(_.subtotal).sum\n\n    def itemCount: Int = items.map(_.quantity).sum\n\n    def summary: String =\n      if (items.isEmpty) {\n        \"\u30ab\u30fc\u30c8\u306f\u7a7a\u3067\u3059\"\n      } else {\n        val itemList = items.map { item =&gt;\n          f\"${item.product.name}%-15s \u00d7 ${item.quantity}%2d = ${item.subtotal}%,6d\u5186\"\n        }.mkString(\"\\n\")\n\n        s\"\"\"$itemList\n           |${\"=\" * 40}\n           |\u5408\u8a08: ${total}%,d\u5186\uff08${itemCount}\u70b9\uff09\"\"\".stripMargin\n      }\n\n  // \u5546\u54c1\u30ab\u30bf\u30ed\u30b0\n  val products = List(\n    Product(\"P001\", \"T\u30b7\u30e3\u30c4\", 2980, \"\u8863\u985e\"),\n    Product(\"P002\", \"\u30b8\u30fc\u30f3\u30ba\", 5980, \"\u8863\u985e\"),\n    Product(\"P003\", \"\u30b9\u30cb\u30fc\u30ab\u30fc\", 8980, \"\u9774\"),\n    Product(\"P004\", \"\u30ea\u30e5\u30c3\u30af\", 4980, \"\u30d0\u30c3\u30b0\")\n  )\n\n  // \u30ab\u30fc\u30c8\u306e\u64cd\u4f5c\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\n  var myCart = Cart()\n\n  println(\"=== \u30b7\u30e7\u30c3\u30d4\u30f3\u30b0\u958b\u59cb ===\\n\")\n\n  // \u5546\u54c1\u3092\u8ffd\u52a0\n  myCart = myCart.addItem(products(0), 2)  // T\u30b7\u30e3\u30c42\u679a\n  println(\"T\u30b7\u30e3\u30c4\u30922\u679a\u8ffd\u52a0\")\n  println(myCart.summary)\n\n  println(\"\\n\" + \"=\" * 50 + \"\\n\")\n\n  myCart = myCart.addItem(products(1))  // \u30b8\u30fc\u30f3\u30ba1\u672c\n  myCart = myCart.addItem(products(2))  // \u30b9\u30cb\u30fc\u30ab\u30fc1\u8db3\n  println(\"\u30b8\u30fc\u30f3\u30ba\u3068\u30b9\u30cb\u30fc\u30ab\u30fc\u3092\u8ffd\u52a0\")\n  println(myCart.summary)\n\n  println(\"\\n\" + \"=\" * 50 + \"\\n\")\n\n  // \u6570\u91cf\u5909\u66f4\n  myCart = myCart.updateQuantity(\"P001\", 1)  // T\u30b7\u30e3\u30c4\u30921\u679a\u306b\n  println(\"T\u30b7\u30e3\u30c4\u30921\u679a\u306b\u5909\u66f4\")\n  println(myCart.summary)\n}\n</code></pre>"},{"location":"part6/chapter22/#_7","title":"\u30e6\u30fc\u30b6\u30fc\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0","text":"<pre><code>// UserManagementSystem.scala\n@main def userManagementSystem(): Unit = {\n  import java.time.LocalDateTime\n\n  // \u30e6\u30fc\u30b6\u30fc\u306e\u72b6\u614b\n  sealed trait UserStatus\n  case object Active extends UserStatus\n  case object Suspended extends UserStatus\n  case object Deleted extends UserStatus\n\n  // \u30e6\u30fc\u30b6\u30fc\u60c5\u5831\n  case class User(\n    id: String,\n    name: String,\n    email: String,\n    status: UserStatus = Active,\n    createdAt: LocalDateTime = LocalDateTime.now(),\n    lastLoginAt: Option[LocalDateTime] = None\n  )\n\n  // \u30e6\u30fc\u30b6\u30fc\u30a4\u30d9\u30f3\u30c8\uff08\u76e3\u67fb\u30ed\u30b0\u7528\uff09\n  sealed trait UserEvent\n  case class UserCreated(user: User, timestamp: LocalDateTime) extends UserEvent\n  case class UserUpdated(oldUser: User, newUser: User, timestamp: LocalDateTime) extends UserEvent\n  case class UserLoggedIn(userId: String, timestamp: LocalDateTime) extends UserEvent\n  case class UserStatusChanged(userId: String, from: UserStatus, to: UserStatus, timestamp: LocalDateTime) extends UserEvent\n\n  // \u30e6\u30fc\u30b6\u30fc\u7ba1\u7406\u30af\u30e9\u30b9\n  class UserManager:\n    private var users = Map.empty[String, User]\n    private var events = List.empty[UserEvent]\n\n    def createUser(name: String, email: String): Either[String, User] =\n      if (users.values.exists(_.email == email)) {\n        Left(s\"\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9 $email \u306f\u65e2\u306b\u4f7f\u7528\u3055\u308c\u3066\u3044\u307e\u3059\")\n      } else {\n        val user = User(\n          id = s\"U${System.currentTimeMillis()}\",\n          name = name,\n          email = email\n        )\n        users += (user.id -&gt; user)\n        events ::= UserCreated(user, LocalDateTime.now())\n        Right(user)\n      }\n\n    def updateUser(userId: String, name: Option[String] = None, email: Option[String] = None): Either[String, User] =\n      users.get(userId) match {\n        case None =&gt; Left(s\"\u30e6\u30fc\u30b6\u30fc $userId \u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\")\n        case Some(oldUser) =&gt;\n          val newUser = oldUser.copy(\n            name = name.getOrElse(oldUser.name),\n            email = email.getOrElse(oldUser.email)\n          )\n          users += (userId -&gt; newUser)\n          events ::= UserUpdated(oldUser, newUser, LocalDateTime.now())\n          Right(newUser)\n      }\n\n    def login(userId: String): Either[String, User] =\n      users.get(userId) match {\n        case None =&gt; Left(s\"\u30e6\u30fc\u30b6\u30fc $userId \u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\")\n        case Some(user) if user.status != Active =&gt; Left(\"\u30a2\u30ab\u30a6\u30f3\u30c8\u304c\u7121\u52b9\u3067\u3059\")\n        case Some(user) =&gt;\n          val updatedUser = user.copy(lastLoginAt = Some(LocalDateTime.now()))\n          users += (userId -&gt; updatedUser)\n          events ::= UserLoggedIn(userId, LocalDateTime.now())\n          Right(updatedUser)\n      }\n\n    def changeStatus(userId: String, newStatus: UserStatus): Either[String, User] =\n      users.get(userId) match {\n        case None =&gt; Left(s\"\u30e6\u30fc\u30b6\u30fc $userId \u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\")\n        case Some(user) =&gt;\n          val updatedUser = user.copy(status = newStatus)\n          users += (userId -&gt; updatedUser)\n          events ::= UserStatusChanged(userId, user.status, newStatus, LocalDateTime.now())\n          Right(updatedUser)\n      }\n\n    def findByEmail(email: String): Option[User] =\n      users.values.find(_.email == email)\n\n    def listActiveUsers: List[User] =\n      users.values.filter(_.status == Active).toList\n\n    def getAuditLog: List[UserEvent] = events.reverse\n\n  // \u4f7f\u7528\u4f8b\n  val userManager = new UserManager\n\n  println(\"=== \u30e6\u30fc\u30b6\u30fc\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0 ===\\n\")\n\n  // \u30e6\u30fc\u30b6\u30fc\u4f5c\u6210\n  val result1 = userManager.createUser(\"\u7530\u4e2d\u592a\u90ce\", \"taro@example.com\")\n  result1 match {\n    case Right(user) =&gt; println(s\"\u30e6\u30fc\u30b6\u30fc\u4f5c\u6210\u6210\u529f: $user\")\n    case Left(error) =&gt; println(s\"\u30a8\u30e9\u30fc: $error\")\n  }\n\n  // \u91cd\u8907\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\n  userManager.createUser(\"\u5c71\u7530\u82b1\u5b50\", \"taro@example.com\") match {\n    case Right(user) =&gt; println(s\"\u30e6\u30fc\u30b6\u30fc\u4f5c\u6210\u6210\u529f: $user\")\n    case Left(error) =&gt; println(s\"\u30a8\u30e9\u30fc: $error\")\n  }\n\n  // \u5225\u306e\u30e6\u30fc\u30b6\u30fc\u4f5c\u6210\n  val Right(user2) = userManager.createUser(\"\u5c71\u7530\u82b1\u5b50\", \"hanako@example.com\")\n\n  // \u30ed\u30b0\u30a4\u30f3\n  userManager.login(user2.id) match {\n    case Right(user) =&gt; println(s\"\\n\u30ed\u30b0\u30a4\u30f3\u6210\u529f: ${user.name}\")\n    case Left(error) =&gt; println(s\"\u30ed\u30b0\u30a4\u30f3\u30a8\u30e9\u30fc: $error\")\n  }\n\n  // \u30a2\u30af\u30c6\u30a3\u30d6\u30e6\u30fc\u30b6\u30fc\u4e00\u89a7\n  println(\"\\n=== \u30a2\u30af\u30c6\u30a3\u30d6\u30e6\u30fc\u30b6\u30fc ===\")\n  userManager.listActiveUsers.foreach { user =&gt;\n    val lastLogin = user.lastLoginAt.map(_.toString).getOrElse(\"\u672a\u30ed\u30b0\u30a4\u30f3\")\n    println(s\"${user.name} (${user.email}) - \u6700\u7d42\u30ed\u30b0\u30a4\u30f3: $lastLogin\")\n  }\n}\n</code></pre>"},{"location":"part6/chapter22/#_8","title":"\u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u306e\u5fdc\u7528","text":""},{"location":"part6/chapter22/#_9","title":"\u30cd\u30b9\u30c8\u3057\u305f\u30b1\u30fc\u30b9\u30af\u30e9\u30b9","text":"<pre><code>// NestedCaseClasses.scala\n@main def nestedCaseClasses(): Unit = {\n  // \u4f4f\u6240\n  case class Address(\n    street: String,\n    city: String,\n    postalCode: String,\n    country: String = \"\u65e5\u672c\"\n  )\n\n  // \u9023\u7d61\u5148\n  case class Contact(\n    email: Option[String],\n    phone: Option[String],\n    address: Option[Address]\n  )\n\n  // \u5f93\u696d\u54e1\n  case class Employee(\n    id: String,\n    name: String,\n    department: String,\n    contact: Contact,\n    salary: Int\n  )\n\n  val employee = Employee(\n    id = \"E001\",\n    name = \"\u4f50\u85e4\u6b21\u90ce\",\n    department = \"\u958b\u767a\u90e8\",\n    contact = Contact(\n      email = Some(\"jiro@company.com\"),\n      phone = Some(\"03-1234-5678\"),\n      address = Some(Address(\n        street = \"\u5343\u4ee3\u7530\u533a\u4e38\u306e\u51851-1-1\",\n        city = \"\u6771\u4eac\u90fd\",\n        postalCode = \"100-0001\"\n      ))\n    ),\n    salary = 500000\n  )\n\n  // \u6df1\u3044\u30cd\u30b9\u30c8\u3078\u306e\u30a2\u30af\u30bb\u30b9\n  employee.contact.address match {\n    case Some(addr) =&gt; println(s\"${employee.name}\u306e\u4f4f\u6240: ${addr.city}${addr.street}\")\n    case None =&gt; println(s\"${employee.name}\u306e\u4f4f\u6240\u306f\u672a\u767b\u9332\")\n  }\n\n  // copy\u3067\u30cd\u30b9\u30c8\u3057\u305f\u5024\u3092\u66f4\u65b0\n  val relocated = employee.copy(\n    contact = employee.contact.copy(\n      address = employee.contact.address.map(_.copy(\n        street = \"\u6e0b\u8c37\u533a\u6e0b\u8c372-2-2\",\n        city = \"\u6771\u4eac\u90fd\",\n        postalCode = \"150-0002\"\n      ))\n    )\n  )\n\n  println(s\"\u8ee2\u5c45\u5f8c: ${relocated.contact.address}\")\n}\n</code></pre>"},{"location":"part6/chapter22/#_10","title":"\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306a\u30b1\u30fc\u30b9\u30af\u30e9\u30b9","text":"<pre><code>// GenericCaseClasses.scala\n@main def genericCaseClasses(): Unit = {\n  // API\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8868\u73fe\n  case class ApiResponse[T](\n    success: Boolean,\n    data: Option[T],\n    error: Option[String],\n    timestamp: Long = System.currentTimeMillis()\n  )\n\n  // \u30da\u30fc\u30b8\u30cd\u30fc\u30b7\u30e7\u30f3\u4ed8\u304d\u30ea\u30b9\u30c8\n  case class Page[A](\n    items: List[A],\n    currentPage: Int,\n    totalPages: Int,\n    totalItems: Int\n  ):\n    def hasNext: Boolean = currentPage &lt; totalPages\n    def hasPrevious: Boolean = currentPage &gt; 1\n\n  // \u4f7f\u7528\u4f8b\n  case class Article(id: Int, title: String, content: String)\n\n  val articlesResponse = ApiResponse(\n    success = true,\n    data = Some(Page(\n      items = List(\n        Article(1, \"Scala\u306e\u57fa\u790e\", \"\u5185\u5bb9...\"),\n        Article(2, \"\u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u5165\u9580\", \"\u5185\u5bb9...\")\n      ),\n      currentPage = 1,\n      totalPages = 5,\n      totalItems = 48\n    )),\n    error = None\n  )\n\n  articlesResponse.data match {\n    case Some(page) =&gt;\n      println(s\"${page.currentPage}/${page.totalPages}\u30da\u30fc\u30b8\")\n      page.items.foreach { article =&gt;\n        println(s\"- ${article.title}\")\n      }\n      if (page.hasNext) println(\"\u6b21\u306e\u30da\u30fc\u30b8\u304c\u3042\u308a\u307e\u3059\")\n\n    case None =&gt;\n      println(\"\u30c7\u30fc\u30bf\u304c\u3042\u308a\u307e\u305b\u3093\")\n  }\n}\n</code></pre>"},{"location":"part6/chapter22/#_11","title":"\u7df4\u7fd2\u3057\u3066\u307f\u3088\u3046\uff01","text":""},{"location":"part6/chapter22/#1","title":"\u7df4\u7fd21\uff1a\u56f3\u66f8\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0","text":"<p>\u4ee5\u4e0b\u306e\u8981\u4ef6\u3092\u6e80\u305f\u3059\u56f3\u66f8\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\uff1a - Book\uff08\u66f8\u7c4d\uff09: \u30bf\u30a4\u30c8\u30eb\u3001\u8457\u8005\u3001ISBN\u3001\u8cb8\u51fa\u53ef\u80fd\u304b - Member\uff08\u4f1a\u54e1\uff09: ID\u3001\u540d\u524d\u3001\u8cb8\u51fa\u4e2d\u306e\u672c\u306e\u30ea\u30b9\u30c8 - \u672c\u306e\u8cb8\u51fa\u30fb\u8fd4\u5374\u6a5f\u80fd</p>"},{"location":"part6/chapter22/#2","title":"\u7df4\u7fd22\uff1a\u30ec\u30b7\u30d4\u7ba1\u7406","text":"<p>\u6599\u7406\u306e\u30ec\u30b7\u30d4\u3092\u7ba1\u7406\u3059\u308b\u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u3092\u8a2d\u8a08\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - \u6750\u6599\uff08\u540d\u524d\u3001\u91cf\u3001\u5358\u4f4d\uff09 - \u624b\u9806\uff08\u9806\u756a\u3001\u8aac\u660e\u3001\u6240\u8981\u6642\u9593\uff09 - \u30ec\u30b7\u30d4\uff08\u540d\u524d\u3001\u6750\u6599\u30ea\u30b9\u30c8\u3001\u624b\u9806\u30ea\u30b9\u30c8\u3001\u7dcf\u8abf\u7406\u6642\u9593\uff09</p>"},{"location":"part6/chapter22/#3","title":"\u7df4\u7fd23\uff1a\u30a4\u30d9\u30f3\u30c8\u30bd\u30fc\u30b7\u30f3\u30b0","text":"<p>\u9280\u884c\u53e3\u5ea7\u306e\u64cd\u4f5c\u3092\u8a18\u9332\u3059\u308b\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\uff1a - \u30a4\u30d9\u30f3\u30c8: \u5165\u91d1\u3001\u51fa\u91d1\u3001\u9001\u91d1 - \u53e3\u5ea7\u306e\u73fe\u5728\u306e\u6b8b\u9ad8\u3092\u8a08\u7b97 - \u53d6\u5f15\u5c65\u6b74\u306e\u8868\u793a</p>"},{"location":"part6/chapter22/#_12","title":"\u3053\u306e\u7ae0\u306e\u307e\u3068\u3081","text":"<p>\u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u306e\u7d20\u6674\u3089\u3057\u3055\u3092\u4f53\u9a13\u3067\u304d\u307e\u3057\u305f\u306d\uff01</p>"},{"location":"part6/chapter22/#_13","title":"\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3053\u3068","text":"<p>\u2705 \u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u306e\u57fa\u672c - \u7c21\u6f54\u306a\u5b9a\u7fa9\u65b9\u6cd5 - \u81ea\u52d5\u751f\u6210\u3055\u308c\u308b\u6a5f\u80fd - \u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u30c7\u30fc\u30bf</p> <p>\u2705 \u4fbf\u5229\u306a\u6a5f\u80fd - \u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0 - copy\u30e1\u30bd\u30c3\u30c9 - \u81ea\u52d5\u7684\u306aequals/hashCode</p> <p>\u2705 \u5b9f\u8df5\u7684\u306a\u4f7f\u3044\u65b9 - \u30c9\u30e1\u30a4\u30f3\u30e2\u30c7\u30eb\u306e\u8868\u73fe - \u30a4\u30d9\u30f3\u30c8\u306e\u8a18\u9332 - API\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u578b\u4ed8\u3051</p> <p>\u2705 \u9ad8\u5ea6\u306a\u5fdc\u7528 - \u30cd\u30b9\u30c8\u3057\u305f\u69cb\u9020 - \u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u578b - sealed trait \u3068\u306e\u7d44\u307f\u5408\u308f\u305b</p>"},{"location":"part6/chapter22/#_14","title":"\u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u3079\u304d\u5834\u9762","text":"<ol> <li> <p>\u30c7\u30fc\u30bf\u306e\u5165\u308c\u7269</p> <ul> <li>\u5024\u30aa\u30d6\u30b8\u30a7\u30af\u30c8</li> <li>DTO\u30d1\u30bf\u30fc\u30f3</li> <li>\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u8a2d\u5b9a</li> </ul> </li> <li> <p>\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u30f3\u30b0</p> <ul> <li>\u72b6\u614b\u306e\u8868\u73fe</li> <li>\u30e1\u30c3\u30bb\u30fc\u30b8\u30d1\u30c3\u30b7\u30f3\u30b0</li> <li>\u30a4\u30d9\u30f3\u30c8\u30bd\u30fc\u30b7\u30f3\u30b0</li> </ul> </li> <li> <p>\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0</p> <ul> <li>\u7d14\u7c8b\u95a2\u6570\u306e\u5f15\u6570/\u623b\u308a\u5024</li> <li>\u4e0d\u5909\u30c7\u30fc\u30bf\u69cb\u9020</li> <li>\u4e26\u884c\u51e6\u7406\u3067\u306e\u5b89\u5168\u6027</li> </ul> </li> </ol>"},{"location":"part6/chapter22/#_15","title":"\u6b21\u306e\u7ae0\u3067\u306f...","text":"<p>\u30b7\u30fc\u30eb\u30c9\u30c8\u30ec\u30a4\u30c8\u3092\u4f7f\u3063\u3066\u3001\u3055\u3089\u306b\u578b\u5b89\u5168\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u5b66\u3073\u307e\u3059\u3002\u3059\u3079\u3066\u306e\u30b1\u30fc\u30b9\u3092\u7db2\u7f85\u3059\u308b\u3001\u5b8c\u74a7\u306a\u578b\u8a2d\u8a08\u3092\u76ee\u6307\u3057\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part6/chapter22/#_16","title":"\u6700\u5f8c\u306b","text":"<p>\u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u306f\u300c\u30c7\u30fc\u30bf\u306e\u5b9d\u77f3\u7bb1\u300d\u3067\u3059\u3002\u5927\u5207\u306a\u30c7\u30fc\u30bf\u3092\u7f8e\u3057\u304f\u3001\u5b89\u5168\u306b\u4fdd\u7ba1\u3067\u304d\u307e\u3059\u3002<code>new</code>\u3082<code>equals</code>\u3082<code>toString</code>\u3082\u3001\u5168\u90e8Scala\u304c\u7528\u610f\u3057\u3066\u304f\u308c\u308b\u3002\u3053\u3093\u306a\u306b\u4fbf\u5229\u306a\u6a5f\u80fd\u3001\u4f7f\u308f\u306a\u3044\u624b\u306f\u3042\u308a\u307e\u305b\u3093\u3088\u306d\uff01</p>"},{"location":"part6/chapter23/","title":"\u7b2c23\u7ae0 \u30b7\u30fc\u30eb\u30c9\u30c8\u30ec\u30a4\u30c8\u3067\u7db2\u7f85\u7684\u306b","text":""},{"location":"part6/chapter23/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u4fe1\u53f7\u6a5f\u306e\u8272\u306f\u300c\u8d64\u300d\u300c\u9ec4\u300d\u300c\u9752\u300d\u306e3\u3064\u3060\u3051\u3067\u3059\u3088\u306d\u3002\u300c\u7d2b\u300d\u3084\u300c\u30aa\u30ec\u30f3\u30b8\u300d\u306e\u4fe1\u53f7\u6a5f\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u3082\u3001\u300c\u3053\u308c\u3068\u3053\u308c\u3068\u3053\u308c\u3060\u3051\u300d\u3068\u3044\u3046\u9650\u5b9a\u3055\u308c\u305f\u30d1\u30bf\u30fc\u30f3\u3092\u8868\u73fe\u3057\u305f\u3044\u3053\u3068\u304c\u3088\u304f\u3042\u308a\u307e\u3059\u3002</p> <p>\u30b7\u30fc\u30eb\u30c9\u30c8\u30ec\u30a4\u30c8\uff08sealed trait\uff09\u3092\u4f7f\u3048\u3070\u3001\u3059\u3079\u3066\u306e\u53ef\u80fd\u6027\u3092\u6f0f\u308c\u306a\u304f\u3001\u91cd\u8907\u306a\u304f\u8868\u73fe\u3067\u304d\u307e\u3059\u3002\u307e\u308b\u3067\u3001\u5b8c\u74a7\u306a\u30c1\u30a7\u30c3\u30af\u30ea\u30b9\u30c8\u306e\u3088\u3046\u306b\uff01</p>"},{"location":"part6/chapter23/#_2","title":"\u30b7\u30fc\u30eb\u30c9\u30c8\u30ec\u30a4\u30c8\u3063\u3066\u4f55\u3060\u308d\u3046\uff1f","text":""},{"location":"part6/chapter23/#_3","title":"\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9","text":"<pre><code>// SealedTraitBasics.scala\n@main def sealedTraitBasics(): Unit = {\n  // \u4fe1\u53f7\u6a5f\u306e\u8272\uff08\u3053\u308c\u3060\u3051\uff01\uff09\n  sealed trait TrafficLight\n  case object Red extends TrafficLight\n  case object Yellow extends TrafficLight  \n  case object Green extends TrafficLight\n\n  // \u4fe1\u53f7\u306e\u610f\u5473\u3092\u8fd4\u3059\u95a2\u6570\n  def meaning(light: TrafficLight): String = light match {\n    case Red =&gt; \"\u6b62\u307e\u308c\"\n    case Yellow =&gt; \"\u6ce8\u610f\"\n    case Green =&gt; \"\u9032\u3081\"\n    // \u3059\u3079\u3066\u306e\u30b1\u30fc\u30b9\u3092\u7db2\u7f85\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u30b1\u30fc\u30b9\u306f\u4e0d\u8981\uff01\n  }\n\n  val currentLight: TrafficLight = Red\n  println(s\"${currentLight}: ${meaning(currentLight)}\")\n\n  // \u3082\u30571\u3064\u3067\u3082\u30b1\u30fc\u30b9\u3092\u5fd8\u308c\u308b\u3068...\n  def nextLight(light: TrafficLight): TrafficLight = light match {\n    case Red =&gt; Green\n    case Green =&gt; Yellow\n    // case Yellow =&gt; Red  // \u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3059\u308b\u3068\u8b66\u544a\uff01\n  }\n\n  // \u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u300cYellow\u306e\u30b1\u30fc\u30b9\u304c\u306a\u3044\u3088\u300d\u3068\u6559\u3048\u3066\u304f\u308c\u308b\n}\n</code></pre>"},{"location":"part6/chapter23/#sealed-vs-trait","title":"sealed vs \u901a\u5e38\u306etrait","text":"<pre><code>// SealedVsNormal.scala\n@main def sealedVsNormal(): Unit = {\n  // \u901a\u5e38\u306etrait\uff08\u3069\u3053\u3067\u3082\u7d99\u627f\u3067\u304d\u308b\uff09\n  trait Animal\n  case class Dog(name: String) extends Animal\n  case class Cat(name: String) extends Animal\n  // \u4ed6\u306e\u30d5\u30a1\u30a4\u30eb\u3067\u3082\u7d99\u627f\u3067\u304d\u3066\u3057\u307e\u3046...\n\n  // sealed trait\uff08\u540c\u3058\u30d5\u30a1\u30a4\u30eb\u5185\u3067\u306e\u307f\u7d99\u627f\u53ef\u80fd\uff09\n  sealed trait PaymentMethod\n  case class CreditCard(number: String, cvv: String) extends PaymentMethod\n  case class BankTransfer(accountNumber: String) extends PaymentMethod\n  case object Cash extends PaymentMethod\n  // \u3053\u308c\u4ee5\u5916\u306e\u652f\u6255\u3044\u65b9\u6cd5\u306f\u5b58\u5728\u3057\u306a\u3044\uff01\n\n  def processPayment(method: PaymentMethod): String = method match {\n    case CreditCard(number, _) =&gt; s\"\u30ab\u30fc\u30c9\u6c7a\u6e08: ****${number.takeRight(4)}\"\n    case BankTransfer(account) =&gt; s\"\u9280\u884c\u632f\u8fbc: $account\"\n    case Cash =&gt; \"\u73fe\u91d1\u6c7a\u6e08\"\n    // \u3059\u3079\u3066\u306e\u30b1\u30fc\u30b9\u3092\u7db2\u7f85\uff01\n  }\n\n  val payment1 = CreditCard(\"1234567890123456\", \"123\")\n  val payment2 = Cash\n\n  println(processPayment(payment1))\n  println(processPayment(payment2))\n}\n</code></pre>"},{"location":"part6/chapter23/#_4","title":"\u5b9f\u8df5\u7684\u306a\u4f8b\uff1a\u6ce8\u6587\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0","text":"<pre><code>// OrderManagementSystem.scala\n@main def orderManagementSystem(): Unit = {\n  import java.time.LocalDateTime\n\n  // \u6ce8\u6587\u306e\u72b6\u614b\uff08\u3059\u3079\u3066\u306e\u53ef\u80fd\u306a\u72b6\u614b\uff09\n  sealed trait OrderStatus\n  case object Pending extends OrderStatus\n  case object Confirmed extends OrderStatus\n  case object Processing extends OrderStatus\n  case object Shipped extends OrderStatus\n  case object Delivered extends OrderStatus\n  case object Cancelled extends OrderStatus\n\n  // \u6ce8\u6587\u30a4\u30d9\u30f3\u30c8\uff08\u3059\u3079\u3066\u306e\u53ef\u80fd\u306a\u30a4\u30d9\u30f3\u30c8\uff09\n  sealed trait OrderEvent\n  case class OrderPlaced(orderId: String, items: List[String], total: Double) extends OrderEvent\n  case class OrderConfirmed(orderId: String, confirmedAt: LocalDateTime) extends OrderEvent\n  case class OrderShipped(orderId: String, trackingNumber: String) extends OrderEvent\n  case class OrderDelivered(orderId: String, deliveredAt: LocalDateTime) extends OrderEvent\n  case class OrderCancelled(orderId: String, reason: String) extends OrderEvent\n\n  // \u6ce8\u6587\n  case class Order(\n    id: String,\n    status: OrderStatus,\n    items: List[String],\n    total: Double,\n    events: List[OrderEvent] = List.empty\n  )\n\n  // \u72b6\u614b\u9077\u79fb\u3092\u7ba1\u7406\n  object OrderStateMachine:\n    def canTransition(from: OrderStatus, to: OrderStatus): Boolean = (from, to) match {\n      case (Pending, Confirmed) =&gt; true\n      case (Pending, Cancelled) =&gt; true\n      case (Confirmed, Processing) =&gt; true\n      case (Confirmed, Cancelled) =&gt; true\n      case (Processing, Shipped) =&gt; true\n      case (Shipped, Delivered) =&gt; true\n      case _ =&gt; false\n    }\n\n    def processEvent(order: Order, event: OrderEvent): Either[String, Order] =\n      event match {\n        case OrderConfirmed(orderId, _) if order.id == orderId =&gt;\n          if (canTransition(order.status, Confirmed)) {\n            Right(order.copy(\n              status = Confirmed,\n              events = order.events :+ event\n            ))\n          } else {\n            Left(s\"${order.status}\u304b\u3089Confirmed\u3078\u306e\u9077\u79fb\u306f\u3067\u304d\u307e\u305b\u3093\")\n          }\n\n        case OrderShipped(orderId, _) if order.id == orderId =&gt;\n          if (canTransition(order.status, Shipped)) {\n            Right(order.copy(\n              status = Shipped,\n              events = order.events :+ event\n            ))\n          } else {\n            Left(s\"${order.status}\u304b\u3089Shipped\u3078\u306e\u9077\u79fb\u306f\u3067\u304d\u307e\u305b\u3093\")\n          }\n\n        case OrderDelivered(orderId, _) if order.id == orderId =&gt;\n          if (canTransition(order.status, Delivered)) {\n            Right(order.copy(\n              status = Delivered,\n              events = order.events :+ event\n            ))\n          } else {\n            Left(s\"${order.status}\u304b\u3089Delivered\u3078\u306e\u9077\u79fb\u306f\u3067\u304d\u307e\u305b\u3093\")\n          }\n\n        case OrderCancelled(orderId, _) if order.id == orderId =&gt;\n          if (order.status == Pending || order.status == Confirmed) {\n            Right(order.copy(\n              status = Cancelled,\n              events = order.events :+ event\n            ))\n          } else {\n            Left(s\"${order.status}\u306e\u6ce8\u6587\u306f\u30ad\u30e3\u30f3\u30bb\u30eb\u3067\u304d\u307e\u305b\u3093\")\n          }\n\n        case _ =&gt;\n          Left(\"\u4e0d\u6b63\u306a\u30a4\u30d9\u30f3\u30c8\")\n      }\n\n    def getStatusMessage(status: OrderStatus): String = status match {\n      case Pending =&gt; \"\u6ce8\u6587\u78ba\u8a8d\u4e2d\"\n      case Confirmed =&gt; \"\u6ce8\u6587\u78ba\u5b9a\"\n      case Processing =&gt; \"\u5546\u54c1\u6e96\u5099\u4e2d\"\n      case Shipped =&gt; \"\u767a\u9001\u6e08\u307f\"\n      case Delivered =&gt; \"\u914d\u9054\u5b8c\u4e86\"\n      case Cancelled =&gt; \"\u30ad\u30e3\u30f3\u30bb\u30eb\u6e08\u307f\"\n    }\n\n  // \u4f7f\u7528\u4f8b\n  val order = Order(\n    id = \"ORD-001\",\n    status = Pending,\n    items = List(\"\u5546\u54c1A\", \"\u5546\u54c1B\"),\n    total = 5000.0\n  )\n\n  println(s\"\u521d\u671f\u72b6\u614b: ${OrderStateMachine.getStatusMessage(order.status)}\")\n\n  // \u30a4\u30d9\u30f3\u30c8\u3092\u9806\u306b\u51e6\u7406\n  val events = List(\n    OrderConfirmed(\"ORD-001\", LocalDateTime.now()),\n    OrderShipped(\"ORD-001\", \"TRK-123456\"),\n    OrderDelivered(\"ORD-001\", LocalDateTime.now())\n  )\n\n  val finalOrder = events.foldLeft[Either[String, Order]](Right(order)) {\n    case (Right(currentOrder), event) =&gt;\n      OrderStateMachine.processEvent(currentOrder, event) match {\n        case Right(updated) =&gt;\n          println(s\"\u2713 ${event.getClass.getSimpleName}: ${OrderStateMachine.getStatusMessage(updated.status)}\")\n          Right(updated)\n        case Left(error) =&gt;\n          println(s\"\u2717 \u30a8\u30e9\u30fc: $error\")\n          Left(error)\n      }\n    case (error, _) =&gt; error\n  }\n\n  finalOrder match {\n    case Right(order) =&gt;\n      println(s\"\\n\u6700\u7d42\u72b6\u614b: ${OrderStateMachine.getStatusMessage(order.status)}\")\n      println(s\"\u30a4\u30d9\u30f3\u30c8\u6570: ${order.events.length}\")\n    case Left(error) =&gt;\n      println(s\"\\n\u51e6\u7406\u5931\u6557: $error\")\n  }\n}\n</code></pre>"},{"location":"part6/chapter23/#adt","title":"ADT\uff08\u4ee3\u6570\u7684\u30c7\u30fc\u30bf\u578b\uff09","text":""},{"location":"part6/chapter23/#_5","title":"\u76f4\u548c\u578b\u3068\u76f4\u7a4d\u578b","text":"<pre><code>// AlgebraicDataTypes.scala\n@main def algebraicDataTypes(): Unit = {\n  // \u76f4\u548c\u578b\uff08OR\u578b\uff09\uff1a\u3044\u305a\u308c\u304b1\u3064\n  sealed trait Shape\n  case class Circle(radius: Double) extends Shape\n  case class Rectangle(width: Double, height: Double) extends Shape\n  case class Triangle(base: Double, height: Double) extends Shape\n\n  // \u9762\u7a4d\u3092\u8a08\u7b97\uff08\u3059\u3079\u3066\u306e\u30b1\u30fc\u30b9\u3092\u51e6\u7406\uff09\n  def area(shape: Shape): Double = shape match {\n    case Circle(r) =&gt; math.Pi * r * r\n    case Rectangle(w, h) =&gt; w * h\n    case Triangle(b, h) =&gt; b * h / 2\n  }\n\n  // \u5468\u56f2\u9577\u3092\u8a08\u7b97\n  def perimeter(shape: Shape): Double = shape match {\n    case Circle(r) =&gt; 2 * math.Pi * r\n    case Rectangle(w, h) =&gt; 2 * (w + h)\n    case Triangle(b, h) =&gt; \n      val hypotenuse = math.sqrt(b * b + h * h)\n      b + h + hypotenuse\n  }\n\n  val shapes = List(\n    Circle(5.0),\n    Rectangle(4.0, 6.0),\n    Triangle(3.0, 4.0)\n  )\n\n  shapes.foreach { shape =&gt;\n    println(f\"${shape}: \u9762\u7a4d=${area(shape)}%.2f, \u5468\u56f2=${perimeter(shape)}%.2f\")\n  }\n\n  // \u76f4\u7a4d\u578b\uff08AND\u578b\uff09\uff1a\u3059\u3079\u3066\u3092\u542b\u3080\n  case class Point(x: Double, y: Double)\n  case class ColoredShape(shape: Shape, color: String, position: Point)\n\n  val coloredCircle = ColoredShape(\n    Circle(3.0),\n    \"\u8d64\",\n    Point(10.0, 20.0)\n  )\n\n  println(s\"\\n\u8272\u4ed8\u304d\u56f3\u5f62: ${coloredCircle.color}\u306e${coloredCircle.shape}\")\n}\n</code></pre>"},{"location":"part6/chapter23/#_6","title":"\u518d\u5e30\u7684\u306a\u30c7\u30fc\u30bf\u69cb\u9020","text":"<pre><code>// RecursiveDataStructures.scala\n@main def recursiveDataStructures(): Unit = {\n  // \u4e8c\u5206\u6728\n  sealed trait BinaryTree[+A]\n  case object Empty extends BinaryTree[Nothing]\n  case class Node[A](value: A, left: BinaryTree[A], right: BinaryTree[A]) extends BinaryTree[A]\n\n  // \u6728\u306e\u6df1\u3055\u3092\u8a08\u7b97\n  def depth[A](tree: BinaryTree[A]): Int = tree match {\n    case Empty =&gt; 0\n    case Node(_, left, right) =&gt; 1 + math.max(depth(left), depth(right))\n  }\n\n  // \u6728\u306e\u8981\u7d20\u6570\u3092\u6570\u3048\u308b\n  def size[A](tree: BinaryTree[A]): Int = tree match {\n    case Empty =&gt; 0\n    case Node(_, left, right) =&gt; 1 + size(left) + size(right)\n  }\n\n  // \u6728\u3092\u6587\u5b57\u5217\u3067\u8868\u73fe\n  def toString[A](tree: BinaryTree[A], indent: String = \"\"): String = tree match {\n    case Empty =&gt; s\"${indent}Empty\"\n    case Node(value, left, right) =&gt;\n      s\"\"\"${indent}Node($value)\n         |${toString(left, indent + \"  \")}\n         |${toString(right, indent + \"  \")}\"\"\".stripMargin\n  }\n\n  // \u30b5\u30f3\u30d7\u30eb\u306e\u6728\u3092\u4f5c\u6210\n  val tree = Node(\n    1,\n    Node(\n      2,\n      Node(4, Empty, Empty),\n      Node(5, Empty, Empty)\n    ),\n    Node(\n      3,\n      Empty,\n      Node(6, Empty, Empty)\n    )\n  )\n\n  println(\"\u4e8c\u5206\u6728:\")\n  println(toString(tree))\n  println(s\"\\n\u6df1\u3055: ${depth(tree)}\")\n  println(s\"\u8981\u7d20\u6570: ${size(tree)}\")\n\n  // \u5f0f\u306e\u6728\n  sealed trait Expression\n  case class Number(value: Double) extends Expression\n  case class Add(left: Expression, right: Expression) extends Expression\n  case class Multiply(left: Expression, right: Expression) extends Expression\n  case class Subtract(left: Expression, right: Expression) extends Expression\n\n  // \u5f0f\u3092\u8a55\u4fa1\n  def evaluate(expr: Expression): Double = expr match {\n    case Number(value) =&gt; value\n    case Add(left, right) =&gt; evaluate(left) + evaluate(right)\n    case Multiply(left, right) =&gt; evaluate(left) * evaluate(right)\n    case Subtract(left, right) =&gt; evaluate(left) - evaluate(right)\n  }\n\n  // \u5f0f\u3092\u6587\u5b57\u5217\u306b\n  def exprToString(expr: Expression): String = expr match {\n    case Number(value) =&gt; value.toString\n    case Add(left, right) =&gt; s\"(${exprToString(left)} + ${exprToString(right)})\"\n    case Multiply(left, right) =&gt; s\"(${exprToString(left)} * ${exprToString(right)})\"\n    case Subtract(left, right) =&gt; s\"(${exprToString(left)} - ${exprToString(right)})\"\n  }\n\n  // (2 + 3) * (10 - 5)\n  val expression = Multiply(\n    Add(Number(2), Number(3)),\n    Subtract(Number(10), Number(5))\n  )\n\n  println(s\"\\n\u5f0f: ${exprToString(expression)}\")\n  println(s\"\u7d50\u679c: ${evaluate(expression)}\")\n}\n</code></pre>"},{"location":"part6/chapter23/#_7","title":"\u5b9f\u8df5\u4f8b\uff1a\u30b2\u30fc\u30e0\u306e\u72b6\u614b\u7ba1\u7406","text":"<pre><code>// GameStateManagement.scala\n@main def gameStateManagement(): Unit = {\n  // \u30d7\u30ec\u30a4\u30e4\u30fc\u306e\u884c\u52d5\n  sealed trait PlayerAction\n  case object MoveUp extends PlayerAction\n  case object MoveDown extends PlayerAction\n  case object MoveLeft extends PlayerAction\n  case object MoveRight extends PlayerAction\n  case object Attack extends PlayerAction\n  case object Defend extends PlayerAction\n  case object UseItem extends PlayerAction\n\n  // \u30b2\u30fc\u30e0\u306e\u72b6\u614b\n  sealed trait GameState\n  case object MainMenu extends GameState\n  case class Playing(\n    playerHealth: Int,\n    playerPosition: (Int, Int),\n    enemyCount: Int,\n    score: Int\n  ) extends GameState\n  case object Paused extends GameState\n  case class GameOver(finalScore: Int, victory: Boolean) extends GameState\n\n  // \u30b2\u30fc\u30e0\u30a4\u30d9\u30f3\u30c8\n  sealed trait GameEvent\n  case object StartGame extends GameEvent\n  case object PauseGame extends GameEvent\n  case object ResumeGame extends GameEvent\n  case class PlayerDamaged(damage: Int) extends GameEvent\n  case class EnemyDefeated(points: Int) extends GameEvent\n  case object AllEnemiesDefeated extends GameEvent\n  case object PlayerDied extends GameEvent\n\n  // \u30b2\u30fc\u30e0\u30a8\u30f3\u30b8\u30f3\n  class GameEngine:\n    def processEvent(state: GameState, event: GameEvent): GameState =\n      (state, event) match {\n        case (MainMenu, StartGame) =&gt;\n          Playing(100, (5, 5), 10, 0)\n\n        case (Playing(health, pos, enemies, score), PauseGame) =&gt;\n          Paused\n\n        case (Paused, ResumeGame) =&gt;\n          Playing(100, (5, 5), 10, 0)  // \u7c21\u7565\u5316\u306e\u305f\u3081\u56fa\u5b9a\u5024\n\n        case (Playing(health, pos, enemies, score), PlayerDamaged(damage)) =&gt;\n          val newHealth = health - damage\n          if (newHealth &lt;= 0) {\n            GameOver(score, false)\n          } else {\n            Playing(newHealth, pos, enemies, score)\n          }\n\n        case (Playing(health, pos, enemies, score), EnemyDefeated(points)) =&gt;\n          val newEnemies = enemies - 1\n          val newScore = score + points\n          if (newEnemies == 0) {\n            GameOver(newScore, true)\n          } else {\n            Playing(health, pos, newEnemies, newScore)\n          }\n\n        case (Playing(health, pos, enemies, score), AllEnemiesDefeated) =&gt;\n          GameOver(score, true)\n\n        case (Playing(_, _, _, score), PlayerDied) =&gt;\n          GameOver(score, false)\n\n        case _ =&gt; state  // \u7121\u52b9\u306a\u9077\u79fb\u306f\u73fe\u5728\u306e\u72b6\u614b\u3092\u4fdd\u6301\n      }\n\n    def processAction(state: GameState, action: PlayerAction): GameState =\n      state match {\n        case Playing(health, (x, y), enemies, score) =&gt;\n          action match {\n            case MoveUp =&gt; Playing(health, (x, y - 1), enemies, score)\n            case MoveDown =&gt; Playing(health, (x, y + 1), enemies, score)\n            case MoveLeft =&gt; Playing(health, (x - 1, y), enemies, score)\n            case MoveRight =&gt; Playing(health, (x + 1, y), enemies, score)\n            case Attack =&gt;\n              // \u653b\u6483\u306e\u7d50\u679c\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\n              if (scala.util.Random.nextBoolean()) {\n                processEvent(state, EnemyDefeated(100))\n              } else {\n                state\n              }\n            case Defend =&gt;\n              // \u9632\u5fa1\u306f\u4f53\u529b\u3092\u5c11\u3057\u56de\u5fa9\n              Playing(math.min(100, health + 5), (x, y), enemies, score)\n            case UseItem =&gt;\n              // \u30a2\u30a4\u30c6\u30e0\u4f7f\u7528\uff08\u4f53\u529b\u56de\u5fa9\uff09\n              Playing(math.min(100, health + 20), (x, y), enemies, score)\n          }\n\n        case _ =&gt; state  // \u30d7\u30ec\u30a4\u4e2d\u4ee5\u5916\u306f\u884c\u52d5\u3067\u304d\u306a\u3044\n      }\n\n    def stateDescription(state: GameState): String = state match {\n      case MainMenu =&gt; \"\u30e1\u30a4\u30f3\u30e1\u30cb\u30e5\u30fc\"\n      case Playing(health, pos, enemies, score) =&gt;\n        f\"\u30d7\u30ec\u30a4\u4e2d - \u4f53\u529b:$health%3d \u4f4d\u7f6e:$pos \u6575:$enemies%2d \u5f97\u70b9:$score%,d\"\n      case Paused =&gt; \"\u4e00\u6642\u505c\u6b62\u4e2d\"\n      case GameOver(score, true) =&gt; f\"\u52dd\u5229\uff01 \u6700\u7d42\u5f97\u70b9: $score%,d\"\n      case GameOver(score, false) =&gt; f\"\u6557\u5317... \u6700\u7d42\u5f97\u70b9: $score%,d\"\n    }\n\n  // \u30b2\u30fc\u30e0\u30d7\u30ec\u30a4\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\n  val engine = new GameEngine\n  var state: GameState = MainMenu\n\n  println(\"=== \u30b2\u30fc\u30e0\u958b\u59cb ===\")\n  println(engine.stateDescription(state))\n\n  // \u30a4\u30d9\u30f3\u30c8\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\n  val events = List(\n    StartGame,\n    PlayerDamaged(20),\n    EnemyDefeated(100),\n    PlayerDamaged(30),\n    EnemyDefeated(150),\n    PlayerDamaged(60)\n  )\n\n  events.foreach { event =&gt;\n    state = engine.processEvent(state, event)\n    println(s\"\\n\u30a4\u30d9\u30f3\u30c8: $event\")\n    println(engine.stateDescription(state))\n  }\n}\n</code></pre>"},{"location":"part6/chapter23/#_8","title":"\u30a8\u30e9\u30fc\u3092\u9632\u3050\u8a2d\u8a08","text":"<pre><code>// ErrorPreventingDesign.scala\n@main def errorPreventingDesign(): Unit = {\n  // \u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u306e\u691c\u8a3c\u72b6\u614b\n  sealed trait EmailValidation\n  case object Valid extends EmailValidation\n  case class Invalid(reason: String) extends EmailValidation\n\n  // \u30d1\u30b9\u30ef\u30fc\u30c9\u306e\u5f37\u5ea6\n  sealed trait PasswordStrength\n  case object Weak extends PasswordStrength\n  case object Medium extends PasswordStrength\n  case object Strong extends PasswordStrength\n\n  // \u30a2\u30ab\u30a6\u30f3\u30c8\u306e\u72b6\u614b\n  sealed trait AccountState\n  case object Unverified extends AccountState\n  case object Active extends AccountState\n  case object Suspended extends AccountState\n  case object Deleted extends AccountState\n\n  // \u3053\u308c\u3089\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\u4e0d\u6b63\u306a\u72b6\u614b\u3092\u4f5c\u308c\u306a\u3044\u3088\u3046\u306b\u3059\u308b\n  case class Account private (\n    email: String,\n    emailValidation: EmailValidation,\n    passwordStrength: PasswordStrength,\n    state: AccountState\n  )\n\n  object Account:\n    // \u30d5\u30a1\u30af\u30c8\u30ea\u30e1\u30bd\u30c3\u30c9\u3067\u4f5c\u6210\u3092\u5236\u9650\n    def create(email: String, password: String): Either[String, Account] =\n      val emailVal = validateEmail(email)\n      val passStrength = checkPasswordStrength(password)\n\n      (emailVal, passStrength) match {\n        case (Valid, Strong | Medium) =&gt;\n          Right(Account(email, emailVal, passStrength, Unverified))\n        case (Valid, Weak) =&gt;\n          Left(\"\u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u5f31\u3059\u304e\u307e\u3059\")\n        case (Invalid(reason), _) =&gt;\n          Left(s\"\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u304c\u7121\u52b9: $reason\")\n      }\n\n    private def validateEmail(email: String): EmailValidation =\n      if (email.isEmpty) {\n        Invalid(\"\u7a7a\u3067\u3059\")\n      } else if (!email.contains(\"@\")) {\n        Invalid(\"@\u304c\u3042\u308a\u307e\u305b\u3093\")\n      } else if (!email.contains(\".\")) {\n        Invalid(\".\u304c\u3042\u308a\u307e\u305b\u3093\")\n      } else {\n        Valid\n      }\n\n    private def checkPasswordStrength(password: String): PasswordStrength =\n      val hasUpper = password.exists(_.isUpper)\n      val hasLower = password.exists(_.isLower)\n      val hasDigit = password.exists(_.isDigit)\n      val hasSpecial = password.exists(!_.isLetterOrDigit)\n      val isLong = password.length &gt;= 8\n\n      val score = List(hasUpper, hasLower, hasDigit, hasSpecial, isLong).count(identity)\n\n      if (score &gt;= 4) {\n        Strong\n      } else if (score &gt;= 3) {\n        Medium\n      } else {\n        Weak\n      }\n\n  // \u72b6\u614b\u9077\u79fb\u3082\u578b\u5b89\u5168\u306b\n  def activateAccount(account: Account): Either[String, Account] =\n    account.state match {\n      case Unverified =&gt; Right(account.copy(state = Active))\n      case _ =&gt; Left(\"\u672a\u78ba\u8a8d\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u306e\u307f\u30a2\u30af\u30c6\u30a3\u30d9\u30fc\u30c8\u3067\u304d\u307e\u3059\")\n    }\n\n  // \u4f7f\u7528\u4f8b\n  val results = List(\n    (\"user@example.com\", \"StrongP@ss1\"),\n    (\"invalid-email\", \"password\"),\n    (\"test@test.com\", \"weak\")\n  )\n\n  results.foreach { case (email, password) =&gt;\n    println(s\"\\n\u767b\u9332\u8a66\u884c: $email\")\n    Account.create(email, password) match {\n      case Right(account) =&gt;\n        println(s\"\u2713 \u30a2\u30ab\u30a6\u30f3\u30c8\u4f5c\u6210\u6210\u529f\")\n        println(s\"  \u30e1\u30fc\u30eb\u691c\u8a3c: ${account.emailValidation}\")\n        println(s\"  \u30d1\u30b9\u30ef\u30fc\u30c9\u5f37\u5ea6: ${account.passwordStrength}\")\n      case Left(error) =&gt;\n        println(s\"\u2717 \u30a8\u30e9\u30fc: $error\")\n    }\n  }\n}\n  }\n</code></pre>"},{"location":"part6/chapter23/#_9","title":"\u7df4\u7fd2\u3057\u3066\u307f\u3088\u3046\uff01","text":""},{"location":"part6/chapter23/#1","title":"\u7df4\u7fd21\uff1a\u6c7a\u6e08\u30b7\u30b9\u30c6\u30e0","text":"<p>\u4ee5\u4e0b\u306e\u8981\u4ef6\u3092\u6e80\u305f\u3059\u6c7a\u6e08\u30b7\u30b9\u30c6\u30e0\u3092\u8a2d\u8a08\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - \u6c7a\u6e08\u65b9\u6cd5\uff1a\u30af\u30ec\u30b8\u30c3\u30c8\u30ab\u30fc\u30c9\u3001\u9280\u884c\u632f\u8fbc\u3001\u30b3\u30f3\u30d3\u30cb\u6c7a\u6e08\u3001PayPal - \u6c7a\u6e08\u72b6\u614b\uff1a\u4fdd\u7559\u4e2d\u3001\u51e6\u7406\u4e2d\u3001\u6210\u529f\u3001\u5931\u6557\u3001\u8fd4\u91d1\u6e08\u307f - \u3059\u3079\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u304c\u6709\u52b9\u306a\u308f\u3051\u3067\u306f\u306a\u3044\uff08\u4f8b\uff1a\u30b3\u30f3\u30d3\u30cb\u6c7a\u6e08\u306b\u8fd4\u91d1\u306f\u306a\u3044\uff09</p>"},{"location":"part6/chapter23/#2","title":"\u7df4\u7fd22\uff1a\u30c1\u30e3\u30c3\u30c8\u30dc\u30c3\u30c8","text":"<p>\u30c1\u30e3\u30c3\u30c8\u30dc\u30c3\u30c8\u306e\u4f1a\u8a71\u30d5\u30ed\u30fc\u3092\u8a2d\u8a08\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - \u72b6\u614b\uff1a\u5f85\u6a5f\u4e2d\u3001\u6328\u62f6\u3001\u8cea\u554f\u7406\u89e3\u4e2d\u3001\u56de\u7b54\u4e2d\u3001\u7d42\u4e86 - \u30e6\u30fc\u30b6\u30fc\u5165\u529b\u30bf\u30a4\u30d7\uff1a\u6328\u62f6\u3001\u8cea\u554f\u3001\u78ba\u8a8d\u3001\u7d42\u4e86 - \u9069\u5207\u306a\u72b6\u614b\u9077\u79fb\u306e\u307f\u8a31\u53ef</p>"},{"location":"part6/chapter23/#3","title":"\u7df4\u7fd23\uff1a\u30d5\u30a1\u30a4\u30eb\u51e6\u7406","text":"<p>\u30d5\u30a1\u30a4\u30eb\u51e6\u7406\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\uff1a - \u30d5\u30a1\u30a4\u30eb\u30bf\u30a4\u30d7\uff1a\u30c6\u30ad\u30b9\u30c8\u3001\u753b\u50cf\u3001\u52d5\u753b\u3001\u4e0d\u660e - \u51e6\u7406\u7d50\u679c\uff1a\u6210\u529f\u3001\u5931\u6557\uff08\u7406\u7531\u4ed8\u304d\uff09\u3001\u30b9\u30ad\u30c3\u30d7 - \u30bf\u30a4\u30d7\u3054\u3068\u306b\u9069\u5207\u306a\u51e6\u7406\u3092\u5b9f\u88c5</p>"},{"location":"part6/chapter23/#_10","title":"\u3053\u306e\u7ae0\u306e\u307e\u3068\u3081","text":"<p>\u30b7\u30fc\u30eb\u30c9\u30c8\u30ec\u30a4\u30c8\u306e\u529b\u3092\u5b9f\u611f\u3067\u304d\u307e\u3057\u305f\u306d\uff01</p>"},{"location":"part6/chapter23/#_11","title":"\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3053\u3068","text":"<p>\u2705 \u30b7\u30fc\u30eb\u30c9\u30c8\u30ec\u30a4\u30c8\u306e\u57fa\u672c - sealed trait \u306e\u5b9a\u7fa9 - \u7d99\u627f\u306e\u5236\u9650 - \u7db2\u7f85\u6027\u30c1\u30a7\u30c3\u30af</p> <p>\u2705 ADT\uff08\u4ee3\u6570\u7684\u30c7\u30fc\u30bf\u578b\uff09 - \u76f4\u548c\u578b\uff08OR\uff09 - \u76f4\u7a4d\u578b\uff08AND\uff09 - \u518d\u5e30\u7684\u30c7\u30fc\u30bf\u69cb\u9020</p> <p>\u2705 \u5b9f\u8df5\u7684\u306a\u8a2d\u8a08 - \u72b6\u614b\u7ba1\u7406 - \u30a4\u30d9\u30f3\u30c8\u51e6\u7406 - \u30a8\u30e9\u30fc\u9632\u6b62</p> <p>\u2705 \u578b\u5b89\u5168\u306a\u5b9f\u88c5 - \u3059\u3079\u3066\u306e\u30b1\u30fc\u30b9\u3092\u7db2\u7f85 - \u4e0d\u6b63\u306a\u72b6\u614b\u3092\u9632\u3050 - \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30c1\u30a7\u30c3\u30af</p>"},{"location":"part6/chapter23/#_12","title":"\u30b7\u30fc\u30eb\u30c9\u30c8\u30ec\u30a4\u30c8\u3092\u4f7f\u3046\u3079\u304d\u5834\u9762","text":"<ol> <li> <p>\u9650\u5b9a\u3055\u308c\u305f\u9078\u629e\u80a2</p> <ul> <li>\u72b6\u614b\u30de\u30b7\u30f3</li> <li>\u30b3\u30de\u30f3\u30c9\u30d1\u30bf\u30fc\u30f3</li> <li>\u8a2d\u5b9a\u30aa\u30d7\u30b7\u30e7\u30f3</li> </ul> </li> <li> <p>\u7db2\u7f85\u7684\u306a\u51e6\u7406</p> <ul> <li>\u3059\u3079\u3066\u306e\u30b1\u30fc\u30b9\u3092\u6271\u3046</li> <li>\u30c7\u30d5\u30a9\u30eb\u30c8\u30b1\u30fc\u30b9\u4e0d\u8981</li> <li>\u5b89\u5168\u6027\u306e\u4fdd\u8a3c</li> </ul> </li> <li> <p>\u578b\u306b\u3088\u308b\u8a2d\u8a08</p> <ul> <li>\u30c9\u30e1\u30a4\u30f3\u30e2\u30c7\u30ea\u30f3\u30b0</li> <li>\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0</li> <li>\u30d7\u30ed\u30c8\u30b3\u30eb\u5b9a\u7fa9</li> </ul> </li> </ol>"},{"location":"part6/chapter23/#_13","title":"\u6b21\u306e\u7ae0\u3067\u306f...","text":"<p>\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u30c7\u30fc\u30bf\u8a2d\u8a08\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3059\u3002\u5909\u66f4\u3067\u304d\u306a\u3044\u30c7\u30fc\u30bf\u3067\u3001\u3088\u308a\u5b89\u5168\u3067\u7406\u89e3\u3057\u3084\u3059\u3044\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u308a\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part6/chapter23/#_14","title":"\u6700\u5f8c\u306b","text":"<p>\u30b7\u30fc\u30eb\u30c9\u30c8\u30ec\u30a4\u30c8\u306f\u300c\u5b8c\u74a7\u4e3b\u7fa9\u8005\u306e\u9053\u5177\u300d\u3067\u3059\u3002\u3059\u3079\u3066\u306e\u53ef\u80fd\u6027\u3092\u5217\u6319\u3057\u30011\u3064\u3082\u6f0f\u3089\u3055\u305a\u30011\u3064\u3082\u91cd\u8907\u3055\u305b\u306a\u3044\u3002\u3053\u306e\u53b3\u5bc6\u3055\u304c\u3001\u30d0\u30b0\u306e\u306a\u3044\u5805\u7262\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u751f\u307f\u51fa\u3057\u307e\u3059\u3002\u5b8c\u74a7\u3092\u76ee\u6307\u3059\u3042\u306a\u305f\u306e\u3001\u6700\u9ad8\u306e\u30d1\u30fc\u30c8\u30ca\u30fc\u3067\u3059\uff01</p>"},{"location":"part6/chapter24/","title":"\u7b2c24\u7ae0 \u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u30c7\u30fc\u30bf\u8a2d\u8a08","text":""},{"location":"part6/chapter24/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u5199\u771f\u3092\u64ae\u3063\u305f\u3089\u3001\u305d\u306e\u77ac\u9593\u304c\u6c38\u9060\u306b\u4fdd\u5b58\u3055\u308c\u307e\u3059\u3088\u306d\u3002\u5f8c\u304b\u3089\u300c\u3042\u306e\u6642\u306e\u7a7a\u3092\u9752\u304f\u5857\u308a\u66ff\u3048\u308b\u300d\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u65b0\u3057\u304f\u52a0\u5de5\u3057\u305f\u5199\u771f\u3092\u4f5c\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u3059\u304c\u3001\u5143\u306e\u5199\u771f\u306f\u5909\u308f\u308a\u307e\u305b\u3093\u3002</p> <p>\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\uff08\u4e0d\u5909\uff09\u306a\u30c7\u30fc\u30bf\u8a2d\u8a08\u3082\u540c\u3058\u8003\u3048\u65b9\u3067\u3059\u3002\u4e00\u5ea6\u4f5c\u3063\u305f\u30c7\u30fc\u30bf\u306f\u5909\u66f4\u305b\u305a\u3001\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u3092\u4f5c\u308b\u3002\u3053\u306e\u65b9\u6cd5\u3067\u3001\u3088\u308a\u5b89\u5168\u3067\u4e88\u6e2c\u53ef\u80fd\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u66f8\u3051\u308b\u3093\u3067\u3059\uff01</p>"},{"location":"part6/chapter24/#_2","title":"\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u3063\u3066\u4f55\u3060\u308d\u3046\uff1f","text":""},{"location":"part6/chapter24/#vs","title":"\u30df\u30e5\u30fc\u30bf\u30d6\u30eb vs \u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb","text":"<pre><code>// MutableVsImmutable.scala\n@main def mutableVsImmutable(): Unit = {\n  import scala.collection.mutable\n\n  // \u30df\u30e5\u30fc\u30bf\u30d6\u30eb\uff08\u5909\u66f4\u53ef\u80fd\uff09- \u5371\u967a\u306a\u4f8b\n  println(\"=== \u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306e\u554f\u984c ===\")\n  val mutableList = mutable.ListBuffer(1, 2, 3)\n  val reference = mutableList  // \u540c\u3058\u30ea\u30b9\u30c8\u3092\u53c2\u7167\n\n  println(s\"\u5143\u306e\u30ea\u30b9\u30c8: $mutableList\")\n  reference += 4  // reference\u3092\u5909\u66f4\n  println(s\"\u5143\u306e\u30ea\u30b9\u30c8\uff08\u5909\u66f4\u5f8c\uff09: $mutableList\")  // \u5143\u3082\u5909\u308f\u3063\u3066\u3057\u307e\u3046\uff01\n\n  // \u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\uff08\u5909\u66f4\u4e0d\u53ef\uff09- \u5b89\u5168\u306a\u4f8b\n  println(\"\\n=== \u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306e\u5b89\u5168\u6027 ===\")\n  val immutableList = List(1, 2, 3)\n  val newList = immutableList :+ 4  // \u65b0\u3057\u3044\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n\n  println(s\"\u5143\u306e\u30ea\u30b9\u30c8: $immutableList\")  // \u5909\u308f\u3089\u306a\u3044\n  println(s\"\u65b0\u3057\u3044\u30ea\u30b9\u30c8: $newList\")      // \u65b0\u3057\u3044\u5024\n\n  // \u5b9f\u4f8b\uff1a\u9280\u884c\u53e3\u5ea7\n  case class BankAccount(\n    accountNumber: String,\n    balance: Double,\n    transactions: List[String] = List.empty\n  )\n\n  val account1 = BankAccount(\"123456\", 10000.0)\n\n  // \u5165\u91d1\uff08\u65b0\u3057\u3044\u30a2\u30ab\u30a6\u30f3\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\uff09\n  def deposit(account: BankAccount, amount: Double): BankAccount =\n    account.copy(\n      balance = account.balance + amount,\n      transactions = account.transactions :+ s\"\u5165\u91d1: ${amount}\u5186\"\n    )\n\n  val account2 = deposit(account1, 5000)\n\n  println(s\"\\n\u5143\u306e\u53e3\u5ea7: $account1\")\n  println(s\"\u5165\u91d1\u5f8c\u306e\u53e3\u5ea7: $account2\")\n  // \u5143\u306e\u53e3\u5ea7\u306f\u5909\u308f\u3063\u3066\u3044\u306a\u3044\uff01\n}\n</code></pre>"},{"location":"part6/chapter24/#_3","title":"\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u30c7\u30fc\u30bf\u306e\u5229\u70b9","text":""},{"location":"part6/chapter24/#_4","title":"\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u30c6\u30a3","text":"<pre><code>// ThreadSafety.scala\n@main def threadSafety(): Unit = {\n  import scala.concurrent.{Future, Await}\n  import scala.concurrent.duration.*\n  import scala.concurrent.ExecutionContext.Implicits.global\n\n  // \u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u30ab\u30a6\u30f3\u30bf\u30fc\n  case class Counter(value: Int):\n    def increment: Counter = Counter(value + 1)\n    def add(n: Int): Counter = Counter(value + n)\n\n  val counter = Counter(0)\n\n  // 1000\u500b\u306e\u4e26\u884c\u30bf\u30b9\u30af\u304c\u30ab\u30a6\u30f3\u30bf\u30fc\u3092\u64cd\u4f5c\n  val futures = (1 to 1000).map { _ =&gt;\n    Future {\n      Thread.sleep(1)  // \u5c11\u3057\u5f85\u6a5f\n      counter.increment  // \u65b0\u3057\u3044\u30ab\u30a6\u30f3\u30bf\u30fc\u3092\u4f5c\u6210\uff08\u5143\u306f\u5909\u308f\u3089\u306a\u3044\uff09\n    }\n  }\n\n  // \u3059\u3079\u3066\u5b8c\u4e86\u3092\u5f85\u3064\n  val results = Await.result(Future.sequence(futures), 10.seconds)\n\n  println(s\"\u5143\u306e\u30ab\u30a6\u30f3\u30bf\u30fc: ${counter.value}\")  // 0\u306e\u307e\u307e\uff01\n  println(s\"\u4f5c\u6210\u3055\u308c\u305f\u30ab\u30a6\u30f3\u30bf\u30fc\u6570: ${results.length}\")\n\n  // \u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u3060\u3068\u7af6\u5408\u72b6\u614b\uff08race condition\uff09\u304c\u767a\u751f\u3059\u308b\n  class MutableCounter(var value: Int):\n    def increment(): Unit = value += 1  // \u5371\u967a\uff01\n\n  // \u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u3089\u5b89\u5168\u306b\u5171\u6709\u3067\u304d\u308b\n  val sharedData = List(1, 2, 3, 4, 5)\n\n  val processingFutures = (1 to 10).map { id =&gt;\n    Future {\n      val processed = sharedData.map(_ * id)  // \u5b89\u5168\u306b\u8aad\u307f\u53d6\u308a\n      s\"Worker $id: $processed\"\n    }\n  }\n\n  val processResults = Await.result(Future.sequence(processingFutures), 5.seconds)\n  processResults.foreach(println)\n}\n</code></pre>"},{"location":"part6/chapter24/#_5","title":"\u5c65\u6b74\u306e\u7ba1\u7406","text":"<pre><code>// HistoryManagement.scala\n@main def historyManagement(): Unit = {\n  // \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u30a8\u30c7\u30a3\u30bf\u306e\u4f8b\n  case class Document(\n    content: String,\n    version: Int = 1,\n    lastModified: Long = System.currentTimeMillis()\n  )\n\n  case class DocumentHistory(\n    current: Document,\n    history: List[Document] = List.empty,\n    maxHistory: Int = 10\n  ):\n    def edit(newContent: String): DocumentHistory =\n      val newDoc = Document(\n        content = newContent,\n        version = current.version + 1\n      )\n\n      val newHistory = (current :: history).take(maxHistory)\n\n      DocumentHistory(newDoc, newHistory, maxHistory)\n\n    def undo: Option[DocumentHistory] = history match {\n      case Nil =&gt; None\n      case prev :: rest =&gt; Some(DocumentHistory(prev, rest, maxHistory))\n    }\n\n    def getVersion(version: Int): Option[Document] =\n      if (current.version == version) {\n        Some(current)\n      } else {\n        history.find(_.version == version)\n      }\n\n  // \u4f7f\u7528\u4f8b\n  var docHistory = DocumentHistory(Document(\"\u521d\u671f\u5185\u5bb9\"))\n\n  println(\"=== \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u7de8\u96c6\u5c65\u6b74 ===\")\n  println(s\"v${docHistory.current.version}: ${docHistory.current.content}\")\n\n  // \u7de8\u96c6\u3092\u7e70\u308a\u8fd4\u3059\n  docHistory = docHistory.edit(\"\u7b2c1\u7ae0\u3092\u8ffd\u52a0\")\n  println(s\"v${docHistory.current.version}: ${docHistory.current.content}\")\n\n  docHistory = docHistory.edit(\"\u7b2c1\u7ae0\u3092\u8ffd\u52a0\\n\u7b2c2\u7ae0\u3092\u8ffd\u52a0\")\n  println(s\"v${docHistory.current.version}: ${docHistory.current.content}\")\n\n  docHistory = docHistory.edit(\"\u7b2c1\u7ae0\u3092\u8ffd\u52a0\\n\u7b2c2\u7ae0\u3092\u8ffd\u52a0\\n\u7b2c3\u7ae0\u3092\u8ffd\u52a0\")\n  println(s\"v${docHistory.current.version}: ${docHistory.current.content}\")\n\n  // \u30a2\u30f3\u30c9\u30a5\n  println(\"\\n=== \u30a2\u30f3\u30c9\u30a5 ===\")\n  docHistory.undo match {\n    case Some(previous) =&gt;\n      docHistory = previous\n      println(s\"v${docHistory.current.version}\u306b\u623b\u3057\u307e\u3057\u305f: ${docHistory.current.content}\")\n    case None =&gt;\n      println(\"\u3053\u308c\u4ee5\u4e0a\u623b\u308c\u307e\u305b\u3093\")\n  }\n\n  // \u7279\u5b9a\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u53d6\u5f97\n  println(\"\\n=== \u30d0\u30fc\u30b8\u30e7\u30f3\u53d6\u5f97 ===\")\n  docHistory.getVersion(2) match {\n    case Some(doc) =&gt; println(s\"v2\u306e\u5185\u5bb9: ${doc.content}\")\n    case None =&gt; println(\"v2\u306f\u898b\u3064\u304b\u308a\u307e\u305b\u3093\")\n  }\n}\n</code></pre>"},{"location":"part6/chapter24/#_6","title":"\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u8a2d\u8a08","text":""},{"location":"part6/chapter24/#_7","title":"\u30b7\u30e7\u30c3\u30d4\u30f3\u30b0\u30ab\u30fc\u30c8\u306e\u5b9f\u88c5","text":"<pre><code>// ImmutableShoppingCart.scala\n@main def immutableShoppingCart(): Unit = {\n  // \u5546\u54c1\n  case class Product(\n    id: String,\n    name: String,\n    price: BigDecimal\n  )\n\n  // \u30ab\u30fc\u30c8\u30a2\u30a4\u30c6\u30e0\n  case class CartItem(\n    product: Product,\n    quantity: Int\n  ):\n    def subtotal: BigDecimal = product.price * quantity\n    def updateQuantity(newQty: Int): CartItem = copy(quantity = newQty)\n\n  // \u30b7\u30e7\u30c3\u30d4\u30f3\u30b0\u30ab\u30fc\u30c8\uff08\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\uff09\n  case class ShoppingCart(\n    items: Map[String, CartItem] = Map.empty,\n    appliedCoupon: Option[String] = None\n  ):\n    def addItem(product: Product, quantity: Int = 1): ShoppingCart =\n      val newItems = items.get(product.id) match {\n        case Some(existing) =&gt;\n          items.updated(\n            product.id,\n            existing.updateQuantity(existing.quantity + quantity)\n          )\n        case None =&gt;\n          items.updated(product.id, CartItem(product, quantity))\n      }\n\n      copy(items = newItems)\n\n    def removeItem(productId: String): ShoppingCart =\n      copy(items = items.removed(productId))\n\n    def updateQuantity(productId: String, quantity: Int): ShoppingCart =\n      if (quantity &lt;= 0) {\n        removeItem(productId)\n      } else {\n        items.get(productId) match {\n          case Some(item) =&gt;\n            copy(items = items.updated(productId, item.updateQuantity(quantity)))\n          case None =&gt;\n            this  // \u5909\u66f4\u306a\u3057\n        }\n      }\n\n    def applyCoupon(code: String): ShoppingCart =\n      copy(appliedCoupon = Some(code))\n\n    def removeCoupon: ShoppingCart =\n      copy(appliedCoupon = None)\n\n    def subtotal: BigDecimal = items.values.map(_.subtotal).sum\n\n    def discount: BigDecimal = appliedCoupon match {\n      case Some(\"SAVE10\") =&gt; subtotal * 0.1\n      case Some(\"SAVE20\") =&gt; subtotal * 0.2\n      case _ =&gt; 0\n    }\n\n    def total: BigDecimal = subtotal - discount\n\n    def summary: String =\n      if (items.isEmpty) {\n        \"\u30ab\u30fc\u30c8\u306f\u7a7a\u3067\u3059\"\n      } else {\n        val itemLines = items.values.map { item =&gt;\n          f\"${item.product.name}%-20s \u00d7 ${item.quantity}%2d = \u00a5${item.subtotal}%,.0f\"\n        }.mkString(\"\\n\")\n\n        val couponLine = appliedCoupon match {\n          case Some(code) =&gt; f\"\\n\u30af\u30fc\u30dd\u30f3 ($code): -\u00a5${discount}%,.0f\"\n          case None =&gt; \"\"\n        }\n\n        s\"\"\"$itemLines\n           |${\"=\" * 50}\n           |\u5c0f\u8a08: \u00a5${subtotal}%,.0f$couponLine\n           |\u5408\u8a08: \u00a5${total}%,.0f\"\"\".stripMargin\n      }\n\n  // \u5546\u54c1\u30ab\u30bf\u30ed\u30b0\n  val products = Map(\n    \"P001\" -&gt; Product(\"P001\", \"\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u5165\u9580\u66f8\", 2800),\n    \"P002\" -&gt; Product(\"P002\", \"Scala\u30d1\u30fc\u30d5\u30a7\u30af\u30c8\u30ac\u30a4\u30c9\", 3500),\n    \"P003\" -&gt; Product(\"P003\", \"\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\", 4200)\n  )\n\n  // \u30ab\u30fc\u30c8\u306e\u64cd\u4f5c\uff08\u5404\u64cd\u4f5c\u3067\u65b0\u3057\u3044\u30ab\u30fc\u30c8\u304c\u4f5c\u3089\u308c\u308b\uff09\n  val cart1 = ShoppingCart()\n  val cart2 = cart1.addItem(products(\"P001\"))\n  val cart3 = cart2.addItem(products(\"P002\"), 2)\n  val cart4 = cart3.applyCoupon(\"SAVE10\")\n  val cart5 = cart4.updateQuantity(\"P001\", 2)\n\n  // \u5404\u6bb5\u968e\u306e\u30ab\u30fc\u30c8\u306f\u3059\u3079\u3066\u4fdd\u6301\u3055\u308c\u3066\u3044\u308b\n  println(\"=== \u30ab\u30fc\u30c81\uff08\u521d\u671f\u72b6\u614b\uff09===\")\n  println(cart1.summary)\n\n  println(\"\\n=== \u30ab\u30fc\u30c85\uff08\u6700\u7d42\u72b6\u614b\uff09===\")\n  println(cart5.summary)\n\n  // \u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u3067\u3082\u66f8\u3051\u308b\n  val finalCart = ShoppingCart()\n    .addItem(products(\"P001\"))\n    .addItem(products(\"P002\"), 2)\n    .addItem(products(\"P003\"))\n    .applyCoupon(\"SAVE20\")\n    .updateQuantity(\"P002\", 1)\n\n  println(\"\\n=== \u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u306e\u7d50\u679c ===\")\n  println(finalCart.summary)\n}\n</code></pre>"},{"location":"part6/chapter24/#_8","title":"\u30a4\u30d9\u30f3\u30c8\u30bd\u30fc\u30b7\u30f3\u30b0\u30d1\u30bf\u30fc\u30f3","text":"<pre><code>// EventSourcing.scala\n@main def eventSourcing(): Unit = {\n  import java.time.LocalDateTime\n\n  // \u30a4\u30d9\u30f3\u30c8\u306e\u5b9a\u7fa9\n  sealed trait AccountEvent:\n    def timestamp: LocalDateTime\n    def amount: BigDecimal\n\n  case class AccountOpened(\n    initialDeposit: BigDecimal,\n    timestamp: LocalDateTime = LocalDateTime.now()\n  ) extends AccountEvent:\n    def amount = initialDeposit\n\n  case class MoneyDeposited(\n    amount: BigDecimal,\n    timestamp: LocalDateTime = LocalDateTime.now()\n  ) extends AccountEvent\n\n  case class MoneyWithdrawn(\n    amount: BigDecimal,\n    timestamp: LocalDateTime = LocalDateTime.now()\n  ) extends AccountEvent\n\n  case class InterestCredited(\n    amount: BigDecimal,\n    timestamp: LocalDateTime = LocalDateTime.now()\n  ) extends AccountEvent\n\n  // \u30a2\u30ab\u30a6\u30f3\u30c8\u306e\u72b6\u614b\uff08\u30a4\u30d9\u30f3\u30c8\u304b\u3089\u8a08\u7b97\uff09\n  case class AccountState(\n    balance: BigDecimal,\n    events: List[AccountEvent]\n  ):\n    def applyEvent(event: AccountEvent): AccountState =\n      val newBalance = event match {\n        case AccountOpened(amount, _) =&gt; amount\n        case MoneyDeposited(amount, _) =&gt; balance + amount\n        case MoneyWithdrawn(amount, _) =&gt; balance - amount\n        case InterestCredited(amount, _) =&gt; balance + amount\n      }\n\n      AccountState(newBalance, events :+ event)\n\n    def deposit(amount: BigDecimal): AccountState =\n      if (amount &gt; 0) {\n        applyEvent(MoneyDeposited(amount))\n      } else {\n        this\n      }\n\n    def withdraw(amount: BigDecimal): Either[String, AccountState] =\n      if (amount &gt; balance) {\n        Left(s\"\u6b8b\u9ad8\u4e0d\u8db3: \u6b8b\u9ad8${balance}\u5186\u306b\u5bfe\u3057\u3066${amount}\u5186\u306e\u51fa\u91d1\")\n      } else if (amount &lt;= 0) {\n        Left(\"\u51fa\u91d1\u984d\u306f\u6b63\u306e\u6570\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\")\n      } else {\n        Right(applyEvent(MoneyWithdrawn(amount)))\n      }\n\n    def creditInterest(rate: BigDecimal): AccountState =\n      val interest = balance * rate\n      applyEvent(InterestCredited(interest))\n\n    def transactionHistory: String =\n      events.map {\n        case AccountOpened(amount, time) =&gt;\n          f\"$time%tF %tT | \u53e3\u5ea7\u958b\u8a2d | +\u00a5${amount}%,.0f\"\n        case MoneyDeposited(amount, time) =&gt;\n          f\"$time%tF %tT | \u5165\u91d1     | +\u00a5${amount}%,.0f\"\n        case MoneyWithdrawn(amount, time) =&gt;\n          f\"$time%tF %tT | \u51fa\u91d1     | -\u00a5${amount}%,.0f\"\n        case InterestCredited(amount, time) =&gt;\n          f\"$time%tF %tT | \u5229\u606f     | +\u00a5${amount}%,.0f\"\n      }.mkString(\"\\n\")\n\n  // \u30a2\u30ab\u30a6\u30f3\u30c8\u306e\u4f5c\u6210\u3068\u64cd\u4f5c\n  val account0 = AccountState(0, List.empty)\n  val account1 = account0.applyEvent(AccountOpened(10000))\n  val account2 = account1.deposit(5000)\n  val account3 = account2.withdraw(3000).getOrElse(account2)\n  val account4 = account3.creditInterest(0.001)  // 0.1%\u306e\u5229\u606f\n\n  println(\"=== \u6700\u7d42\u6b8b\u9ad8 ===\")\n  println(f\"\u00a5${account4.balance}%,.0f\")\n\n  println(\"\\n=== \u53d6\u5f15\u5c65\u6b74 ===\")\n  println(account4.transactionHistory)\n\n  // \u30a4\u30d9\u30f3\u30c8\u304b\u3089\u72b6\u614b\u3092\u518d\u69cb\u7bc9\n  def rebuildState(events: List[AccountEvent]): AccountState =\n    events.foldLeft(AccountState(0, List.empty)) { (state, event) =&gt;\n      state.applyEvent(event)\n    }\n\n  val rebuiltAccount = rebuildState(account4.events)\n  println(s\"\\n\u518d\u69cb\u7bc9\u5f8c\u306e\u6b8b\u9ad8: \u00a5${rebuiltAccount.balance}\")\n}\n</code></pre>"},{"location":"part6/chapter24/#_9","title":"\u30ec\u30f3\u30ba\u30d1\u30bf\u30fc\u30f3\uff08\u30cd\u30b9\u30c8\u3057\u305f\u66f4\u65b0\uff09","text":"<pre><code>// LensPattern.scala\n@main def lensPattern(): Unit = {\n  // \u30cd\u30b9\u30c8\u3057\u305f\u30c7\u30fc\u30bf\u69cb\u9020\n  case class Address(\n    street: String,\n    city: String,\n    postalCode: String\n  )\n\n  case class Company(\n    name: String,\n    address: Address\n  )\n\n  case class Employee(\n    id: String,\n    name: String,\n    company: Company,\n    salary: Int\n  )\n\n  // \u7c21\u6613\u30ec\u30f3\u30ba\u306e\u5b9f\u88c5\n  case class Lens[A, B](\n    get: A =&gt; B,\n    set: (A, B) =&gt; A\n  ):\n    def modify(f: B =&gt; B)(a: A): A = set(a, f(get(a)))\n\n    def compose[C](other: Lens[B, C]): Lens[A, C] =\n      Lens(\n        get = a =&gt; other.get(get(a)),\n        set = (a, c) =&gt; set(a, other.set(get(a), c))\n      )\n\n  // \u30ec\u30f3\u30ba\u306e\u5b9a\u7fa9\n  val companyLens = Lens[Employee, Company](\n    get = _.company,\n    set = (emp, company) =&gt; emp.copy(company = company)\n  )\n\n  val addressLens = Lens[Company, Address](\n    get = _.address,\n    set = (company, address) =&gt; company.copy(address = address)\n  )\n\n  val cityLens = Lens[Address, String](\n    get = _.city,\n    set = (address, city) =&gt; address.copy(city = city)\n  )\n\n  // \u30ec\u30f3\u30ba\u306e\u5408\u6210\n  val employeeCityLens = companyLens.compose(addressLens).compose(cityLens)\n\n  // \u4f7f\u7528\u4f8b\n  val employee = Employee(\n    \"E001\",\n    \"\u7530\u4e2d\u592a\u90ce\",\n    Company(\n      \"\u30c6\u30c3\u30af\u682a\u5f0f\u4f1a\u793e\",\n      Address(\"\u5343\u4ee3\u7530\u533a1-1\", \"\u6771\u4eac\u90fd\", \"100-0001\")\n    ),\n    500000\n  )\n\n  println(\"=== \u5143\u306e\u5f93\u696d\u54e1 ===\")\n  println(employee)\n\n  // \u6df1\u304f\u30cd\u30b9\u30c8\u3057\u305f\u5024\u306e\u66f4\u65b0\uff08\u5f93\u6765\u306e\u65b9\u6cd5\uff09\n  val updatedTraditional = employee.copy(\n    company = employee.company.copy(\n      address = employee.company.address.copy(\n        city = \"\u5927\u962a\u5e9c\"\n      )\n    )\n  )\n\n  // \u30ec\u30f3\u30ba\u3092\u4f7f\u3063\u305f\u66f4\u65b0\n  val updatedWithLens = employeeCityLens.set(employee, \"\u5927\u962a\u5e9c\")\n\n  println(\"\\n=== \u66f4\u65b0\u5f8c\uff08\u30ec\u30f3\u30ba\u4f7f\u7528\uff09===\")\n  println(updatedWithLens)\n\n  // modify\u3092\u4f7f\u3063\u305f\u66f4\u65b0\n  val salaryLens = Lens[Employee, Int](\n    get = _.salary,\n    set = (emp, salary) =&gt; emp.copy(salary = salary)\n  )\n\n  val promoted = salaryLens.modify(_ * 1.1)(employee)\n  println(s\"\\n\u6607\u7d66\u5f8c\u306e\u7d66\u4e0e: ${promoted.salary}\")\n}\n</code></pre>"},{"location":"part6/chapter24/#_10","title":"\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u8003\u616e","text":"<pre><code>// PerformanceConsiderations.scala\n@main def performanceConsiderations(): Unit = {\n  import scala.collection.immutable.Vector\n\n  // \u69cb\u9020\u5171\u6709\uff08Structural Sharing\uff09\u306e\u4f8b\n  println(\"=== \u69cb\u9020\u5171\u6709 ===\")\n\n  val list1 = List(1, 2, 3, 4, 5)\n  val list2 = 0 :: list1  // list1\u306e\u30c7\u30fc\u30bf\u3092\u518d\u5229\u7528\n\n  println(s\"list1: $list1\")\n  println(s\"list2: $list2\")\n  // \u30e1\u30e2\u30ea\u4e0a\u3067\u306f\u3001list2\u306f\u65b0\u3057\u3044\u8981\u7d200\u3068list1\u3078\u306e\u53c2\u7167\u3060\u3051\u3092\u6301\u3064\n\n  // \u52b9\u7387\u7684\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u9078\u629e\n  println(\"\\n=== \u30c7\u30fc\u30bf\u69cb\u9020\u306e\u9078\u629e ===\")\n\n  // Vector\uff1a\u30e9\u30f3\u30c0\u30e0\u30a2\u30af\u30bb\u30b9\u304c\u901f\u3044\n  val vector = Vector(1, 2, 3, 4, 5)\n  println(s\"Vector[2]: ${vector(2)}\")  // O(log n)\n\n  // List\uff1a\u5148\u982d\u3078\u306e\u8ffd\u52a0\u304c\u901f\u3044\n  val list = List(1, 2, 3, 4, 5)\n  val newList = 0 :: list  // O(1)\n\n  // \u30d0\u30eb\u30af\u64cd\u4f5c\u306e\u6700\u9069\u5316\n  case class Stats(\n    count: Int = 0,\n    sum: Double = 0.0,\n    min: Double = Double.MaxValue,\n    max: Double = Double.MinValue\n  ):\n    def add(value: Double): Stats = Stats(\n      count + 1,\n      sum + value,\n      math.min(min, value),\n      math.max(max, value)\n    )\n\n    def average: Option[Double] =\n      if (count &gt; 0) Some(sum / count) else None\n\n  // \u5927\u91cf\u306e\u30c7\u30fc\u30bf\u3092\u52b9\u7387\u7684\u306b\u51e6\u7406\n  val numbers = (1 to 10000).map(_.toDouble).toList\n\n  val stats = numbers.foldLeft(Stats()) { (s, n) =&gt; s.add(n) }\n\n  println(s\"\\n=== \u7d71\u8a08\u60c5\u5831 ===\")\n  println(f\"\u4ef6\u6570: ${stats.count}%,d\")\n  println(f\"\u5408\u8a08: ${stats.sum}%,.0f\")\n  println(f\"\u5e73\u5747: ${stats.average.getOrElse(0.0)}%,.1f\")\n  println(f\"\u6700\u5c0f: ${stats.min}%,.0f\")\n  println(f\"\u6700\u5927: ${stats.max}%,.0f\")\n}\n</code></pre>"},{"location":"part6/chapter24/#_11","title":"\u7df4\u7fd2\u3057\u3066\u307f\u3088\u3046\uff01","text":""},{"location":"part6/chapter24/#1todo","title":"\u7df4\u7fd21\uff1aTODO\u30ea\u30b9\u30c8","text":"<p>\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306aTODO\u30ea\u30b9\u30c8\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\uff1a - \u30bf\u30b9\u30af\u306e\u8ffd\u52a0\u3001\u5b8c\u4e86\u3001\u524a\u9664 - \u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\uff08\u5b8c\u4e86/\u672a\u5b8c\u4e86\uff09 - \u3059\u3079\u3066\u306e\u64cd\u4f5c\u3067\u65b0\u3057\u3044\u30ea\u30b9\u30c8\u3092\u8fd4\u3059</p>"},{"location":"part6/chapter24/#2","title":"\u7df4\u7fd22\uff1a\u30b2\u30fc\u30e0\u306e\u72b6\u614b\u7ba1\u7406","text":"<p>\u30b7\u30f3\u30d7\u30eb\u306aRPG\u306e\u30ad\u30e3\u30e9\u30af\u30bf\u30fc\u72b6\u614b\u3092\u7ba1\u7406\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - HP\u3001MP\u3001\u7d4c\u9a13\u5024\u3001\u30ec\u30d9\u30eb - \u30c0\u30e1\u30fc\u30b8\u3001\u56de\u5fa9\u3001\u30ec\u30d9\u30eb\u30a2\u30c3\u30d7 - \u6226\u95d8\u5c65\u6b74\u306e\u8a18\u9332</p>"},{"location":"part6/chapter24/#3","title":"\u7df4\u7fd23\uff1a\u8a2d\u5b9a\u7ba1\u7406","text":"<p>\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u8a2d\u5b9a\u3092\u7ba1\u7406\u3059\u308b\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\uff1a - \u30cd\u30b9\u30c8\u3057\u305f\u8a2d\u5b9a\u69cb\u9020 - \u8a2d\u5b9a\u306e\u66f4\u65b0\uff08\u30ec\u30f3\u30ba\u30d1\u30bf\u30fc\u30f3\u3092\u4f7f\u7528\uff09 - \u8a2d\u5b9a\u5c65\u6b74\u306e\u4fdd\u6301</p>"},{"location":"part6/chapter24/#_12","title":"\u3053\u306e\u7ae0\u306e\u307e\u3068\u3081","text":"<p>\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u30c7\u30fc\u30bf\u8a2d\u8a08\u306e\u7d20\u6674\u3089\u3057\u3055\u3092\u5b66\u3073\u307e\u3057\u305f\uff01</p>"},{"location":"part6/chapter24/#_13","title":"\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3053\u3068","text":"<p>\u2705 \u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306e\u57fa\u672c - \u4e0d\u5909\u30c7\u30fc\u30bf\u306e\u6982\u5ff5 - \u65b0\u3057\u3044\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4f5c\u6210 - \u69cb\u9020\u5171\u6709</p> <p>\u2705 \u5229\u70b9\u306e\u7406\u89e3 - \u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u30c6\u30a3 - \u5c65\u6b74\u7ba1\u7406 - \u30c7\u30d0\u30c3\u30b0\u306e\u5bb9\u6613\u3055</p> <p>\u2705 \u8a2d\u8a08\u30d1\u30bf\u30fc\u30f3 - \u30a4\u30d9\u30f3\u30c8\u30bd\u30fc\u30b7\u30f3\u30b0 - \u30ec\u30f3\u30ba\u30d1\u30bf\u30fc\u30f3 - \u95a2\u6570\u578b\u30c7\u30fc\u30bf\u69cb\u9020</p> <p>\u2705 \u5b9f\u8df5\u7684\u306a\u5b9f\u88c5 - \u30b7\u30e7\u30c3\u30d4\u30f3\u30b0\u30ab\u30fc\u30c8 - \u72b6\u614b\u7ba1\u7406 - \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6700\u9069\u5316</p>"},{"location":"part6/chapter24/#_14","title":"\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u8a2d\u8a08\u306e\u30b3\u30c4","text":"<ol> <li> <p>\u5e38\u306b\u65b0\u3057\u304f\u4f5c\u308b</p> <ul> <li>\u5909\u66f4\u3067\u306f\u306a\u304f\u4f5c\u6210</li> <li>copy\u30e1\u30bd\u30c3\u30c9\u306e\u6d3b\u7528</li> <li>\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3</li> </ul> </li> <li> <p>\u5c65\u6b74\u3092\u6d3b\u304b\u3059</p> <ul> <li>\u904e\u53bb\u306e\u72b6\u614b\u3092\u4fdd\u6301</li> <li>\u30a2\u30f3\u30c9\u30a5/\u30ea\u30c9\u30a5</li> <li>\u76e3\u67fb\u30ed\u30b0</li> </ul> </li> <li> <p>\u9069\u5207\u306a\u30c7\u30fc\u30bf\u69cb\u9020</p> <ul> <li>\u7528\u9014\u306b\u5fdc\u3058\u305f\u9078\u629e</li> <li>\u69cb\u9020\u5171\u6709\u306e\u6d3b\u7528</li> <li>\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u8003\u616e</li> </ul> </li> </ol>"},{"location":"part6/chapter24/#_15","title":"\u6b21\u306e\u90e8\u3067\u306f...","text":"<p>\u7b2cVII\u90e8\u3067\u306f\u3001\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u57fa\u790e\u306b\u3064\u3044\u3066\u6df1\u304f\u5b66\u3093\u3067\u3044\u304d\u307e\u3059\u3002\u95a2\u6570\u5408\u6210\u3001\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3001\u578b\u30af\u30e9\u30b9\u306a\u3069\u3001Scala\u306e\u771f\u306e\u529b\u3092\u89e3\u304d\u653e\u3061\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part6/chapter24/#_16","title":"\u6700\u5f8c\u306b","text":"<p>\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u30c7\u30fc\u30bf\u306f\u300c\u6642\u3092\u6b62\u3081\u308b\u9b54\u6cd5\u300d\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002\u30c7\u30fc\u30bf\u304c\u52dd\u624b\u306b\u5909\u308f\u308b\u5fc3\u914d\u304c\u306a\u304f\u3001\u3044\u3064\u3067\u3082\u904e\u53bb\u306b\u623b\u308c\u3066\u3001\u8907\u6570\u306e\u672a\u6765\u3092\u540c\u6642\u306b\u8a66\u305b\u308b\u3002\u3053\u306e\u5b89\u5fc3\u611f\u304c\u3001\u8907\u96d1\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3082\u6016\u304f\u306a\u304f\u306a\u308b\u79d8\u8a23\u3067\u3059\u3002\u5909\u3048\u3089\u308c\u306a\u3044\u3053\u3068\u306e\u5f37\u3055\u3092\u3001\u5473\u65b9\u306b\u3064\u3051\u3066\u304f\u3060\u3055\u3044\uff01</p>"},{"location":"part7/chapter25/","title":"\u7b2c25\u7ae0 \u95a2\u6570\u5408\u6210\u3067\u51e6\u7406\u3092\u7d44\u307f\u7acb\u3066\u308b","text":""},{"location":"part7/chapter25/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u6599\u7406\u3092\u3059\u308b\u3068\u304d\u3001\u300c\u91ce\u83dc\u3092\u6d17\u3046\u300d\u2192\u300c\u5207\u308b\u300d\u2192\u300c\u7092\u3081\u308b\u300d\u3068\u3044\u3046\u624b\u9806\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u4e00\u3064\u306e\u6599\u7406\u3092\u4f5c\u308a\u307e\u3059\u3088\u306d\u3002\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u3082\u3001\u5c0f\u3055\u306a\u95a2\u6570\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u5927\u304d\u306a\u51e6\u7406\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002</p> <p>\u3053\u308c\u304c\u300c\u95a2\u6570\u5408\u6210\u300d\u3067\u3059\u3002\u30ec\u30b4\u30d6\u30ed\u30c3\u30af\u306e\u3088\u3046\u306b\u3001\u5c0f\u3055\u306a\u90e8\u54c1\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\u8907\u96d1\u306a\u3082\u306e\u3092\u4f5c\u308a\u4e0a\u3052\u308b\u697d\u3057\u3055\u3092\u5473\u308f\u3044\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part7/chapter25/#_2","title":"\u95a2\u6570\u5408\u6210\u3063\u3066\u4f55\u3060\u308d\u3046\uff1f","text":""},{"location":"part7/chapter25/#_3","title":"\u95a2\u6570\u3092\u3064\u306a\u3052\u308b","text":"<pre><code>// FunctionCompositionBasics.scala\n@main def functionCompositionBasics(): Unit = {\n  // \u5358\u7d14\u306a\u95a2\u6570\u305f\u3061\n  val double = (x: Int) =&gt; x * 2\n  val addTen = (x: Int) =&gt; x + 10\n  val square = (x: Int) =&gt; x * x\n\n  // \u624b\u52d5\u3067\u7d44\u307f\u5408\u308f\u305b\u308b\uff08\u9762\u5012...\uff09\n  val result1 = square(addTen(double(3)))\n  println(s\"3\u30922\u500d\u3057\u306610\u8db3\u3057\u30662\u4e57: $result1\")\n\n  // andThen\u3067\u7d44\u307f\u5408\u308f\u305b\u308b\uff08\u8aad\u307f\u3084\u3059\u3044\uff01\uff09\n  val combined = double.andThen(addTen).andThen(square)\n  val result2 = combined(3)\n  println(s\"\u95a2\u6570\u5408\u6210\u306e\u7d50\u679c: $result2\")\n\n  // compose\u3067\u9006\u9806\u306b\u7d44\u307f\u5408\u308f\u305b\u308b\n  val reversed = square.compose(addTen).compose(double)\n  val result3 = reversed(3)\n  println(s\"compose\u306e\u7d50\u679c: $result3\")\n\n  // \u5b9f\u7528\u4f8b\uff1a\u6587\u5b57\u5217\u51e6\u7406\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\n  val trim = (s: String) =&gt; s.trim\n  val toLowerCase = (s: String) =&gt; s.toLowerCase\n  val removeSpaces = (s: String) =&gt; s.replace(\" \", \"_\")\n\n  val normalize = trim.andThen(toLowerCase).andThen(removeSpaces)\n\n  val inputs = List(\n    \"  Hello World  \",\n    \"  SCALA Programming  \",\n    \"  Functional Composition  \"\n  )\n\n  println(\"\\n=== \u6587\u5b57\u5217\u306e\u6b63\u898f\u5316 ===\")\n  inputs.foreach { input =&gt;\n    println(s\"'$input' \u2192 '${normalize(input)}'\")\n  }\n}\n</code></pre>"},{"location":"part7/chapter25/#_4","title":"\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u6f14\u7b97\u5b50\u98a8\u306e\u5b9f\u88c5","text":"<pre><code>// PipelineOperator.scala\n@main def pipelineOperator(): Unit = {\n  // \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u98a8\u306e\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\n  extension [A](value: A) {\n    def |&gt;[B](f: A =&gt; B): B = f(value)\n    def tap(f: A =&gt; Unit): A = {\n      f(value)\n      value\n    }\n  }\n\n  // \u4f7f\u7528\u4f8b\n  val result = 5\n    |&gt; (_ * 2)\n    |&gt; (_ + 10)\n    |&gt; (_ * _ )\n    .tap(x =&gt; println(s\"\u4e2d\u9593\u7d50\u679c: $x\"))\n    |&gt; (_ / 5)\n\n  println(s\"\u6700\u7d42\u7d50\u679c: $result\")\n\n  // \u5b9f\u7528\u4f8b\uff1a\u30c7\u30fc\u30bf\u5909\u63db\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\n  case class User(name: String, email: String, age: Int)\n\n  val processUser = User(\"  John Doe  \", \"JOHN@EXAMPLE.COM\", 25)\n    |&gt; (u =&gt; u.copy(name = u.name.trim))\n    |&gt; (u =&gt; u.copy(email = u.email.toLowerCase))\n    .tap(u =&gt; println(s\"\u51e6\u7406\u4e2d: $u\"))\n    |&gt; (u =&gt; if (u.age &gt;= 18) Some(u) else None)\n\n  processUser match {\n    case Some(user) =&gt; println(s\"\u6709\u52b9\u306a\u30e6\u30fc\u30b6\u30fc: $user\")\n    case None =&gt; println(\"\u7121\u52b9\u306a\u30e6\u30fc\u30b6\u30fc\")\n  }\n}\n</code></pre>"},{"location":"part7/chapter25/#_5","title":"\u5b9f\u8df5\u7684\u306a\u95a2\u6570\u5408\u6210","text":""},{"location":"part7/chapter25/#_6","title":"\u30c7\u30fc\u30bf\u691c\u8a3c\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3","text":"<pre><code>// ValidationPipeline.scala\n@main def validationPipeline(): Unit = {\n  // \u691c\u8a3c\u7d50\u679c\u3092\u8868\u3059\u578b\n  type Validation[A] = Either[String, A]\n\n  // \u691c\u8a3c\u95a2\u6570\u306e\u578b\n  type Validator[A] = A =&gt; Validation[A]\n\n  // \u57fa\u672c\u7684\u306a\u691c\u8a3c\u95a2\u6570\n  val notEmpty: Validator[String] = s =&gt;\n    if (s.trim.nonEmpty) Right(s)\n    else Left(\"\u7a7a\u6587\u5b57\u5217\u306f\u8a31\u53ef\u3055\u308c\u307e\u305b\u3093\")\n\n  val minLength: Int =&gt; Validator[String] = min =&gt; s =&gt;\n    if (s.length &gt;= min) Right(s)\n    else Left(s\"${min}\u6587\u5b57\u4ee5\u4e0a\u5fc5\u8981\u3067\u3059\")\n\n  val maxLength: Int =&gt; Validator[String] = max =&gt; s =&gt;\n    if (s.length &lt;= max) Right(s)\n    else Left(s\"${max}\u6587\u5b57\u4ee5\u4e0b\u306b\u3057\u3066\u304f\u3060\u3055\u3044\")\n\n  val alphanumeric: Validator[String] = s =&gt;\n    if (s.matches(\"^[a-zA-Z0-9]+$\")) Right(s)\n    else Left(\"\u82f1\u6570\u5b57\u306e\u307f\u4f7f\u7528\u53ef\u80fd\u3067\u3059\")\n\n  // \u691c\u8a3c\u95a2\u6570\u3092\u5408\u6210\n  def andThen[A](v1: Validator[A], v2: Validator[A]): Validator[A] = a =&gt;\n    v1(a).flatMap(v2)\n\n  def combine[A](validators: Validator[A]*): Validator[A] =\n    validators.reduce(andThen)\n\n  // \u30e6\u30fc\u30b6\u30fc\u540d\u306e\u691c\u8a3c\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\n  val validateUsername = combine(\n    notEmpty,\n    minLength(3),\n    maxLength(20),\n    alphanumeric\n  )\n\n  // \u30c6\u30b9\u30c8\n  val testCases = List(\n    \"john123\",\n    \"ab\",\n    \"verylongusernamethatexceedslimit\",\n    \"user@name\",\n    \"ValidUser123\",\n    \"\"\n  )\n\n  println(\"=== \u30e6\u30fc\u30b6\u30fc\u540d\u691c\u8a3c ===\")\n  testCases.foreach { username =&gt;\n    validateUsername(username) match {\n      case Right(valid) =&gt; println(s\"\u2713 '$valid'\")\n      case Left(error) =&gt; println(s\"\u2717 '$username': $error\")\n    }\n  }\n}\n</code></pre>"},{"location":"part7/chapter25/#_7","title":"\u753b\u50cf\u51e6\u7406\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3","text":"<pre><code>// ImageProcessingPipeline.scala\n@main def imageProcessingPipeline(): Unit = {\n  // \u753b\u50cf\u3092\u8868\u3059\u7c21\u5358\u306a\u30e2\u30c7\u30eb\n  case class Image(\n    width: Int,\n    height: Int,\n    pixels: Vector[Int],  // \u7c21\u7565\u5316\u306e\u305f\u30811\u6b21\u5143\u914d\u5217\n    metadata: Map[String, String] = Map.empty\n  )\n\n  // \u753b\u50cf\u51e6\u7406\u95a2\u6570\u306e\u578b\n  type ImageProcessor = Image =&gt; Image\n\n  // \u57fa\u672c\u7684\u306a\u753b\u50cf\u51e6\u7406\u95a2\u6570\n  val resize: (Int, Int) =&gt; ImageProcessor = (newWidth, newHeight) =&gt; img =&gt;\n    // \u5b9f\u969b\u306e\u30ea\u30b5\u30a4\u30ba\u30ed\u30b8\u30c3\u30af\u306f\u7701\u7565\n    img.copy(\n      width = newWidth,\n      height = newHeight,\n      metadata = img.metadata + (\"resized\" -&gt; s\"${newWidth}x${newHeight}\")\n    )\n\n  val grayscale: ImageProcessor = img =&gt;\n    img.copy(\n      metadata = img.metadata + (\"filter\" -&gt; \"grayscale\")\n    )\n\n  val blur: Int =&gt; ImageProcessor = radius =&gt; img =&gt;\n    img.copy(\n      metadata = img.metadata + (\"blur\" -&gt; s\"radius:$radius\")\n    )\n\n  val compress: Int =&gt; ImageProcessor = quality =&gt; img =&gt;\n    img.copy(\n      metadata = img.metadata + (\"compression\" -&gt; s\"quality:$quality\")\n    )\n\n  val addWatermark: String =&gt; ImageProcessor = text =&gt; img =&gt;\n    img.copy(\n      metadata = img.metadata + (\"watermark\" -&gt; text)\n    )\n\n  // \u51e6\u7406\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u69cb\u7bc9\n  class ImagePipeline(processors: List[ImageProcessor] = List.empty):\n    def add(processor: ImageProcessor): ImagePipeline =\n      new ImagePipeline(processors :+ processor)\n\n    def process(image: Image): Image =\n      processors.foldLeft(image)((img, proc) =&gt; proc(img))\n\n    def timed(image: Image): (Image, Long) =\n      val start = System.currentTimeMillis()\n      val result = process(image)\n      val time = System.currentTimeMillis() - start\n      (result, time)\n\n  // \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u5b9a\u7fa9\n  val thumbnailPipeline = ImagePipeline()\n    .add(resize(150, 150))\n    .add(compress(85))\n\n  val artisticPipeline = ImagePipeline()\n    .add(grayscale)\n    .add(blur(3))\n    .add(addWatermark(\"\u00a9 2024\"))\n\n  val webOptimizedPipeline = ImagePipeline()\n    .add(resize(800, 600))\n    .add(compress(75))\n    .add(addWatermark(\"example.com\"))\n\n  // \u30c6\u30b9\u30c8\u753b\u50cf\n  val originalImage = Image(1920, 1080, Vector.empty)\n\n  // \u5404\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u5b9f\u884c\n  println(\"=== \u753b\u50cf\u51e6\u7406\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3 ===\")\n\n  List(\n    (\"\u30b5\u30e0\u30cd\u30a4\u30eb\", thumbnailPipeline),\n    (\"\u30a2\u30fc\u30c8\", artisticPipeline),\n    (\"Web\u6700\u9069\u5316\", webOptimizedPipeline)\n  ).foreach { case (name, pipeline) =&gt;\n    val (processed, time) = pipeline.timed(originalImage)\n    println(s\"\\n$name \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3 ($time ms):\")\n    processed.metadata.foreach { case (k, v) =&gt;\n      println(s\"  $k: $v\")\n    }\n  }\n}\n</code></pre>"},{"location":"part7/chapter25/#_8","title":"\u95a2\u6570\u306e\u90e8\u5206\u9069\u7528\u3068\u30ab\u30ea\u30fc\u5316","text":"<pre><code>// PartialApplicationAndCurrying.scala\n@main def partialApplicationAndCurrying(): Unit = {\n  // \u30ab\u30ea\u30fc\u5316\u3055\u308c\u305f\u95a2\u6570\n  def log(level: String)(message: String)(timestamp: Long = System.currentTimeMillis()): String =\n    f\"[$timestamp%tT] [$level%-5s] $message\"\n\n  // \u90e8\u5206\u9069\u7528\u3067\u30ed\u30ac\u30fc\u3092\u4f5c\u6210\n  val infoLog = log(\"INFO\")\n  val errorLog = log(\"ERROR\")\n  val debugLog = log(\"DEBUG\")\n\n  println(\"=== \u30ed\u30ae\u30f3\u30b0 ===\")\n  println(infoLog(\"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u8d77\u52d5\")())\n  Thread.sleep(100)\n  println(errorLog(\"\u63a5\u7d9a\u30a8\u30e9\u30fc\")())\n  Thread.sleep(100)\n  println(debugLog(\"\u5909\u6570x = 42\")())\n\n  // \u95a2\u6570\u30d5\u30a1\u30af\u30c8\u30ea\u30fc\n  def createValidator(min: Int, max: Int): Int =&gt; Boolean =\n    value =&gt; value &gt;= min &amp;&amp; value &lt;= max\n\n  def createFormatter(prefix: String, suffix: String): Any =&gt; String =\n    value =&gt; s\"$prefix$value$suffix\"\n\n  def createCalculator(operation: String): (Double, Double) =&gt; Double =\n    operation match {\n      case \"+\" =&gt; _ + _\n      case \"-\" =&gt; _ - _\n      case \"*\" =&gt; _ * _\n      case \"/\" =&gt; (a, b) =&gt; if (b != 0) a / b else 0\n      case \"^\" =&gt; math.pow\n      case _ =&gt; (_, _) =&gt; 0\n    }\n\n  // \u4f7f\u7528\u4f8b\n  val isValidAge = createValidator(0, 120)\n  val isValidScore = createValidator(0, 100)\n\n  val jsonFormatter = createFormatter(\"{\\\"value\\\": \\\"\", \"\\\"}\")\n  val xmlFormatter = createFormatter(\"&lt;value&gt;\", \"&lt;/value&gt;\")\n\n  val add = createCalculator(\"+\")\n  val multiply = createCalculator(\"*\")\n  val power = createCalculator(\"^\")\n\n  println(\"\\n=== \u30d0\u30ea\u30c7\u30fc\u30bf\u30fc ===\")\n  println(s\"\u5e74\u9f62150\u306f\u6709\u52b9\uff1f: ${isValidAge(150)}\")\n  println(s\"\u30b9\u30b3\u30a285\u306f\u6709\u52b9\uff1f: ${isValidScore(85)}\")\n\n  println(\"\\n=== \u30d5\u30a9\u30fc\u30de\u30c3\u30bf\u30fc ===\")\n  println(s\"JSON: ${jsonFormatter(\"Hello\")}\")\n  println(s\"XML: ${xmlFormatter(\"World\")}\")\n\n  println(\"\\n=== \u8a08\u7b97\u6a5f ===\")\n  println(s\"10 + 5 = ${add(10, 5)}\")\n  println(s\"10 * 5 = ${multiply(10, 5)}\")\n  println(s\"2 ^ 8 = ${power(2, 8)}\")\n}\n</code></pre>"},{"location":"part7/chapter25/#_9","title":"\u30e2\u30ca\u30c7\u30a3\u30c3\u30af\u5408\u6210","text":"<pre><code>// MonadicComposition.scala\n@main def monadicComposition(): Unit = {\n  // Option\u306e\u305f\u3081\u306e\u5408\u6210\n  def parseInt(s: String): Option[Int] =\n    try Some(s.toInt)\n    catch { case _: NumberFormatException =&gt; None }\n\n  def divide(a: Int, b: Int): Option[Double] =\n    if (b != 0) Some(a.toDouble / b) else None\n\n  def sqrt(x: Double): Option[Double] =\n    if (x &gt;= 0) Some(math.sqrt(x)) else None\n\n  // for\u5f0f\u3067\u5408\u6210\n  def calculate(aStr: String, bStr: String): Option[Double] =\n    for {\n      a &lt;- parseInt(aStr)\n      b &lt;- parseInt(bStr)\n      divided &lt;- divide(a, b)\n      result &lt;- sqrt(divided)\n    } yield result\n\n  println(\"=== \u8a08\u7b97\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3 ===\")\n  val testCases = List(\n    (\"100\", \"4\"),   // \u221a(100/4) = 5\n    (\"16\", \"4\"),    // \u221a(16/4) = 2\n    (\"10\", \"0\"),    // \u30bc\u30ed\u9664\u7b97\n    (\"abc\", \"4\"),   // \u30d1\u30fc\u30b9\u30a8\u30e9\u30fc\n    (\"-16\", \"4\")    // \u8ca0\u306e\u5e73\u65b9\u6839\n  )\n\n  testCases.foreach { case (a, b) =&gt;\n    calculate(a, b) match {\n      case Some(result) =&gt; println(f\"\u221a($a/$b) = $result%.2f\")\n      case None =&gt; println(s\"\u8a08\u7b97\u3067\u304d\u307e\u305b\u3093: $a, $b\")\n    }\n  }\n\n  // Either\u306e\u305f\u3081\u306e\u5408\u6210\n  sealed trait AppError\n  case class ParseError(msg: String) extends AppError\n  case class MathError(msg: String) extends AppError\n\n  def parseIntE(s: String): Either[AppError, Int] =\n    try Right(s.toInt)\n    catch { case _: NumberFormatException =&gt; \n      Left(ParseError(s\"'$s'\u306f\u6570\u5024\u3067\u306f\u3042\u308a\u307e\u305b\u3093\"))\n    }\n\n  def divideE(a: Int, b: Int): Either[AppError, Double] =\n    if (b != 0) Right(a.toDouble / b)\n    else Left(MathError(\"\u30bc\u30ed\u3067\u9664\u7b97\u306f\u3067\u304d\u307e\u305b\u3093\"))\n\n  def sqrtE(x: Double): Either[AppError, Double] =\n    if (x &gt;= 0) Right(math.sqrt(x))\n    else Left(MathError(s\"\u8ca0\u306e\u6570\u306e\u5e73\u65b9\u6839\u306f\u8a08\u7b97\u3067\u304d\u307e\u305b\u3093: $x\"))\n\n  def calculateE(aStr: String, bStr: String): Either[AppError, Double] =\n    for {\n      a &lt;- parseIntE(aStr)\n      b &lt;- parseIntE(bStr)\n      divided &lt;- divideE(a, b)\n      result &lt;- sqrtE(divided)\n    } yield result\n\n  println(\"\\n=== \u30a8\u30e9\u30fc\u4ed8\u304d\u8a08\u7b97\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3 ===\")\n  testCases.foreach { case (a, b) =&gt;\n    calculateE(a, b) match {\n      case Right(result) =&gt; println(f\"\u221a($a/$b) = $result%.2f\")\n      case Left(ParseError(msg)) =&gt; println(s\"\u30d1\u30fc\u30b9\u30a8\u30e9\u30fc: $msg\")\n      case Left(MathError(msg)) =&gt; println(s\"\u8a08\u7b97\u30a8\u30e9\u30fc: $msg\")\n    }\n  }\n}\n</code></pre>"},{"location":"part7/chapter25/#etl","title":"\u5b9f\u8df5\u4f8b\uff1aETL\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3","text":"<pre><code>// ETLPipeline.scala\n@main def etlPipeline(): Unit = {\n  import scala.util.Try\n\n  // \u30c7\u30fc\u30bf\u30e2\u30c7\u30eb\n  case class RawData(line: String)\n  case class ParsedRecord(id: Int, name: String, value: Double)\n  case class ValidatedRecord(record: ParsedRecord)\n  case class TransformedRecord(id: Int, name: String, value: Double, category: String)\n\n  // ETL\u30b9\u30c6\u30c3\u30d7\u306e\u578b\n  type ETLStep[A, B] = A =&gt; Either[String, B]\n\n  // Extract: \u751f\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\n  val extract: String =&gt; Either[String, RawData] = line =&gt;\n    if (line.trim.nonEmpty) Right(RawData(line))\n    else Left(\"\u7a7a\u884c\u3067\u3059\")\n\n  // Parse: CSV\u5f62\u5f0f\u306e\u30d1\u30fc\u30b9\n  val parse: ETLStep[RawData, ParsedRecord] = raw =&gt;\n    raw.line.split(\",\") match {\n      case Array(idStr, name, valueStr) =&gt;\n        for {\n          id &lt;- Try(idStr.trim.toInt).toEither.left.map(_ =&gt; s\"ID\u304c\u4e0d\u6b63: $idStr\")\n          value &lt;- Try(valueStr.trim.toDouble).toEither.left.map(_ =&gt; s\"\u5024\u304c\u4e0d\u6b63: $valueStr\")\n        } yield ParsedRecord(id, name.trim, value)\n      case _ =&gt;\n        Left(s\"\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u30a8\u30e9\u30fc: ${raw.line}\")\n    }\n\n  // Validate: \u30c7\u30fc\u30bf\u306e\u691c\u8a3c\n  val validate: ETLStep[ParsedRecord, ValidatedRecord] = record =&gt;\n    if (record.id &gt; 0 &amp;&amp; record.name.nonEmpty &amp;&amp; record.value &gt;= 0) {\n      Right(ValidatedRecord(record))\n    } else {\n      Left(s\"\u691c\u8a3c\u30a8\u30e9\u30fc: $record\")\n    }\n\n  // Transform: \u30c7\u30fc\u30bf\u306e\u5909\u63db\n  val transform: ETLStep[ValidatedRecord, TransformedRecord] = validated =&gt; {\n    val record = validated.record\n    val category = record.value match {\n      case v if v &lt; 100 =&gt; \"\u4f4e\"\n      case v if v &lt; 1000 =&gt; \"\u4e2d\"\n      case _ =&gt; \"\u9ad8\"\n    }\n    Right(TransformedRecord(record.id, record.name, record.value, category))\n  }\n\n  // \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u5408\u6210\n  def pipeline(line: String): Either[String, TransformedRecord] =\n    for {\n      raw &lt;- extract(line)\n      parsed &lt;- parse(raw)\n      validated &lt;- validate(parsed)\n      transformed &lt;- transform(validated)\n    } yield transformed\n\n  // \u30d0\u30c3\u30c1\u51e6\u7406\n  class ETLBatch {\n    private var successCount = 0\n    private var errorCount = 0\n    private val errors = scala.collection.mutable.ListBuffer[String]()\n\n    def process(lines: List[String]): List[TransformedRecord] =\n      lines.flatMap { line =&gt;\n        pipeline(line) match {\n          case Right(record) =&gt;\n            successCount += 1\n            Some(record)\n          case Left(error) =&gt;\n            errorCount += 1\n            errors += s\"\u884c '$line': $error\"\n            None\n        }\n      }\n\n    def report(): String =\n      s\"\"\"ETL\u51e6\u7406\u7d50\u679c:\n         |  \u6210\u529f: $successCount \u4ef6\n         |  \u30a8\u30e9\u30fc: $errorCount \u4ef6\n         |${if (errors.nonEmpty) s\"  \u30a8\u30e9\u30fc\u8a73\u7d30:\\n${errors.map(\"    - \" + _).mkString(\"\\n\")}\" else \"\"}\n         |\"\"\".stripMargin\n  }\n\n  // \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\n  val csvData = List(\n    \"1,\u5546\u54c1A,250.50\",\n    \"2,\u5546\u54c1B,1500.00\",\n    \"invalid,\u5546\u54c1C,300\",\n    \"3,,100.00\",\n    \"4,\u5546\u54c1D,-50.00\",\n    \"5,\u5546\u54c1E,750.25\",\n    \"\",\n    \"6,\u5546\u54c1F,3000.00\"\n  )\n\n  // ETL\u5b9f\u884c\n  val batch = new ETLBatch\n  val results = batch.process(csvData)\n\n  println(\"=== \u5909\u63db\u7d50\u679c ===\")\n  results.foreach { record =&gt;\n    println(f\"ID:${record.id}%3d ${record.name}%-10s \u00a5${record.value}%,8.2f [${record.category}]\")\n  }\n\n  println(s\"\\n${batch.report()}\")\n}\n</code></pre>"},{"location":"part7/chapter25/#_10","title":"\u95a2\u6570\u5408\u6210\u306e\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9","text":"<pre><code>// CompositionBestPractices.scala\n@main def compositionBestPractices(): Unit = {\n  // 1. \u5c0f\u3055\u304f\u3001\u5358\u4e00\u8cac\u4efb\u306e\u95a2\u6570\u3092\u4f5c\u308b\n  val trim = (s: String) =&gt; s.trim\n  val nonEmpty = (s: String) =&gt; s.nonEmpty\n  val capitalize = (s: String) =&gt; \n    if (s.nonEmpty) s.head.toUpper + s.tail.toLowerCase\n    else s\n\n  // 2. \u578b\u3092\u63c3\u3048\u3066\u5408\u6210\u3057\u3084\u3059\u304f\u3059\u308b\n  type StringProcessor = String =&gt; String\n\n  val processors: List[StringProcessor] = List(\n    trim,\n    s =&gt; if (nonEmpty(s)) s else \"\u30c7\u30d5\u30a9\u30eb\u30c8\",\n    capitalize,\n    s =&gt; s.replace(\" \", \"_\")\n  )\n\n  // 3. \u5408\u6210\u95a2\u6570\u3092\u4f5c\u308b\n  val processString: StringProcessor = \n    processors.reduce((f, g) =&gt; f.andThen(g))\n\n  println(\"=== \u6587\u5b57\u5217\u51e6\u7406 ===\")\n  val testStrings = List(\n    \"  hello world  \",\n    \"  SCALA  \",\n    \"   \",\n    \"functional programming\"\n  )\n\n  testStrings.foreach { s =&gt;\n    println(f\"'$s%-25s' \u2192 '${processString(s)}'\")\n  }\n\n  // 4. \u30a8\u30e9\u30fc\u51e6\u7406\u3092\u542b\u3080\u5408\u6210\n  type Result[A] = Either[String, A]\n  type SafeProcessor[A, B] = A =&gt; Result[B]\n\n  def compose[A, B, C](\n    f: SafeProcessor[A, B],\n    g: SafeProcessor[B, C]\n  ): SafeProcessor[A, C] = a =&gt;\n    f(a).flatMap(g)\n\n  // 5. \u30c7\u30d0\u30c3\u30b0\u53ef\u80fd\u306a\u5408\u6210\n  def debug[A](label: String)(value: A): A = {\n    println(s\"[$label] $value\")\n    value\n  }\n\n  val debuggablePipeline = (x: Int) =&gt; x\n    |&gt; (_ * 2)\n    |&gt; debug(\"2\u500d\u5f8c\")\n    |&gt; (_ + 10)\n    |&gt; debug(\"10\u8db3\u3057\u305f\u5f8c\")\n    |&gt; (_ / 3)\n    |&gt; debug(\"3\u3067\u5272\u3063\u305f\u5f8c\")\n\n  println(\"\\n=== \u30c7\u30d0\u30c3\u30b0\u4ed8\u304d\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3 ===\")\n  debuggablePipeline(15)\n}\n</code></pre>"},{"location":"part7/chapter25/#_11","title":"\u7df4\u7fd2\u3057\u3066\u307f\u3088\u3046\uff01","text":""},{"location":"part7/chapter25/#1","title":"\u7df4\u7fd21\uff1a\u30e1\u30fc\u30eb\u51e6\u7406\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3","text":"<p>\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3092\u51e6\u7406\u3059\u308b\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\uff1a - \u30c8\u30ea\u30e0\u3001\u5c0f\u6587\u5b57\u5316 - \u5f62\u5f0f\u306e\u691c\u8a3c - \u30c9\u30e1\u30a4\u30f3\u306e\u62bd\u51fa - \u30b9\u30d1\u30e0\u30c9\u30e1\u30a4\u30f3\u306e\u30c1\u30a7\u30c3\u30af</p>"},{"location":"part7/chapter25/#2","title":"\u7df4\u7fd22\uff1a\u6570\u5024\u8a08\u7b97\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3","text":"<p>\u6570\u5024\u306e\u30ea\u30b9\u30c8\u3092\u51e6\u7406\u3059\u308b\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\uff1a - \u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\uff08\u7bc4\u56f2\u5185\u306e\u5024\u306e\u307f\uff09 - \u5909\u63db\uff08\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\uff09 - \u96c6\u8a08\uff08\u5e73\u5747\u3001\u5206\u6563\uff09</p>"},{"location":"part7/chapter25/#3","title":"\u7df4\u7fd23\uff1a\u30ed\u30b0\u89e3\u6790\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3","text":"<p>\u30ed\u30b0\u30d5\u30a1\u30a4\u30eb\u306e\u884c\u3092\u89e3\u6790\u3059\u308b\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\uff1a - \u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u306e\u62bd\u51fa - \u30ed\u30b0\u30ec\u30d9\u30eb\u306e\u5224\u5b9a - \u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u30d1\u30fc\u30b9 - \u7d71\u8a08\u60c5\u5831\u306e\u96c6\u8a08</p>"},{"location":"part7/chapter25/#_12","title":"\u3053\u306e\u7ae0\u306e\u307e\u3068\u3081","text":"<p>\u95a2\u6570\u5408\u6210\u306e\u529b\u3092\u4f53\u9a13\u3067\u304d\u307e\u3057\u305f\u306d\uff01</p>"},{"location":"part7/chapter25/#_13","title":"\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3053\u3068","text":"<p>\u2705 \u95a2\u6570\u5408\u6210\u306e\u57fa\u672c - andThen\u3068compose - \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u6f14\u7b97\u5b50 - \u95a2\u6570\u306e\u9023\u9396</p> <p>\u2705 \u5b9f\u8df5\u7684\u306a\u5408\u6210 - \u691c\u8a3c\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3 - \u30c7\u30fc\u30bf\u5909\u63db - ETL\u51e6\u7406</p> <p>\u2705 \u9ad8\u5ea6\u306a\u30c6\u30af\u30cb\u30c3\u30af - \u90e8\u5206\u9069\u7528 - \u30ab\u30ea\u30fc\u5316 - \u30e2\u30ca\u30c7\u30a3\u30c3\u30af\u5408\u6210</p> <p>\u2705 \u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9 - \u5c0f\u3055\u306a\u95a2\u6570\u306e\u7d44\u307f\u5408\u308f\u305b - \u578b\u306e\u7d71\u4e00 - \u30a8\u30e9\u30fc\u51e6\u7406</p>"},{"location":"part7/chapter25/#_14","title":"\u95a2\u6570\u5408\u6210\u3092\u4f7f\u3046\u30b3\u30c4","text":"<ol> <li> <p>\u5c0f\u3055\u304f\u59cb\u3081\u308b</p> <ul> <li>\u5358\u4e00\u8cac\u4efb\u306e\u95a2\u6570</li> <li>\u518d\u5229\u7528\u53ef\u80fd\u306a\u90e8\u54c1</li> <li>\u30c6\u30b9\u30c8\u3057\u3084\u3059\u3044\u5358\u4f4d</li> </ul> </li> <li> <p>\u578b\u3092\u610f\u8b58\u3059\u308b</p> <ul> <li>\u5165\u51fa\u529b\u306e\u578b\u3092\u63c3\u3048\u308b</li> <li>\u578b\u30a8\u30a4\u30ea\u30a2\u30b9\u306e\u6d3b\u7528</li> <li>\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306a\u8a2d\u8a08</li> </ul> </li> <li> <p>\u8aad\u307f\u3084\u3059\u3055\u91cd\u8996</p> <ul> <li>\u610f\u5473\u306e\u3042\u308b\u95a2\u6570\u540d</li> <li>\u9069\u5207\u306a\u62bd\u8c61\u5ea6</li> <li>\u30c7\u30d0\u30c3\u30b0\u306e\u3057\u3084\u3059\u3055</li> </ul> </li> </ol>"},{"location":"part7/chapter25/#_15","title":"\u6b21\u306e\u7ae0\u3067\u306f...","text":"<p>\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u5b66\u3073\u307e\u3059\u3002\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u3001\u3088\u308a\u6c4e\u7528\u7684\u3067\u518d\u5229\u7528\u53ef\u80fd\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part7/chapter25/#_16","title":"\u6700\u5f8c\u306b","text":"<p>\u95a2\u6570\u5408\u6210\u306f\u300c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u932c\u91d1\u8853\u300d\u3067\u3059\u3002\u30b7\u30f3\u30d7\u30eb\u306a\u6750\u6599\uff08\u95a2\u6570\uff09\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\u91d1\uff08\u8907\u96d1\u306a\u51e6\u7406\uff09\u3092\u751f\u307f\u51fa\u3059\u3002\u3053\u306e\u9b54\u6cd5\u306e\u3088\u3046\u306a\u6280\u8853\u3092\u30de\u30b9\u30bf\u30fc\u3059\u308c\u3070\u3001\u3069\u3093\u306a\u8907\u96d1\u306a\u554f\u984c\u3082\u3001\u5c0f\u3055\u306a\u90e8\u54c1\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u89e3\u6c7a\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff01</p>"},{"location":"part7/chapter26/","title":"\u7b2c26\u7ae0 \u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u5165\u9580","text":""},{"location":"part7/chapter26/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u304a\u5f01\u5f53\u7bb1\u3092\u601d\u3044\u51fa\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u540c\u3058\u304a\u5f01\u5f53\u7bb1\u3067\u3082\u3001\u3054\u98ef\u3092\u5165\u308c\u305f\u308a\u3001\u30b5\u30f3\u30c9\u30a4\u30c3\u30c1\u3092\u5165\u308c\u305f\u308a\u3001\u30d1\u30b9\u30bf\u3092\u5165\u308c\u305f\u308a\u3067\u304d\u307e\u3059\u3088\u306d\u3002\u3067\u3082\u300c\u304a\u5f01\u5f53\u7bb1\u300d\u3068\u3044\u3046\u57fa\u672c\u7684\u306a\u6a5f\u80fd\uff08\u98df\u3079\u7269\u3092\u5165\u308c\u308b\u3001\u6301\u3061\u904b\u3076\uff09\u306f\u5909\u308f\u308a\u307e\u305b\u3093\u3002</p> <p>\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3082\u540c\u3058\u3067\u3059\u3002\u300c\u4f55\u3092\u5165\u308c\u308b\u304b\u300d\u306f\u5f8c\u3067\u6c7a\u3081\u3089\u308c\u308b\u3001\u67d4\u8edf\u306a\u300c\u5165\u308c\u7269\u300d\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3093\u3067\u3059\uff01</p>"},{"location":"part7/chapter26/#_2","title":"\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3063\u3066\u4f55\u3060\u308d\u3046\uff1f","text":""},{"location":"part7/chapter26/#_3","title":"\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306a\u7bb1\u3092\u4f5c\u308b","text":"<pre><code>// GenericBoxBasics.scala\n@main def genericBoxBasics(): Unit = {\n  // \u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4f7f\u308f\u306a\u3044\u5834\u5408\uff08\u4e0d\u4fbf...\uff09\n  class IntBox(value: Int):\n    def getValue: Int = value\n\n  class StringBox(value: String):\n    def getValue: String = value\n\n  // \u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4f7f\u3046\u5834\u5408\uff08\u4fbf\u5229\uff01\uff09\n  class Box[T](value: T):\n    def getValue: T = value\n    def contains(item: T): Boolean = value == item\n    def map[U](f: T =&gt; U): Box[U] = Box(f(value))\n\n  // \u3044\u308d\u3044\u308d\u306a\u578b\u3067\u4f7f\u3048\u308b\n  val intBox = Box(42)\n  val stringBox = Box(\"Hello\")\n  val boolBox = Box(true)\n\n  println(s\"\u6574\u6570\u306e\u7bb1: ${intBox.getValue}\")\n  println(s\"\u6587\u5b57\u5217\u306e\u7bb1: ${stringBox.getValue}\")\n  println(s\"\u771f\u507d\u5024\u306e\u7bb1: ${boolBox.getValue}\")\n\n  // map\u3067\u5909\u63db\n  val doubledBox = intBox.map(_ * 2)\n  val upperBox = stringBox.map(_.toUpperCase)\n\n  println(s\"\\n\u5909\u63db\u5f8c:\")\n  println(s\"2\u500d: ${doubledBox.getValue}\")\n  println(s\"\u5927\u6587\u5b57: ${upperBox.getValue}\")\n</code></pre>"},{"location":"part7/chapter26/#_4","title":"\u8907\u6570\u306e\u578b\u30d1\u30e9\u30e1\u30fc\u30bf","text":"<pre><code>// MultipleTypeParameters.scala\n@main def multipleTypeParameters(): Unit = {\n  // 2\u3064\u306e\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6301\u3064\u30da\u30a2\n  class Pair[A, B](val first: A, val second: B):\n    def swap: Pair[B, A] = Pair(second, first)\n    def map[C, D](f1: A =&gt; C, f2: B =&gt; D): Pair[C, D] = \n      Pair(f1(first), f2(second))\n    override def toString: String = s\"($first, $second)\"\n\n  val namAge = Pair(\"\u592a\u90ce\", 25)\n  val swapped = namAge.swap\n\n  println(s\"\u5143\u306e\u30da\u30a2: $namAge\")\n  println(s\"\u5165\u308c\u66ff\u3048: $swapped\")\n\n  // \u305d\u308c\u305e\u308c\u3092\u5909\u63db\n  val transformed = namAge.map(\n    _.toUpperCase,\n    _ * 2\n  )\n  println(s\"\u5909\u63db\u5f8c: $transformed\")\n\n  // \u5b9f\u7528\u4f8b\uff1a\u30a8\u30e9\u30fc\u4ed8\u304d\u7d50\u679c\n  class Result[E, A](value: Either[E, A]):\n    def isSuccess: Boolean = value.isRight\n    def isError: Boolean = value.isLeft\n\n    def map[B](f: A =&gt; B): Result[E, B] = \n      Result(value.map(f))\n\n    def flatMap[B](f: A =&gt; Result[E, B]): Result[E, B] =\n      Result(value.flatMap(a =&gt; f(a).value))\n\n    def getOrElse(default: A): A = value.getOrElse(default)\n\n    def toOption: Option[A] = value.toOption\n\n  object Result:\n    def success[E, A](value: A): Result[E, A] = Result(Right(value))\n    def error[E, A](error: E): Result[E, A] = Result(Left(error))\n\n  // \u4f7f\u7528\u4f8b\n  def divide(a: Int, b: Int): Result[String, Double] =\n    if (b == 0) Result.error(\"\u30bc\u30ed\u9664\u7b97\u30a8\u30e9\u30fc\")\n    else Result.success(a.toDouble / b)\n\n  val result1 = divide(10, 2)\n  val result2 = divide(10, 0)\n\n  println(s\"\\n10 \u00f7 2 = ${result1.toOption}\")\n  println(s\"10 \u00f7 0 = ${result2.toOption}\")\n</code></pre>"},{"location":"part7/chapter26/#_5","title":"\u5b9f\u8df5\u7684\u306a\u578b\u30d1\u30e9\u30e1\u30fc\u30bf","text":""},{"location":"part7/chapter26/#_6","title":"\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306a\u30b3\u30ec\u30af\u30b7\u30e7\u30f3","text":"<pre><code>// GenericCollections.scala\n@main def genericCollections(): Unit = {\n  // \u7c21\u5358\u306a\u30b9\u30bf\u30c3\u30af\u306e\u5b9f\u88c5\n  class Stack[A]:\n    private var elements: List[A] = List.empty\n\n    def push(elem: A): Unit =\n      elements = elem :: elements\n\n    def pop(): Option[A] =\n      elements match {\n        case head :: tail =&gt;\n          elements = tail\n          Some(head)\n        case Nil =&gt;\n          None\n      }\n\n    def peek: Option[A] = elements.headOption\n\n    def isEmpty: Boolean = elements.isEmpty\n\n    def size: Int = elements.length\n\n    def map[B](f: A =&gt; B): Stack[B] =\n      val newStack = Stack[B]()\n      elements.reverse.foreach(elem =&gt; newStack.push(f(elem)))\n      newStack\n\n    override def toString: String = \n      s\"Stack(${elements.mkString(\", \")})\"\n\n  // \u6574\u6570\u306e\u30b9\u30bf\u30c3\u30af\n  val intStack = Stack[Int]()\n  intStack.push(1)\n  intStack.push(2)\n  intStack.push(3)\n\n  println(\"=== \u6574\u6570\u30b9\u30bf\u30c3\u30af ===\")\n  println(s\"\u73fe\u5728: $intStack\")\n  println(s\"\u30dd\u30c3\u30d7: ${intStack.pop()}\")\n  println(s\"\u30dd\u30c3\u30d7\u5f8c: $intStack\")\n\n  // \u6587\u5b57\u5217\u306e\u30b9\u30bf\u30c3\u30af\n  val stringStack = Stack[String]()\n  stringStack.push(\"Hello\")\n  stringStack.push(\"World\")\n\n  println(\"\\n=== \u6587\u5b57\u5217\u30b9\u30bf\u30c3\u30af ===\")\n  println(s\"\u73fe\u5728: $stringStack\")\n\n  // \u30b9\u30bf\u30c3\u30af\u306e\u5909\u63db\n  val upperStack = stringStack.map(_.toUpperCase)\n  println(s\"\u5927\u6587\u5b57\u5316: $upperStack\")\n\n  // \u30ad\u30e5\u30fc\u306e\u5b9f\u88c5\n  class Queue[A]:\n    private var front: List[A] = List.empty\n    private var back: List[A] = List.empty\n\n    def enqueue(elem: A): Unit =\n      back = elem :: back\n\n    def dequeue(): Option[A] =\n      front match {\n        case head :: tail =&gt;\n          front = tail\n          Some(head)\n        case Nil =&gt;\n          if (back.nonEmpty) {\n            front = back.reverse\n            back = List.empty\n            dequeue()\n          } else {\n            None\n          }\n      }\n\n    def isEmpty: Boolean = front.isEmpty &amp;&amp; back.isEmpty\n\n    override def toString: String =\n      s\"Queue(${(front ++ back.reverse).mkString(\", \")})\"\n\n  // \u30ad\u30e5\u30fc\u306e\u4f7f\u7528\u4f8b\n  val queue = Queue[String]()\n  queue.enqueue(\"A\")\n  queue.enqueue(\"B\")\n  queue.enqueue(\"C\")\n\n  println(\"\\n=== \u30ad\u30e5\u30fc ===\")\n  println(s\"\u73fe\u5728: $queue\")\n  println(s\"\u30c7\u30ad\u30e5\u30fc: ${queue.dequeue()}\")\n  println(s\"\u30c7\u30ad\u30e5\u30fc\u5f8c: $queue\")\n</code></pre>"},{"location":"part7/chapter26/#_7","title":"\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306a\u30c4\u30ea\u30fc\u69cb\u9020","text":"<pre><code>// GenericTree.scala\n@main def genericTree(): Unit = {\n  // \u4e8c\u5206\u6728\u306e\u5b9a\u7fa9\n  enum BinaryTree[+A]:\n    case Empty\n    case Node(value: A, left: BinaryTree[A], right: BinaryTree[A])\n\n  import BinaryTree.*\n\n  // \u30c4\u30ea\u30fc\u64cd\u4f5c\u306e\u30d8\u30eb\u30d1\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n  object BinaryTree:\n    def leaf[A](value: A): BinaryTree[A] = Node(value, Empty, Empty)\n\n    def size[A](tree: BinaryTree[A]): Int = tree match {\n      case Empty =&gt; 0\n      case Node(_, left, right) =&gt; 1 + size(left) + size(right)\n    }\n\n    def depth[A](tree: BinaryTree[A]): Int = tree match {\n      case Empty =&gt; 0\n      case Node(_, left, right) =&gt; 1 + math.max(depth(left), depth(right))\n    }\n\n    def map[A, B](tree: BinaryTree[A])(f: A =&gt; B): BinaryTree[B] = \n      tree match {\n        case Empty =&gt; Empty\n        case Node(value, left, right) =&gt;\n          Node(f(value), map(left)(f), map(right)(f))\n      }\n\n    def contains[A](tree: BinaryTree[A])(value: A): Boolean =\n      tree match {\n        case Empty =&gt; false\n        case Node(v, left, right) =&gt;\n          v == value || contains(left)(value) || contains(right)(value)\n      }\n\n    def toList[A](tree: BinaryTree[A]): List[A] = tree match {\n      case Empty =&gt; List.empty\n      case Node(value, left, right) =&gt;\n        toList(left) ++ List(value) ++ toList(right)\n    }\n\n  // \u30b5\u30f3\u30d7\u30eb\u30c4\u30ea\u30fc\n  val intTree = Node(\n    10,\n    Node(5, leaf(3), leaf(7)),\n    Node(15, leaf(12), leaf(20))\n  )\n\n  println(\"=== \u6574\u6570\u306e\u4e8c\u5206\u6728 ===\")\n  println(s\"\u30b5\u30a4\u30ba: ${BinaryTree.size(intTree)}\")\n  println(s\"\u6df1\u3055: ${BinaryTree.depth(intTree)}\")\n  println(s\"\u8981\u7d20: ${BinaryTree.toList(intTree)}\")\n  println(s\"7\u3092\u542b\u3080\uff1f: ${BinaryTree.contains(intTree)(7)}\")\n\n  // \u30c4\u30ea\u30fc\u306e\u5909\u63db\n  val doubledTree = BinaryTree.map(intTree)(_ * 2)\n  println(s\"\\n2\u500d\u3057\u305f\u30c4\u30ea\u30fc: ${BinaryTree.toList(doubledTree)}\")\n\n  // \u6587\u5b57\u5217\u306e\u30c4\u30ea\u30fc\n  val stringTree = Node(\n    \"B\",\n    Node(\"A\", Empty, Empty),\n    Node(\"C\", Empty, Empty)\n  )\n\n  val lowerTree = BinaryTree.map(stringTree)(_.toLowerCase)\n  println(s\"\\n\u5c0f\u6587\u5b57\u5316: ${BinaryTree.toList(lowerTree)}\")\n</code></pre>"},{"location":"part7/chapter26/#_8","title":"\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u30e1\u30bd\u30c3\u30c9","text":"<pre><code>// GenericMethods.scala\n@main def genericMethods(): Unit = {\n  // \u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306a\u30e1\u30bd\u30c3\u30c9\n  def swap[A, B](pair: (A, B)): (B, A) = (pair._2, pair._1)\n\n  def first[A](list: List[A]): Option[A] = list.headOption\n\n  def repeat[A](elem: A, times: Int): List[A] = \n    List.fill(times)(elem)\n\n  def zipWith[A, B, C](list1: List[A], list2: List[B])(f: (A, B) =&gt; C): List[C] =\n    list1.zip(list2).map { case (a, b) =&gt; f(a, b) }\n\n  // \u4f7f\u7528\u4f8b\n  println(\"=== \u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u30e1\u30bd\u30c3\u30c9 ===\")\n  println(s\"swap((1, 'a')) = ${swap((1, 'a'))}\")\n  println(s\"first(List(1,2,3)) = ${first(List(1,2,3))}\")\n  println(s\"repeat('X', 5) = ${repeat('X', 5)}\")\n\n  val numbers = List(1, 2, 3)\n  val strings = List(\"one\", \"two\", \"three\")\n  val combined = zipWith(numbers, strings)((n, s) =&gt; s\"$n:$s\")\n  println(s\"zipWith = $combined\")\n\n  // \u3088\u308a\u5b9f\u7528\u7684\u306a\u4f8b\uff1a\u30ad\u30e3\u30c3\u30b7\u30e5\n  class Cache[K, V]:\n    private val store = scala.collection.mutable.Map[K, V]()\n    private val accessTime = scala.collection.mutable.Map[K, Long]()\n\n    def put(key: K, value: V): Unit =\n      store(key) = value\n      accessTime(key) = System.currentTimeMillis()\n\n    def get(key: K): Option[V] =\n      store.get(key).map { value =&gt;\n        accessTime(key) = System.currentTimeMillis()\n        value\n      }\n\n    def getOrCompute(key: K)(compute: =&gt; V): V =\n      get(key).getOrElse {\n        val value = compute\n        put(key, value)\n        value\n      }\n\n    def evictOldest(keep: Int): Unit =\n      if (store.size &gt; keep) {\n        val toRemove = accessTime.toList\n          .sortBy(_._2)\n          .take(store.size - keep)\n          .map(_._1)\n\n        toRemove.foreach { key =&gt;\n          store.remove(key)\n          accessTime.remove(key)\n        }\n      }\n\n    def size: Int = store.size\n\n    override def toString: String = \n      s\"Cache(${store.mkString(\", \")})\"\n\n  // \u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u4f7f\u7528\n  val cache = Cache[String, Int]()\n\n  println(\"\\n=== \u30ad\u30e3\u30c3\u30b7\u30e5 ===\")\n  println(s\"\u8a08\u7b97\u7d50\u679c: ${cache.getOrCompute(\"expensive\")(42)}\")\n  println(s\"\u30ad\u30e3\u30c3\u30b7\u30e5\u304b\u3089: ${cache.get(\"expensive\")}\")\n\n  cache.put(\"a\", 1)\n  cache.put(\"b\", 2)\n  cache.put(\"c\", 3)\n\n  println(s\"\u73fe\u5728\u306e\u30ad\u30e3\u30c3\u30b7\u30e5: $cache\")\n\n  Thread.sleep(10)\n  cache.get(\"a\")  // a\u306b\u30a2\u30af\u30bb\u30b9\n\n  cache.evictOldest(2)\n  println(s\"\u53e4\u3044\u3082\u306e\u3092\u524a\u9664\u5f8c: $cache\")\n</code></pre>"},{"location":"part7/chapter26/#_9","title":"\u5b9f\u8df5\u4f8b\uff1a\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306a\u30d1\u30fc\u30b5\u30fc","text":"<pre><code>// GenericParser.scala\n@main def genericParser(): Unit = {\n  // \u30d1\u30fc\u30b5\u30fc\u306e\u7d50\u679c\n  case class ParseResult[+A](value: A, remaining: String)\n\n  // \u30d1\u30fc\u30b5\u30fc\u306e\u578b\n  trait Parser[+A]:\n    def parse(input: String): Option[ParseResult[A]]\n\n    def map[B](f: A =&gt; B): Parser[B] = new Parser[B] {\n      def parse(input: String): Option[ParseResult[B]] =\n        Parser.this.parse(input).map { result =&gt;\n          ParseResult(f(result.value), result.remaining)\n        }\n    }\n\n    def flatMap[B](f: A =&gt; Parser[B]): Parser[B] = new Parser[B] {\n      def parse(input: String): Option[ParseResult[B]] =\n        Parser.this.parse(input).flatMap { result =&gt;\n          f(result.value).parse(result.remaining)\n        }\n    }\n\n    def ~[B](other: Parser[B]): Parser[(A, B)] = \n      for {\n        a &lt;- this\n        b &lt;- other\n      } yield (a, b)\n\n    def |[B &gt;: A](other: Parser[B]): Parser[B] = new Parser[B] {\n      def parse(input: String): Option[ParseResult[B]] =\n        Parser.this.parse(input).orElse(other.parse(input))\n    }\n\n  // \u57fa\u672c\u7684\u306a\u30d1\u30fc\u30b5\u30fc\n  object Parser {\n    def char(c: Char): Parser[Char] = new Parser[Char] {\n      def parse(input: String): Option[ParseResult[Char]] =\n        if (input.nonEmpty &amp;&amp; input.head == c) {\n          Some(ParseResult(c, input.tail))\n        } else {\n          None\n        }\n    }\n\n    def string(s: String): Parser[String] = new Parser[String] {\n      def parse(input: String): Option[ParseResult[String]] =\n        if (input.startsWith(s)) {\n          Some(ParseResult(s, input.drop(s.length)))\n        } else {\n          None\n        }\n    }\n\n    def digit: Parser[Char] = new Parser[Char] {\n      def parse(input: String): Option[ParseResult[Char]] =\n        if (input.nonEmpty &amp;&amp; input.head.isDigit) {\n          Some(ParseResult(input.head, input.tail))\n        } else {\n          None\n        }\n    }\n\n    def letter: Parser[Char] = new Parser[Char] {\n      def parse(input: String): Option[ParseResult[Char]] =\n        if (input.nonEmpty &amp;&amp; input.head.isLetter) {\n          Some(ParseResult(input.head, input.tail))\n        } else {\n          None\n        }\n    }\n\n    def many[A](p: Parser[A]): Parser[List[A]] = new Parser[List[A]] {\n      def parse(input: String): Option[ParseResult[List[A]]] = {\n        var remaining = input\n        val results = scala.collection.mutable.ListBuffer[A]()\n\n        while ({\n          p.parse(remaining) match {\n            case Some(ParseResult(value, rest)) =&gt;\n              results += value\n              remaining = rest\n              true\n            case None =&gt;\n              false\n          }\n        }) {}\n\n        Some(ParseResult(results.toList, remaining))\n      }\n    }\n\n    def many1[A](p: Parser[A]): Parser[List[A]] =\n      for {\n        first &lt;- p\n        rest &lt;- many(p)\n      } yield first :: rest\n  }\n\n  import Parser.*\n\n  // \u6570\u5024\u30d1\u30fc\u30b5\u30fc\n  val number: Parser[Int] = many1(digit).map(_.mkString.toInt)\n\n  // \u8b58\u5225\u5b50\u30d1\u30fc\u30b5\u30fc\n  val identifier: Parser[String] = \n    for {\n      first &lt;- letter\n      rest &lt;- many(letter | digit)\n    } yield (first :: rest).mkString\n\n  // \u4f7f\u7528\u4f8b\n  println(\"=== \u30d1\u30fc\u30b5\u30fc\u306e\u5b9f\u884c ===\")\n\n  number.parse(\"123abc\") match {\n    case Some(ParseResult(value, remaining)) =&gt;\n      println(s\"\u6570\u5024: $value, \u6b8b\u308a: '$remaining'\")\n    case None =&gt;\n      println(\"\u30d1\u30fc\u30b9\u5931\u6557\")\n  }\n\n  identifier.parse(\"hello123world\") match {\n    case Some(ParseResult(value, remaining)) =&gt;\n      println(s\"\u8b58\u5225\u5b50: $value, \u6b8b\u308a: '$remaining'\")\n    case None =&gt;\n      println(\"\u30d1\u30fc\u30b9\u5931\u6557\")\n  }\n\n  // \u3088\u308a\u8907\u96d1\u306a\u4f8b\uff1a\u4ee3\u5165\u6587\u306e\u30d1\u30fc\u30b5\u30fc\n  val assign = \n    for {\n      id &lt;- identifier\n      _ &lt;- string(\" = \")\n      num &lt;- number\n    } yield (id, num)\n\n  assign.parse(\"count = 42\") match {\n    case Some(ParseResult((id, value), remaining)) =&gt;\n      println(s\"\u4ee3\u5165: $id = $value\")\n    case None =&gt;\n      println(\"\u30d1\u30fc\u30b9\u5931\u6557\")\n  }\n</code></pre>"},{"location":"part7/chapter26/#_10","title":"\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5b9f\u8df5\u6d3b\u7528","text":"<pre><code>// PracticalTypeParameters.scala\n@main def practicalTypeParameters(): Unit = {\n  // \u30a4\u30d9\u30f3\u30c8\u30a8\u30df\u30c3\u30bf\u30fc\n  class EventEmitter[E]:\n    private var listeners: List[E =&gt; Unit] = List.empty\n\n    def on(listener: E =&gt; Unit): Unit =\n      listeners = listener :: listeners\n\n    def off(listener: E =&gt; Unit): Unit =\n      listeners = listeners.filterNot(_ == listener)\n\n    def emit(event: E): Unit =\n      listeners.foreach(_.apply(event))\n\n  // \u30a4\u30d9\u30f3\u30c8\u306e\u5b9a\u7fa9\n  sealed trait UserEvent\n  case class Login(userId: String, timestamp: Long) extends UserEvent\n  case class Logout(userId: String, timestamp: Long) extends UserEvent\n  case class Error(message: String) extends UserEvent\n\n  // \u4f7f\u7528\u4f8b\n  val userEvents = EventEmitter[UserEvent]()\n\n  val loginHandler: UserEvent =&gt; Unit = {\n    case Login(id, time) =&gt; println(s\"\u30e6\u30fc\u30b6\u30fc $id \u304c\u30ed\u30b0\u30a4\u30f3\uff08$time\uff09\")\n    case _ =&gt; ()\n  }\n\n  val errorHandler: UserEvent =&gt; Unit = {\n    case Error(msg) =&gt; println(s\"\u30a8\u30e9\u30fc: $msg\")\n    case _ =&gt; ()\n  }\n\n  userEvents.on(loginHandler)\n  userEvents.on(errorHandler)\n\n  println(\"=== \u30a4\u30d9\u30f3\u30c8\u767a\u884c ===\")\n  userEvents.emit(Login(\"user123\", System.currentTimeMillis()))\n  userEvents.emit(Error(\"\u63a5\u7d9a\u5931\u6557\"))\n  userEvents.emit(Logout(\"user123\", System.currentTimeMillis()))\n\n  // \u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306a\u30d3\u30eb\u30c0\u30fc\u30d1\u30bf\u30fc\u30f3\n  class Builder[T]:\n    private var instance: Option[T] = None\n\n    def build(f: =&gt; T): Builder[T] =\n      instance = Some(f)\n      this\n\n    def configure(f: T =&gt; T): Builder[T] =\n      instance = instance.map(f)\n      this\n\n    def get: Option[T] = instance\n\n    def getOrElse(default: T): T = instance.getOrElse(default)\n\n  case class Config(\n    host: String = \"localhost\",\n    port: Int = 8080,\n    ssl: Boolean = false\n  )\n\n  val config = Builder[Config]()\n    .build(Config())\n    .configure(_.copy(host = \"example.com\"))\n    .configure(_.copy(port = 443))\n    .configure(_.copy(ssl = true))\n    .get\n\n  println(s\"\\n\u8a2d\u5b9a: $config\")\n</code></pre>"},{"location":"part7/chapter26/#_11","title":"\u7df4\u7fd2\u3057\u3066\u307f\u3088\u3046\uff01","text":""},{"location":"part7/chapter26/#1","title":"\u7df4\u7fd21\uff1a\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306a\u30ea\u30f3\u30af\u30ea\u30b9\u30c8","text":"<p>\u5358\u65b9\u5411\u30ea\u30f3\u30af\u30ea\u30b9\u30c8\u3092\u5b9f\u88c5\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - \u8981\u7d20\u306e\u8ffd\u52a0\u3001\u524a\u9664 - map\u3001filter\u3001fold\u306e\u5b9f\u88c5 - reverse\u30e1\u30bd\u30c3\u30c9</p>"},{"location":"part7/chapter26/#2option","title":"\u7df4\u7fd22\uff1a\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306aOption","text":"<p>\u72ec\u81ea\u306eOption\u578b\u3092\u5b9f\u88c5\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - Some[A]\u3068None\u306e\u5b9f\u88c5 - map\u3001flatMap\u3001filter\u30e1\u30bd\u30c3\u30c9 - getOrElse\u30e1\u30bd\u30c3\u30c9</p>"},{"location":"part7/chapter26/#3","title":"\u7df4\u7fd23\uff1a\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u306a\u30e1\u30e2\u5316","text":"<p>\u4efb\u610f\u306e\u95a2\u6570\u3092\u30e1\u30e2\u5316\u3059\u308b\u4ed5\u7d44\u307f\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\uff1a - \u5f15\u6570\u3068\u7d50\u679c\u306e\u30ad\u30e3\u30c3\u30b7\u30e5 - \u30ad\u30e3\u30c3\u30b7\u30e5\u30b5\u30a4\u30ba\u306e\u5236\u9650 - \u7d71\u8a08\u60c5\u5831\uff08\u30d2\u30c3\u30c8\u7387\u306a\u3069\uff09</p>"},{"location":"part7/chapter26/#_12","title":"\u3053\u306e\u7ae0\u306e\u307e\u3068\u3081","text":"<p>\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u57fa\u790e\u3092\u5b66\u3073\u307e\u3057\u305f\uff01</p>"},{"location":"part7/chapter26/#_13","title":"\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3053\u3068","text":"<p>\u2705 \u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u57fa\u672c - \u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u30af\u30e9\u30b9 - \u578b\u5b89\u5168\u306a\u6c4e\u7528\u30b3\u30fc\u30c9 - \u8907\u6570\u306e\u578b\u30d1\u30e9\u30e1\u30fc\u30bf</p> <p>\u2705 \u5b9f\u8df5\u7684\u306a\u4f7f\u3044\u65b9 - \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u5b9f\u88c5 - \u30c4\u30ea\u30fc\u69cb\u9020 - \u30d1\u30fc\u30b5\u30fc\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf</p> <p>\u2705 \u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u30e1\u30bd\u30c3\u30c9 - \u578b\u63a8\u8ad6\u306e\u6d3b\u7528 - \u9ad8\u968e\u95a2\u6570\u3068\u306e\u7d44\u307f\u5408\u308f\u305b - \u518d\u5229\u7528\u53ef\u80fd\u306a\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3</p> <p>\u2705 \u8a2d\u8a08\u30d1\u30bf\u30fc\u30f3 - \u30d3\u30eb\u30c0\u30fc\u30d1\u30bf\u30fc\u30f3 - \u30a4\u30d9\u30f3\u30c8\u30a8\u30df\u30c3\u30bf\u30fc - \u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u5b9f\u88c5</p>"},{"location":"part7/chapter26/#_14","title":"\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4f7f\u3046\u30b3\u30c4","text":"<ol> <li> <p>\u610f\u5473\u306e\u3042\u308b\u540d\u524d</p> <ul> <li>T: Type\uff08\u4e00\u822c\u7684\u306a\u578b\uff09</li> <li>K, V: Key, Value</li> <li>E: Element/Event/Error</li> <li>A, B: \u95a2\u6570\u306e\u5165\u51fa\u529b</li> </ul> </li> <li> <p>\u9069\u5207\u306a\u62bd\u8c61\u5ea6</p> <ul> <li>\u5fc5\u8981\u5341\u5206\u306a\u5236\u7d04</li> <li>\u904e\u5ea6\u306a\u4e00\u822c\u5316\u3092\u907f\u3051\u308b</li> <li>\u4f7f\u3044\u3084\u3059\u3055\u3092\u91cd\u8996</li> </ul> </li> <li> <p>\u578b\u63a8\u8ad6\u306e\u6d3b\u7528</p> <ul> <li>\u660e\u793a\u7684\u306a\u578b\u6307\u5b9a\u3092\u6700\u5c0f\u9650\u306b</li> <li>\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u63a8\u8ad6\u3055\u305b\u308b</li> <li>\u5fc5\u8981\u306a\u7b87\u6240\u306e\u307f\u660e\u793a</li> </ul> </li> </ol>"},{"location":"part7/chapter26/#_15","title":"\u6b21\u306e\u7ae0\u3067\u306f...","text":"<p>\u5883\u754c\u3068\u5909\u4f4d\u6307\u5b9a\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3059\u3002\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u3088\u308a\u67d4\u8edf\u306a\u5236\u7d04\u3092\u8a2d\u5b9a\u3059\u308b\u65b9\u6cd5\u3092\u7fd2\u5f97\u3057\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part7/chapter26/#_16","title":"\u6700\u5f8c\u306b","text":"<p>\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u300c\u4e07\u80fd\u306e\u9053\u5177\u7bb1\u300d\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002\u4e2d\u8eab\u306f\u5f8c\u3067\u6c7a\u3081\u3089\u308c\u308b\u3051\u3069\u3001\u9053\u5177\u7bb1\u3068\u3057\u3066\u306e\u6a5f\u80fd\u306f\u5909\u308f\u3089\u306a\u3044\u3002\u3053\u306e\u67d4\u8edf\u6027\u304c\u3001\u540c\u3058\u30b3\u30fc\u30c9\u3092\u69d8\u3005\u306a\u5834\u9762\u3067\u4f7f\u3044\u56de\u305b\u308b\u79d8\u8a23\u3067\u3059\u3002\u4e00\u5ea6\u66f8\u3044\u305f\u3089\u3001\u3069\u3053\u3067\u3082\u4f7f\u3048\u308b\u3002\u3053\u308c\u304c\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u918d\u9190\u5473\u3067\u3059\uff01</p>"},{"location":"part7/chapter27/","title":"\u7b2c27\u7ae0 \u5883\u754c\u3068\u5909\u4f4d\u6307\u5b9a","text":""},{"location":"part7/chapter27/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u52d5\u7269\u5712\u3092\u60f3\u50cf\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u300c\u54fa\u4e73\u985e\u30a8\u30ea\u30a2\u300d\u306b\u306f\u72ac\u3082\u732b\u3082\u30e9\u30a4\u30aa\u30f3\u3082\u5165\u308c\u307e\u3059\u304c\u3001\u9b5a\u306f\u5165\u308c\u307e\u305b\u3093\u3002\u300c\u8089\u98df\u52d5\u7269\u30a8\u30ea\u30a2\u300d\u306b\u306f\u30e9\u30a4\u30aa\u30f3\u306f\u5165\u308c\u307e\u3059\u304c\u3001\u3046\u3055\u304e\u306f\u5165\u308c\u307e\u305b\u3093\u3002</p> <p>\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u3082\u540c\u3058\u3088\u3046\u306b\u3001\u300c\u3053\u306e\u578b\u306f\u3053\u3046\u3044\u3046\u6761\u4ef6\u3092\u6e80\u305f\u3059\u3082\u306e\u9650\u5b9a\u300d\u3068\u3044\u3046\u5236\u7d04\u3092\u3064\u3051\u305f\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u304c\u300c\u5883\u754c\u300d\u3068\u300c\u5909\u4f4d\u6307\u5b9a\u300d\u306e\u8003\u3048\u65b9\u3067\u3059\uff01</p>"},{"location":"part7/chapter27/#type-bounds","title":"\u578b\u5883\u754c\uff08Type Bounds\uff09","text":""},{"location":"part7/chapter27/#upper-bounds","title":"\u4e0a\u9650\u5883\u754c\uff08Upper Bounds\uff09","text":"<pre><code>// UpperBounds.scala\n@main def upperBounds(): Unit = {\n  // \u52d5\u7269\u306e\u968e\u5c64\n  trait Animal:\n    def name: String\n    def makeSound(): String\n\n  class Dog(val name: String) extends Animal:\n    def makeSound(): String = \"\u30ef\u30f3\u30ef\u30f3\"\n    def wagTail(): String = s\"${name}\u304c\u3057\u3063\u307d\u3092\u632f\u3063\u3066\u3044\u307e\u3059\"\n\n  class Cat(val name: String) extends Animal:\n    def makeSound(): String = \"\u30cb\u30e3\u30fc\"\n    def purr(): String = s\"${name}\u304c\u30b4\u30ed\u30b4\u30ed\u8a00\u3063\u3066\u3044\u307e\u3059\"\n\n  class Bird(val name: String) extends Animal:\n    def makeSound(): String = \"\u30c1\u30e5\u30f3\u30c1\u30e5\u30f3\"\n\n  // \u52d5\u7269\u9650\u5b9a\u306e\u30b1\u30fc\u30b8\uff08\u4e0a\u9650\u5883\u754c\uff09\n  class AnimalCage[A &lt;: Animal](val resident: A):\n    def showResident(): String = \n      s\"${resident.name}\u304c\u5165\u3063\u3066\u3044\u307e\u3059\uff1a${resident.makeSound()}\"\n\n    def feed(): String = s\"${resident.name}\u306b\u990c\u3092\u3042\u3052\u307e\u3057\u305f\"\n\n  // \u4f7f\u7528\u4f8b\n  val dogCage = new AnimalCage(new Dog(\"\u30dd\u30c1\"))\n  val catCage = new AnimalCage(new Cat(\"\u30bf\u30de\"))\n\n  println(\"=== \u52d5\u7269\u306e\u30b1\u30fc\u30b8 ===\")\n  println(dogCage.showResident())\n  println(catCage.showResident())\n\n  // \u3053\u308c\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\uff08String\u306f Animal \u3067\u306f\u306a\u3044\uff09\n  // val stringCage = new AnimalCage(\"\u6587\u5b57\u5217\")\n\n  // \u3088\u308a\u5177\u4f53\u7684\u306a\u578b\u3082\u4fdd\u6301\u3055\u308c\u308b\n  val myDog = new Dog(\"\u30cf\u30c1\")\n  val specificDogCage = new AnimalCage(myDog)\n  println(specificDogCage.resident.wagTail())  // Dog\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u4f7f\u3048\u308b\uff01\n</code></pre>"},{"location":"part7/chapter27/#lower-bounds","title":"\u4e0b\u9650\u5883\u754c\uff08Lower Bounds\uff09","text":"<pre><code>// LowerBounds.scala\n@main def lowerBounds(): Unit = {\n  trait Animal:\n    def name: String\n\n  class Mammal(val name: String) extends Animal\n  class Dog(name: String) extends Mammal(name)\n  class Cat(name: String) extends Mammal(name)\n\n  // \u52d5\u7269\u306e\u5bb6\u7cfb\u56f3\n  class FamilyTree[A](val member: A):\n    // \u4e0b\u9650\u5883\u754c\uff1a\u3088\u308a\u4e00\u822c\u7684\u306a\u578b\u3092\u8ffd\u52a0\u3067\u304d\u308b\n    def addAncestor[B &gt;: A](ancestor: B): FamilyTree[B] =\n      new FamilyTree(ancestor)\n\n    override def toString: String = s\"FamilyTree($member)\"\n\n  val dogTree = new FamilyTree(new Dog(\"\u30dd\u30c1\"))\n  val mammalTree = dogTree.addAncestor(new Mammal(\"\u54fa\u4e73\u985e\u306e\u7956\u5148\"))\n  val animalTree = mammalTree.addAncestor(new Animal { val name = \"\u52d5\u7269\u306e\u7956\u5148\" })\n\n  println(\"=== \u5bb6\u7cfb\u56f3 ===\")\n  println(s\"\u72ac: $dogTree\")\n  println(s\"\u54fa\u4e73\u985e\u3092\u8ffd\u52a0: $mammalTree\")\n  println(s\"\u52d5\u7269\u3092\u8ffd\u52a0: $animalTree\")\n\n  // \u5b9f\u7528\u4f8b\uff1a\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\n  sealed trait Error\n  case class NetworkError(message: String) extends Error\n  case class ParseError(message: String) extends Error\n\n  def handleError[E &lt;: Error](error: E): String = error match {\n    case NetworkError(msg) =&gt; s\"\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a8\u30e9\u30fc: $msg\"\n    case ParseError(msg) =&gt; s\"\u30d1\u30fc\u30b9\u30a8\u30e9\u30fc: $msg\"\n  }\n\n  // \u3088\u308a\u4e00\u822c\u7684\u306a\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30e9\u30fc\n  def handleAnyError[E &gt;: NetworkError](error: E): String = error match {\n    case NetworkError(msg) =&gt; s\"\u901a\u4fe1\u30a8\u30e9\u30fc: $msg\"\n    case other =&gt; s\"\u305d\u306e\u4ed6\u306e\u30a8\u30e9\u30fc: $other\"\n  }\n\n  println(\"\\n=== \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0 ===\")\n  println(handleError(NetworkError(\"\u63a5\u7d9a\u5931\u6557\")))\n  println(handleAnyError(ParseError(\"\u4e0d\u6b63\u306a\u5f62\u5f0f\")))\n</code></pre>"},{"location":"part7/chapter27/#variance","title":"\u5909\u4f4d\u6307\u5b9a\uff08Variance\uff09","text":""},{"location":"part7/chapter27/#covariant","title":"\u5171\u5909\uff08Covariant\uff09","text":"<pre><code>// Covariance.scala\n@main def covariance(): Unit = {\n  // \u5171\u5909\u7684\u306a\u30b3\u30f3\u30c6\u30ca\uff08+A\uff09\n  class Box[+A](val content: A):\n    def get: A = content\n\n    // \u5171\u5909\u306e\u5834\u5408\u3001A\u306f\u623b\u308a\u5024\u306b\u306e\u307f\u4f7f\u3048\u308b\n    def map[B](f: A =&gt; B): Box[B] = Box(f(content))\n\n  class Animal(val name: String)\n  class Dog(name: String, val breed: String) extends Animal(name)\n\n  val dogBox: Box[Dog] = Box(new Dog(\"\u30dd\u30c1\", \"\u67f4\u72ac\"))\n  val animalBox: Box[Animal] = dogBox  // OK\uff01Dog\u306fAnimal\u306e\u30b5\u30d6\u30bf\u30a4\u30d7\n\n  println(s\"\u52d5\u7269\u306e\u540d\u524d: ${animalBox.get.name}\")\n\n  // \u5b9f\u7528\u4f8b\uff1a\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u30ea\u30b9\u30c8\n  sealed trait MyList[+A]:\n    def head: A\n    def tail: MyList[A]\n    def isEmpty: Boolean\n\n    def ::[B &gt;: A](elem: B): MyList[B] = MyCons(elem, this)\n\n    def map[B](f: A =&gt; B): MyList[B] = this match {\n      case MyNil =&gt; MyNil\n      case MyCons(h, t) =&gt; MyCons(f(h), t.map(f))\n    }\n\n  case object MyNil extends MyList[Nothing]:\n    def head = throw new NoSuchElementException(\"empty list\")\n    def tail = throw new NoSuchElementException(\"empty list\")\n    def isEmpty = true\n\n  case class MyCons[+A](head: A, tail: MyList[A]) extends MyList[A]:\n    def isEmpty = false\n\n  val dogs: MyList[Dog] = new Dog(\"\u30cf\u30c1\", \"\u79cb\u7530\u72ac\") :: \n                          new Dog(\"\u30bf\u30ed\", \"\u30b4\u30fc\u30eb\u30c7\u30f3\") :: MyNil\n  val animals: MyList[Animal] = dogs  // \u5171\u5909\u306a\u306e\u3067OK\n\n  println(\"\\n=== \u5171\u5909\u30ea\u30b9\u30c8 ===\")\n  println(s\"\u6700\u521d\u306e\u52d5\u7269: ${animals.head.name}\")\n</code></pre>"},{"location":"part7/chapter27/#contravariant","title":"\u53cd\u5909\uff08Contravariant\uff09","text":"<pre><code>// Contravariance.scala\n@main def contravariance(): Unit = {\n  // \u53cd\u5909\u7684\u306a\u95a2\u6570\uff08-A\uff09\n  trait Printer[-A]:\n    def print(value: A): String\n\n  class Animal(val name: String)\n  class Dog(name: String, val breed: String) extends Animal(name)\n\n  // \u52d5\u7269\u7528\u30d7\u30ea\u30f3\u30bf\u30fc\n  val animalPrinter: Printer[Animal] = new Printer[Animal]:\n    def print(animal: Animal): String = s\"\u52d5\u7269: ${animal.name}\"\n\n  // \u72ac\u7528\u30d7\u30ea\u30f3\u30bf\u30fc\u3068\u3057\u3066\u4f7f\u3048\u308b\uff08\u53cd\u5909\uff09\n  val dogPrinter: Printer[Dog] = animalPrinter  // OK\uff01\n\n  val myDog = new Dog(\"\u30dd\u30c1\", \"\u67f4\u72ac\")\n  println(dogPrinter.print(myDog))\n\n  // \u5b9f\u7528\u4f8b\uff1a\u6bd4\u8f03\u95a2\u6570\n  trait Comparator[-T]:\n    def compare(x: T, y: T): Int\n\n  // \u4e00\u822c\u7684\u306a\u6bd4\u8f03\n  val animalComparator: Comparator[Animal] = new Comparator[Animal]:\n    def compare(x: Animal, y: Animal): Int = \n      x.name.compareTo(y.name)\n\n  // \u3088\u308a\u5177\u4f53\u7684\u306a\u578b\u3067\u3082\u4f7f\u3048\u308b\n  val dogComparator: Comparator[Dog] = animalComparator\n\n  val dog1 = new Dog(\"\u30a2\u30eb\", \"\u30d3\u30fc\u30b0\u30eb\")\n  val dog2 = new Dog(\"\u30d9\u30b9\", \"\u30b3\u30fc\u30ae\u30fc\")\n\n  println(s\"\\n\u72ac\u306e\u6bd4\u8f03: ${dogComparator.compare(dog1, dog2)}\")\n\n  // \u95a2\u6570\u306f\u5f15\u6570\u306b\u5bfe\u3057\u3066\u53cd\u5909\n  val animalHandler: Animal =&gt; String = a =&gt; s\"\u52d5\u7269 ${a.name} \u3092\u51e6\u7406\"\n  val dogHandler: Dog =&gt; String = animalHandler  // OK\uff01\n\n  println(dogHandler(myDog))\n</code></pre>"},{"location":"part7/chapter27/#invariant","title":"\u4e0d\u5909\uff08Invariant\uff09","text":"<pre><code>// Invariance.scala\n@main def invariance(): Unit = {\n  // \u4e0d\u5909\u7684\u306a\u30b3\u30f3\u30c6\u30ca\uff08\u5909\u4f4d\u6307\u5b9a\u306a\u3057\uff09\n  class MutableBox[A](var content: A):\n    def get: A = content\n    def set(value: A): Unit = content = value\n\n  class Animal(val name: String)\n  class Dog(name: String) extends Animal(name)\n\n  val dogBox: MutableBox[Dog] = MutableBox(new Dog(\"\u30dd\u30c1\"))\n  // val animalBox: MutableBox[Animal] = dogBox  // \u30a8\u30e9\u30fc\uff01\u4e0d\u5909\u306a\u306e\u3067\u4ee3\u5165\u3067\u304d\u306a\u3044\n\n  // \u306a\u305c\u4e0d\u5909\u304c\u5fc5\u8981\u304b\uff1f\n  // \u3082\u3057\u4e0a\u306e\u4ee3\u5165\u304c\u8a31\u3055\u308c\u305f\u3089...\n  // animalBox.set(new Cat(\"\u30bf\u30de\"))  // \u732b\u3092\u5165\u308c\u3066\u3057\u307e\u3046\uff01\n  // val dog: Dog = dogBox.get       // \u732b\u306a\u306e\u306bDog\u578b\u3068\u3057\u3066\u53d6\u5f97...\u5371\u967a\uff01\n\n  println(\"=== \u4e0d\u5909\u30b3\u30f3\u30c6\u30ca ===\")\n  println(s\"\u72ac: ${dogBox.get.name}\")\n\n  // \u5b9f\u7528\u4f8b\uff1a\u53ef\u5909\u914d\u5217\n  class MyArray[A](size: Int):\n    private val array = new Array[Any](size)\n\n    def get(index: Int): A = array(index).asInstanceOf[A]\n    def set(index: Int, value: A): Unit = array(index) = value\n\n    def map[B](f: A =&gt; B): MyArray[B] =\n      val result = MyArray[B](size)\n      for (i &lt;- 0 until size) {\n        result.set(i, f(get(i)))\n      }\n      result\n\n  val intArray = MyArray[Int](3)\n  intArray.set(0, 10)\n  intArray.set(1, 20)\n  intArray.set(2, 30)\n\n  val doubled = intArray.map(_ * 2)\n\n  println(\"\\n=== \u914d\u5217\u64cd\u4f5c ===\")\n  for (i &lt;- 0 until 3) {\n    println(s\"\u5143: ${intArray.get(i)}, 2\u500d: ${doubled.get(i)}\")\n  }\n</code></pre>"},{"location":"part7/chapter27/#_2","title":"\u5b9f\u8df5\u7684\u306a\u4f8b\uff1a\u578b\u5b89\u5168\u306a\u30a4\u30d9\u30f3\u30c8\u30b7\u30b9\u30c6\u30e0","text":"<pre><code>// TypeSafeEventSystem.scala\n@main def typeSafeEventSystem(): Unit = {\n  // \u30a4\u30d9\u30f3\u30c8\u306e\u968e\u5c64\n  trait Event:\n    def timestamp: Long = System.currentTimeMillis()\n\n  trait UserEvent extends Event:\n    def userId: String\n\n  case class LoginEvent(userId: String, device: String) extends UserEvent\n  case class LogoutEvent(userId: String) extends UserEvent\n  case class SystemEvent(message: String) extends Event\n\n  // \u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u30fc\uff08\u53cd\u5909\uff09\n  trait EventHandler[-E &lt;: Event]:\n    def handle(event: E): Unit\n\n  // \u30a4\u30d9\u30f3\u30c8\u30d0\u30b9\uff08\u5171\u5909\uff09\n  class EventBus[+E &lt;: Event]:\n    private var handlers: List[EventHandler[_ &gt;: E]] = List.empty\n\n    def subscribe[F &gt;: E](handler: EventHandler[F]): Unit =\n      handlers = handler :: handlers\n\n    def publish[F &gt;: E](event: F): Unit =\n      handlers.foreach(_.handle(event))\n\n  // \u6c4e\u7528\u7684\u306a\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u30fc\n  val generalHandler = new EventHandler[Event]:\n    def handle(event: Event): Unit =\n      println(f\"[${event.timestamp}%tT] \u30a4\u30d9\u30f3\u30c8\u767a\u751f\")\n\n  // \u30e6\u30fc\u30b6\u30fc\u30a4\u30d9\u30f3\u30c8\u5c02\u7528\u30cf\u30f3\u30c9\u30e9\u30fc\n  val userHandler = new EventHandler[UserEvent]:\n    def handle(event: UserEvent): Unit =\n      println(s\"\u30e6\u30fc\u30b6\u30fc ${event.userId} \u306e\u30a2\u30af\u30b7\u30e7\u30f3\")\n\n  // \u30ed\u30b0\u30a4\u30f3\u5c02\u7528\u30cf\u30f3\u30c9\u30e9\u30fc\n  val loginHandler = new EventHandler[LoginEvent]:\n    def handle(event: LoginEvent): Unit =\n      println(s\"${event.userId} \u304c ${event.device} \u304b\u3089\u30ed\u30b0\u30a4\u30f3\")\n\n  // \u30a4\u30d9\u30f3\u30c8\u30d0\u30b9\u306e\u8a2d\u5b9a\n  val userEventBus = new EventBus[UserEvent]\n  userEventBus.subscribe(generalHandler)  // \u3088\u308a\u4e00\u822c\u7684\u306a\u30cf\u30f3\u30c9\u30e9\u30fc\u3082OK\n  userEventBus.subscribe(userHandler)\n  userEventBus.subscribe(loginHandler)\n\n  // \u30a4\u30d9\u30f3\u30c8\u767a\u884c\n  println(\"=== \u30a4\u30d9\u30f3\u30c8\u51e6\u7406 ===\")\n  userEventBus.publish(LoginEvent(\"user123\", \"iPhone\"))\n  println()\n  userEventBus.publish(LogoutEvent(\"user123\"))\n</code></pre>"},{"location":"part7/chapter27/#_3","title":"\u5883\u754c\u3068\u5909\u4f4d\u306e\u7d44\u307f\u5408\u308f\u305b","text":"<pre><code>// BoundsAndVariance.scala\n@main def boundsAndVariance(): Unit =\n  // \u9806\u5e8f\u4ed8\u3051\u53ef\u80fd\u306a\u8981\u7d20\u306e\u30b3\u30f3\u30c6\u30ca\n  trait Container[+A]:\n    def elements: List[A]\n\n    def max[B &gt;: A](implicit ord: Ordering[B]): Option[B] =\n      if (elements.isEmpty) None\n      else Some(elements.max(ord))\n\n    def sorted[B &gt;: A](implicit ord: Ordering[B]): Container[B]\n\n  class ListContainer[+A](val elements: List[A]) extends Container[A]:\n    def sorted[B &gt;: A](implicit ord: Ordering[B]): Container[B] =\n      new ListContainer(elements.sorted(ord))\n\n    override def toString: String = s\"Container(${elements.mkString(\", \")})\"\n\n  // \u6570\u5024\u30b3\u30f3\u30c6\u30ca\n  val numbers = new ListContainer(List(3, 1, 4, 1, 5, 9))\n  println(\"=== \u6570\u5024\u30b3\u30f3\u30c6\u30ca ===\")\n  println(s\"\u5143: $numbers\")\n  println(s\"\u6700\u5927\u5024: ${numbers.max}\")\n  println(s\"\u30bd\u30fc\u30c8\u6e08\u307f: ${numbers.sorted}\")\n\n  // \u6587\u5b57\u5217\u30b3\u30f3\u30c6\u30ca\n  val strings = new ListContainer(List(\"banana\", \"apple\", \"cherry\"))\n  println(\"\\n=== \u6587\u5b57\u5217\u30b3\u30f3\u30c6\u30ca ===\")\n  println(s\"\u5143: $strings\")\n  println(s\"\u30bd\u30fc\u30c8\u6e08\u307f: ${strings.sorted}\")\n\n  // F-bounded polymorphism\n  trait Comparable[A &lt;: Comparable[A]]:\n    def compareTo(that: A): Int\n\n    def &lt;(that: A): Boolean = compareTo(that) &lt; 0\n    def &gt;(that: A): Boolean = compareTo(that) &gt; 0\n    def &lt;=(that: A): Boolean = compareTo(that) &lt;= 0\n    def &gt;=(that: A): Boolean = compareTo(that) &gt;= 0\n\n  case class Person(name: String, age: Int) extends Comparable[Person]:\n    def compareTo(that: Person): Int = {\n      val nameComp = this.name.compareTo(that.name)\n      if (nameComp != 0) nameComp\n      else this.age.compareTo(that.age)\n    }\n\n  val person1 = Person(\"Alice\", 30)\n  val person2 = Person(\"Bob\", 25)\n  val person3 = Person(\"Alice\", 25)\n\n  println(\"\\n=== \u6bd4\u8f03\u53ef\u80fd\u306a\u4eba ===\")\n  println(s\"$person1 &lt; $person2 ? ${person1 &lt; person2}\")\n  println(s\"$person1 &gt; $person3 ? ${person1 &gt; person3}\")\n</code></pre>"},{"location":"part7/chapter27/#_4","title":"\u5b9f\u8df5\u4f8b\uff1a\u578b\u5b89\u5168\u306a\u30d3\u30eb\u30c0\u30fc","text":"<pre><code>// TypeSafeBuilder.scala\n@main def typeSafeBuilder(): Unit = {\n  // \u30d3\u30eb\u30c0\u30fc\u306e\u72b6\u614b\u3092\u578b\u3067\u8868\u73fe\n  sealed trait BuilderState\n  trait Empty extends BuilderState\n  trait WithName extends BuilderState\n  trait WithEmail extends BuilderState\n  trait Complete extends WithName with WithEmail\n\n  // \u578b\u5b89\u5168\u306a\u30e6\u30fc\u30b6\u30fc\u30d3\u30eb\u30c0\u30fc\n  class UserBuilder[State &lt;: BuilderState] private (\n    name: Option[String] = None,\n    email: Option[String] = None,\n    age: Option[Int] = None\n  ):\n    def withName(name: String): UserBuilder[State with WithName] =\n      new UserBuilder[State with WithName](Some(name), email, age)\n\n    def withEmail(email: String): UserBuilder[State with WithEmail] =\n      new UserBuilder[State with WithEmail](name, Some(email), age)\n\n    def withAge(age: Int): UserBuilder[State] =\n      new UserBuilder[State](name, email, Some(age))\n\n    // build\u306f\u5fc5\u9808\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u63c3\u3063\u305f\u6642\u306e\u307f\u547c\u3079\u308b\n    def build(implicit ev: State &lt;:&lt; Complete): User =\n      User(name.get, email.get, age.getOrElse(0))\n\n  object UserBuilder:\n    def apply(): UserBuilder[Empty] = new UserBuilder[Empty]()\n\n  case class User(name: String, email: String, age: Int)\n\n  // \u4f7f\u7528\u4f8b\n  val user = UserBuilder()\n    .withName(\"\u592a\u90ce\")\n    .withEmail(\"taro@example.com\")\n    .withAge(25)\n    .build  // \u3059\u3079\u3066\u306e\u5fc5\u9808\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u306e\u3067OK\n\n  println(s\"\u30e6\u30fc\u30b6\u30fc: $user\")\n\n  // \u3053\u308c\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\uff08email\u304c\u672a\u8a2d\u5b9a\uff09\n  // val incomplete = UserBuilder()\n  //   .withName(\"\u82b1\u5b50\")\n  //   .build\n\n  // \u9806\u5e8f\u306f\u81ea\u7531\n  val user2 = UserBuilder()\n    .withAge(30)\n    .withEmail(\"hanako@example.com\")\n    .withName(\"\u82b1\u5b50\")\n    .build\n\n  println(s\"\u30e6\u30fc\u30b6\u30fc2: $user2\")\n</code></pre>"},{"location":"part7/chapter27/#_5","title":"\u7df4\u7fd2\u3057\u3066\u307f\u3088\u3046\uff01","text":""},{"location":"part7/chapter27/#1","title":"\u7df4\u7fd21\uff1a\u52d5\u7269\u5712\u30b7\u30b9\u30c6\u30e0","text":"<p>\u4ee5\u4e0b\u306e\u8981\u4ef6\u3092\u6e80\u305f\u3059\u52d5\u7269\u5712\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\uff1a - \u52d5\u7269\u306e\u968e\u5c64\uff08Animal &gt; Mammal &gt; Dog/Cat\uff09 - \u5171\u5909\u7684\u306a\u6abb\uff08Cage[+A]\uff09 - \u53cd\u5909\u7684\u306a\u98fc\u80b2\u54e1\uff08Keeper[-A]\uff09</p>"},{"location":"part7/chapter27/#2","title":"\u7df4\u7fd22\uff1a\u30bd\u30fc\u30c8\u53ef\u80fd\u306a\u30b3\u30ec\u30af\u30b7\u30e7\u30f3","text":"<p>\u578b\u5883\u754c\u3092\u4f7f\u3063\u3066\u3001\u8981\u7d20\u304cComparable\u306a\u5834\u5408\u306e\u307f\u30bd\u30fc\u30c8\u3067\u304d\u308b\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u5b9f\u88c5\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"part7/chapter27/#3","title":"\u7df4\u7fd23\uff1a\u578b\u5b89\u5168\u306a\u30e1\u30c3\u30bb\u30fc\u30b8\u30ad\u30e5\u30fc","text":"<p>\u9001\u4fe1\u8005\u3068\u53d7\u4fe1\u8005\u306e\u578b\u3092\u8003\u616e\u3057\u305f\u3001\u578b\u5b89\u5168\u306a\u30e1\u30c3\u30bb\u30fc\u30b8\u30ad\u30e5\u30fc\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"part7/chapter27/#_6","title":"\u3053\u306e\u7ae0\u306e\u307e\u3068\u3081","text":"<p>\u5883\u754c\u3068\u5909\u4f4d\u6307\u5b9a\u306b\u3064\u3044\u3066\u6df1\u304f\u5b66\u3073\u307e\u3057\u305f\uff01</p>"},{"location":"part7/chapter27/#_7","title":"\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3053\u3068","text":"<p>\u2705 \u578b\u5883\u754c - \u4e0a\u9650\u5883\u754c\uff08&lt;:\uff09 - \u4e0b\u9650\u5883\u754c\uff08&gt;:\uff09 - \u578b\u306e\u5236\u7d04</p> <p>\u2705 \u5909\u4f4d\u6307\u5b9a - \u5171\u5909\uff08+\uff09 - \u53cd\u5909\uff08-\uff09 - \u4e0d\u5909\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\uff09</p> <p>\u2705 \u5b9f\u8df5\u7684\u306a\u5fdc\u7528 - \u578b\u5b89\u5168\u306aAPI\u8a2d\u8a08 - F-bounded polymorphism - \u30d3\u30eb\u30c0\u30fc\u30d1\u30bf\u30fc\u30f3</p> <p>\u2705 \u8a2d\u8a08\u306e\u8003\u3048\u65b9 - \u9069\u5207\u306a\u5909\u4f4d\u306e\u9078\u629e - \u578b\u5b89\u5168\u6027\u306e\u78ba\u4fdd - \u67d4\u8edf\u6027\u3068\u5b89\u5168\u6027\u306e\u30d0\u30e9\u30f3\u30b9</p>"},{"location":"part7/chapter27/#_8","title":"\u5883\u754c\u3068\u5909\u4f4d\u3092\u4f7f\u3046\u30b3\u30c4","text":"<ol> <li> <p>\u5909\u4f4d\u306e\u539f\u5247</p> <ul> <li>\u51fa\u529b\u306f\u5171\u5909\uff08+\uff09</li> <li>\u5165\u529b\u306f\u53cd\u5909\uff08-\uff09</li> <li>\u5165\u51fa\u529b\u4e21\u65b9\u306f\u4e0d\u5909</li> </ul> </li> <li> <p>\u5883\u754c\u306e\u4f7f\u3044\u5206\u3051</p> <ul> <li>\u4e0a\u9650\uff1a\u7279\u5b9a\u306e\u578b\u4ee5\u4e0b\u306b\u5236\u9650</li> <li>\u4e0b\u9650\uff1a\u7279\u5b9a\u306e\u578b\u4ee5\u4e0a\u3092\u8a31\u53ef</li> <li>\u7d44\u307f\u5408\u308f\u305b\u3066\u67d4\u8edf\u306b</li> </ul> </li> <li> <p>\u5b89\u5168\u6027\u306e\u78ba\u4fdd</p> <ul> <li>\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u30c1\u30a7\u30c3\u30af</li> <li>\u5b9f\u884c\u6642\u30a8\u30e9\u30fc\u306e\u9632\u6b62</li> <li>\u578b\u306e\u5065\u5168\u6027</li> </ul> </li> </ol>"},{"location":"part7/chapter27/#_9","title":"\u6b21\u306e\u7ae0\u3067\u306f...","text":"<p>\u6697\u9ed9\u306e\u5f15\u6570\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3059\u3002\u6587\u8108\u306b\u5fdc\u3058\u305f\u5024\u306e\u81ea\u52d5\u89e3\u6c7a\u3067\u3001\u3088\u308a\u8868\u73fe\u529b\u8c4a\u304b\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part7/chapter27/#_10","title":"\u6700\u5f8c\u306b","text":"<p>\u5883\u754c\u3068\u5909\u4f4d\u6307\u5b9a\u306f\u300c\u578b\u306e\u4ea4\u901a\u30eb\u30fc\u30eb\u300d\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002\u3069\u306e\u578b\u304c\u3069\u3053\u306b\u884c\u3051\u308b\u304b\u3001\u3069\u306e\u578b\u540c\u58eb\u304c\u4e00\u7dd2\u306b\u3067\u304d\u308b\u304b\u3001\u3059\u3079\u3066\u30eb\u30fc\u30eb\u3067\u6c7a\u307e\u3063\u3066\u3044\u307e\u3059\u3002\u6700\u521d\u306f\u8907\u96d1\u306b\u611f\u3058\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u3053\u306e\u30eb\u30fc\u30eb\u3092\u7406\u89e3\u3059\u308c\u3070\u3001\u3088\u308a\u5b89\u5168\u3067\u67d4\u8edf\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u578b\u30b7\u30b9\u30c6\u30e0\u3092\u5473\u65b9\u306b\u3064\u3051\u3066\u3001\u30d0\u30b0\u306e\u5c11\u306a\u3044\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part7/chapter28/","title":"\u7b2c28\u7ae0 \u6697\u9ed9\u306e\u5f15\u6570\u3068\u306f","text":""},{"location":"part7/chapter28/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u30ec\u30b9\u30c8\u30e9\u30f3\u3067\u300c\u3044\u3064\u3082\u306e\u300d\u3068\u8a00\u3048\u3070\u3001\u304a\u6c17\u306b\u5165\u308a\u306e\u6599\u7406\u304c\u51fa\u3066\u304d\u307e\u3059\u3088\u306d\u3002\u6bce\u56de\u300c\u30ab\u30c4\u4e3c\u306e\u5927\u76db\u308a\u3067\u3001\u5473\u564c\u6c41\u306f\u8c46\u8150\u3067\u300d\u3068\u8a00\u308f\u306a\u304f\u3066\u3082\u3001\u5e97\u54e1\u3055\u3093\u304c\u899a\u3048\u3066\u3044\u3066\u304f\u308c\u307e\u3059\u3002</p> <p>Scala\u306e\u6697\u9ed9\u306e\u5f15\u6570\uff08implicit parameters\uff09\u3082\u540c\u3058\u3067\u3059\u3002\u3088\u304f\u4f7f\u3046\u5024\u3092\u300c\u3044\u3064\u3082\u306e\u300d\u3068\u3057\u3066\u767b\u9332\u3057\u3066\u304a\u3051\u3070\u3001\u6bce\u56de\u66f8\u304b\u306a\u304f\u3066\u3082\u81ea\u52d5\u7684\u306b\u4f7f\u3063\u3066\u304f\u308c\u308b\u3093\u3067\u3059\uff01</p>"},{"location":"part7/chapter28/#_2","title":"\u6697\u9ed9\u306e\u5f15\u6570\u3063\u3066\u4f55\u3060\u308d\u3046\uff1f","text":""},{"location":"part7/chapter28/#_3","title":"\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9","text":"<pre><code>// ImplicitParametersBasics.scala\n@main def implicitParametersBasics(): Unit = {\n  // \u901a\u5e38\u306e\u5f15\u6570\uff08\u6bce\u56de\u6307\u5b9a\u304c\u5fc5\u8981\uff09\n  def greet(name: String, greeting: String): String =\n    s\"$greeting, $name!\"\n\n  println(greet(\"\u592a\u90ce\", \"\u3053\u3093\u306b\u3061\u306f\"))\n  println(greet(\"\u82b1\u5b50\", \"\u3053\u3093\u306b\u3061\u306f\"))  // \u6bce\u56de\u300c\u3053\u3093\u306b\u3061\u306f\u300d\u3092\u66f8\u304f\u306e\u306f\u9762\u5012...\n\n  // \u6697\u9ed9\u306e\u5f15\u6570\u3092\u4f7f\u3063\u305f\u6539\u826f\u7248\n  def greetImplicit(name: String)(implicit greeting: String): String =\n    s\"$greeting, $name!\"\n\n  // \u6697\u9ed9\u306e\u5024\u3092\u5b9a\u7fa9\n  implicit val defaultGreeting: String = \"\u3053\u3093\u306b\u3061\u306f\"\n\n  // \u6697\u9ed9\u306e\u5f15\u6570\u306f\u7701\u7565\u3067\u304d\u308b\uff01\n  println(greetImplicit(\"\u592a\u90ce\"))  // \"\u3053\u3093\u306b\u3061\u306f\"\u304c\u81ea\u52d5\u7684\u306b\u4f7f\u308f\u308c\u308b\n  println(greetImplicit(\"\u82b1\u5b50\"))\n\n  // \u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\n  println(greetImplicit(\"\u30b8\u30e7\u30f3\")(\"Hello\"))\n\n  // \u30b9\u30b3\u30fc\u30d7\u3092\u5909\u3048\u3066\u5225\u306e\u6697\u9ed9\u306e\u5024\u3092\u5b9a\u7fa9\n  def englishContext(): Unit =\n    implicit val englishGreeting: String = \"Hello\"\n    println(greetImplicit(\"\u592a\u90ce\"))  // \u3053\u306e\u30b9\u30b3\u30fc\u30d7\u3067\u306f\"Hello\"\u304c\u4f7f\u308f\u308c\u308b\n\n  englishContext()\n</code></pre>"},{"location":"part7/chapter28/#_4","title":"\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306e\u63d0\u4f9b","text":"<pre><code>// ContextProviding.scala\n@main def contextProviding(): Unit = {\n  // \u5b9f\u884c\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\n  case class ExecutionContext(\n    userId: String,\n    requestId: String,\n    timestamp: Long\n  )\n\n  // \u30ed\u30b0\u51fa\u529b\uff08\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u304c\u5fc5\u8981\uff09\n  def log(message: String)(implicit ctx: ExecutionContext): Unit =\n    println(f\"[${ctx.timestamp}%tT] [${ctx.requestId}] [${ctx.userId}] $message\")\n\n  // \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\uff08\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u304c\u5fc5\u8981\uff09\n  def saveUser(name: String, email: String)(implicit ctx: ExecutionContext): Unit =\n    log(s\"\u30e6\u30fc\u30b6\u30fc\u4fdd\u5b58\u958b\u59cb: $name\")\n    // \u5b9f\u969b\u306e\u4fdd\u5b58\u51e6\u7406...\n    log(s\"\u30e6\u30fc\u30b6\u30fc\u4fdd\u5b58\u5b8c\u4e86: $name ($email)\")\n\n  def updateEmail(userId: String, newEmail: String)(implicit ctx: ExecutionContext): Unit =\n    log(s\"\u30e1\u30fc\u30eb\u66f4\u65b0\u958b\u59cb: $userId \u2192 $newEmail\")\n    // \u5b9f\u969b\u306e\u66f4\u65b0\u51e6\u7406...\n    log(s\"\u30e1\u30fc\u30eb\u66f4\u65b0\u5b8c\u4e86\")\n\n  // \u30b5\u30fc\u30d3\u30b9\u30af\u30e9\u30b9\n  class UserService:\n    def registerUser(name: String, email: String)(implicit ctx: ExecutionContext): Unit =\n      saveUser(name, email)  // ctx\u306f\u81ea\u52d5\u7684\u306b\u6e21\u3055\u308c\u308b\n      updateEmail(ctx.userId, email)\n      log(\"\u767b\u9332\u51e6\u7406\u5b8c\u4e86\")\n\n  // \u4f7f\u7528\u4f8b\n  implicit val context = ExecutionContext(\n    userId = \"user123\",\n    requestId = \"req-456\",\n    timestamp = System.currentTimeMillis()\n  )\n\n  val service = new UserService\n  service.registerUser(\"\u7530\u4e2d\u592a\u90ce\", \"tanaka@example.com\")\n\n  // \u5225\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3067\u5b9f\u884c\n  def anotherUserContext(): Unit =\n    implicit val ctx = ExecutionContext(\n      userId = \"admin\",\n      requestId = \"req-789\",\n      timestamp = System.currentTimeMillis()\n    )\n    service.registerUser(\"\u7ba1\u7406\u8005\", \"admin@example.com\")\n\n  Thread.sleep(100)\n  anotherUserContext()\n</code></pre>"},{"location":"part7/chapter28/#_5","title":"\u5b9f\u8df5\u7684\u306a\u6697\u9ed9\u306e\u5f15\u6570","text":""},{"location":"part7/chapter28/#_6","title":"\u8a2d\u5b9a\u306e\u6ce8\u5165","text":"<pre><code>// ConfigurationInjection.scala\n@main def configurationInjection(): Unit = {\n  // \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u8a2d\u5b9a\n  case class AppConfig(\n    apiUrl: String,\n    timeout: Int,\n    retryCount: Int,\n    debugMode: Boolean\n  )\n\n  // API\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\n  class ApiClient:\n    def get(path: String)(implicit config: AppConfig): String = {\n      if (config.debugMode) {\n        println(s\"[DEBUG] GET ${config.apiUrl}$path\")\n      }\n      s\"Response from ${config.apiUrl}$path\"\n    }\n\n    def post(path: String, data: String)(implicit config: AppConfig): String = {\n      if (config.debugMode) {\n        println(s\"[DEBUG] POST ${config.apiUrl}$path with $data\")\n      }\n      s\"Posted to ${config.apiUrl}$path\"\n    }\n\n  // \u30b5\u30fc\u30d3\u30b9\u30af\u30e9\u30b9\n  class UserApiService(client: ApiClient):\n    def getUser(id: String)(implicit config: AppConfig): String =\n      client.get(s\"/users/$id\")\n\n    def createUser(name: String)(implicit config: AppConfig): String =\n      client.post(\"/users\", s\"\"\"{\"name\": \"$name\"}\"\"\")\n\n  // \u672c\u756a\u74b0\u5883\u306e\u8a2d\u5b9a\n  implicit val productionConfig = AppConfig(\n    apiUrl = \"https://api.example.com\",\n    timeout = 5000,\n    retryCount = 3,\n    debugMode = false\n  )\n\n  val client = new ApiClient\n  val userService = new UserApiService(client)\n\n  println(\"=== \u672c\u756a\u74b0\u5883 ===\")\n  println(userService.getUser(\"123\"))\n  println(userService.createUser(\"\u65b0\u898f\u30e6\u30fc\u30b6\u30fc\"))\n\n  // \u958b\u767a\u74b0\u5883\u306e\u8a2d\u5b9a\n  def developmentEnvironment(): Unit =\n    implicit val devConfig = AppConfig(\n      apiUrl = \"http://localhost:8080\",\n      timeout = 30000,\n      retryCount = 0,\n      debugMode = true\n    )\n\n    println(\"\\n=== \u958b\u767a\u74b0\u5883 ===\")\n    println(userService.getUser(\"456\"))\n    println(userService.createUser(\"\u30c6\u30b9\u30c8\u30e6\u30fc\u30b6\u30fc\"))\n\n  developmentEnvironment()\n</code></pre>"},{"location":"part7/chapter28/#_7","title":"\u578b\u5909\u63db\u306e\u81ea\u52d5\u5316","text":"<pre><code>// ImplicitConversions.scala\n@main def implicitConversions(): Unit = {\n  // JSON\u30e9\u30a4\u30af\u306a\u30c7\u30fc\u30bf\u69cb\u9020\n  sealed trait JsonValue\n  case class JsonString(value: String) extends JsonValue\n  case class JsonNumber(value: Double) extends JsonValue\n  case class JsonBoolean(value: Boolean) extends JsonValue\n  case class JsonArray(values: List[JsonValue]) extends JsonValue\n  case class JsonObject(fields: Map[String, JsonValue]) extends JsonValue\n  case object JsonNull extends JsonValue\n\n  // JSON\u5909\u63db\u7528\u306e\u578b\u30af\u30e9\u30b9\n  trait JsonEncoder[A]:\n    def encode(value: A): JsonValue\n\n  object JsonEncoder:\n    // \u57fa\u672c\u578b\u306e\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\uff08\u6697\u9ed9\u306e\u5024\u3068\u3057\u3066\u5b9a\u7fa9\uff09\n    implicit val stringEncoder: JsonEncoder[String] = new JsonEncoder[String]:\n      def encode(value: String): JsonValue = JsonString(value)\n\n    implicit val intEncoder: JsonEncoder[Int] = new JsonEncoder[Int]:\n      def encode(value: Int): JsonValue = JsonNumber(value.toDouble)\n\n    implicit val doubleEncoder: JsonEncoder[Double] = new JsonEncoder[Double]:\n      def encode(value: Double): JsonValue = JsonNumber(value)\n\n    implicit val booleanEncoder: JsonEncoder[Boolean] = new JsonEncoder[Boolean]:\n      def encode(value: Boolean): JsonValue = JsonBoolean(value)\n\n    // \u30ea\u30b9\u30c8\u306e\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\n    implicit def listEncoder[A](implicit encoder: JsonEncoder[A]): JsonEncoder[List[A]] =\n      new JsonEncoder[List[A]]:\n        def encode(values: List[A]): JsonValue =\n          JsonArray(values.map(encoder.encode))\n\n    // \u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\n    implicit def optionEncoder[A](implicit encoder: JsonEncoder[A]): JsonEncoder[Option[A]] =\n      new JsonEncoder[Option[A]]:\n        def encode(value: Option[A]): JsonValue = value match {\n          case Some(v) =&gt; encoder.encode(v)\n          case None =&gt; JsonNull\n        }\n\n  // JSON\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\n  def toJson[A](value: A)(implicit encoder: JsonEncoder[A]): JsonValue =\n    encoder.encode(value)\n\n  // \u4f7f\u7528\u4f8b\n  println(\"=== \u57fa\u672c\u578b\u306e\u5909\u63db ===\")\n  println(toJson(\"Hello\"))\n  println(toJson(42))\n  println(toJson(3.14))\n  println(toJson(true))\n\n  println(\"\\n=== \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u5909\u63db ===\")\n  println(toJson(List(1, 2, 3)))\n  println(toJson(List(\"A\", \"B\", \"C\")))\n\n  println(\"\\n=== \u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u5909\u63db ===\")\n  println(toJson(Some(\"\u5024\u3042\u308a\")))\n  println(toJson(None: Option[String]))\n\n  // \u30ab\u30b9\u30bf\u30e0\u578b\u306e\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\n  case class User(name: String, age: Int, email: Option[String])\n\n  implicit val userEncoder: JsonEncoder[User] = new JsonEncoder[User]:\n    def encode(user: User): JsonValue = JsonObject(Map(\n      \"name\" -&gt; toJson(user.name),\n      \"age\" -&gt; toJson(user.age),\n      \"email\" -&gt; toJson(user.email)\n    ))\n\n  val user = User(\"\u592a\u90ce\", 25, Some(\"taro@example.com\"))\n  println(s\"\\n=== \u30ab\u30b9\u30bf\u30e0\u578b\u306e\u5909\u63db ===\")\n  println(toJson(user))\n</code></pre>"},{"location":"part7/chapter28/#_8","title":"\u6697\u9ed9\u306e\u512a\u5148\u9806\u4f4d","text":"<pre><code>// ImplicitPriority.scala\n@main def implicitPriority(): Unit = {\n  trait Printer[A]:\n    def print(value: A): String\n\n  // \u4f4e\u512a\u5148\u5ea6\u306e\u6697\u9ed9\u306e\u5024\uff08\u30c8\u30ec\u30a4\u30c8\u5185\uff09\n  trait LowPriorityImplicits:\n    implicit def defaultPrinter[A]: Printer[A] = new Printer[A]:\n      def print(value: A): String = s\"\u30c7\u30d5\u30a9\u30eb\u30c8: $value\"\n\n  // \u901a\u5e38\u512a\u5148\u5ea6\u306e\u6697\u9ed9\u306e\u5024\uff08\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5185\uff09\n  object Printer extends LowPriorityImplicits:\n    implicit val stringPrinter: Printer[String] = new Printer[String]:\n      def print(value: String): String = s\"\u6587\u5b57\u5217: '$value'\"\n\n    implicit val intPrinter: Printer[Int] = new Printer[Int]:\n      def print(value: Int): String = s\"\u6574\u6570: $value\"\n\n  import Printer._\n\n  def prettyPrint[A](value: A)(implicit printer: Printer[A]): String =\n    printer.print(value)\n\n  // \u7279\u5b9a\u306e\u578b\u306b\u306f\u5c02\u7528\u306e\u30d7\u30ea\u30f3\u30bf\u30fc\u304c\u4f7f\u308f\u308c\u308b\n  println(prettyPrint(\"Hello\"))      // \u6587\u5b57\u5217\u30d7\u30ea\u30f3\u30bf\u30fc\n  println(prettyPrint(42))           // \u6574\u6570\u30d7\u30ea\u30f3\u30bf\u30fc\n  println(prettyPrint(3.14))         // \u30c7\u30d5\u30a9\u30eb\u30c8\u30d7\u30ea\u30f3\u30bf\u30fc\n\n  // \u30ed\u30fc\u30ab\u30eb\u30b9\u30b3\u30fc\u30d7\u306e\u6697\u9ed9\u306e\u5024\u304c\u6700\u512a\u5148\n  implicit val customIntPrinter: Printer[Int] = new Printer[Int]:\n    def print(value: Int): String = s\"\u30ab\u30b9\u30bf\u30e0\u6574\u6570: [$value]\"\n\n  println(prettyPrint(100))          // \u30ab\u30b9\u30bf\u30e0\u30d7\u30ea\u30f3\u30bf\u30fc\n\n  // \u6697\u9ed9\u306e\u5024\u306e\u63a2\u7d22\u9806\u5e8f\n  println(\"\\n=== \u6697\u9ed9\u306e\u5024\u306e\u63a2\u7d22\u9806\u5e8f ===\")\n  println(\"1. \u30ed\u30fc\u30ab\u30eb\u30b9\u30b3\u30fc\u30d7\")\n  println(\"2. \u30a4\u30f3\u30dd\u30fc\u30c8\u3055\u308c\u305f\u6697\u9ed9\u306e\u5024\")\n  println(\"3. \u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\")\n  println(\"4. \u7d99\u627f\u3055\u308c\u305f\u6697\u9ed9\u306e\u5024\")\n  println(\"5. \u30d1\u30c3\u30b1\u30fc\u30b8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\")\n</code></pre>"},{"location":"part7/chapter28/#_9","title":"\u5b9f\u8df5\u4f8b\uff1a\u4f9d\u5b58\u6027\u6ce8\u5165","text":"<pre><code>// DependencyInjection.scala\n@main def dependencyInjection(): Unit = {\n  // \u30b5\u30fc\u30d3\u30b9\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\n  trait UserRepository:\n    def findById(id: String): Option[String]\n    def save(id: String, name: String): Unit\n\n  trait EmailService:\n    def send(to: String, subject: String, body: String): Unit\n\n  trait Logger:\n    def info(message: String): Unit\n    def error(message: String): Unit\n\n  // \u5b9f\u88c5\n  class InMemoryUserRepository extends UserRepository:\n    private var users = Map[String, String]()\n\n    def findById(id: String): Option[String] = users.get(id)\n    def save(id: String, name: String): Unit = users += (id -&gt; name)\n\n  class ConsoleEmailService extends EmailService:\n    def send(to: String, subject: String, body: String): Unit =\n      println(s\"\ud83d\udce7 To: $to\\n   Subject: $subject\\n   Body: $body\")\n\n  class ConsoleLogger extends Logger:\n    def info(message: String): Unit = println(s\"[INFO] $message\")\n    def error(message: String): Unit = println(s\"[ERROR] $message\")\n\n  // \u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af\uff08\u4f9d\u5b58\u6027\u306f\u6697\u9ed9\u306e\u5f15\u6570\uff09\n  class UserService:\n    def registerUser(id: String, name: String, email: String)\n                    (implicit repo: UserRepository, \n                     emailService: EmailService,\n                     logger: Logger): Unit =\n      logger.info(s\"\u30e6\u30fc\u30b6\u30fc\u767b\u9332\u958b\u59cb: $id\")\n\n      repo.findById(id) match {\n        case Some(_) =&gt;\n          logger.error(s\"\u30e6\u30fc\u30b6\u30fcID $id \u306f\u65e2\u306b\u5b58\u5728\u3057\u307e\u3059\")\n        case None =&gt;\n          repo.save(id, name)\n          emailService.send(\n            email,\n            \"\u767b\u9332\u5b8c\u4e86\u306e\u304a\u77e5\u3089\u305b\",\n            s\"$name \u69d8\u3001\u3054\u767b\u9332\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff01\"\n          )\n          logger.info(s\"\u30e6\u30fc\u30b6\u30fc\u767b\u9332\u5b8c\u4e86: $id\")\n      }\n\n    def getUser(id: String)(implicit repo: UserRepository, logger: Logger): Option[String] =\n      logger.info(s\"\u30e6\u30fc\u30b6\u30fc\u691c\u7d22: $id\")\n      repo.findById(id)\n\n  // \u4f9d\u5b58\u6027\u306e\u6ce8\u5165\n  implicit val userRepo: UserRepository = new InMemoryUserRepository\n  implicit val emailService: EmailService = new ConsoleEmailService\n  implicit val logger: Logger = new ConsoleLogger\n\n  // \u4f7f\u7528\uff08\u4f9d\u5b58\u6027\u306f\u81ea\u52d5\u7684\u306b\u6ce8\u5165\u3055\u308c\u308b\uff09\n  val userService = new UserService\n\n  println(\"=== \u30e6\u30fc\u30b6\u30fc\u767b\u9332 ===\")\n  userService.registerUser(\"001\", \"\u7530\u4e2d\u592a\u90ce\", \"tanaka@example.com\")\n\n  println(\"\\n=== \u30e6\u30fc\u30b6\u30fc\u691c\u7d22 ===\")\n  userService.getUser(\"001\") match {\n    case Some(name) =&gt; println(s\"\u898b\u3064\u304b\u308a\u307e\u3057\u305f: $name\")\n    case None =&gt; println(\"\u898b\u3064\u304b\u308a\u307e\u305b\u3093\")\n  }\n\n  // \u30c6\u30b9\u30c8\u74b0\u5883\u3067\u306f\u5225\u306e\u5b9f\u88c5\u3092\u6ce8\u5165\n  def testEnvironment(): Unit =\n    implicit val testLogger: Logger = new Logger:\n      def info(message: String): Unit = ()  // \u30ed\u30b0\u3092\u51fa\u529b\u3057\u306a\u3044\n      def error(message: String): Unit = println(s\"[TEST ERROR] $message\")\n\n    println(\"\\n=== \u30c6\u30b9\u30c8\u74b0\u5883 ===\")\n    userService.registerUser(\"001\", \"\u91cd\u8907\u30c6\u30b9\u30c8\", \"test@example.com\")\n</code></pre>"},{"location":"part7/chapter28/#_10","title":"\u6697\u9ed9\u306e\u5f15\u6570\u306e\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9","text":"<pre><code>// ImplicitBestPractices.scala\n@main def implicitBestPractices(): Unit = {\n  // 1. \u660e\u78ba\u306a\u578b\u540d\u3092\u4f7f\u3046\n  case class DatabaseConnection(url: String)\n  case class SecurityContext(userId: String, permissions: Set[String])\n\n  // \u826f\u3044\u4f8b\uff1a\u578b\u304b\u3089\u7528\u9014\u304c\u660e\u78ba\n  def executeQuery(query: String)(implicit db: DatabaseConnection): String =\n    s\"Executing on ${db.url}: $query\"\n\n  // 2. \u6697\u9ed9\u306e\u5f15\u6570\u306f\u6700\u5f8c\u306e\u5f15\u6570\u30ea\u30b9\u30c8\u306b\n  def processData[A](data: List[A])(f: A =&gt; String)\n                    (implicit ctx: SecurityContext): List[String] =\n    if (ctx.permissions.contains(\"READ\")) {\n      data.map(f)\n    } else {\n      List(\"\u30a2\u30af\u30bb\u30b9\u62d2\u5426\")\n    }\n\n  // 3. \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3092\u63d0\u4f9b\u3059\u308b\n  object SecurityContext:\n    implicit val defaultContext: SecurityContext = \n      SecurityContext(\"anonymous\", Set(\"READ\"))\n\n  // 4. \u30b9\u30b3\u30fc\u30d7\u3092\u9069\u5207\u306b\u7ba1\u7406\n  class SecureService:\n    def adminOperation()(implicit ctx: SecurityContext): String =\n      if ctx.permissions.contains(\"ADMIN\") then\n        \"\u7ba1\u7406\u8005\u64cd\u4f5c\u3092\u5b9f\u884c\"\n      else\n        \"\u6a29\u9650\u304c\u3042\u308a\u307e\u305b\u3093\"\n\n  // \u4f7f\u7528\u4f8b\n  implicit val db = DatabaseConnection(\"jdbc:postgresql://localhost/mydb\")\n\n  println(\"=== \u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8 ===\")\n  import SecurityContext.defaultContext\n  println(executeQuery(\"SELECT * FROM users\"))\n  println(processData(List(1, 2, 3))(_.toString))\n\n  val service = new SecureService\n  println(service.adminOperation())\n\n  // \u7ba1\u7406\u8005\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\n  def adminContext(): Unit =\n    implicit val adminCtx = SecurityContext(\"admin\", Set(\"READ\", \"WRITE\", \"ADMIN\"))\n    println(\"\\n=== \u7ba1\u7406\u8005\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8 ===\")\n    println(service.adminOperation())\n\n  adminContext()\n\n  // 5. \u6697\u9ed9\u306e\u5f15\u6570\u306e\u78ba\u8a8d\n  def checkImplicits(): Unit =\n    val query = \"SELECT * FROM products\"\n\n    // \u660e\u793a\u7684\u306b\u6697\u9ed9\u306e\u5024\u3092\u78ba\u8a8d\n    println(\"\\n=== \u6697\u9ed9\u306e\u5024\u306e\u78ba\u8a8d ===\")\n    println(s\"\u4f7f\u7528\u4e2d\u306eDB: ${implicitly[DatabaseConnection]}\")\n    println(s\"\u4f7f\u7528\u4e2d\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3: ${implicitly[SecurityContext]}\")\n\n    // implicitly\u306f\u6697\u9ed9\u306e\u5024\u3092\u660e\u793a\u7684\u306b\u53d6\u5f97\u3059\u308b\n    val currentDb = implicitly[DatabaseConnection]\n    println(s\"URL: ${currentDb.url}\")\n\n  checkImplicits()\n</code></pre>"},{"location":"part7/chapter28/#_11","title":"\u7df4\u7fd2\u3057\u3066\u307f\u3088\u3046\uff01","text":""},{"location":"part7/chapter28/#1","title":"\u7df4\u7fd21\uff1a\u30ed\u30ae\u30f3\u30b0\u30b7\u30b9\u30c6\u30e0","text":"<p>\u6697\u9ed9\u306e\u5f15\u6570\u3092\u4f7f\u3063\u305f\u30ed\u30ae\u30f3\u30b0\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\uff1a - \u30ed\u30b0\u30ec\u30d9\u30eb\uff08DEBUG, INFO, WARN, ERROR\uff09 - \u30ed\u30b0\u51fa\u529b\u5148\uff08\u30b3\u30f3\u30bd\u30fc\u30eb\u3001\u30d5\u30a1\u30a4\u30eb\uff09 - \u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u3068\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u60c5\u5831</p>"},{"location":"part7/chapter28/#2","title":"\u7df4\u7fd22\uff1a\u5358\u4f4d\u5909\u63db","text":"<p>\u6697\u9ed9\u306e\u5f15\u6570\u3067\u5358\u4f4d\u5909\u63db\u3092\u5b9f\u88c5\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - \u9577\u3055\uff08m, km, mile\uff09 - \u91cd\u3055\uff08g, kg, pound\uff09 - \u6e29\u5ea6\uff08\u2103, \u2109, K\uff09</p>"},{"location":"part7/chapter28/#3","title":"\u7df4\u7fd23\uff1a\u8a8d\u8a3c\u30b7\u30b9\u30c6\u30e0","text":"<p>\u6697\u9ed9\u306e\u5f15\u6570\u3092\u4f7f\u3063\u305f\u8a8d\u8a3c\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\uff1a - \u30e6\u30fc\u30b6\u30fc\u60c5\u5831 - \u6a29\u9650\u30c1\u30a7\u30c3\u30af - \u64cd\u4f5c\u306e\u8a18\u9332</p>"},{"location":"part7/chapter28/#_12","title":"\u3053\u306e\u7ae0\u306e\u307e\u3068\u3081","text":"<p>\u6697\u9ed9\u306e\u5f15\u6570\u306e\u4fbf\u5229\u3055\u3092\u5b66\u3073\u307e\u3057\u305f\uff01</p>"},{"location":"part7/chapter28/#_13","title":"\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3053\u3068","text":"<p>\u2705 \u6697\u9ed9\u306e\u5f15\u6570\u306e\u57fa\u672c - implicit \u30ad\u30fc\u30ef\u30fc\u30c9 - \u81ea\u52d5\u7684\u306a\u5024\u306e\u89e3\u6c7a - \u660e\u793a\u7684\u306a\u6307\u5b9a\u3082\u53ef\u80fd</p> <p>\u2705 \u5b9f\u8df5\u7684\u306a\u4f7f\u3044\u65b9 - \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306e\u4f1d\u64ad - \u8a2d\u5b9a\u306e\u6ce8\u5165 - \u4f9d\u5b58\u6027\u6ce8\u5165</p> <p>\u2705 \u512a\u5148\u9806\u4f4d\u306e\u7406\u89e3 - \u30b9\u30b3\u30fc\u30d7\u306e\u30eb\u30fc\u30eb - \u63a2\u7d22\u9806\u5e8f - \u7af6\u5408\u306e\u89e3\u6c7a</p> <p>\u2705 \u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9 - \u660e\u78ba\u306a\u578b\u540d - \u9069\u5207\u306a\u30b9\u30b3\u30fc\u30d7\u7ba1\u7406 - \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306e\u63d0\u4f9b</p>"},{"location":"part7/chapter28/#_14","title":"\u6697\u9ed9\u306e\u5f15\u6570\u3092\u4f7f\u3046\u30b3\u30c4","text":"<ol> <li> <p>\u660e\u78ba\u3055\u3092\u4fdd\u3064</p> <ul> <li>\u4f55\u304c\u6697\u9ed9\u7684\u304b\u5206\u304b\u308a\u3084\u3059\u304f</li> <li>\u578b\u304b\u3089\u7528\u9014\u304c\u63a8\u6e2c\u3067\u304d\u308b</li> <li>\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u660e\u793a\u7684\u306b</li> </ul> </li> <li> <p>\u30b9\u30b3\u30fc\u30d7\u7ba1\u7406</p> <ul> <li>\u5f71\u97ff\u7bc4\u56f2\u3092\u9650\u5b9a</li> <li>\u30a4\u30f3\u30dd\u30fc\u30c8\u306e\u6d3b\u7528</li> <li>\u7af6\u5408\u3092\u907f\u3051\u308b</li> </ul> </li> <li> <p>\u30c7\u30d0\u30c3\u30b0\u3057\u3084\u3059\u304f</p> <ul> <li>implicitly\u3067\u78ba\u8a8d</li> <li>\u660e\u793a\u7684\u306a\u6307\u5b9a\u3067\u30c6\u30b9\u30c8</li> <li>\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u7406\u89e3</li> </ul> </li> </ol>"},{"location":"part7/chapter28/#_15","title":"\u6b21\u306e\u7ae0\u3067\u306f...","text":"<p>\u578b\u30af\u30e9\u30b9\u30d1\u30bf\u30fc\u30f3\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3059\u3002\u6697\u9ed9\u306e\u5f15\u6570\u3092\u4f7f\u3063\u305f\u3001\u3088\u308a\u9ad8\u5ea6\u306a\u62bd\u8c61\u5316\u306e\u6280\u6cd5\u3092\u7fd2\u5f97\u3057\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part7/chapter28/#_16","title":"\u6700\u5f8c\u306b","text":"<p>\u6697\u9ed9\u306e\u5f15\u6570\u306f\u300c\u6587\u8108\u3092\u7406\u89e3\u3059\u308b\u8ce2\u3044\u52a9\u624b\u300d\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002\u3044\u3061\u3044\u3061\u8aac\u660e\u3057\u306a\u304f\u3066\u3082\u3001\u72b6\u6cc1\u306b\u5fdc\u3058\u3066\u9069\u5207\u306a\u5024\u3092\u9078\u3093\u3067\u304f\u308c\u308b\u3002\u3053\u306e\u4fbf\u5229\u3055\u3092\u6d3b\u304b\u305b\u3070\u3001\u3088\u308a\u7c21\u6f54\u3067\u3001\u305d\u308c\u3067\u3044\u3066\u67d4\u8edf\u306a\u30b3\u30fc\u30c9\u304c\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u4f7f\u3044\u3059\u304e\u306b\u306f\u6ce8\u610f\u3002\u660e\u793a\u7684\u3067\u3042\u308b\u3053\u3068\u3082\u3001\u6642\u306b\u306f\u5927\u5207\u3067\u3059\uff01</p>"},{"location":"part7/chapter29/","title":"\u7b2c29\u7ae0 \u578b\u30af\u30e9\u30b9\u30d1\u30bf\u30fc\u30f3","text":""},{"location":"part7/chapter29/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u6599\u7406\u306e\u30ec\u30b7\u30d4\u3092\u8003\u3048\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\u300c\u713c\u304f\u300d\u3068\u3044\u3046\u8abf\u7406\u6cd5\u306f\u3001\u8089\u3067\u3082\u9b5a\u3067\u3082\u91ce\u83dc\u3067\u3082\u4f7f\u3048\u307e\u3059\u304c\u3001\u305d\u308c\u305e\u308c\u713c\u304d\u65b9\u304c\u9055\u3044\u307e\u3059\u3088\u306d\u3002\u8089\u306f\u8868\u9762\u3092\u713c\u3044\u3066\u4e2d\u306f\u30b8\u30e5\u30fc\u30b7\u30fc\u306b\u3001\u9b5a\u306f\u76ae\u3092\u30d1\u30ea\u30c3\u3068\u3001\u91ce\u83dc\u306f\u7126\u3052\u76ee\u3092\u3064\u3051\u3066\u7518\u307f\u3092\u5f15\u304d\u51fa\u3059\u3002</p> <p>\u578b\u30af\u30e9\u30b9\u30d1\u30bf\u30fc\u30f3\u3082\u540c\u3058\u3067\u3059\u3002\u300c\u540c\u3058\u64cd\u4f5c\u300d\u3092\u300c\u9055\u3046\u578b\u300d\u306b\u5bfe\u3057\u3066\u300c\u305d\u308c\u305e\u308c\u306e\u65b9\u6cd5\u300d\u3067\u5b9f\u88c5\u3067\u304d\u308b\u3001\u3068\u3066\u3082\u67d4\u8edf\u306a\u4ed5\u7d44\u307f\u306a\u3093\u3067\u3059\uff01</p>"},{"location":"part7/chapter29/#_2","title":"\u578b\u30af\u30e9\u30b9\u3063\u3066\u4f55\u3060\u308d\u3046\uff1f","text":""},{"location":"part7/chapter29/#_3","title":"\u57fa\u672c\u7684\u306a\u578b\u30af\u30e9\u30b9","text":"<pre><code>// TypeClassBasics.scala\n@main def typeClassBasics(): Unit = {\n  // \u578b\u30af\u30e9\u30b9\u306e\u5b9a\u7fa9\uff1a\u300c\u8868\u793a\u3067\u304d\u308b\u300d\u3068\u3044\u3046\u6027\u8cea\n  trait Show[A]:\n    def show(value: A): String\n\n  // \u578b\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\uff08\u5b9f\u88c5\uff09\n  object Show:\n    // Int\u306e\u8868\u793a\u65b9\u6cd5\n    implicit val intShow: Show[Int] = new Show[Int]:\n      def show(value: Int): String = s\"\u6574\u6570: $value\"\n\n    // String\u306e\u8868\u793a\u65b9\u6cd5\n    implicit val stringShow: Show[String] = new Show[String]:\n      def show(value: String): String = s\"\u6587\u5b57\u5217: \\\"$value\\\"\"\n\n    // Boolean\u306e\u8868\u793a\u65b9\u6cd5\n    implicit val booleanShow: Show[Boolean] = new Show[Boolean]:\n      def show(value: Boolean): String = if (value) \"\u771f\" else \"\u507d\"\n\n  // \u578b\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u95a2\u6570\n  def display[A](value: A)(implicit shower: Show[A]): String =\n    shower.show(value)\n\n  // \u3088\u308a\u4fbf\u5229\u306a\u69cb\u6587\n  def display2[A: Show](value: A): String =\n    implicitly[Show[A]].show(value)\n\n  import Show._\n\n  // \u4f7f\u7528\u4f8b\n  println(display(42))\n  println(display(\"Hello\"))\n  println(display(true))\n\n  // \u30ab\u30b9\u30bf\u30e0\u578b\u3078\u306e\u5bfe\u5fdc\n  case class Person(name: String, age: Int)\n\n  // Person\u306e\u8868\u793a\u65b9\u6cd5\u3092\u5b9a\u7fa9\n  implicit val personShow: Show[Person] = new Show[Person]:\n    def show(person: Person): String = \n      s\"${person.name}\u3055\u3093\uff08${person.age}\u6b73\uff09\"\n\n  val person = Person(\"\u592a\u90ce\", 25)\n  println(display(person))\n</code></pre>"},{"location":"part7/chapter29/#_4","title":"\u578b\u30af\u30e9\u30b9\u306e\u5408\u6210","text":"<pre><code>// TypeClassComposition.scala\n@main def typeClassComposition(): Unit = {\n  // \u7b49\u4fa1\u6027\u3092\u5224\u5b9a\u3059\u308b\u578b\u30af\u30e9\u30b9\n  trait Eq[A]:\n    def equals(a1: A, a2: A): Boolean\n    def notEquals(a1: A, a2: A): Boolean = !equals(a1, a2)\n\n  object Eq:\n    def apply[A](implicit eq: Eq[A]): Eq[A] = eq\n\n    // \u57fa\u672c\u578b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\n    implicit val intEq: Eq[Int] = new Eq[Int]:\n      def equals(a1: Int, a2: Int): Boolean = a1 == a2\n\n    implicit val stringEq: Eq[String] = new Eq[String]:\n      def equals(a1: String, a2: String): Boolean = a1 == a2\n\n    // \u30aa\u30d7\u30b7\u30e7\u30f3\u578b\u306e\u81ea\u52d5\u5c0e\u51fa\n    implicit def optionEq[A](implicit eqA: Eq[A]): Eq[Option[A]] = \n      new Eq[Option[A]]:\n        def equals(o1: Option[A], o2: Option[A]): Boolean = \n          (o1, o2) match {\n            case (Some(a1), Some(a2)) =&gt; eqA.equals(a1, a2)\n            case (None, None) =&gt; true\n            case _ =&gt; false\n          }\n\n    // \u30ea\u30b9\u30c8\u578b\u306e\u81ea\u52d5\u5c0e\u51fa\n    implicit def listEq[A](implicit eqA: Eq[A]): Eq[List[A]] =\n      new Eq[List[A]]:\n        def equals(l1: List[A], l2: List[A]): Boolean =\n          l1.length == l2.length &amp;&amp; \n          l1.zip(l2).forall { case (a1, a2) =&gt; eqA.equals(a1, a2) }\n\n  // \u4fbf\u5229\u306a\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\n  extension [A](a: A)(using eq: Eq[A])\n    def ===(other: A): Boolean = eq.equals(a, other)\n    def =!=(other: A): Boolean = eq.notEquals(a, other)\n\n  import Eq._\n\n  // \u57fa\u672c\u578b\u306e\u6bd4\u8f03\n  println(\"=== \u57fa\u672c\u578b\u306e\u6bd4\u8f03 ===\")\n  println(s\"10 === 10: ${10 === 10}\")\n  println(s\"10 === 20: ${10 === 20}\")\n  println(s\"\\\"hello\\\" === \\\"hello\\\": ${\"hello\" === \"hello\"}\")\n\n  // \u81ea\u52d5\u5c0e\u51fa\u3055\u308c\u305f\u578b\u306e\u6bd4\u8f03\n  println(\"\\n=== \u8907\u5408\u578b\u306e\u6bd4\u8f03 ===\")\n  println(s\"Some(42) === Some(42): ${Some(42) === Some(42)}\")\n  println(s\"Some(42) === Some(99): ${Some(42) === Some(99)}\")\n  println(s\"List(1,2,3) === List(1,2,3): ${List(1,2,3) === List(1,2,3)}\")\n\n  // \u30ab\u30b9\u30bf\u30e0\u578b\n  case class Point(x: Int, y: Int)\n\n  implicit val pointEq: Eq[Point] = new Eq[Point]:\n    def equals(p1: Point, p2: Point): Boolean =\n      p1.x == p2.x &amp;&amp; p1.y == p2.y\n\n  val p1 = Point(10, 20)\n  val p2 = Point(10, 20)\n  val p3 = Point(30, 40)\n\n  println(s\"\\n=== \u30ab\u30b9\u30bf\u30e0\u578b\u306e\u6bd4\u8f03 ===\")\n  println(s\"$p1 === $p2: ${p1 === p2}\")\n  println(s\"$p1 === $p3: ${p1 === p3}\")\n</code></pre>"},{"location":"part7/chapter29/#_5","title":"\u5b9f\u8df5\u7684\u306a\u578b\u30af\u30e9\u30b9","text":""},{"location":"part7/chapter29/#json","title":"JSON\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc","text":"<pre><code>// JsonTypeClass.scala\n@main def jsonTypeClass(): Unit = {\n  import scala.collection.mutable.StringBuilder\n\n  // JSON\u5024\u306e\u8868\u73fe\n  sealed trait Json\n  case class JsonString(value: String) extends Json\n  case class JsonNumber(value: Double) extends Json\n  case class JsonBoolean(value: Boolean) extends Json\n  case class JsonArray(values: List[Json]) extends Json\n  case class JsonObject(fields: Map[String, Json]) extends Json\n  case object JsonNull extends Json\n\n  // JSON\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u578b\u30af\u30e9\u30b9\n  trait JsonEncoder[A]:\n    def encode(value: A): Json\n\n  object JsonEncoder:\n    def apply[A](implicit encoder: JsonEncoder[A]): JsonEncoder[A] = encoder\n\n    // \u57fa\u672c\u578b\u306e\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\n    implicit val stringEncoder: JsonEncoder[String] = \n      (value: String) =&gt; JsonString(value)\n\n    implicit val intEncoder: JsonEncoder[Int] = \n      (value: Int) =&gt; JsonNumber(value.toDouble)\n\n    implicit val doubleEncoder: JsonEncoder[Double] = \n      (value: Double) =&gt; JsonNumber(value)\n\n    implicit val booleanEncoder: JsonEncoder[Boolean] = \n      (value: Boolean) =&gt; JsonBoolean(value)\n\n    // \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u578b\u306e\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\n    implicit def listEncoder[A](implicit encoder: JsonEncoder[A]): JsonEncoder[List[A]] =\n      (values: List[A]) =&gt; JsonArray(values.map(encoder.encode))\n\n    implicit def optionEncoder[A](implicit encoder: JsonEncoder[A]): JsonEncoder[Option[A]] =\n      (value: Option[A]) =&gt; value match {\n        case Some(v) =&gt; encoder.encode(v)\n        case None =&gt; JsonNull\n      }\n\n    implicit def mapEncoder[A](implicit encoder: JsonEncoder[A]): JsonEncoder[Map[String, A]] =\n      (map: Map[String, A]) =&gt; JsonObject(\n        map.map { case (k, v) =&gt; k -&gt; encoder.encode(v) }\n      )\n\n  // \u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\n  extension [A](value: A)(using encoder: JsonEncoder[A])\n    def toJson: Json = encoder.encode(value)\n\n  // JSON\u6587\u5b57\u5217\u3078\u306e\u5909\u63db\n  def jsonToString(json: Json): String = json match {\n    case JsonString(s) =&gt; s\"\"\"\"$s\"\"\"\"\n    case JsonNumber(n) =&gt; n.toString\n    case JsonBoolean(b) =&gt; b.toString\n    case JsonArray(values) =&gt; \n      values.map(jsonToString).mkString(\"[\", \", \", \"]\")\n    case JsonObject(fields) =&gt;\n      fields.map { case (k, v) =&gt; \n        s\"\"\"\"$k\": ${jsonToString(v)}\"\"\"\n      }.mkString(\"{\", \", \", \"}\")\n    case JsonNull =&gt; \"null\"\n  }\n\n  // \u30ab\u30b9\u30bf\u30e0\u578b\n  case class User(\n    id: Int,\n    name: String,\n    email: String,\n    active: Boolean,\n    tags: List[String]\n  )\n\n  case class Post(\n    title: String,\n    content: String,\n    author: User,\n    likes: Int\n  )\n\n  // \u30ab\u30b9\u30bf\u30e0\u578b\u306e\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\n  implicit val userEncoder: JsonEncoder[User] = (user: User) =&gt;\n    JsonObject(Map(\n      \"id\" -&gt; user.id.toJson,\n      \"name\" -&gt; user.name.toJson,\n      \"email\" -&gt; user.email.toJson,\n      \"active\" -&gt; user.active.toJson,\n      \"tags\" -&gt; user.tags.toJson\n    ))\n\n  implicit val postEncoder: JsonEncoder[Post] = (post: Post) =&gt;\n    JsonObject(Map(\n      \"title\" -&gt; post.title.toJson,\n      \"content\" -&gt; post.content.toJson,\n      \"author\" -&gt; post.author.toJson,\n      \"likes\" -&gt; post.likes.toJson\n    ))\n\n  // \u4f7f\u7528\u4f8b\n  val user = User(\n    id = 1,\n    name = \"\u7530\u4e2d\u592a\u90ce\",\n    email = \"tanaka@example.com\",\n    active = true,\n    tags = List(\"scala\", \"\u95a2\u6570\u578b\")\n  )\n\n  val post = Post(\n    title = \"\u578b\u30af\u30e9\u30b9\u306e\u7d39\u4ecb\",\n    content = \"\u578b\u30af\u30e9\u30b9\u306f\u3068\u3066\u3082\u4fbf\u5229\u3067\u3059\",\n    author = user,\n    likes = 42\n  )\n\n  println(\"=== JSON\u30a8\u30f3\u30b3\u30fc\u30c9 ===\")\n  println(jsonToString(user.toJson))\n  println()\n  println(jsonToString(post.toJson))\n\n  // \u30ea\u30b9\u30c8\u306e\u30a8\u30f3\u30b3\u30fc\u30c9\n  val users = List(\n    User(1, \"\u592a\u90ce\", \"taro@example.com\", true, List(\"scala\")),\n    User(2, \"\u82b1\u5b50\", \"hanako@example.com\", false, List(\"java\", \"kotlin\"))\n  )\n\n  println(\"\\n=== \u30ea\u30b9\u30c8\u306e\u30a8\u30f3\u30b3\u30fc\u30c9 ===\")\n  println(jsonToString(users.toJson))\n</code></pre>"},{"location":"part7/chapter29/#_6","title":"\u9806\u5e8f\u4ed8\u3051\u578b\u30af\u30e9\u30b9","text":"<pre><code>// OrderingTypeClass.scala\n@main def orderingTypeClass(): Unit = {\n  // \u9806\u5e8f\u4ed8\u3051\u578b\u30af\u30e9\u30b9\n  trait Ordering[A]:\n    def compare(a1: A, a2: A): Int\n\n    def lt(a1: A, a2: A): Boolean = compare(a1, a2) &lt; 0\n    def lte(a1: A, a2: A): Boolean = compare(a1, a2) &lt;= 0\n    def gt(a1: A, a2: A): Boolean = compare(a1, a2) &gt; 0\n    def gte(a1: A, a2: A): Boolean = compare(a1, a2) &gt;= 0\n    def equiv(a1: A, a2: A): Boolean = compare(a1, a2) == 0\n\n    def max(a1: A, a2: A): A = if (gte(a1, a2)) a1 else a2\n    def min(a1: A, a2: A): A = if (lte(a1, a2)) a1 else a2\n\n  object Ordering:\n    // \u57fa\u672c\u578b\u306e\u9806\u5e8f\n    implicit val intOrdering: Ordering[Int] = new Ordering[Int]:\n      def compare(a1: Int, a2: Int): Int = a1 - a2\n\n    implicit val stringOrdering: Ordering[String] = new Ordering[String]:\n      def compare(a1: String, a2: String): Int = a1.compareTo(a2)\n\n    // \u9006\u9806\n    def reverse[A](implicit ord: Ordering[A]): Ordering[A] = new Ordering[A]:\n      def compare(a1: A, a2: A): Int = -ord.compare(a1, a2)\n\n    // \u30bf\u30d7\u30eb\u306e\u9806\u5e8f\n    implicit def tuple2Ordering[A, B](implicit \n      ordA: Ordering[A], \n      ordB: Ordering[B]\n    ): Ordering[(A, B)] = new Ordering[(A, B)]:\n      def compare(t1: (A, B), t2: (A, B)): Int = {\n        val cmp1 = ordA.compare(t1._1, t2._1)\n        if (cmp1 != 0) cmp1\n        else ordB.compare(t1._2, t2._2)\n      }\n\n  // \u30bd\u30fc\u30c8\u95a2\u6570\n  def quickSort[A](list: List[A])(implicit ord: Ordering[A]): List[A] = \n    list match {\n      case Nil =&gt; Nil\n      case pivot :: tail =&gt;\n        val (smaller, larger) = tail.partition(ord.lt(_, pivot))\n        quickSort(smaller) ++ List(pivot) ++ quickSort(larger)\n    }\n\n  // \u30ab\u30b9\u30bf\u30e0\u578b\n  case class Person(name: String, age: Int)\n  case class Product(name: String, price: Double, rating: Double)\n\n  // \u30ab\u30b9\u30bf\u30e0\u578b\u306e\u9806\u5e8f\n  object Person:\n    implicit val byAge: Ordering[Person] = new Ordering[Person]:\n      def compare(p1: Person, p2: Person): Int = p1.age - p2.age\n\n    val byName: Ordering[Person] = new Ordering[Person]:\n      def compare(p1: Person, p2: Person): Int = p1.name.compareTo(p2.name)\n\n  object Product:\n    implicit val byPrice: Ordering[Product] = new Ordering[Product]:\n      def compare(p1: Product, p2: Product): Int = \n        p1.price.compareTo(p2.price)\n\n    val byRating: Ordering[Product] = new Ordering[Product]:\n      def compare(p1: Product, p2: Product): Int = \n        p2.rating.compareTo(p1.rating)  // \u9ad8\u3044\u9806\n\n  // \u4f7f\u7528\u4f8b\n  val numbers = List(3, 1, 4, 1, 5, 9, 2, 6)\n  println(\"=== \u6570\u5024\u306e\u30bd\u30fc\u30c8 ===\")\n  println(s\"\u5143: $numbers\")\n  println(s\"\u6607\u9806: ${quickSort(numbers)}\")\n  println(s\"\u964d\u9806: ${quickSort(numbers)(using Ordering.reverse[Int])}\")\n\n  val people = List(\n    Person(\"\u592a\u90ce\", 25),\n    Person(\"\u82b1\u5b50\", 30),\n    Person(\"\u6b21\u90ce\", 20)\n  )\n\n  println(\"\\n=== \u4eba\u7269\u306e\u30bd\u30fc\u30c8 ===\")\n  println(s\"\u5e74\u9f62\u9806: ${quickSort(people)}\")\n  println(s\"\u540d\u524d\u9806: ${quickSort(people)(using Person.byName)}\")\n\n  val products = List(\n    Product(\"\u30ce\u30fc\u30c8PC\", 80000, 4.5),\n    Product(\"\u30de\u30a6\u30b9\", 3000, 4.0),\n    Product(\"\u30ad\u30fc\u30dc\u30fc\u30c9\", 10000, 4.8)\n  )\n\n  println(\"\\n=== \u5546\u54c1\u306e\u30bd\u30fc\u30c8 ===\")\n  println(\"\u4fa1\u683c\u9806\uff08\u5b89\u3044\u9806\uff09:\")\n  quickSort(products).foreach(p =&gt; \n    println(f\"  ${p.name}%-10s \u00a5${p.price}%,8.0f \u2605${p.rating}\")\n  )\n\n  println(\"\\n\u8a55\u4fa1\u9806\uff08\u9ad8\u3044\u9806\uff09:\")\n  quickSort(products)(using Product.byRating).foreach(p =&gt; \n    println(f\"  ${p.name}%-10s \u2605${p.rating} \u00a5${p.price}%,8.0f\")\n  )\n</code></pre>"},{"location":"part7/chapter29/#_7","title":"\u9ad8\u5ea6\u306a\u578b\u30af\u30e9\u30b9\u30d1\u30bf\u30fc\u30f3","text":""},{"location":"part7/chapter29/#_8","title":"\u30e2\u30ce\u30a4\u30c9\u578b\u30af\u30e9\u30b9","text":"<pre><code>// MonoidTypeClass.scala\n@main def monoidTypeClass(): Unit =\n  // \u30e2\u30ce\u30a4\u30c9\uff1a\u7d50\u5408\u6cd5\u5247\u3092\u6e80\u305f\u3059\u4e8c\u9805\u6f14\u7b97\u3068\u5358\u4f4d\u5143\u3092\u6301\u3064\n  trait Monoid[A]:\n    def empty: A  // \u5358\u4f4d\u5143\n    def combine(a1: A, a2: A): A  // \u7d50\u5408\u6f14\u7b97\n\n    // \u4fbf\u5229\u306a\u30e1\u30bd\u30c3\u30c9\n    def combineAll(as: List[A]): A = \n      as.foldLeft(empty)(combine)\n\n  object Monoid:\n    def apply[A](implicit m: Monoid[A]): Monoid[A] = m\n\n    // \u57fa\u672c\u578b\u306e\u30e2\u30ce\u30a4\u30c9\n    implicit val intAddMonoid: Monoid[Int] = new Monoid[Int]:\n      def empty: Int = 0\n      def combine(a1: Int, a2: Int): Int = a1 + a2\n\n    implicit val stringMonoid: Monoid[String] = new Monoid[String]:\n      def empty: String = \"\"\n      def combine(a1: String, a2: String): String = a1 + a2\n\n    implicit def listMonoid[A]: Monoid[List[A]] = new Monoid[List[A]]:\n      def empty: List[A] = List.empty\n      def combine(a1: List[A], a2: List[A]): List[A] = a1 ++ a2\n\n    // \u30bf\u30d7\u30eb\u306e\u30e2\u30ce\u30a4\u30c9\n    implicit def tuple2Monoid[A, B](implicit \n      ma: Monoid[A], \n      mb: Monoid[B]\n    ): Monoid[(A, B)] = new Monoid[(A, B)]:\n      def empty: (A, B) = (ma.empty, mb.empty)\n      def combine(t1: (A, B), t2: (A, B)): (A, B) = \n        (ma.combine(t1._1, t2._1), mb.combine(t1._2, t2._2))\n\n  // \u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\n  extension [A](a: A)(using m: Monoid[A])\n    def |+|(other: A): A = m.combine(a, other)\n\n  // \u5b9f\u7528\u4f8b\uff1a\u7d71\u8a08\u60c5\u5831\u306e\u96c6\u8a08\n  case class Stats(\n    count: Int,\n    sum: Double,\n    min: Double,\n    max: Double\n  ):\n    def mean: Option[Double] = \n      if count &gt; 0 then Some(sum / count) else None\n\n  object Stats:\n    def single(value: Double): Stats = \n      Stats(1, value, value, value)\n\n    implicit val statsMonoid: Monoid[Stats] = new Monoid[Stats]:\n      def empty: Stats = Stats(0, 0.0, Double.MaxValue, Double.MinValue)\n      def combine(s1: Stats, s2: Stats): Stats = Stats(\n        count = s1.count + s2.count,\n        sum = s1.sum + s2.sum,\n        min = math.min(s1.min, s2.min),\n        max = math.max(s1.max, s2.max)\n      )\n\n  // \u30de\u30c3\u30d7\u306e\u30e2\u30ce\u30a4\u30c9\n  implicit def mapMonoid[K, V](implicit mv: Monoid[V]): Monoid[Map[K, V]] = \n    new Monoid[Map[K, V]]:\n      def empty: Map[K, V] = Map.empty\n      def combine(m1: Map[K, V], m2: Map[K, V]): Map[K, V] =\n        m2.foldLeft(m1) { case (acc, (k, v)) =&gt;\n          acc.updatedWith(k) {\n            case Some(v1) =&gt; Some(mv.combine(v1, v))\n            case None =&gt; Some(v)\n          }\n        }\n\n  // \u4f7f\u7528\u4f8b\n  println(\"=== \u57fa\u672c\u7684\u306a\u30e2\u30ce\u30a4\u30c9 ===\")\n  println(s\"1 |+| 2 |+| 3 = ${1 |+| 2 |+| 3}\")\n  println(s\"\\\"Hello\\\" |+| \\\" \\\" |+| \\\"World\\\" = ${\"Hello\" |+| \" \" |+| \"World\"}\")\n\n  val lists = List(List(1, 2), List(3, 4), List(5))\n  println(s\"\u30ea\u30b9\u30c8\u306e\u7d50\u5408: ${Monoid[List[Int]].combineAll(lists)}\")\n\n  println(\"\\n=== \u7d71\u8a08\u60c5\u5831\u306e\u96c6\u8a08 ===\")\n  val measurements = List(10.5, 20.3, 15.8, 25.1, 18.9)\n  val stats = measurements.map(Stats.single).reduce(_ |+| _)\n\n  println(f\"\u4ef6\u6570: ${stats.count}\")\n  println(f\"\u5408\u8a08: ${stats.sum}%.1f\")\n  println(f\"\u6700\u5c0f: ${stats.min}%.1f\")\n  println(f\"\u6700\u5927: ${stats.max}%.1f\")\n  stats.mean.foreach(m =&gt; println(f\"\u5e73\u5747: $m%.1f\"))\n\n  println(\"\\n=== \u5358\u8a9e\u30ab\u30a6\u30f3\u30c8 ===\")\n  val texts = List(\n    \"scala is fun\",\n    \"scala is powerful\",\n    \"fun and powerful\"\n  )\n\n  val wordCounts = texts.map { text =&gt;\n    text.split(\" \").groupBy(identity).map { case (word, occurrences) =&gt;\n      word -&gt; occurrences.length\n    }\n  }\n\n  val totalCounts = Monoid[Map[String, Int]].combineAll(wordCounts)\n  totalCounts.toList.sortBy(-_._2).foreach { case (word, count) =&gt;\n    println(f\"$word%-10s : $count \u56de\")\n  }\n</code></pre>"},{"location":"part7/chapter29/#functor","title":"\u95a2\u624b\uff08Functor\uff09\u578b\u30af\u30e9\u30b9","text":"<pre><code>// FunctorTypeClass.scala\n@main def functorTypeClass(): Unit =\n  // Functor\uff1amap\u30e1\u30bd\u30c3\u30c9\u3092\u6301\u3064\u30b3\u30f3\u30c6\u30ca\n  trait Functor[F[_]]:\n    def map[A, B](fa: F[A])(f: A =&gt; B): F[B]\n\n  object Functor:\n    // \u30ea\u30b9\u30c8\u306eFunctor\n    implicit val listFunctor: Functor[List] = new Functor[List]:\n      def map[A, B](fa: List[A])(f: A =&gt; B): List[B] = fa.map(f)\n\n    // Option\u306eFunctor\n    implicit val optionFunctor: Functor[Option] = new Functor[Option]:\n      def map[A, B](fa: Option[A])(f: A =&gt; B): Option[B] = fa.map(f)\n\n    // Either\u306eFunctor\uff08\u53f3\u5074\u306e\u307f\uff09\n    implicit def eitherFunctor[E]: Functor[Either[E, *]] = \n      new Functor[Either[E, *]]:\n        def map[A, B](fa: Either[E, A])(f: A =&gt; B): Either[E, B] = \n          fa.map(f)\n\n  // \u30ab\u30b9\u30bf\u30e0\u30b3\u30f3\u30c6\u30ca\n  case class Box[A](value: A)\n  case class Pair[A](first: A, second: A)\n\n  object Box:\n    implicit val boxFunctor: Functor[Box] = new Functor[Box]:\n      def map[A, B](fa: Box[A])(f: A =&gt; B): Box[B] = Box(f(fa.value))\n\n  object Pair:\n    implicit val pairFunctor: Functor[Pair] = new Functor[Pair]:\n      def map[A, B](fa: Pair[A])(f: A =&gt; B): Pair[B] = \n        Pair(f(fa.first), f(fa.second))\n\n  // \u6c4e\u7528\u7684\u306a\u95a2\u6570\n  def double[F[_]: Functor](fa: F[Int]): F[Int] =\n    implicitly[Functor[F]].map(fa)(_ * 2)\n\n  def toUpperCase[F[_]: Functor](fa: F[String]): F[String] =\n    implicitly[Functor[F]].map(fa)(_.toUpperCase)\n\n  // Functor\u306e\u6cd5\u5247\u3092\u78ba\u8a8d\u3059\u308b\u95a2\u6570\n  def checkFunctorLaws[F[_]: Functor, A](fa: F[A]): Unit =\n    val functor = implicitly[Functor[F]]\n\n    // \u6052\u7b49\u6cd5\u5247: map(fa)(identity) == fa\n    val identity = functor.map(fa)(x =&gt; x)\n    println(s\"\u6052\u7b49\u6cd5\u5247: ${fa} == ${identity}\")\n\n  // \u4f7f\u7528\u4f8b\n  println(\"=== \u30ea\u30b9\u30c8\u306eFunctor ===\")\n  val numbers = List(1, 2, 3, 4, 5)\n  println(s\"\u5143: $numbers\")\n  println(s\"2\u500d: ${double(numbers)}\")\n\n  println(\"\\n=== Option\u306eFunctor ===\")\n  val someValue = Some(10)\n  val noneValue = None: Option[Int]\n  println(s\"Some(10)\u306e2\u500d: ${double(someValue)}\")\n  println(s\"None\u306e2\u500d: ${double(noneValue)}\")\n\n  println(\"\\n=== \u30ab\u30b9\u30bf\u30e0\u578b\u306eFunctor ===\")\n  val box = Box(\"hello\")\n  val pair = Pair(\"scala\", \"java\")\n\n  println(s\"Box: ${toUpperCase(box)}\")\n  println(s\"Pair: ${toUpperCase(pair)}\")\n\n  println(\"\\n=== Functor\u306e\u6cd5\u5247 ===\")\n  checkFunctorLaws(List(1, 2, 3))\n  checkFunctorLaws(Some(\"test\"))\n  checkFunctorLaws(Box(42))\n</code></pre>"},{"location":"part7/chapter29/#_9","title":"\u7df4\u7fd2\u3057\u3066\u307f\u3088\u3046\uff01","text":""},{"location":"part7/chapter29/#1showable","title":"\u7df4\u7fd21\uff1aShowable\u578b\u30af\u30e9\u30b9","text":"<p>\u69d8\u3005\u306a\u578b\u3092\u7f8e\u3057\u304f\u8868\u793a\u3059\u308b\u578b\u30af\u30e9\u30b9\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\uff1a - \u57fa\u672c\u578b\uff08Int, String, Boolean\uff09 - \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u578b\uff08List, Set, Map\uff09 - \u30ab\u30b9\u30bf\u30e0\u578b\uff08Person, Address\uff09</p>"},{"location":"part7/chapter29/#2validation","title":"\u7df4\u7fd22\uff1aValidation\u578b\u30af\u30e9\u30b9","text":"<p>\u30c7\u30fc\u30bf\u691c\u8a3c\u306e\u305f\u3081\u306e\u578b\u30af\u30e9\u30b9\u3092\u5b9f\u88c5\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - \u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u306e\u691c\u8a3c - \u5e74\u9f62\u306e\u691c\u8a3c - \u30d1\u30b9\u30ef\u30fc\u30c9\u5f37\u5ea6\u306e\u691c\u8a3c</p>"},{"location":"part7/chapter29/#3serializable","title":"\u7df4\u7fd23\uff1aSerializable\u578b\u30af\u30e9\u30b9","text":"<p>\u30c7\u30fc\u30bf\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba/\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3092\u884c\u3046\u578b\u30af\u30e9\u30b9\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\uff1a - \u30d0\u30a4\u30ca\u30ea\u5f62\u5f0f - JSON\u5f62\u5f0f - XML\u5f62\u5f0f</p>"},{"location":"part7/chapter29/#_10","title":"\u3053\u306e\u7ae0\u306e\u307e\u3068\u3081","text":"<p>\u578b\u30af\u30e9\u30b9\u30d1\u30bf\u30fc\u30f3\u306e\u5f37\u529b\u3055\u3092\u5b9f\u611f\u3067\u304d\u307e\u3057\u305f\u306d\uff01</p>"},{"location":"part7/chapter29/#_11","title":"\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3053\u3068","text":"<p>\u2705 \u578b\u30af\u30e9\u30b9\u306e\u57fa\u672c - trait\u5b9a\u7fa9 - \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5b9f\u88c5 - \u6697\u9ed9\u306e\u89e3\u6c7a</p> <p>\u2705 \u578b\u30af\u30e9\u30b9\u306e\u5408\u6210 - \u81ea\u52d5\u5c0e\u51fa - \u9ad8\u968e\u578b\u30af\u30e9\u30b9 - \u518d\u5e30\u7684\u306a\u69cb\u9020</p> <p>\u2705 \u5b9f\u8df5\u7684\u306a\u578b\u30af\u30e9\u30b9 - Show, Eq, Ordering - JsonEncoder - Monoid, Functor</p> <p>\u2705 \u8a2d\u8a08\u30d1\u30bf\u30fc\u30f3 - \u62e1\u5f35\u30e1\u30bd\u30c3\u30c9 - \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u5883\u754c - \u578b\u30af\u30e9\u30b9\u306e\u6cd5\u5247</p>"},{"location":"part7/chapter29/#_12","title":"\u578b\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u30b3\u30c4","text":"<ol> <li> <p>\u5c0f\u3055\u304f\u59cb\u3081\u308b</p> <ul> <li>\u5358\u4e00\u306e\u8cac\u4efb</li> <li>\u660e\u78ba\u306a\u6cd5\u5247</li> <li>\u30c6\u30b9\u30c8\u53ef\u80fd</li> </ul> </li> <li> <p>\u5408\u6210\u53ef\u80fd\u306b\u3059\u308b</p> <ul> <li>\u81ea\u52d5\u5c0e\u51fa\u306e\u6d3b\u7528</li> <li>\u65e2\u5b58\u306e\u578b\u3078\u306e\u5bfe\u5fdc</li> <li>\u65b0\u3057\u3044\u578b\u3078\u306e\u62e1\u5f35</li> </ul> </li> <li> <p>\u4f7f\u3044\u3084\u3059\u304f\u3059\u308b</p> <ul> <li>\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9</li> <li>\u4fbf\u5229\u306a\u69cb\u6587</li> <li>\u826f\u3044\u30c7\u30d5\u30a9\u30eb\u30c8</li> </ul> </li> </ol>"},{"location":"part7/chapter29/#_13","title":"\u6b21\u306e\u7ae0\u3067\u306f...","text":"<p>for\u5f0f\u306e\u5185\u90e8\u52d5\u4f5c\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3059\u3002\u30e2\u30ca\u30c9\u306e\u4e16\u754c\u3078\u306e\u5165\u308a\u53e3\u3092\u958b\u304d\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part7/chapter29/#_14","title":"\u6700\u5f8c\u306b","text":"<p>\u578b\u30af\u30e9\u30b9\u306f\u300c\u5f8c\u4ed8\u3051\u3067\u304d\u308b\u80fd\u529b\u300d\u3067\u3059\u3002\u65e2\u5b58\u306e\u578b\u306b\u65b0\u3057\u3044\u6a5f\u80fd\u3092\u8ffd\u52a0\u3067\u304d\u308b\u3001\u307e\u308b\u3067\u9b54\u6cd5\u306e\u3088\u3046\u306a\u4ed5\u7d44\u307f\u3002\u3053\u306e\u67d4\u8edf\u6027\u3068\u62e1\u5f35\u6027\u304c\u3001\u5927\u898f\u6a21\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3082\u6574\u7406\u3055\u308c\u305f\u8a2d\u8a08\u3092\u53ef\u80fd\u306b\u3057\u307e\u3059\u3002\u578b\u30af\u30e9\u30b9\u30de\u30b9\u30bf\u30fc\u3078\u306e\u9053\u306f\u958b\u304b\u308c\u307e\u3057\u305f\uff01</p>"},{"location":"part7/chapter30/","title":"\u7b2c30\u7ae0 for\u5f0f\u306e\u5185\u90e8\u52d5\u4f5c","text":""},{"location":"part7/chapter30/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u96fb\u8eca\u306e\u4e57\u308a\u63db\u3048\u3092\u8003\u3048\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\u300c\u65b0\u5bbf\u304b\u3089\u6e0b\u8c37\u3078\u884c\u304f\u300d\u3068\u304d\u3001\u3044\u304f\u3064\u304b\u306e\u8def\u7dda\u306e\u9078\u629e\u80a2\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u308c\u305e\u308c\u306e\u8def\u7dda\u3067\u3001\u305d\u308c\u305e\u308c\u306e\u99c5\u3092\u7d4c\u7531\u3057\u3066\u3001\u6700\u7d42\u7684\u306b\u76ee\u7684\u5730\u306b\u7740\u304f\u3002\u9014\u4e2d\u3067\u4e57\u308a\u63db\u3048\u306b\u5931\u6557\u3057\u305f\u3089\u3001\u305d\u3053\u3067\u7d42\u4e86\u3067\u3059\u3002</p> <p>Scala\u306efor\u5f0f\u3082\u540c\u3058\u3067\u3059\u3002\u4e00\u898b\u30b7\u30f3\u30d7\u30eb\u306a\u69cb\u6587\u306e\u88cf\u5074\u3067\u3001\u8907\u96d1\u306a\u51e6\u7406\u306e\u9023\u9396\u3092\u7f8e\u3057\u304f\u8868\u73fe\u3057\u3066\u3044\u308b\u3093\u3067\u3059\uff01</p>"},{"location":"part7/chapter30/#for","title":"for\u5f0f\u306e\u57fa\u672c\u3092\u632f\u308a\u8fd4\u308b","text":""},{"location":"part7/chapter30/#for_1","title":"\u30b7\u30f3\u30d7\u30eb\u306afor\u5f0f","text":"<pre><code>// ForExpressionBasics.scala\n@main def forExpressionBasics(): Unit = {\n  // \u57fa\u672c\u7684\u306afor\u5f0f\n  val numbers = List(1, 2, 3, 4, 5)\n\n  println(\"=== \u57fa\u672c\u7684\u306afor\u5f0f ===\")\n  for (n &lt;- numbers) {\n    println(s\"\u6570\u5024: $n\")\n  }\n\n  // \u3053\u308c\u306f\u5b9f\u969b\u306b\u306f\u4ee5\u4e0b\u3068\u540c\u3058\n  println(\"\\n=== map\u3092\u4f7f\u3063\u305f\u540c\u7b49\u306e\u51e6\u7406 ===\")\n  numbers.foreach(n =&gt; println(s\"\u6570\u5024: $n\"))\n\n  // yield\u4ed8\u304dfor\u5f0f\n  val doubled = for n &lt;- numbers yield n * 2\n  println(s\"\\n2\u500d: $doubled\")\n\n  // \u3053\u308c\u306f\u5b9f\u969b\u306b\u306f\u4ee5\u4e0b\u3068\u540c\u3058\n  val doubled2 = numbers.map(n =&gt; n * 2)\n  println(s\"map\u306e\u7d50\u679c: $doubled2\")\n\n  // \u8907\u6570\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n  val pairs = for {\n    x &lt;- List(1, 2, 3)\n    y &lt;- List('a', 'b')\n  } yield (x, y)\n\n  println(s\"\\n\u30da\u30a2: $pairs\")\n\n  // \u3053\u308c\u306f\u5b9f\u969b\u306b\u306f\u4ee5\u4e0b\u3068\u540c\u3058\n  val pairs2 = List(1, 2, 3).flatMap(x =&gt;\n    List('a', 'b').map(y =&gt; (x, y))\n  )\n  println(s\"flatMap/map\u306e\u7d50\u679c: $pairs2\")\n</code></pre>"},{"location":"part7/chapter30/#for_2","title":"\u30d5\u30a3\u30eb\u30bf\u4ed8\u304dfor\u5f0f","text":"<pre><code>// ForWithFilters.scala\n@main def forWithFilters(): Unit = {\n  // \u30d5\u30a3\u30eb\u30bf\uff08if\u6761\u4ef6\uff09\u4ed8\u304dfor\u5f0f\n  val numbers = 1 to 10\n\n  val evens = for {\n    n &lt;- numbers\n    if n % 2 == 0\n  } yield n\n\n  println(s\"\u5076\u6570: $evens\")\n\n  // \u3053\u308c\u306f\u5b9f\u969b\u306b\u306f\u4ee5\u4e0b\u3068\u540c\u3058\n  val evens2 = numbers\n    .filter(n =&gt; n % 2 == 0)\n    .map(n =&gt; n)\n\n  println(s\"filter/map\u306e\u7d50\u679c: $evens2\")\n\n  // \u8907\u6570\u306e\u6761\u4ef6\n  val result = for {\n    x &lt;- 1 to 5\n    y &lt;- 1 to 5\n    if x &lt; y\n    if x + y &gt; 5\n  } yield (x, y)\n\n  println(s\"\\n\u6761\u4ef6\u3092\u6e80\u305f\u3059\u30da\u30a2: $result\")\n\n  // \u3053\u308c\u306f\u5b9f\u969b\u306b\u306f\u4ee5\u4e0b\u3068\u540c\u3058\n  val result2 = (1 to 5).flatMap(x =&gt;\n    (1 to 5)\n      .filter(y =&gt; x &lt; y)\n      .filter(y =&gt; x + y &gt; 5)\n      .map(y =&gt; (x, y))\n  )\n\n  println(s\"\u5c55\u958b\u3057\u305f\u7d50\u679c: $result2\")\n</code></pre>"},{"location":"part7/chapter30/#for_3","title":"for\u5f0f\u306e\u5909\u63db\u898f\u5247","text":""},{"location":"part7/chapter30/#_2","title":"\u57fa\u672c\u7684\u306a\u5909\u63db","text":"<pre><code>// ForTransformation.scala\n@main def forTransformation(): Unit = {\n  // 1. \u5358\u4e00\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf + yield\n  // for x &lt;- expr yield f(x)\n  // =&gt; expr.map(x =&gt; f(x))\n\n  val list1 = for x &lt;- List(1, 2, 3) yield x * x\n  val list2 = List(1, 2, 3).map(x =&gt; x * x)\n  println(s\"\u5358\u4e00\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf: $list1 == $list2\")\n\n  // 2. \u5358\u4e00\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\uff08yield\u306a\u3057\uff09\n  // for x &lt;- expr do action(x)\n  // =&gt; expr.foreach(x =&gt; action(x))\n\n  var sum1 = 0\n  for (x &lt;- List(1, 2, 3)) {\n    sum1 += x\n  }\n\n  var sum2 = 0\n  List(1, 2, 3).foreach(x =&gt; sum2 += x)\n  println(s\"\u526f\u4f5c\u7528: sum1=$sum1, sum2=$sum2\")\n\n  // 3. \u8907\u6570\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n  // for x &lt;- expr1; y &lt;- expr2 yield f(x, y)\n  // =&gt; expr1.flatMap(x =&gt; expr2.map(y =&gt; f(x, y)))\n\n  val pairs1 = for {\n    x &lt;- List(1, 2)\n    y &lt;- List('a', 'b')\n  } yield s\"$x$y\"\n\n  val pairs2 = List(1, 2).flatMap(x =&gt;\n    List('a', 'b').map(y =&gt; s\"$x$y\")\n  )\n  println(s\"\u8907\u6570\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf: $pairs1 == $pairs2\")\n\n  // 4. \u30d5\u30a3\u30eb\u30bf\u4ed8\u304d\n  // for x &lt;- expr if p(x) yield f(x)\n  // =&gt; expr.filter(p).map(f)\n\n  val filtered1 = for {\n    x &lt;- 1 to 10\n    if x % 3 == 0\n  } yield x * 2\n\n  val filtered2 = (1 to 10)\n    .filter(x =&gt; x % 3 == 0)\n    .map(x =&gt; x * 2)\n\n  println(s\"\u30d5\u30a3\u30eb\u30bf\u4ed8\u304d: $filtered1 == $filtered2\")\n</code></pre>"},{"location":"part7/chapter30/#for_4","title":"\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u3068for\u5f0f","text":"<pre><code>// ForPatternMatching.scala\n@main def forPatternMatching(): Unit = {\n  val pairs = List((1, \"one\"), (2, \"two\"), (3, \"three\"))\n\n  // \u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u3092\u4f7f\u3063\u305ffor\u5f0f\n  val result1 = for (num, word) &lt;- pairs yield s\"$num: $word\"\n  println(s\"\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1: $result1\")\n\n  // \u5b9f\u969b\u306e\u5909\u63db\n  val result2 = pairs.map { case (num, word) =&gt; s\"$num: $word\" }\n  println(s\"\u5c55\u958b\u5f8c: $result2\")\n\n  // \u90e8\u5206\u7684\u306a\u30de\u30c3\u30c1\n  val mixed = List(\n    Some(1),\n    None,\n    Some(2),\n    Some(3),\n    None\n  )\n\n  val values1 = for Some(x) &lt;- mixed yield x * 2\n  println(s\"\\nSome\u306e\u307f: $values1\")\n\n  // \u5b9f\u969b\u306e\u5909\u63db\uff08\u30d5\u30a3\u30eb\u30bf\u4ed8\u304d\uff09\n  val values2 = mixed.collect { case Some(x) =&gt; x * 2 }\n  println(s\"collect\u4f7f\u7528: $values2\")\n\n  // \u30cd\u30b9\u30c8\u3057\u305f\u30d1\u30bf\u30fc\u30f3\n  val nested = List(\n    (\"A\", Some(1)),\n    (\"B\", None),\n    (\"C\", Some(3))\n  )\n\n  val extracted = for {\n    (label, Some(value)) &lt;- nested\n  } yield s\"$label=$value\"\n\n  println(s\"\\n\u30cd\u30b9\u30c8\u30d1\u30bf\u30fc\u30f3: $extracted\")\n</code></pre>"},{"location":"part7/chapter30/#optioneithertryfor","title":"Option\u3001Either\u3001Try\u3067\u306efor\u5f0f","text":""},{"location":"part7/chapter30/#optionfor","title":"Option\u3068for\u5f0f","text":"<pre><code>// ForWithOption.scala\n@main def forWithOption(): Unit = {\n  // Option\u3092\u4f7f\u3063\u305f\u5b89\u5168\u306a\u8a08\u7b97\n  def parseInt(s: String): Option[Int] =\n    try {\n      Some(s.toInt)\n    } catch {\n      case _: NumberFormatException =&gt; None\n    }\n\n  def divide(a: Int, b: Int): Option[Double] =\n    if (b != 0) Some(a.toDouble / b) else None\n\n  // for\u5f0f\u3067\u9023\u9396\n  val result1 = for {\n    a &lt;- parseInt(\"10\")\n    b &lt;- parseInt(\"2\")\n    c &lt;- divide(a, b)\n  } yield c\n\n  println(s\"\u6210\u529f\u30b1\u30fc\u30b9: $result1\")\n\n  // \u5b9f\u969b\u306e\u5909\u63db\n  val result2 = parseInt(\"10\").flatMap(a =&gt;\n    parseInt(\"2\").flatMap(b =&gt;\n      divide(a, b).map(c =&gt; c)\n    )\n  )\n\n  println(s\"\u5c55\u958b\u5f8c: $result2\")\n\n  // \u30a8\u30e9\u30fc\u30b1\u30fc\u30b9\n  val error1 = for {\n    a &lt;- parseInt(\"10\")\n    b &lt;- parseInt(\"0\")\n    c &lt;- divide(a, b)  // \u3053\u3053\u3067\u5931\u6557\n  } yield c\n\n  println(s\"\\n\u30a8\u30e9\u30fc\u30b1\u30fc\u30b9: $error1\")\n\n  // \u8907\u96d1\u306a\u4f8b\n  case class User(id: Int, name: String)\n  case class Account(userId: Int, balance: Double)\n\n  def findUser(id: Int): Option[User] =\n    if (id &gt; 0) Some(User(id, s\"User$id\")) else None\n\n  def findAccount(userId: Int): Option[Account] =\n    if (userId &gt; 0) Some(Account(userId, 1000.0 * userId)) else None\n\n  def checkBalance(account: Account, amount: Double): Option[Boolean] =\n    Some(account.balance &gt;= amount)\n\n  val transaction = for {\n    user &lt;- findUser(123)\n    account &lt;- findAccount(user.id)\n    canWithdraw &lt;- checkBalance(account, 500)\n  } yield (user.name, account.balance, canWithdraw)\n\n  println(s\"\\n\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3: $transaction\")\n</code></pre>"},{"location":"part7/chapter30/#eitherfor","title":"Either\u3068for\u5f0f","text":"<pre><code>// ForWithEither.scala\n@main def forWithEither(): Unit = {\n  // \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u4ed8\u304d\u8a08\u7b97\n  type Result[A] = Either[String, A]\n\n  def parseIntE(s: String): Result[Int] =\n    try {\n      Right(s.toInt)\n    } catch {\n      case _: NumberFormatException =&gt; Left(s\"'$s'\u306f\u6570\u5024\u3067\u306f\u3042\u308a\u307e\u305b\u3093\")\n    }\n\n  def divideE(a: Int, b: Int): Result[Double] =\n    if (b != 0) Right(a.toDouble / b)\n    else Left(\"\u30bc\u30ed\u9664\u7b97\u30a8\u30e9\u30fc\")\n\n  def sqrtE(x: Double): Result[Double] =\n    if (x &gt;= 0) Right(math.sqrt(x))\n    else Left(s\"\u8ca0\u306e\u6570\u306e\u5e73\u65b9\u6839: $x\")\n\n  // \u6210\u529f\u30b1\u30fc\u30b9\n  val success = for {\n    a &lt;- parseIntE(\"100\")\n    b &lt;- parseIntE(\"4\")\n    divided &lt;- divideE(a, b)\n    result &lt;- sqrtE(divided)\n  } yield result\n\n  println(s\"\u6210\u529f: $success\")\n\n  // \u30a8\u30e9\u30fc\u30b1\u30fc\u30b9\uff08\u6700\u521d\u306e\u30a8\u30e9\u30fc\u3067\u505c\u6b62\uff09\n  val error = for {\n    a &lt;- parseIntE(\"abc\")  // \u3053\u3053\u3067\u30a8\u30e9\u30fc\n    b &lt;- parseIntE(\"4\")\n    divided &lt;- divideE(a, b)\n    result &lt;- sqrtE(divided)\n  } yield result\n\n  println(s\"\u30a8\u30e9\u30fc: $error\")\n\n  // \u5b9f\u969b\u306e\u5909\u63db\u3092\u7406\u89e3\u3059\u308b\n  val manual = parseIntE(\"100\").flatMap { a =&gt;\n    parseIntE(\"4\").flatMap { b =&gt;\n      divideE(a, b).flatMap { divided =&gt;\n        sqrtE(divided).map { result =&gt;\n          result\n        }\n      }\n    }\n  }\n\n  println(s\"\u624b\u52d5\u5c55\u958b: $manual\")\n</code></pre>"},{"location":"part7/chapter30/#for_5","title":"\u30ab\u30b9\u30bf\u30e0\u578b\u3067for\u5f0f\u3092\u4f7f\u3046","text":""},{"location":"part7/chapter30/#_3","title":"\u72ec\u81ea\u306e\u30b3\u30f3\u30c6\u30ca\u578b","text":"<pre><code>// CustomForComprehension.scala\n@main def customForComprehension(): Unit = {\n  // \u72ec\u81ea\u306eMaybe\u578b\n  sealed trait Maybe[+A]:\n    def map[B](f: A =&gt; B): Maybe[B]\n    def flatMap[B](f: A =&gt; Maybe[B]): Maybe[B]\n    def filter(p: A =&gt; Boolean): Maybe[A]\n\n  case class Just[A](value: A) extends Maybe[A]:\n    def map[B](f: A =&gt; B): Maybe[B] = Just(f(value))\n    def flatMap[B](f: A =&gt; Maybe[B]): Maybe[B] = f(value)\n    def filter(p: A =&gt; Boolean): Maybe[A] = \n      if (p(value)) this else Empty\n\n  case object Empty extends Maybe[Nothing]:\n    def map[B](f: Nothing =&gt; B): Maybe[B] = Empty\n    def flatMap[B](f: Nothing =&gt; Maybe[B]): Maybe[B] = Empty\n    def filter(p: Nothing =&gt; Boolean): Maybe[Nothing] = Empty\n\n  // for\u5f0f\u304c\u4f7f\u3048\u308b\uff01\n  val result = for {\n    x &lt;- Just(10)\n    y &lt;- Just(20)\n    if x &lt; y\n  } yield x + y\n\n  println(s\"Maybe\u578b\u3067\u306efor\u5f0f: $result\")\n\n  // \u30ed\u30b0\u4ed8\u304d\u30b3\u30f3\u30c6\u30ca\n  case class Logged[A](value: A, log: List[String]):\n    def map[B](f: A =&gt; B): Logged[B] =\n      Logged(f(value), log)\n\n    def flatMap[B](f: A =&gt; Logged[B]): Logged[B] =\n      val Logged(newValue, newLog) = f(value)\n      Logged(newValue, log ++ newLog)\n\n    def withFilter(p: A =&gt; Boolean): Logged[A] =\n      if p(value) then this\n      else Logged(value, log :+ s\"\u30d5\u30a3\u30eb\u30bf\u5931\u6557: $value\")\n\n  def addWithLog(x: Int, y: Int): Logged[Int] =\n    Logged(x + y, List(s\"$x + $y = ${x + y}\"))\n\n  def multiplyWithLog(x: Int, y: Int): Logged[Int] =\n    Logged(x * y, List(s\"$x * $y = ${x * y}\"))\n\n  val calculation = for\n    a &lt;- Logged(10, List(\"\u521d\u671f\u5024: 10\"))\n    b &lt;- addWithLog(a, 5)\n    c &lt;- multiplyWithLog(b, 2)\n  yield c\n\n  println(s\"\\n\u8a08\u7b97\u7d50\u679c: ${calculation.value}\")\n  println(\"\u30ed\u30b0:\")\n  calculation.log.foreach(msg =&gt; println(s\"  $msg\"))\n</code></pre>"},{"location":"part7/chapter30/#_4","title":"\u30e2\u30ca\u30c9\u5247","text":"<pre><code>// MonadLaws.scala\n@main def monadLaws(): Unit =\n  // \u30e2\u30ca\u30c9\u5247\u3092\u78ba\u8a8d\n  trait Monad[F[_]]:\n    def pure[A](a: A): F[A]\n    def flatMap[A, B](fa: F[A])(f: A =&gt; F[B]): F[B]\n\n    // map \u306fflatMap\u3068pure\u304b\u3089\u5c0e\u51fa\n    def map[A, B](fa: F[A])(f: A =&gt; B): F[B] =\n      flatMap(fa)(a =&gt; pure(f(a)))\n\n  // Option\u306e\u30e2\u30ca\u30c9\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\n  given optionMonad: Monad[Option] with\n    def pure[A](a: A): Option[A] = Some(a)\n    def flatMap[A, B](fa: Option[A])(f: A =&gt; Option[B]): Option[B] =\n      fa.flatMap(f)\n\n  // \u30e2\u30ca\u30c9\u5247\u306e\u78ba\u8a8d\n  def checkMonadLaws[F[_]: Monad, A, B, C](\n    a: A,\n    f: A =&gt; F[B],\n    g: B =&gt; F[C]\n  )(fa: F[A]): Unit =\n    val m = summon[Monad[F]]\n\n    // \u5de6\u5358\u4f4d\u5143\u5247: pure(a).flatMap(f) == f(a)\n    val law1Left = m.flatMap(m.pure(a))(f)\n    val law1Right = f(a)\n    println(s\"\u5de6\u5358\u4f4d\u5143\u5247: $law1Left == $law1Right\")\n\n    // \u53f3\u5358\u4f4d\u5143\u5247: fa.flatMap(pure) == fa\n    val law2Left = m.flatMap(fa)(m.pure)\n    val law2Right = fa\n    println(s\"\u53f3\u5358\u4f4d\u5143\u5247: $law2Left == $law2Right\")\n\n    // \u7d50\u5408\u5247: fa.flatMap(f).flatMap(g) == fa.flatMap(x =&gt; f(x).flatMap(g))\n    val law3Left = m.flatMap(m.flatMap(fa)(f))(g)\n    val law3Right = m.flatMap(fa)(x =&gt; m.flatMap(f(x))(g))\n    println(s\"\u7d50\u5408\u5247: $law3Left == $law3Right\")\n\n  // \u30c6\u30b9\u30c8\n  println(\"=== Option\u306e\u30e2\u30ca\u30c9\u5247 ===\")\n  checkMonadLaws[Option, Int, String, Int](\n    42,\n    x =&gt; Some(x.toString),\n    s =&gt; Some(s.length)\n  )(Some(10))\n\n  // for\u5f0f\u3067\u306e\u78ba\u8a8d\n  println(\"\\n=== for\u5f0f\u3068\u30e2\u30ca\u30c9\u5247 ===\")\n\n  // \u5de6\u5358\u4f4d\u5143\u5247\u306efor\u5f0f\u8868\u73fe\n  val a = 42\n  val f: Int =&gt; Option[String] = x =&gt; Some(x.toString)\n\n  val forResult1 = for\n    x &lt;- Some(a)\n    y &lt;- f(x)\n  yield y\n\n  val directResult1 = f(a)\n  println(s\"for\u5f0f: $forResult1 == \u76f4\u63a5: $directResult1\")\n\n  // \u7d50\u5408\u5247\u306efor\u5f0f\u8868\u73fe\n  val g: String =&gt; Option[Int] = s =&gt; Some(s.length)\n\n  val forResult2 = for\n    x &lt;- Some(10)\n    y &lt;- f(x)\n    z &lt;- g(y)\n  yield z\n\n  val nestedResult = Some(10).flatMap(x =&gt; \n    f(x).flatMap(y =&gt; g(y))\n  )\n  println(s\"for\u5f0f: $forResult2 == \u30cd\u30b9\u30c8: $nestedResult\")\n</code></pre>"},{"location":"part7/chapter30/#_5","title":"\u5b9f\u8df5\u4f8b\uff1a\u975e\u540c\u671f\u51e6\u7406\u306e\u5408\u6210","text":"<pre><code>// AsyncForComprehension.scala\n@main def asyncForComprehension(): Unit =\n  import scala.concurrent.{Future, Promise}\n  import scala.concurrent.ExecutionContext.Implicits.global\n  import scala.concurrent.duration._\n  import scala.util.{Success, Failure}\n\n  // \u975e\u540c\u671fAPI\n  def fetchUser(id: Int): Future[String] = Future {\n    Thread.sleep(100)\n    s\"User$id\"\n  }\n\n  def fetchScore(user: String): Future[Int] = Future {\n    Thread.sleep(100)\n    user.length * 10\n  }\n\n  def fetchRank(score: Int): Future[String] = Future {\n    Thread.sleep(100)\n    if score &gt; 50 then \"Gold\" \n    else if score &gt; 30 then \"Silver\"\n    else \"Bronze\"\n  }\n\n  // for\u5f0f\u3067\u975e\u540c\u671f\u51e6\u7406\u3092\u5408\u6210\n  val result = for\n    user &lt;- fetchUser(123)\n    score &lt;- fetchScore(user)\n    rank &lt;- fetchRank(score)\n  yield s\"$user: $score points ($rank)\"\n\n  // \u5b9f\u969b\u306e\u5909\u63db\n  val manual = fetchUser(123).flatMap { user =&gt;\n    fetchScore(user).flatMap { score =&gt;\n      fetchRank(score).map { rank =&gt;\n        s\"$user: $score points ($rank)\"\n      }\n    }\n  }\n\n  // \u7d50\u679c\u3092\u5f85\u3064\n  result.onComplete {\n    case Success(value) =&gt; println(s\"\u6210\u529f: $value\")\n    case Failure(error) =&gt; println(s\"\u30a8\u30e9\u30fc: $error\")\n  }\n\n  Thread.sleep(500)\n\n  // \u4e26\u5217\u5b9f\u884c\n  println(\"\\n=== \u4e26\u5217\u5b9f\u884c ===\")\n\n  val parallel = for\n    (user1, user2) &lt;- fetchUser(1).zip(fetchUser(2))\n    (score1, score2) &lt;- fetchScore(user1).zip(fetchScore(user2))\n  yield s\"$user1=$score1, $user2=$score2\"\n\n  parallel.onComplete {\n    case Success(value) =&gt; println(s\"\u4e26\u5217\u7d50\u679c: $value\")\n    case Failure(error) =&gt; println(s\"\u30a8\u30e9\u30fc: $error\")\n  }\n\n  Thread.sleep(300)\n</code></pre>"},{"location":"part7/chapter30/#_6","title":"\u7df4\u7fd2\u3057\u3066\u307f\u3088\u3046\uff01","text":""},{"location":"part7/chapter30/#1state","title":"\u7df4\u7fd21\uff1aState\u30e2\u30ca\u30c9","text":"<p>\u72b6\u614b\u3092\u6301\u3064\u8a08\u7b97\u3092\u8868\u73fe\u3059\u308bState\u30e2\u30ca\u30c9\u3092\u5b9f\u88c5\u3057\u3066\u3001for\u5f0f\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - \u72b6\u614b\u306e\u8aad\u307f\u53d6\u308a - \u72b6\u614b\u306e\u66f4\u65b0 - \u8a08\u7b97\u306e\u9023\u9396</p>"},{"location":"part7/chapter30/#2writer","title":"\u7df4\u7fd22\uff1aWriter\u30e2\u30ca\u30c9","text":"<p>\u30ed\u30b0\u3092\u84c4\u7a4d\u3057\u306a\u304c\u3089\u8a08\u7b97\u3059\u308bWriter\u30e2\u30ca\u30c9\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\uff1a - \u5024\u3068\u30ed\u30b0\u306e\u7d44\u307f\u5408\u308f\u305b - \u30ed\u30b0\u306e\u7d50\u5408 - for\u5f0f\u3067\u306e\u4f7f\u7528</p>"},{"location":"part7/chapter30/#3io","title":"\u7df4\u7fd23\uff1aIO \u30e2\u30ca\u30c9","text":"<p>\u526f\u4f5c\u7528\u3092\u8868\u73fe\u3059\u308bIO\u30e2\u30ca\u30c9\u3092\u5b9f\u88c5\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - \u9045\u5ef6\u8a55\u4fa1 - \u526f\u4f5c\u7528\u306e\u5408\u6210 - \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0</p>"},{"location":"part7/chapter30/#_7","title":"\u3053\u306e\u7ae0\u306e\u307e\u3068\u3081","text":"<p>for\u5f0f\u306e\u5185\u90e8\u52d5\u4f5c\u3092\u6df1\u304f\u7406\u89e3\u3067\u304d\u307e\u3057\u305f\uff01</p>"},{"location":"part7/chapter30/#_8","title":"\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3053\u3068","text":"<p>\u2705 for\u5f0f\u306e\u5909\u63db\u898f\u5247 - map\u3001flatMap\u3001filter \u3078\u306e\u5909\u63db - yield \u306e\u6709\u7121\u306b\u3088\u308b\u9055\u3044 - \u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u306e\u5c55\u958b</p> <p>\u2705 \u69d8\u3005\u306a\u578b\u3067\u306e\u4f7f\u7528 - Option\u3001Either\u3001Try - Future \u3067\u306e\u975e\u540c\u671f\u51e6\u7406 - \u30ab\u30b9\u30bf\u30e0\u578b\u306e\u5b9f\u88c5</p> <p>\u2705 \u30e2\u30ca\u30c9\u306e\u7406\u89e3 - \u30e2\u30ca\u30c9\u5247 - flatMap \u306e\u91cd\u8981\u6027 - \u8a08\u7b97\u306e\u5408\u6210</p> <p>\u2705 \u5b9f\u8df5\u7684\u306a\u5fdc\u7528 - \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0 - \u975e\u540c\u671f\u51e6\u7406 - \u30ed\u30b0\u4ed8\u304d\u8a08\u7b97</p>"},{"location":"part7/chapter30/#for_6","title":"for\u5f0f\u3092\u4f7f\u3044\u3053\u306a\u3059\u30b3\u30c4","text":"<ol> <li> <p>\u5185\u90e8\u52d5\u4f5c\u3092\u7406\u89e3\u3059\u308b</p> <ul> <li>map\u3001flatMap \u3078\u306e\u5909\u63db</li> <li>\u3069\u3053\u3067\u5931\u6557\u3059\u308b\u304b</li> <li>\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3078\u306e\u5f71\u97ff</li> </ul> </li> <li> <p>\u9069\u5207\u306a\u578b\u3092\u9078\u3076</p> <ul> <li>Option\uff1a\u5024\u306e\u6709\u7121</li> <li>Either\uff1a\u30a8\u30e9\u30fc\u60c5\u5831</li> <li>Future\uff1a\u975e\u540c\u671f\u51e6\u7406</li> </ul> </li> <li> <p>\u8aad\u307f\u3084\u3059\u3055\u3092\u91cd\u8996</p> <ul> <li>\u30cd\u30b9\u30c8\u3092\u907f\u3051\u308b</li> <li>\u610f\u5473\u306e\u3042\u308b\u5909\u6570\u540d</li> <li>\u9069\u5ea6\u306a\u5206\u5272</li> </ul> </li> </ol>"},{"location":"part7/chapter30/#_9","title":"\u6b21\u306e\u90e8\u3067\u306f...","text":"<p>\u7b2cVIII\u90e8\u3067\u306f\u3001\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u4f7f\u3044\u3053\u306a\u3057\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3059\u3002\u52b9\u7387\u7684\u306a\u30c7\u30fc\u30bf\u51e6\u7406\u306e\u30c6\u30af\u30cb\u30c3\u30af\u3092\u7fd2\u5f97\u3057\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part7/chapter30/#_10","title":"\u6700\u5f8c\u306b","text":"<p>for\u5f0f\u306f\u300c\u30e2\u30ca\u30c9\u306e\u7cd6\u8863\u69cb\u6587\u300d\u3068\u547c\u3070\u308c\u307e\u3059\u3002\u96e3\u3057\u305d\u3046\u306b\u805e\u3053\u3048\u307e\u3059\u304c\u3001\u5b9f\u306f\u300c\u8a08\u7b97\u306e\u9023\u9396\u3092\u7f8e\u3057\u304f\u66f8\u304f\u65b9\u6cd5\u300d\u306a\u3093\u3067\u3059\u3002map\u3001flatMap\u306e\u9023\u9396\u3092\u3001\u307e\u308b\u3067\u666e\u901a\u306e\u624b\u7d9a\u304d\u7684\u306a\u30b3\u30fc\u30c9\u306e\u3088\u3046\u306b\u66f8\u3051\u308b\u3002\u3053\u306e\u9b54\u6cd5\u3092\u4f7f\u3044\u3053\u306a\u305b\u3070\u3001\u8907\u96d1\u306a\u51e6\u7406\u3082\u9a5a\u304f\u307b\u3069\u30b7\u30f3\u30d7\u30eb\u306b\u8868\u73fe\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff01</p>"},{"location":"part8/chapter31/","title":"\u7b2c31\u7ae0 \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u9078\u3073\u65b9","text":""},{"location":"part8/chapter31/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u6599\u7406\u3092\u3059\u308b\u3068\u304d\u3001\u6750\u6599\u306b\u3088\u3063\u3066\u9069\u5207\u306a\u9053\u5177\u3092\u9078\u3073\u307e\u3059\u3088\u306d\u3002\u91ce\u83dc\u3092\u5207\u308b\u306a\u3089\u5305\u4e01\u3001\u30b9\u30fc\u30d7\u3092\u6df7\u305c\u308b\u306a\u3089\u304a\u7389\u3001\u30d1\u30b9\u30bf\u3092\u8339\u3067\u308b\u306a\u3089\u5927\u304d\u306a\u934b\u3002\u540c\u3058\u3088\u3046\u306b\u3001\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u3082\u6271\u3046\u30c7\u30fc\u30bf\u306b\u3088\u3063\u3066\u6700\u9069\u306a\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u9078\u3076\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p> <p>\u3053\u306e\u7ae0\u3067\u306f\u3001Scala\u306e\u8c4a\u5bcc\u306a\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304b\u3089\u3001\u3042\u306a\u305f\u306e\u30cb\u30fc\u30ba\u306b\u3074\u3063\u305f\u308a\u306e\u3082\u306e\u3092\u9078\u3076\u65b9\u6cd5\u3092\u5b66\u3073\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part8/chapter31/#_2","title":"\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u5168\u4f53\u50cf","text":""},{"location":"part8/chapter31/#_3","title":"\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u968e\u5c64","text":"<pre><code>// CollectionHierarchy.scala\n@main def collectionHierarchy(): Unit = {\n  // Scala\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u968e\u5c64\n  println(\"=== \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u968e\u5c64 ===\")\n  println(\"Iterable\")\n  println(\"\u251c\u2500\u2500 Seq\uff08\u9806\u5e8f\u3042\u308a\uff09\")\n  println(\"\u2502   \u251c\u2500\u2500 IndexedSeq\uff08\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30a2\u30af\u30bb\u30b9\u9ad8\u901f\uff09\")\n  println(\"\u2502   \u2502   \u251c\u2500\u2500 Vector\")\n  println(\"\u2502   \u2502   \u251c\u2500\u2500 Array\")\n  println(\"\u2502   \u2502   \u2514\u2500\u2500 ArraySeq\")\n  println(\"\u2502   \u2514\u2500\u2500 LinearSeq\uff08\u5148\u982d\u30a2\u30af\u30bb\u30b9\u9ad8\u901f\uff09\")\n  println(\"\u2502       \u251c\u2500\u2500 List\")\n  println(\"\u2502       \u251c\u2500\u2500 LazyList\")\n  println(\"\u2502       \u2514\u2500\u2500 Queue\")\n  println(\"\u251c\u2500\u2500 Set\uff08\u91cd\u8907\u306a\u3057\uff09\")\n  println(\"\u2502   \u251c\u2500\u2500 HashSet\")\n  println(\"\u2502   \u251c\u2500\u2500 TreeSet\")\n  println(\"\u2502   \u2514\u2500\u2500 BitSet\")\n  println(\"\u2514\u2500\u2500 Map\uff08\u30ad\u30fc\u3068\u5024\uff09\")\n  println(\"    \u251c\u2500\u2500 HashMap\")\n  println(\"    \u251c\u2500\u2500 TreeMap\")\n  println(\"    \u2514\u2500\u2500 ListMap\")\n\n  // \u57fa\u672c\u7684\u306a\u6027\u8cea\u306e\u6bd4\u8f03\n  println(\"\\n=== \u57fa\u672c\u7684\u306a\u6027\u8cea ===\")\n\n  // \u9806\u5e8f\u306e\u4fdd\u6301\n  val list = List(3, 1, 4, 1, 5)\n  val set = Set(3, 1, 4, 1, 5)\n\n  println(s\"List\uff08\u9806\u5e8f\u4fdd\u6301\u3001\u91cd\u8907\u3042\u308a\uff09: $list\")\n  println(s\"Set\uff08\u9806\u5e8f\u306a\u3057\u3001\u91cd\u8907\u306a\u3057\uff09: $set\")\n\n  // \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u30a2\u30af\u30bb\u30b9\n  val vector = Vector(10, 20, 30, 40, 50)\n  println(s\"\\nVector[2] = ${vector(2)}  // O(log n)\")\n\n  // \u30ad\u30fc\u3067\u306e\u30a2\u30af\u30bb\u30b9\n  val map = Map(\"one\" -&gt; 1, \"two\" -&gt; 2, \"three\" -&gt; 3)\n  println(s\"Map(\\\"two\\\") = ${map(\"two\")}  // O(1)\")\n</code></pre>"},{"location":"part8/chapter31/#_4","title":"\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u7279\u6027","text":"<pre><code>// PerformanceCharacteristics.scala\n@main def performanceCharacteristics(): Unit = {\n  import scala.collection.mutable\n\n  // \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6bd4\u8f03\u306e\u30d8\u30eb\u30d1\u30fc\n  def measureTime[T](name: String)(block: =&gt; T): T =\n    val start = System.nanoTime()\n    val result = block\n    val end = System.nanoTime()\n    println(f\"$name%-20s: ${(end - start) / 1000000.0}%.2f ms\")\n    result\n\n  val size = 100000\n  val range = 0 until size\n\n  println(\"=== \u4f5c\u6210\u6642\u9593 ===\")\n\n  val list = measureTime(\"List\") {\n    range.toList\n\n}\n\n  val vector = measureTime(\"Vector\") {\n    range.toVector\n\n}\n\n  val array = measureTime(\"Array\") {\n    range.toArray\n\n}\n\n  val set = measureTime(\"Set\") {\n    range.toSet\n\n}\n\n  println(\"\\n=== \u30e9\u30f3\u30c0\u30e0\u30a2\u30af\u30bb\u30b9 ===\")\n  val indices = scala.util.Random.shuffle((0 until 1000).toList)\n\n  measureTime(\"List\uff08\u9045\u3044\uff09\") {\n    indices.foreach(i =&gt; list(i % size))\n\n}\n\n  measureTime(\"Vector\uff08\u901f\u3044\uff09\") {\n    indices.foreach(i =&gt; vector(i % size))\n\n}\n\n  measureTime(\"Array\uff08\u6700\u901f\uff09\") {\n    indices.foreach(i =&gt; array(i % size))\n\n}\n\n  println(\"\\n=== \u5148\u982d\u3078\u306e\u8ffd\u52a0 ===\")\n\n  measureTime(\"List\uff08\u6700\u901f\uff09\") {\n    var l = List.empty[Int]\n    for (i &lt;- 0 until 1000) {\n      l = i :: l\n\n}\n\n  measureTime(\"Vector\uff08\u901f\u3044\uff09\") {\n    var v = Vector.empty[Int]\n    for (i &lt;- 0 until 1000) {\n      v = i +: v\n\n}\n\n  measureTime(\"mutable.ListBuffer\") {\n    val buffer = mutable.ListBuffer.empty[Int]\n    for (i &lt;- 0 until 1000) {\n      i +=: buffer\n\n}\n</code></pre>"},{"location":"part8/chapter31/#_5","title":"\u7528\u9014\u5225\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u9078\u629e\u30ac\u30a4\u30c9","text":""},{"location":"part8/chapter31/#_6","title":"\u9806\u5e8f\u304c\u91cd\u8981\u306a\u5834\u5408","text":"<pre><code>// SequentialCollections.scala\n@main def sequentialCollections(): Unit = {\n  // List\uff1a\u95a2\u6570\u578b\u30b9\u30bf\u30a4\u30eb\u3001\u5148\u982d\u3078\u306e\u8ffd\u52a0\u304c\u9ad8\u901f\n  println(\"=== List\uff08\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u3001\u95a2\u6570\u578b\uff09 ===\")\n\n  val todoList = List(\"\u8cb7\u3044\u7269\", \"\u6383\u9664\", \"\u52c9\u5f37\")\n  val newTodo = \"\u904b\u52d5\" :: todoList  // O(1)\n\n  println(s\"\u5143\u306e\u30ea\u30b9\u30c8: $todoList\")\n  println(s\"\u65b0\u3057\u3044\u30ea\u30b9\u30c8: $newTodo\")\n\n  // \u518d\u5e30\u51e6\u7406\u306b\u9069\u3057\u3066\u3044\u308b\n  def sum(list: List[Int]): Int = list match {\n    case Nil =&gt; 0\n    case head :: tail =&gt; head + sum(tail)\n\n  println(s\"\u5408\u8a08: ${sum(List(1, 2, 3, 4, 5))}\")\n\n  // Vector\uff1a\u30d0\u30e9\u30f3\u30b9\u306e\u53d6\u308c\u305f\u6027\u80fd\n  println(\"\\n=== Vector\uff08\u30e9\u30f3\u30c0\u30e0\u30a2\u30af\u30bb\u30b9\u3082\u9ad8\u901f\uff09 ===\")\n\n  val scores = Vector(85, 92, 78, 95, 88)\n  val updated = scores.updated(2, 80)  // O(log n)\n\n  println(s\"\u5143\u306e\u30b9\u30b3\u30a2: $scores\")\n  println(s\"\u66f4\u65b0\u5f8c: $updated\")\n\n  // \u5927\u91cf\u30c7\u30fc\u30bf\u306e\u51e6\u7406\u306b\u9069\u3057\u3066\u3044\u308b\n  val bigData = Vector.tabulate(10000)(i =&gt; i * i)\n  println(s\"10\u756a\u76ee: ${bigData(10)}, 9999\u756a\u76ee: ${bigData(9999)}\")\n\n  // LazyList\uff1a\u9045\u5ef6\u8a55\u4fa1\n  println(\"\\n=== LazyList\uff08\u7121\u9650\u30ea\u30b9\u30c8\u53ef\u80fd\uff09 ===\")\n\n  def fibonacci: LazyList[Int] =\n    def fib(a: Int, b: Int): LazyList[Int] = a #:: fib(b, a + b)\n    fib(0, 1)\n\n  val fib10 = fibonacci.take(10).toList\n  println(s\"\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217: $fib10\")\n\n  // \u5fc5\u8981\u306a\u5206\u3060\u3051\u8a08\u7b97\n  val primes = LazyList.from(2).filter { n =&gt;\n    (2 until n).forall(n % _ != 0)\n\n}\n\n  println(s\"\u6700\u521d\u306e10\u500b\u306e\u7d20\u6570: ${primes.take(10).toList}\")\n</code></pre>"},{"location":"part8/chapter31/#_7","title":"\u91cd\u8907\u3092\u907f\u3051\u305f\u3044\u5834\u5408","text":"<pre><code>// SetCollections.scala\n@main def setCollections(): Unit = {\n  // HashSet\uff1a\u9ad8\u901f\u306a\u8981\u7d20\u30c1\u30a7\u30c3\u30af\n  println(\"=== HashSet\uff08\u4e00\u822c\u7684\u306a\u7528\u9014\uff09 ===\")\n\n  val tags = Set(\"scala\", \"programming\", \"functional\", \"scala\")\n  println(s\"\u30bf\u30b0\uff08\u91cd\u8907\u81ea\u52d5\u524a\u9664\uff09: $tags\")\n\n  // \u96c6\u5408\u6f14\u7b97\n  val skills1 = Set(\"Java\", \"Scala\", \"Python\")\n  val skills2 = Set(\"Scala\", \"Haskell\", \"Python\")\n\n  println(s\"\\n\u4e21\u65b9\u304c\u6301\u3064\u30b9\u30ad\u30eb: ${skills1 &amp; skills2}\")\n  println(s\"\u3069\u3061\u3089\u304b\u304c\u6301\u3064\u30b9\u30ad\u30eb: ${skills1 | skills2}\")\n  println(s\"1\u3060\u3051\u304c\u6301\u3064\u30b9\u30ad\u30eb: ${skills1 -- skills2}\")\n\n  // TreeSet\uff1a\u81ea\u52d5\u30bd\u30fc\u30c8\n  println(\"\\n=== TreeSet\uff08\u9806\u5e8f\u4ed8\u304d\uff09 ===\")\n\n  val sortedNumbers = scala.collection.immutable.TreeSet(5, 2, 8, 1, 9, 3)\n  println(s\"\u81ea\u52d5\u30bd\u30fc\u30c8: $sortedNumbers\")\n\n  // \u7bc4\u56f2\u30af\u30a8\u30ea\n  val range = sortedNumbers.range(3, 8)\n  println(s\"3\u4ee5\u4e0a8\u672a\u6e80: $range\")\n\n  // BitSet\uff1aInt\u5c02\u7528\u3001\u30e1\u30e2\u30ea\u52b9\u7387\u7684\n  println(\"\\n=== BitSet\uff08\u6574\u6570\u306e\u96c6\u5408\uff09 ===\")\n\n  val primesBits = scala.collection.immutable.BitSet(2, 3, 5, 7, 11, 13)\n  val evenBits = scala.collection.immutable.BitSet(2, 4, 6, 8, 10, 12)\n\n  println(s\"\u7d20\u6570: $primesBits\")\n  println(s\"\u5076\u6570: $evenBits\")\n  println(s\"\u5076\u6570\u304b\u3064\u7d20\u6570: ${primesBits &amp; evenBits}\")\n</code></pre>"},{"location":"part8/chapter31/#_8","title":"\u30ad\u30fc\u3068\u5024\u306e\u30da\u30a2","text":"<pre><code>// MapCollections.scala\n@main def mapCollections(): Unit = {\n  // HashMap\uff1a\u4e00\u822c\u7684\u306a\u7528\u9014\n  println(\"=== HashMap\uff08\u9ad8\u901f\u30a2\u30af\u30bb\u30b9\uff09 ===\")\n\n  val inventory = Map(\n    \"\u308a\u3093\u3054\" -&gt; 10,\n    \"\u30d0\u30ca\u30ca\" -&gt; 15,\n    \"\u30aa\u30ec\u30f3\u30b8\" -&gt; 8\n  )\n\n  // \u5b89\u5168\u306a\u30a2\u30af\u30bb\u30b9\n  println(s\"\u308a\u3093\u3054\u306e\u5728\u5eab: ${inventory.get(\"\u308a\u3093\u3054\")}\")\n  println(s\"\u3076\u3069\u3046\u306e\u5728\u5eab: ${inventory.getOrElse(\"\u3076\u3069\u3046\", 0)}\")\n\n  // \u66f4\u65b0\uff08\u65b0\u3057\u3044Map\u3092\u4f5c\u6210\uff09\n  val updated = inventory + (\"\u3076\u3069\u3046\" -&gt; 20)\n  println(s\"\u66f4\u65b0\u5f8c: $updated\")\n\n  // TreeMap\uff1a\u30ad\u30fc\u3067\u30bd\u30fc\u30c8\n  println(\"\\n=== TreeMap\uff08\u9806\u5e8f\u4ed8\u304d\uff09 ===\")\n\n  val scores = scala.collection.immutable.TreeMap(\n    \"Charlie\" -&gt; 85,\n    \"Alice\" -&gt; 92,\n    \"Bob\" -&gt; 78\n  )\n\n  println(\"\u540d\u524d\u9806\u306e\u30b9\u30b3\u30a2:\")\n  scores.foreach { case (name, score) =&gt;\n    println(s\"  $name: $score\")\n\n}\n\n  // MultiMap\u7684\u306a\u4f7f\u3044\u65b9\n  println(\"\\n=== \u8907\u6570\u5024\u306e\u30de\u30c3\u30d7 ===\")\n\n  val tags = Map[String, Set[String]]()\n    .withDefaultValue(Set.empty)\n\n  def addTag(map: Map[String, Set[String]], key: String, tag: String) =\n    map + (key -&gt; (map(key) + tag))\n\n  val taggedItems = List(\n    (\"doc1\", \"scala\"),\n    (\"doc1\", \"tutorial\"),\n    (\"doc2\", \"java\"),\n    (\"doc2\", \"tutorial\")\n  ).foldLeft(tags) { case (map, (key, tag)) =&gt;\n    addTag(map, key, tag)\n\n}\n\n  println(s\"\u30bf\u30b0\u4ed8\u3051\u3055\u308c\u305f\u9805\u76ee: $taggedItems\")\n</code></pre>"},{"location":"part8/chapter31/#_9","title":"\u7279\u6b8a\u306a\u7528\u9014\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3","text":""},{"location":"part8/chapter31/#_10","title":"\u53ef\u5909\u30b3\u30ec\u30af\u30b7\u30e7\u30f3","text":"<pre><code>// MutableCollections.scala\n@main def mutableCollections(): Unit = {\n  import scala.collection.mutable\n\n  // ArrayBuffer\uff1a\u53ef\u5909\u9577\u914d\u5217\n  println(\"=== ArrayBuffer\uff08\u52d5\u7684\u914d\u5217\uff09 ===\")\n\n  val buffer = mutable.ArrayBuffer[String]()\n  buffer += \"\u6700\u521d\"\n  buffer += \"\u6b21\"\n  buffer.insert(1, \"\u9593\u306b\u633f\u5165\")\n\n  println(s\"\u30d0\u30c3\u30d5\u30a1: $buffer\")\n\n  // ListBuffer\uff1a\u52b9\u7387\u7684\u306a\u30ea\u30b9\u30c8\u69cb\u7bc9\n  println(\"\\n=== ListBuffer\uff08\u30ea\u30b9\u30c8\u69cb\u7bc9\u7528\uff09 ===\")\n\n  val listBuffer = mutable.ListBuffer[Int]()\n  for (i &lt;- 1 to 5) {\n    listBuffer += i * i\n\n  val immutableList = listBuffer.toList\n  println(s\"\u69cb\u7bc9\u3057\u305f\u30ea\u30b9\u30c8: $immutableList\")\n\n  // StringBuilder\uff1a\u6587\u5b57\u5217\u306e\u52b9\u7387\u7684\u306a\u69cb\u7bc9\n  println(\"\\n=== StringBuilder ===\")\n\n  val sb = new StringBuilder\n  sb.append(\"Hello\")\n  sb.append(\" \")\n  sb.append(\"World\")\n  sb.insert(5, \",\")\n\n  println(s\"\u69cb\u7bc9\u3057\u305f\u6587\u5b57\u5217: ${sb.toString}\")\n\n  // Queue\uff1aFIFO\n  println(\"\\n=== Queue\uff08\u5148\u5165\u308c\u5148\u51fa\u3057\uff09 ===\")\n\n  val queue = mutable.Queue[String]()\n  queue.enqueue(\"\u30bf\u30b9\u30af1\")\n  queue.enqueue(\"\u30bf\u30b9\u30af2\")\n  queue.enqueue(\"\u30bf\u30b9\u30af3\")\n\n  println(s\"\u51e6\u7406: ${queue.dequeue()}\")\n  println(s\"\u6b8b\u308a: $queue\")\n\n  // Stack\uff1aLIFO\n  println(\"\\n=== Stack\uff08\u5f8c\u5165\u308c\u5148\u51fa\u3057\uff09 ===\")\n\n  val stack = mutable.Stack[String]()\n  stack.push(\"\u30d7\u30ec\u30fc\u30c81\")\n  stack.push(\"\u30d7\u30ec\u30fc\u30c82\")\n  stack.push(\"\u30d7\u30ec\u30fc\u30c83\")\n\n  println(s\"\u53d6\u308a\u51fa\u3057: ${stack.pop()}\")\n  println(s\"\u6b8b\u308a: $stack\")\n</code></pre>"},{"location":"part8/chapter31/#_11","title":"\u4e26\u884c\u30b3\u30ec\u30af\u30b7\u30e7\u30f3","text":"<pre><code>// ConcurrentCollections.scala\n@main def concurrentCollections(): Unit = {\n  import scala.collection.parallel.CollectionConverters._\n  import scala.collection.concurrent\n\n  // \u4e26\u5217\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\n  println(\"=== \u4e26\u5217\u30b3\u30ec\u30af\u30b7\u30e7\u30f3 ===\")\n\n  val numbers = (1 to 1000000).toVector\n\n  // \u901a\u5e38\u306e\u51e6\u7406\n  val start1 = System.currentTimeMillis()\n  val sum1 = numbers.map(_ * 2).sum\n  val time1 = System.currentTimeMillis() - start1\n\n  // \u4e26\u5217\u51e6\u7406\n  val start2 = System.currentTimeMillis()\n  val sum2 = numbers.par.map(_ * 2).sum\n  val time2 = System.currentTimeMillis() - start2\n\n  println(f\"\u901a\u5e38\u51e6\u7406: $time1%d ms (\u7d50\u679c: $sum1)\")\n  println(f\"\u4e26\u5217\u51e6\u7406: $time2%d ms (\u7d50\u679c: $sum2)\")\n\n  // TrieMap\uff1a\u4e26\u884c\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\n  println(\"\\n=== TrieMap\uff08\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\uff09 ===\")\n\n  val trieMap = concurrent.TrieMap[String, Int]()\n\n  // \u8907\u6570\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u5b89\u5168\u306b\u30a2\u30af\u30bb\u30b9\n  val futures = (1 to 10).map { i =&gt;\n    scala.concurrent.Future {\n      trieMap.put(s\"key$i\", i * 100)\n      Thread.sleep(10)\n      trieMap.get(s\"key$i\")\n    }(scala.concurrent.ExecutionContext.global)\n\n}\n\n  // \u7d50\u679c\u3092\u5f85\u3064\n  Thread.sleep(200)\n  println(s\"TrieMap\u306e\u5185\u5bb9: ${trieMap.toMap}\")\n</code></pre>"},{"location":"part8/chapter31/#_12","title":"\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u9078\u629e\u306e\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9","text":"<pre><code>// CollectionBestPractices.scala\n@main def collectionBestPractices(): Unit = {\n  // 1. \u30c7\u30d5\u30a9\u30eb\u30c8\u306f\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\n  println(\"=== \u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u512a\u5148 ===\")\n\n  // \u826f\u3044\u4f8b\n  val goodList = List(1, 2, 3)\n  val updated = 0 :: goodList  // \u65b0\u3057\u3044\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n\n  // \u907f\u3051\u308b\u3079\u304d\u4f8b\uff08\u5fc5\u8981\u306a\u5834\u5408\u306e\u307f\uff09\n  import scala.collection.mutable\n  val badList = mutable.ListBuffer(1, 2, 3)\n  badList.prepend(0)  // \u5143\u306e\u30ea\u30b9\u30c8\u3092\u5909\u66f4\n\n  // 2. \u9069\u5207\u306a\u30d5\u30a1\u30af\u30c8\u30ea\u30e1\u30bd\u30c3\u30c9\n  println(\"\\n=== \u52b9\u7387\u7684\u306a\u69cb\u7bc9 ===\")\n\n  // \u826f\u3044\u4f8b\uff1aBuilder\u3092\u4f7f\u3046\n  val efficientVector = Vector.newBuilder[Int]\n  for (i &lt;- 1 to 10000) {\n    efficientVector += i\n  val result = efficientVector.result()\n\n  // \u826f\u3044\u4f8b\uff1aunfold\u3092\u4f7f\u3046\n  val fibonacci = LazyList.unfold((0, 1)) { case (a, b) =&gt;\n    Some((a, (b, a + b)))\n\n}\n\n  println(s\"\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1: ${fibonacci.take(10).toList}\")\n\n  // 3. \u5909\u63db\u306e\u9023\u9396\n  println(\"\\n=== \u52b9\u7387\u7684\u306a\u5909\u63db ===\")\n\n  val data = List(1, 2, 3, 4, 5)\n\n  // \u826f\u3044\u4f8b\uff1aview\u3092\u4f7f\u3063\u3066\u9045\u5ef6\u8a55\u4fa1\n  val efficient = data.view\n    .map(_ * 2)\n    .filter(_ &gt; 5)\n    .map(_ + 1)\n    .toList\n\n  println(s\"\u52b9\u7387\u7684\u306a\u7d50\u679c: $efficient\")\n\n  // 4. \u9069\u5207\u306a\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u9078\u629e\u30d5\u30ed\u30fc\n  println(\"\\n=== \u9078\u629e\u306e\u6307\u91dd ===\")\n\n  def chooseCollection(requirements: Set[String]): String =\n    if requirements.contains(\"\u9806\u5e8f\u4fdd\u6301\") then\n      if requirements.contains(\"\u9ad8\u901f\u30e9\u30f3\u30c0\u30e0\u30a2\u30af\u30bb\u30b9\") then\n        \"Vector\"\n      else if requirements.contains(\"\u5148\u982d\u8ffd\u52a0\u304c\u591a\u3044\") then\n        \"List\"\n      } else {\n        \"Vector\uff08\u6c4e\u7528\u7684\uff09\"\n    else if requirements.contains(\"\u91cd\u8907\u306a\u3057\") then\n      if requirements.contains(\"\u9806\u5e8f\u4ed8\u304d\") then\n        \"TreeSet\"\n      } else {\n        \"HashSet\"\n    else if requirements.contains(\"\u30ad\u30fc\u5024\u30da\u30a2\") then\n      if requirements.contains(\"\u9806\u5e8f\u4ed8\u304d\") then\n        \"TreeMap\"\n      } else {\n        \"HashMap\"\n    } else {\n      \"List\uff08\u30c7\u30d5\u30a9\u30eb\u30c8\uff09\"\n\n  val requirements1 = Set(\"\u9806\u5e8f\u4fdd\u6301\", \"\u9ad8\u901f\u30e9\u30f3\u30c0\u30e0\u30a2\u30af\u30bb\u30b9\")\n  println(s\"\u8981\u4ef6: $requirements1 \u2192 ${chooseCollection(requirements1)}\")\n\n  val requirements2 = Set(\"\u91cd\u8907\u306a\u3057\", \"\u9806\u5e8f\u4ed8\u304d\")\n  println(s\"\u8981\u4ef6: $requirements2 \u2192 ${chooseCollection(requirements2)}\")\n</code></pre>"},{"location":"part8/chapter31/#_13","title":"\u5b9f\u8df5\u4f8b\uff1a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u306e\u4f7f\u3044\u5206\u3051","text":"<pre><code>// RealWorldExample.scala\n@main def realWorldExample(): Unit = {\n  import scala.collection.mutable\n\n  // \u30e6\u30fc\u30b6\u30fc\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0\u306e\u4f8b\n  case class User(id: Int, name: String, email: String, tags: Set[String])\n\n  class UserRepository:\n    // ID\u691c\u7d22\u7528\uff1aHashMap\uff08O(1)\u691c\u7d22\uff09\n    private val usersById = mutable.HashMap[Int, User]()\n\n    // \u30e1\u30fc\u30eb\u691c\u7d22\u7528\uff1aHashMap\uff08\u4e00\u610f\u6027\u4fdd\u8a3c\uff09\n    private val usersByEmail = mutable.HashMap[String, User]()\n\n    // \u30bf\u30b0\u691c\u7d22\u7528\uff1aMultiMap\u7684\u306a\u69cb\u9020\n    private val usersByTag = mutable.HashMap[String, mutable.Set[Int]]()\n      .withDefaultValue(mutable.Set.empty)\n\n    // \u6700\u8fd1\u30a2\u30af\u30bb\u30b9\u3057\u305f\u30e6\u30fc\u30b6\u30fc\uff1aLinkedHashSet\uff08\u9806\u5e8f\u4fdd\u6301\uff09\n    private val recentlyAccessed = mutable.LinkedHashSet[Int]()\n    private val maxRecent = 10\n\n    def addUser(user: User): Unit =\n      usersById(user.id) = user\n      usersByEmail(user.email) = user\n\n      user.tags.foreach { tag =&gt;\n        usersByTag(tag) = usersByTag(tag) + user.id\n\n}\n\n    def findById(id: Int): Option[User] =\n      val result = usersById.get(id)\n      result.foreach { _ =&gt;\n        updateRecentlyAccessed(id)\n\n}\n      result\n\n    def findByEmail(email: String): Option[User] =\n      usersByEmail.get(email)\n\n    def findByTag(tag: String): List[User] =\n      usersByTag(tag).toList.flatMap(usersById.get)\n\n    private def updateRecentlyAccessed(id: Int): Unit =\n      recentlyAccessed -= id  // \u65e2\u5b58\u306e\u3082\u306e\u3092\u524a\u9664\n      recentlyAccessed += id  // \u6700\u5f8c\u306b\u8ffd\u52a0\n\n      if (recentlyAccessed.size &gt; maxRecent) {\n        recentlyAccessed -= recentlyAccessed.head\n\n    def getRecentlyAccessed: List[User] =\n      recentlyAccessed.toList.reverse.flatMap(usersById.get)\n\n    def stats(): String =\n      s\"\"\"\u30e6\u30fc\u30b6\u30fc\u6570: ${usersById.size\n}\n         |\u30bf\u30b0\u6570: ${usersByTag.size\n}\n         |\u6700\u8fd1\u30a2\u30af\u30bb\u30b9: ${recentlyAccessed.size\n}\n         |\"\"\".stripMargin\n\n  // \u4f7f\u7528\u4f8b\n  val repo = new UserRepository\n\n  val users = List(\n    User(1, \"\u592a\u90ce\", \"taro@example.com\", Set(\"scala\", \"java\")),\n    User(2, \"\u82b1\u5b50\", \"hanako@example.com\", Set(\"python\", \"scala\")),\n    User(3, \"\u6b21\u90ce\", \"jiro@example.com\", Set(\"java\", \"kotlin\"))\n  )\n\n  users.foreach(repo.addUser)\n\n  println(\"=== \u30e6\u30fc\u30b6\u30fc\u691c\u7d22 ===\")\n  println(s\"ID=2: ${repo.findById(2)}\")\n  println(s\"Email=taro@example.com: ${repo.findByEmail(\"taro@example.com\")}\")\n  println(s\"Tag=scala: ${repo.findByTag(\"scala\")}\")\n\n  // \u3044\u304f\u3064\u304b\u30a2\u30af\u30bb\u30b9\n  repo.findById(1)\n  repo.findById(3)\n  repo.findById(2)\n\n  println(s\"\\n\u6700\u8fd1\u30a2\u30af\u30bb\u30b9: ${repo.getRecentlyAccessed.map(_.name)}\")\n  println(s\"\\n${repo.stats()}\")\n</code></pre>"},{"location":"part8/chapter31/#_14","title":"\u7df4\u7fd2\u3057\u3066\u307f\u3088\u3046\uff01","text":""},{"location":"part8/chapter31/#1","title":"\u7df4\u7fd21\uff1a\u30ad\u30e3\u30c3\u30b7\u30e5\u30b7\u30b9\u30c6\u30e0","text":"<p>LRU\uff08Least Recently Used\uff09\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u5b9f\u88c5\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - \u6700\u5927\u30b5\u30a4\u30ba\u306e\u5236\u9650 - \u6700\u3082\u4f7f\u308f\u308c\u3066\u3044\u306a\u3044\u3082\u306e\u3092\u524a\u9664 - O(1)\u3067\u306e\u30a2\u30af\u30bb\u30b9</p>"},{"location":"part8/chapter31/#2","title":"\u7df4\u7fd22\uff1a\u30a4\u30d9\u30f3\u30c8\u30b9\u30c8\u30ea\u30fc\u30e0","text":"<p>\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u30a4\u30d9\u30f3\u30c8\u51e6\u7406\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\uff1a - \u30a4\u30d9\u30f3\u30c8\u306e\u9806\u5e8f\u4fdd\u6301 - \u91cd\u8907\u30a4\u30d9\u30f3\u30c8\u306e\u9664\u53bb - \u6642\u9593\u7a93\u3067\u306e\u96c6\u8a08</p>"},{"location":"part8/chapter31/#3","title":"\u7df4\u7fd23\uff1a\u30b0\u30e9\u30d5\u69cb\u9020","text":"<p>\u30bd\u30fc\u30b7\u30e3\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u30b0\u30e9\u30d5\u3092\u8868\u73fe\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - \u30e6\u30fc\u30b6\u30fc\u9593\u306e\u95a2\u4fc2 - \u6700\u77ed\u7d4c\u8def\u306e\u63a2\u7d22 - \u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u306e\u691c\u51fa</p>"},{"location":"part8/chapter31/#_15","title":"\u3053\u306e\u7ae0\u306e\u307e\u3068\u3081","text":"<p>\u69d8\u3005\u306a\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u7279\u6027\u3068\u4f7f\u3044\u5206\u3051\u3092\u5b66\u3073\u307e\u3057\u305f\uff01</p>"},{"location":"part8/chapter31/#_16","title":"\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3053\u3068","text":"<p>\u2705 \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u7279\u6027\u7406\u89e3 - \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u7279\u6027 - \u30e1\u30e2\u30ea\u52b9\u7387 - \u64cd\u4f5c\u306e\u8907\u96d1\u5ea6</p> <p>\u2705 \u7528\u9014\u5225\u306e\u9078\u629e - \u9806\u5e8f\u91cd\u8996\uff1aList\u3001Vector - \u91cd\u8907\u306a\u3057\uff1aSet\u7cfb - \u30ad\u30fc\u5024\uff1aMap\u7cfb</p> <p>\u2705 \u7279\u6b8a\u7528\u9014 - \u53ef\u5909\u30b3\u30ec\u30af\u30b7\u30e7\u30f3 - \u4e26\u884c\u30b3\u30ec\u30af\u30b7\u30e7\u30f3 - \u7279\u6b8a\u5316\u30b3\u30ec\u30af\u30b7\u30e7\u30f3</p> <p>\u2705 \u5b9f\u8df5\u7684\u306a\u4f7f\u3044\u5206\u3051 - \u8907\u6570\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u7d44\u307f\u5408\u308f\u305b - \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6700\u9069\u5316 - \u30e1\u30e2\u30ea\u52b9\u7387\u306e\u8003\u616e</p>"},{"location":"part8/chapter31/#_17","title":"\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u9078\u629e\u306e\u30b3\u30c4","text":"<ol> <li> <p>\u30c7\u30d5\u30a9\u30eb\u30c8\u304b\u3089\u59cb\u3081\u308b</p> <ul> <li>List\u3001Vector\u3001Set\u3001Map</li> <li>\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u512a\u5148</li> <li>\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u7279\u6b8a\u5316</li> </ul> </li> <li> <p>\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u6e2c\u5b9a</p> <ul> <li>\u5b9f\u969b\u306e\u30c7\u30fc\u30bf\u3067\u6e2c\u5b9a</li> <li>\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u3092\u7279\u5b9a</li> <li>\u9069\u5207\u306a\u6700\u9069\u5316</li> </ul> </li> <li> <p>\u8aad\u307f\u3084\u3059\u3055\u3082\u91cd\u8981</p> <ul> <li>\u610f\u56f3\u304c\u660e\u78ba\u306a\u30b3\u30ec\u30af\u30b7\u30e7\u30f3</li> <li>\u904e\u5ea6\u306a\u6700\u9069\u5316\u3092\u907f\u3051\u308b</li> <li>\u30c1\u30fc\u30e0\u3067\u5171\u6709\u3067\u304d\u308b\u9078\u629e</li> </ul> </li> </ol>"},{"location":"part8/chapter31/#_18","title":"\u6b21\u306e\u7ae0\u3067\u306f...","text":"<p>\u52b9\u7387\u7684\u306a\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u64cd\u4f5c\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3059\u3002\u5927\u91cf\u306e\u30c7\u30fc\u30bf\u3092\u6271\u3046\u30c6\u30af\u30cb\u30c3\u30af\u3092\u7fd2\u5f97\u3057\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part8/chapter31/#_19","title":"\u6700\u5f8c\u306b","text":"<p>\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306f\u300c\u30c7\u30fc\u30bf\u306e\u5165\u308c\u7269\u300d\u3067\u3059\u3002\u3067\u3082\u3001\u305f\u3060\u306e\u5165\u308c\u7269\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u305d\u308c\u305e\u308c\u306b\u500b\u6027\u304c\u3042\u308a\u3001\u5f97\u610f\u4e0d\u5f97\u610f\u304c\u3042\u308a\u307e\u3059\u3002\u6599\u7406\u4eba\u304c\u98df\u6750\u306b\u5408\u308f\u305b\u3066\u9053\u5177\u3092\u9078\u3076\u3088\u3046\u306b\u3001\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u3082\u30c7\u30fc\u30bf\u306b\u5408\u308f\u305b\u3066\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u9078\u3076\u3002\u3053\u306e\u300c\u9078\u3076\u6280\u8853\u300d\u304c\u3001\u52b9\u7387\u7684\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u751f\u307f\u51fa\u3059\u79d8\u8a23\u3067\u3059\uff01</p>"},{"location":"part8/chapter32/","title":"\u7b2c32\u7ae0 \u52b9\u7387\u7684\u306a\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u64cd\u4f5c","text":""},{"location":"part8/chapter32/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u5927\u91cf\u306e\u66f8\u985e\u3092\u6574\u7406\u3059\u308b\u3068\u304d\u3001\u4e00\u679a\u305a\u3064\u51e6\u7406\u3059\u308b\u3088\u308a\u3001\u307e\u3068\u3081\u3066\u51e6\u7406\u3057\u305f\u65b9\u304c\u52b9\u7387\u7684\u3067\u3059\u3088\u306d\u3002\u4f3c\u305f\u66f8\u985e\u3092\u30b0\u30eb\u30fc\u30d7\u5316\u3057\u305f\u308a\u3001\u4e0d\u8981\u306a\u3082\u306e\u3092\u5148\u306b\u9664\u5916\u3057\u305f\u308a\u3001\u5fc5\u8981\u306a\u60c5\u5831\u3060\u3051\u3092\u629c\u304d\u51fa\u3057\u305f\u308a\u3002</p> <p>\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u3082\u540c\u3058\u3067\u3059\u3002\u5927\u91cf\u306e\u30c7\u30fc\u30bf\u3092\u6271\u3046\u3068\u304d\u3001\u52b9\u7387\u7684\u306a\u64cd\u4f5c\u65b9\u6cd5\u3092\u77e5\u3063\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3067\u3001\u51e6\u7406\u901f\u5ea6\u304c\u5927\u304d\u304f\u5909\u308f\u308a\u307e\u3059\u3002\u3053\u306e\u7ae0\u3067\u3001\u30d7\u30ed\u306e\u30c6\u30af\u30cb\u30c3\u30af\u3092\u8eab\u306b\u3064\u3051\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part8/chapter32/#_2","title":"\u9045\u5ef6\u8a55\u4fa1\u3068\u30d3\u30e5\u30fc","text":""},{"location":"part8/chapter32/#_3","title":"\u30d3\u30e5\u30fc\u306e\u57fa\u672c","text":"<pre><code>// ViewBasics.scala\n@main def viewBasics(): Unit = {\n  // \u901a\u5e38\u306e\u64cd\u4f5c\uff08\u5373\u5ea7\u306b\u8a55\u4fa1\uff09\n  println(\"=== \u901a\u5e38\u306e\u64cd\u4f5c\uff08\u5373\u5ea7\u8a55\u4fa1\uff09 ===\")\n\n  val numbers = (1 to 1000000).toList\n\n  val result1 = numbers\n    .map { n =&gt;\n      println(s\"map: $n\")\n      n * 2\n\n}\n    .filter { n =&gt;\n      println(s\"filter: $n\")\n      n &gt; 10\n\n}\n    .take(5)\n\n  println(s\"\u7d50\u679c: $result1\")\n  println(\"\uff08\u3059\u3079\u3066\u306e\u8981\u7d20\u304c\u51e6\u7406\u3055\u308c\u305f\uff01\uff09\")\n\n  // \u30d3\u30e5\u30fc\u3092\u4f7f\u3063\u305f\u64cd\u4f5c\uff08\u9045\u5ef6\u8a55\u4fa1\uff09\n  println(\"\\n=== \u30d3\u30e5\u30fc\u3092\u4f7f\u3063\u305f\u64cd\u4f5c\uff08\u9045\u5ef6\u8a55\u4fa1\uff09 ===\")\n\n  val result2 = numbers.view\n    .map { n =&gt;\n      println(s\"map: $n\")\n      n * 2\n\n}\n    .filter { n =&gt;\n      println(s\"filter: $n\")\n      n &gt; 10\n\n}\n    .take(5)\n    .toList\n\n  println(s\"\u7d50\u679c: $result2\")\n  println(\"\uff08\u5fc5\u8981\u306a\u5206\u3060\u3051\u51e6\u7406\u3055\u308c\u305f\uff01\uff09\")\n\n  // \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6bd4\u8f03\n  println(\"\\n=== \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6bd4\u8f03 ===\")\n\n  def measureTime[T](name: String)(block: =&gt; T): T =\n    val start = System.nanoTime()\n    val result = block\n    val end = System.nanoTime()\n    println(f\"$name: ${(end - start) / 1000000.0}%.2f ms\")\n    result\n\n  val bigList = (1 to 10000000).toList\n\n  measureTime(\"\u901a\u5e38\u306e\u51e6\u7406\") {\n    bigList\n      .map(_ * 2)\n      .filter(_ % 2 == 0)\n      .map(_ + 1)\n      .take(100)\n\n}\n\n  measureTime(\"\u30d3\u30e5\u30fc\u3092\u4f7f\u3063\u305f\u51e6\u7406\") {\n    bigList.view\n      .map(_ * 2)\n      .filter(_ % 2 == 0)\n      .map(_ + 1)\n      .take(100)\n      .toList\n\n}\n</code></pre>"},{"location":"part8/chapter32/#_4","title":"\u5b9f\u8df5\u7684\u306a\u30d3\u30e5\u30fc\u306e\u6d3b\u7528","text":"<pre><code>// PracticalViews.scala\n@main def practicalViews(): Unit = {\n  import scala.io.Source\n\n  // \u30d5\u30a1\u30a4\u30eb\u51e6\u7406\u306e\u4f8b\uff08\u4eee\u60f3\u7684\u306a\u30ed\u30b0\u30d5\u30a1\u30a4\u30eb\uff09\n  val logLines = List(\n    \"2024-01-01 10:00:00 INFO User login: user1\",\n    \"2024-01-01 10:00:01 ERROR Failed to connect to database\",\n    \"2024-01-01 10:00:02 INFO User action: view_page\",\n    \"2024-01-01 10:00:03 WARN Slow query detected\",\n    \"2024-01-01 10:00:04 ERROR Null pointer exception\",\n    \"2024-01-01 10:00:05 INFO User logout: user1\"\n  )\n\n  // \u30a8\u30e9\u30fc\u30ed\u30b0\u3060\u3051\u3092\u62bd\u51fa\uff08\u6700\u521d\u306e3\u4ef6\uff09\n  val errors = logLines.view\n    .filter(_.contains(\"ERROR\"))\n    .map { line =&gt;\n      val parts = line.split(\" \", 4)\n      (parts(0), parts(1), parts(3))\n\n}\n    .take(3)\n    .toList\n\n  println(\"=== \u30a8\u30e9\u30fc\u30ed\u30b0 ===\")\n  errors.foreach { case (date, time, message) =&gt;\n    println(s\"$date $time: $message\")\n\n}\n\n  // \u7121\u9650\u30b7\u30fc\u30b1\u30f3\u30b9\u306e\u51e6\u7406\n  println(\"\\n=== \u7121\u9650\u30b7\u30fc\u30b1\u30f3\u30b9 ===\")\n\n  def naturals: LazyList[Int] = LazyList.from(1)\n\n  val perfectSquares = naturals.view\n    .map(n =&gt; n * n)\n    .filter(_ % 10 == 1)  // 1\u306e\u4f4d\u304c1\n    .take(5)\n    .toList\n\n  println(s\"1\u306e\u4f4d\u304c1\u306e\u5e73\u65b9\u6570: $perfectSquares\")\n\n  // \u8907\u96d1\u306a\u5909\u63db\u30c1\u30a7\u30fc\u30f3\n  case class Transaction(id: Int, amount: Double, category: String)\n\n  val transactions = List(\n    Transaction(1, 100.0, \"food\"),\n    Transaction(2, 50.0, \"transport\"),\n    Transaction(3, 200.0, \"food\"),\n    Transaction(4, 1000.0, \"rent\"),\n    Transaction(5, 30.0, \"food\"),\n    Transaction(6, 80.0, \"utilities\")\n  )\n\n  // \u30ab\u30c6\u30b4\u30ea\u5225\u306e\u7d71\u8a08\uff08\u30d3\u30e5\u30fc\u3092\u4f7f\u3063\u3066\u52b9\u7387\u7684\u306b\uff09\n  val foodStats = transactions.view\n    .filter(_.category == \"food\")\n    .map(_.amount)\n    .foldLeft((0.0, 0)) { case ((sum, count), amount) =&gt;\n      (sum + amount, count + 1)\n\n}\n\n  val (totalFood, countFood) = foodStats\n  println(f\"\\n\u98df\u8cbb: \u5408\u8a08 $$${totalFood}%.2f, \u5e73\u5747 $$${totalFood / countFood}%.2f\")\n</code></pre>"},{"location":"part8/chapter32/#_5","title":"\u52b9\u7387\u7684\u306a\u5909\u63db\u64cd\u4f5c","text":""},{"location":"part8/chapter32/#collectpartition","title":"collect\u3068partition","text":"<pre><code>// EfficientTransformations.scala\n@main def efficientTransformations(): Unit = {\n  // collect\uff1a\u30d5\u30a3\u30eb\u30bf\u3068\u30de\u30c3\u30d7\u3092\u540c\u6642\u306b\n  println(\"=== collect\uff08\u90e8\u5206\u95a2\u6570\uff09 ===\")\n\n  val mixed: List[Any] = List(1, \"hello\", 2.5, 3, \"world\", 4.7, 5)\n\n  // \u975e\u52b9\u7387\u306a\u65b9\u6cd5\n  val integers1 = mixed\n    .filter(_.isInstanceOf[Int])\n    .map(_.asInstanceOf[Int])\n\n  // \u52b9\u7387\u7684\u306a\u65b9\u6cd5\n  val integers2 = mixed.collect {\n    case n: Int =&gt; n\n\n}\n\n  println(s\"\u6574\u6570\u306e\u307f: $integers2\")\n\n  // \u3088\u308a\u8907\u96d1\u306a\u4f8b\n  val strings = mixed.collect {\n    case s: String =&gt; s.toUpperCase\n    case n: Int =&gt; s\"\u6570\u5024: $n\"\n\n}\n\n  println(s\"\u5909\u63db\u7d50\u679c: $strings\")\n\n  // partition\uff1a\u6761\u4ef6\u30672\u3064\u306b\u5206\u5272\n  println(\"\\n=== partition ===\")\n\n  val numbers = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n  val (evens, odds) = numbers.partition(_ % 2 == 0)\n\n  println(s\"\u5076\u6570: $evens\")\n  println(s\"\u5947\u6570: $odds\")\n\n  // groupBy\uff1a\u30b0\u30eb\u30fc\u30d7\u5316\n  println(\"\\n=== groupBy ===\")\n\n  case class Student(name: String, grade: Int, score: Int)\n\n  val students = List(\n    Student(\"\u592a\u90ce\", 1, 85),\n    Student(\"\u82b1\u5b50\", 2, 92),\n    Student(\"\u6b21\u90ce\", 1, 78),\n    Student(\"\u7f8e\u54b2\", 3, 88),\n    Student(\"\u5065\u592a\", 2, 95),\n    Student(\"\u3055\u304f\u3089\", 1, 90)\n  )\n\n  val byGrade = students.groupBy(_.grade)\n\n  println(\"\u5b66\u5e74\u5225:\")\n  byGrade.foreach { case (grade, students) =&gt;\n    val avg = students.map(_.score).sum.toDouble / students.length\n    println(f\"  $grade \u5e74\u751f: ${students.map(_.name).mkString(\", \")} (\u5e73\u5747: $avg%.1f)\")\n\n}\n\n  // groupMapReduce\uff1a\u30b0\u30eb\u30fc\u30d7\u5316\u3057\u3066\u96c6\u8a08\n  val gradeAverages = students.groupMapReduce(\n    _.grade\n  )(\n    _.score\n  )(\n    (sum, score) =&gt; sum + score\n  ).map { case (grade, total) =&gt;\n    val count = students.count(_.grade == grade)\n    (grade, total.toDouble / count)\n\n}\n\n  println(s\"\\n\u5b66\u5e74\u5225\u5e73\u5747\u70b9: $gradeAverages\")\n</code></pre>"},{"location":"part8/chapter32/#_6","title":"\u30d5\u30a9\u30fc\u30eb\u30c9\u64cd\u4f5c\u306e\u6700\u9069\u5316","text":"<pre><code>// OptimizedFolding.scala\n@main def optimizedFolding(): Unit = {\n  // \u57fa\u672c\u7684\u306afold\n  println(\"=== \u57fa\u672c\u7684\u306afold ===\")\n\n  val numbers = List(1, 2, 3, 4, 5)\n\n  val sum = numbers.foldLeft(0)(_ + _)\n  val product = numbers.foldLeft(1)(_ * _)\n\n  println(s\"\u5408\u8a08: $sum\")\n  println(s\"\u7a4d: $product\")\n\n  // \u8907\u96d1\u306a\u96c6\u8a08\n  case class Stats(count: Int, sum: Double, min: Double, max: Double):\n    def mean: Double = if (count &gt; 0) { sum / count else 0.0\n    def +(value: Double): Stats = Stats(\n      count + 1,\n      sum + value,\n      math.min(min, value),\n      math.max(max, value)\n    )\n\n  val measurements = List(23.5, 18.2, 25.1, 19.8, 22.3, 24.6)\n\n  val stats = measurements.foldLeft(\n    Stats(0, 0.0, Double.MaxValue, Double.MinValue)\n  )(_ + _)\n\n  println(f\"\\n\u7d71\u8a08: \u4ef6\u6570=${stats.count}, \u5e73\u5747=${stats.mean}%.1f, \" +\n          f\"\u6700\u5c0f=${stats.min}%.1f, \u6700\u5927=${stats.max}%.1f\")\n\n  // foldLeft\u3068foldRight\u306e\u9055\u3044\n  println(\"\\n=== foldLeft vs foldRight ===\")\n\n  // \u30ea\u30b9\u30c8\u69cb\u7bc9\n  val list1 = (1 to 5).foldLeft(List.empty[Int])((acc, n) =&gt; n :: acc)\n  val list2 = (1 to 5).foldRight(List.empty[Int])((n, acc) =&gt; n :: acc)\n\n  println(s\"foldLeft: $list1 \uff08\u9006\u9806\uff09\")\n  println(s\"foldRight: $list2 \uff08\u6b63\u9806\uff09\")\n\n  // scan\u3067\u4e2d\u9593\u7d50\u679c\u3082\u4fdd\u6301\n  println(\"\\n=== scan\uff08\u7d2f\u7a4d\u7d50\u679c\uff09 ===\")\n\n  val runningSum = numbers.scanLeft(0)(_ + _)\n  val runningProduct = numbers.scanLeft(1)(_ * _)\n\n  println(s\"\u7d2f\u7a4d\u548c: $runningSum\")\n  println(s\"\u7d2f\u7a4d\u7a4d: $runningProduct\")\n\n  // \u5b9f\u7528\u4f8b\uff1a\u6b8b\u9ad8\u8a08\u7b97\n  case class Transaction(date: String, amount: Double)\n\n  val transactions = List(\n    Transaction(\"2024-01-01\", 1000.0),   // \u5165\u91d1\n    Transaction(\"2024-01-02\", -200.0),   // \u51fa\u91d1\n    Transaction(\"2024-01-03\", -150.0),   // \u51fa\u91d1\n    Transaction(\"2024-01-04\", 500.0),    // \u5165\u91d1\n    Transaction(\"2024-01-05\", -300.0)    // \u51fa\u91d1\n  )\n\n  val initialBalance = 5000.0\n  val balances = transactions.scanLeft((initialBalance, \"\u521d\u671f\u6b8b\u9ad8\")) {\n    case ((balance, _), transaction) =&gt;\n      (balance + transaction.amount, transaction.date)\n\n}\n\n  println(\"\\n\u6b8b\u9ad8\u63a8\u79fb:\")\n  balances.foreach { case (balance, date) =&gt;\n    println(f\"$date%-12s: \u00a5$balance%,.0f\")\n\n}\n</code></pre>"},{"location":"part8/chapter32/#_7","title":"\u30e1\u30e2\u30ea\u52b9\u7387\u306e\u826f\u3044\u64cd\u4f5c","text":""},{"location":"part8/chapter32/#_8","title":"\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u6d3b\u7528","text":"<pre><code>// IteratorUsage.scala\n@main def iteratorUsage(): Unit = {\n  // \u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u57fa\u672c\n  println(\"=== \u30a4\u30c6\u30ec\u30fc\u30bf\uff08\u4e00\u5ea6\u3060\u3051\u8d70\u67fb\uff09 ===\")\n\n  val iter = Iterator(1, 2, 3, 4, 5)\n\n  println(s\"\u6700\u521d\u306e\u8981\u7d20: ${iter.next()}\")\n  println(s\"\u6b8b\u308a\u306e\u5408\u8a08: ${iter.sum}\")\n  // println(iter.toList)  // \u30a8\u30e9\u30fc\uff01\u65e2\u306b\u6d88\u8cbb\u6e08\u307f\n\n  // \u5927\u304d\u306a\u30d5\u30a1\u30a4\u30eb\u306e\u51e6\u7406\n  println(\"\\n=== \u5927\u91cf\u30c7\u30fc\u30bf\u306e\u51e6\u7406 ===\")\n\n  // \u4eee\u60f3\u7684\u306a\u5927\u304d\u306a\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\n  def bigDataSource: Iterator[String] = \n    Iterator.tabulate(1000000)(i =&gt; s\"Record $i\")\n\n  // \u30e1\u30e2\u30ea\u52b9\u7387\u7684\u306a\u51e6\u7406\n  val result = bigDataSource\n    .filter(_.contains(\"999\"))\n    .map(_.split(\" \")(1))\n    .take(10)\n    .toList\n\n  println(s\"999\u3092\u542b\u3080\u6700\u521d\u306e10\u4ef6: $result\")\n\n  // \u30b0\u30eb\u30fc\u30d7\u5316\u3057\u306a\u304c\u3089\u51e6\u7406\n  println(\"\\n=== \u30d0\u30c3\u30c1\u51e6\u7406 ===\")\n\n  def processInBatches[A, B](\n    data: Iterator[A],\n    batchSize: Int\n  )(process: List[A] =&gt; List[B]): Iterator[B] =\n    data.grouped(batchSize).flatMap(batch =&gt; process(batch))\n\n  val numbers = Iterator.range(1, 101)\n  val batchResults = processInBatches(numbers, 10) { batch =&gt;\n    val sum = batch.sum\n    val avg = sum.toDouble / batch.length\n    List(s\"Batch: ${batch.head}-${batch.last}, Sum: $sum, Avg: $avg\")\n\n}\n\n  println(\"\u30d0\u30c3\u30c1\u51e6\u7406\u7d50\u679c:\")\n  batchResults.take(5).foreach(println)\n\n  // sliding window\n  println(\"\\n=== \u30b9\u30e9\u30a4\u30c7\u30a3\u30f3\u30b0\u30a6\u30a3\u30f3\u30c9\u30a6 ===\")\n\n  val timeSeries = List(10, 12, 15, 14, 18, 20, 19, 22, 25, 23)\n  val movingAverage = timeSeries.sliding(3).map { window =&gt;\n    window.sum.toDouble / window.length\n  }.toList\n\n  println(s\"\u5143\u306e\u30c7\u30fc\u30bf: $timeSeries\")\n  println(s\"3\u70b9\u79fb\u52d5\u5e73\u5747: ${movingAverage.map(a =&gt; f\"$a%.1f\")}\")\n</code></pre>"},{"location":"part8/chapter32/#_9","title":"\u30d0\u30c3\u30d5\u30a1\u30ea\u30f3\u30b0\u3068\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0","text":"<pre><code>// BufferingAndStreaming.scala\n@main def bufferingAndStreaming(): Unit = {\n  import scala.collection.mutable\n\n  // \u30d0\u30c3\u30d5\u30a1\u3092\u4f7f\u3063\u305f\u52b9\u7387\u7684\u306a\u51e6\u7406\n  println(\"=== \u30d0\u30c3\u30d5\u30a1\u30ea\u30f3\u30b0 ===\")\n\n  class EfficientProcessor[A]:\n    private val buffer = mutable.ArrayBuffer[A]()\n    private val bufferSize = 1000\n\n    def process(item: A)(flush: List[A] =&gt; Unit): Unit =\n      buffer += item\n      if (buffer.size &gt;= bufferSize) {\n        flush(buffer.toList)\n        buffer.clear()\n\n    def flush(flush: List[A] =&gt; Unit): Unit =\n      if (buffer.nonEmpty) {\n        flush(buffer.toList)\n        buffer.clear()\n\n  // \u4f7f\u7528\u4f8b\n  val processor = new EfficientProcessor[Int]\n  var totalProcessed = 0\n\n  // \u30c7\u30fc\u30bf\u3092\u5c11\u3057\u305a\u3064\u51e6\u7406\n  (1 to 2500).foreach { n =&gt;\n    processor.process(n) { batch =&gt;\n      println(s\"\u30d0\u30c3\u30c1\u51e6\u7406: ${batch.length}\u4ef6\")\n      totalProcessed += batch.length\n\n}\n\n}\n\n  // \u6b8b\u308a\u3092\u30d5\u30e9\u30c3\u30b7\u30e5\n  processor.flush { batch =&gt;\n    println(s\"\u6700\u7d42\u30d0\u30c3\u30c1: ${batch.length}\u4ef6\")\n    totalProcessed += batch.length\n\n}\n\n  println(s\"\u5408\u8a08\u51e6\u7406\u6570: $totalProcessed\")\n\n  // \u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u96c6\u8a08\n  println(\"\\n=== \u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u96c6\u8a08 ===\")\n\n  class StreamingStats:\n    private var count = 0L\n    private var sum = 0.0\n    private var sumOfSquares = 0.0\n\n    def add(value: Double): Unit =\n      count += 1\n      sum += value\n      sumOfSquares += value * value\n\n    def mean: Double = if (count &gt; 0) { sum / count else 0.0\n\n    def variance: Double = \n      if (count &gt; 0) {\n        (sumOfSquares / count) - (mean * mean)\n      else 0.0\n\n    def stdDev: Double = math.sqrt(variance)\n\n    override def toString: String =\n      f\"Count: $count, Mean: $mean%.2f, StdDev: $stdDev%.2f\"\n\n  val stats = new StreamingStats\n\n  // \u5927\u91cf\u306e\u30c7\u30fc\u30bf\u3092\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u51e6\u7406\n  Iterator.tabulate(100000) { _ =&gt;\n    scala.util.Random.nextGaussian() * 10 + 50\n  }.foreach(stats.add)\n\n  println(s\"\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u7d71\u8a08: $stats\")\n</code></pre>"},{"location":"part8/chapter32/#_10","title":"\u4e26\u5217\u30b3\u30ec\u30af\u30b7\u30e7\u30f3","text":"<pre><code>// ParallelCollections.scala\n@main def parallelCollections(): Unit = {\n  import scala.collection.parallel.CollectionConverters._\n\n  // \u4e26\u5217\u51e6\u7406\u306e\u57fa\u672c\n  println(\"=== \u4e26\u5217\u51e6\u7406 ===\")\n\n  val numbers = (1 to 10000000).toVector\n\n  def isPrime(n: Int): Boolean =\n    if (n &lt;= 1) { false\n    else if (n &lt;= 3) { true\n    else if (n % 2 == 0 || n % 3 == 0) { false\n    } else {\n      var i = 5\n      while i * i &lt;= n do\n        if n % i == 0 || n % (i + 2) == 0 then return false\n        i += 6\n      true\n\n  // \u901a\u5e38\u51e6\u7406\n  val start1 = System.currentTimeMillis()\n  val primes1 = numbers.filter(isPrime).length\n  val time1 = System.currentTimeMillis() - start1\n\n  // \u4e26\u5217\u51e6\u7406\n  val start2 = System.currentTimeMillis()\n  val primes2 = numbers.par.filter(isPrime).length\n  val time2 = System.currentTimeMillis() - start2\n\n  println(f\"\u901a\u5e38\u51e6\u7406: $primes1 \u500b\u306e\u7d20\u6570, $time1 ms\")\n  println(f\"\u4e26\u5217\u51e6\u7406: $primes2 \u500b\u306e\u7d20\u6570, $time2 ms\")\n  println(f\"\u9ad8\u901f\u5316: ${time1.toDouble / time2}%.2f \u500d\")\n\n  // \u4e26\u5217\u51e6\u7406\u306e\u6ce8\u610f\u70b9\n  println(\"\\n=== \u4e26\u5217\u51e6\u7406\u306e\u6ce8\u610f\u70b9 ===\")\n\n  // \u526f\u4f5c\u7528\u306e\u3042\u308b\u64cd\u4f5c\u306f\u5371\u967a\n  var counter1 = 0\n  (1 to 10000).foreach { _ =&gt;\n    counter1 += 1  // \u9806\u6b21\u51e6\u7406\u306a\u306e\u3067\u6b63\u78ba\n\n}\n\n  var counter2 = 0\n  (1 to 10000).par.foreach { _ =&gt;\n    counter2 += 1  // \u4e26\u5217\u51e6\u7406\u3067\u7af6\u5408\u72b6\u614b\uff01\n\n}\n\n  println(s\"\u9806\u6b21\u30ab\u30a6\u30f3\u30c8: $counter1\")\n  println(s\"\u4e26\u5217\u30ab\u30a6\u30f3\u30c8: $counter2 \uff08\u4e0d\u6b63\u78ba\uff01\uff09\")\n\n  // \u6b63\u3057\u3044\u4e26\u5217\u96c6\u8a08\n  val sum = (1 to 10000).par.sum\n  println(s\"\u4e26\u5217\u5408\u8a08: $sum \uff08\u6b63\u78ba\uff09\")\n\n  // \u4e26\u5217\u51e6\u7406\u304c\u6709\u52b9\u306a\u5834\u5408\n  println(\"\\n=== \u4e26\u5217\u51e6\u7406\u306e\u52b9\u679c\u7684\u306a\u4f7f\u7528 ===\")\n\n  case class Point(x: Double, y: Double):\n    def distanceToOrigin: Double = math.sqrt(x * x + y * y)\n\n  val points = Vector.tabulate(1000000) { i =&gt;\n    Point(scala.util.Random.nextDouble() * 100, \n          scala.util.Random.nextDouble() * 100)\n\n}\n\n  // \u91cd\u3044\u8a08\u7b97\u3092\u4e26\u5217\u5316\n  val start3 = System.currentTimeMillis()\n  val avgDistance = points.par\n    .map(_.distanceToOrigin)\n    .sum / points.length\n  val time3 = System.currentTimeMillis() - start3\n\n  println(f\"\u5e73\u5747\u8ddd\u96e2: $avgDistance%.2f ($time3 ms)\")\n</code></pre>"},{"location":"part8/chapter32/#_11","title":"\u5b9f\u8df5\u4f8b\uff1a\u30c7\u30fc\u30bf\u5206\u6790\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3","text":"<pre><code>// DataAnalysisPipeline.scala\n@main def dataAnalysisPipeline(): Unit = {\n  import java.time.LocalDate\n  import scala.util.Random\n\n  // \u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\uff1a\u58f2\u4e0a\u8a18\u9332\n  case class SalesRecord(\n    date: LocalDate,\n    productId: String,\n    quantity: Int,\n    unitPrice: Double,\n    customerId: String,\n    region: String\n  ):\n    def amount: Double = quantity * unitPrice\n\n  // \u5927\u91cf\u306e\u30c0\u30df\u30fc\u30c7\u30fc\u30bf\u751f\u6210\n  def generateSalesData(count: Int): Iterator[SalesRecord] =\n    val products = Vector(\"P001\", \"P002\", \"P003\", \"P004\", \"P005\")\n    val regions = Vector(\"\u6771\u4eac\", \"\u5927\u962a\", \"\u540d\u53e4\u5c4b\", \"\u798f\u5ca1\", \"\u672d\u5e4c\")\n    val baseDate = LocalDate.of(2024, 1, 1)\n\n    Iterator.tabulate(count) { i =&gt;\n      SalesRecord(\n        date = baseDate.plusDays(Random.nextInt(365)),\n        productId = products(Random.nextInt(products.length)),\n        quantity = Random.nextInt(10) + 1,\n        unitPrice = (Random.nextInt(50) + 1) * 100.0,\n        customerId = f\"C${Random.nextInt(1000)}%04d\",\n        region = regions(Random.nextInt(regions.length))\n      )\n\n}\n\n  // \u52b9\u7387\u7684\u306a\u30c7\u30fc\u30bf\u5206\u6790\n  println(\"=== \u30c7\u30fc\u30bf\u5206\u6790\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3 ===\")\n\n  val salesData = generateSalesData(100000)\n\n  // 1. \u5730\u57df\u5225\u30fb\u6708\u5225\u306e\u58f2\u4e0a\u96c6\u8a08\uff08\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u51e6\u7406\uff09\n  val regionMonthlyStats = salesData\n    .map { record =&gt;\n      val month = record.date.getMonthValue\n      ((record.region, month), record.amount)\n\n}\n    .toList\n    .groupMapReduce(_._1)(_._2)(_ + _)\n\n  println(\"\u5730\u57df\u5225\u30fb\u6708\u5225\u58f2\u4e0a\uff08\u4e00\u90e8\uff09:\")\n  regionMonthlyStats\n    .toList\n    .sortBy(_._1)\n    .take(10)\n    .foreach { case ((region, month), amount) =&gt;\n      println(f\"  $region - $month \u6708: \u00a5$amount%,.0f\")\n\n}\n\n  // 2. \u5546\u54c1\u5225\u306e\u58f2\u4e0a\u30e9\u30f3\u30ad\u30f3\u30b0\uff08\u4e26\u5217\u51e6\u7406\uff09\n  val productRanking = generateSalesData(100000)\n    .toVector\n    .par\n    .groupBy(_.productId)\n    .mapValues { records =&gt;\n      val total = records.map(_.amount).sum\n      val count = records.length\n      (total, count)\n\n}\n    .toList\n    .sortBy(-_._2._1)\n\n  println(\"\\n\u5546\u54c1\u5225\u58f2\u4e0a\u30e9\u30f3\u30ad\u30f3\u30b0:\")\n  productRanking.foreach { case (productId, (total, count)) =&gt;\n    println(f\"  $productId: \u00a5$total%,.0f ($count \u4ef6)\")\n\n}\n\n  // 3. \u9867\u5ba2\u30bb\u30b0\u30e1\u30f3\u30c8\u5206\u6790\uff08\u52b9\u7387\u7684\u306a\u30b0\u30eb\u30fc\u30d7\u5316\uff09\n  case class CustomerStats(\n    customerId: String,\n    totalAmount: Double,\n    orderCount: Int,\n    avgOrderValue: Double,\n    favoriteRegion: String\n  )\n\n  val customerStats = generateSalesData(100000)\n    .toList\n    .groupBy(_.customerId)\n    .view  // \u30d3\u30e5\u30fc\u3067\u9045\u5ef6\u8a55\u4fa1\n    .map { case (customerId, records) =&gt;\n      val totalAmount = records.map(_.amount).sum\n      val orderCount = records.length\n      val avgOrderValue = totalAmount / orderCount\n      val favoriteRegion = records\n        .groupBy(_.region)\n        .maxBy(_._2.length)\n        ._1\n\n      CustomerStats(\n        customerId,\n        totalAmount,\n        orderCount,\n        avgOrderValue,\n        favoriteRegion\n      )\n\n}\n    .filter(_.orderCount &gt;= 5)  // \u30a2\u30af\u30c6\u30a3\u30d6\u306a\u9867\u5ba2\u306e\u307f\n    .toList\n    .sortBy(-_.totalAmount)\n    .take(10)\n\n  println(\"\\n\u4e0a\u4f4d\u9867\u5ba2:\")\n  customerStats.foreach { stats =&gt;\n    println(f\"  ${stats.customerId}: \" +\n            f\"\u00a5${stats.totalAmount}%,.0f \" +\n            f\"(${stats.orderCount}\u4ef6, \" +\n            f\"\u5e73\u5747 \u00a5${stats.avgOrderValue}%,.0f, \" +\n            f\"${stats.favoriteRegion})\")\n\n}\n</code></pre>"},{"location":"part8/chapter32/#_12","title":"\u7df4\u7fd2\u3057\u3066\u307f\u3088\u3046\uff01","text":""},{"location":"part8/chapter32/#1","title":"\u7df4\u7fd21\uff1a\u30ed\u30b0\u5206\u6790\u30b7\u30b9\u30c6\u30e0","text":"<p>\u5927\u91cf\u306e\u30ed\u30b0\u30d5\u30a1\u30a4\u30eb\u3092\u52b9\u7387\u7684\u306b\u5206\u6790\u3059\u308b\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\uff1a - \u30a8\u30e9\u30fc\u306e\u983b\u5ea6\u5206\u6790 - \u30ec\u30b9\u30dd\u30f3\u30b9\u30bf\u30a4\u30e0\u306e\u7d71\u8a08 - \u7570\u5e38\u691c\u77e5</p>"},{"location":"part8/chapter32/#2","title":"\u7df4\u7fd22\uff1a\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u96c6\u8a08","text":"<p>\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u30c7\u30fc\u30bf\u306e\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u96c6\u8a08\u3092\u5b9f\u88c5\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - \u79fb\u52d5\u5e73\u5747\u306e\u8a08\u7b97 - \u30c8\u30c3\u30d7N \u306e\u66f4\u65b0 - \u7570\u5e38\u5024\u306e\u691c\u51fa</p>"},{"location":"part8/chapter32/#3","title":"\u7df4\u7fd23\uff1a\u5927\u898f\u6a21\u30c7\u30fc\u30bf\u51e6\u7406","text":"<p>\u30e1\u30e2\u30ea\u306b\u53ce\u307e\u3089\u306a\u3044\u5927\u898f\u6a21\u30c7\u30fc\u30bf\u3092\u51e6\u7406\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - \u5916\u90e8\u30bd\u30fc\u30c8 - \u5206\u6563\u96c6\u8a08 - \u30b5\u30f3\u30d7\u30ea\u30f3\u30b0</p>"},{"location":"part8/chapter32/#_13","title":"\u3053\u306e\u7ae0\u306e\u307e\u3068\u3081","text":"<p>\u52b9\u7387\u7684\u306a\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u64cd\u4f5c\u306e\u6280\u8853\u3092\u7fd2\u5f97\u3057\u307e\u3057\u305f\uff01</p>"},{"location":"part8/chapter32/#_14","title":"\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3053\u3068","text":"<p>\u2705 \u9045\u5ef6\u8a55\u4fa1\u306e\u6d3b\u7528 - \u30d3\u30e5\u30fc\u306e\u4f7f\u3044\u65b9 - \u5fc5\u8981\u306a\u5206\u3060\u3051\u51e6\u7406 - \u30e1\u30e2\u30ea\u52b9\u7387\u306e\u6539\u5584</p> <p>\u2705 \u52b9\u7387\u7684\u306a\u5909\u63db - collect \u306e\u6d3b\u7528 - groupBy \u306e\u6700\u9069\u5316 - fold \u306e\u4f7f\u3044\u5206\u3051</p> <p>\u2705 \u30e1\u30e2\u30ea\u7ba1\u7406 - \u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u6d3b\u7528 - \u30d0\u30c3\u30d5\u30a1\u30ea\u30f3\u30b0 - \u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u51e6\u7406</p> <p>\u2705 \u4e26\u5217\u51e6\u7406 - \u4e26\u5217\u30b3\u30ec\u30af\u30b7\u30e7\u30f3 - \u6ce8\u610f\u70b9\u306e\u7406\u89e3 - \u9069\u5207\u306a\u4f7f\u3044\u5206\u3051</p>"},{"location":"part8/chapter32/#_15","title":"\u52b9\u7387\u5316\u306e\u30b3\u30c4","text":"<ol> <li> <p>\u6e2c\u5b9a\u3057\u3066\u304b\u3089\u6700\u9069\u5316</p> <ul> <li>\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u3092\u7279\u5b9a</li> <li>\u5b9f\u30c7\u30fc\u30bf\u3067\u691c\u8a3c</li> <li>\u904e\u5ea6\u306a\u6700\u9069\u5316\u3092\u907f\u3051\u308b</li> </ul> </li> <li> <p>\u9069\u5207\u306a\u624b\u6cd5\u3092\u9078\u3076</p> <ul> <li>\u30c7\u30fc\u30bf\u91cf\u306b\u5fdc\u3058\u3066</li> <li>\u51e6\u7406\u5185\u5bb9\u306b\u5fdc\u3058\u3066</li> <li>\u30e1\u30e2\u30ea\u5236\u7d04\u3092\u8003\u616e</li> </ul> </li> <li> <p>\u8aad\u307f\u3084\u3059\u3055\u3068\u306e\u30d0\u30e9\u30f3\u30b9</p> <ul> <li>\u4fdd\u5b88\u6027\u3092\u7dad\u6301</li> <li>\u30b3\u30e1\u30f3\u30c8\u3067\u610f\u56f3\u3092\u8aac\u660e</li> <li>\u30c1\u30fc\u30e0\u3067\u5171\u6709\u53ef\u80fd\u306b</li> </ul> </li> </ol>"},{"location":"part8/chapter32/#_16","title":"\u6b21\u306e\u7ae0\u3067\u306f...","text":"<p>\u4e26\u884c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u5165\u9580\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3059\u3002\u30de\u30eb\u30c1\u30b3\u30a2\u306e\u529b\u3092\u6700\u5927\u9650\u306b\u6d3b\u7528\u3057\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part8/chapter32/#_17","title":"\u6700\u5f8c\u306b","text":"<p>\u52b9\u7387\u7684\u306a\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u64cd\u4f5c\u306f\u300c\u30c7\u30fc\u30bf\u51e6\u7406\u306e\u6975\u610f\u300d\u3067\u3059\u3002\u5927\u91cf\u306e\u30c7\u30fc\u30bf\u3082\u3001\u9069\u5207\u306a\u6280\u8853\u3092\u4f7f\u3048\u3070\u8efd\u3084\u304b\u306b\u51e6\u7406\u3067\u304d\u308b\u3002\u30d3\u30e5\u30fc\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u3001\u4e26\u5217\u51e6\u7406...\u3053\u308c\u3089\u306e\u9053\u5177\u3092\u4f7f\u3044\u3053\u306a\u305b\u3070\u3001\u3069\u3093\u306a\u5927\u304d\u306a\u30c7\u30fc\u30bf\u3082\u6050\u308c\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u30c7\u30fc\u30bf\u306e\u6d77\u3092\u81ea\u5728\u306b\u6cf3\u3050\u6280\u8853\u3092\u3001\u3042\u306a\u305f\u306f\u624b\u306b\u5165\u308c\u307e\u3057\u305f\uff01</p>"},{"location":"part8/chapter33/","title":"\u7b2c33\u7ae0 \u4e26\u884c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u5165\u9580","text":""},{"location":"part8/chapter33/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u30ec\u30b9\u30c8\u30e9\u30f3\u306e\u53a8\u623f\u3092\u60f3\u50cf\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u4e00\u4eba\u306e\u30b7\u30a7\u30d5\u304c\u3059\u3079\u3066\u306e\u6599\u7406\u3092\u9806\u756a\u306b\u4f5c\u308b\u3088\u308a\u3001\u8907\u6570\u306e\u30b7\u30a7\u30d5\u304c\u540c\u6642\u306b\u9055\u3046\u6599\u7406\u3092\u4f5c\u3063\u305f\u65b9\u304c\u52b9\u7387\u7684\u3067\u3059\u3088\u306d\u3002\u3067\u3082\u3001\u540c\u3058\u30d5\u30e9\u30a4\u30d1\u30f3\u3092\u540c\u6642\u306b\u4f7f\u304a\u3046\u3068\u3057\u305f\u308a\u3001\u8abf\u5473\u6599\u306e\u9806\u756a\u3092\u9593\u9055\u3048\u305f\u308a\u3059\u308b\u3068\u3001\u5927\u5909\u306a\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002</p> <p>\u4e26\u884c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3082\u540c\u3058\u3067\u3059\u3002\u8907\u6570\u306e\u51e6\u7406\u3092\u540c\u6642\u306b\u5b9f\u884c\u3057\u3066\u52b9\u7387\u3092\u4e0a\u3052\u307e\u3059\u304c\u3001\u9069\u5207\u306b\u7ba1\u7406\u3057\u306a\u3044\u3068\u554f\u984c\u304c\u8d77\u304d\u307e\u3059\u3002\u3053\u306e\u7ae0\u3067\u3001\u5b89\u5168\u3067\u52b9\u7387\u7684\u306a\u4e26\u884c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u5b66\u3073\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part8/chapter33/#future","title":"\u30b9\u30ec\u30c3\u30c9\u3068Future","text":""},{"location":"part8/chapter33/#_2","title":"\u30b9\u30ec\u30c3\u30c9\u306e\u57fa\u672c","text":"<pre><code>// ThreadBasics.scala\n@main def threadBasics(): Unit = {\n  // \u57fa\u672c\u7684\u306a\u30b9\u30ec\u30c3\u30c9\u4f5c\u6210\n  println(\"=== \u30b9\u30ec\u30c3\u30c9\u306e\u57fa\u672c ===\")\n\n  val thread1 = new Thread(() =&gt; {\n    for (i &lt;- 1 to 5) {\n      println(s\"\u30b9\u30ec\u30c3\u30c91: $i\")\n      Thread.sleep(100)\n  })\n\n  val thread2 = new Thread(() =&gt; {\n    for (i &lt;- 1 to 5) {\n      println(s\"  \u30b9\u30ec\u30c3\u30c92: $i\")\n      Thread.sleep(100)\n  })\n\n  // \u30b9\u30ec\u30c3\u30c9\u3092\u958b\u59cb\n  thread1.start()\n  thread2.start()\n\n  // \u30b9\u30ec\u30c3\u30c9\u306e\u7d42\u4e86\u3092\u5f85\u3064\n  thread1.join()\n  thread2.join()\n\n  println(\"\\n\u3059\u3079\u3066\u306e\u30b9\u30ec\u30c3\u30c9\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\")\n\n  // \u30b9\u30ec\u30c3\u30c9\u30d7\u30fc\u30eb\u306e\u4f7f\u7528\n  println(\"\\n=== \u30b9\u30ec\u30c3\u30c9\u30d7\u30fc\u30eb ===\")\n\n  import java.util.concurrent.Executors\n\n  val executor = Executors.newFixedThreadPool(3)\n\n  for (i &lt;- 1 to 10) {\n    executor.submit(() =&gt; {\n      println(s\"\u30bf\u30b9\u30af$i \u958b\u59cb (${Thread.currentThread.getName})\")\n      Thread.sleep(500)\n      println(s\"\u30bf\u30b9\u30af$i \u5b8c\u4e86\")\n    })\n\n  executor.shutdown()\n  while !executor.isTerminated do\n    Thread.sleep(100)\n\n  println(\"\u3059\u3079\u3066\u306e\u30bf\u30b9\u30af\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\")\n</code></pre>"},{"location":"part8/chapter33/#future_1","title":"Future\u306b\u3088\u308b\u975e\u540c\u671f\u51e6\u7406","text":"<pre><code>// FutureBasics.scala\n@main def futureBasics(): Unit = {\n  import scala.concurrent.{Future, Promise\n}\n  import scala.concurrent.ExecutionContext.Implicits.global\n  import scala.concurrent.duration._\n  import scala.util.{Success, Failure\n}\n\n  // \u57fa\u672c\u7684\u306aFuture\n  println(\"=== Future\u306e\u57fa\u672c ===\")\n\n  val future1 = Future {\n    println(\"\u8a08\u7b97\u958b\u59cb...\")\n    Thread.sleep(1000)\n    42\n\n}\n\n  future1.onComplete {\n    case Success(value) =&gt; println(s\"\u7d50\u679c: $value\")\n    case Failure(error) =&gt; println(s\"\u30a8\u30e9\u30fc: $error\")\n\n}\n\n  // \u8907\u6570\u306eFuture\u306e\u5408\u6210\n  println(\"\\n=== Future\u306e\u5408\u6210 ===\")\n\n  def fetchUserName(id: Int): Future[String] = Future {\n    Thread.sleep(500)\n    s\"User$id\"\n\n}\n\n  def fetchUserScore(name: String): Future[Int] = Future {\n    Thread.sleep(300)\n    name.length * 10\n\n}\n\n  val result = for\n    name &lt;- fetchUserName(123)\n    score &lt;- fetchUserScore(name)\n  yield s\"$name: $score points\"\n\n  result.foreach(println)\n\n  // \u4e26\u5217\u5b9f\u884c\n  println(\"\\n=== \u4e26\u5217\u5b9f\u884c ===\")\n\n  val start = System.currentTimeMillis()\n\n  val f1 = Future { Thread.sleep(1000); \"Task1\"\n}\n  val f2 = Future { Thread.sleep(1000); \"Task2\"\n}\n  val f3 = Future { Thread.sleep(1000); \"Task3\"\n}\n\n  val combined = for\n    r1 &lt;- f1\n    r2 &lt;- f2\n    r3 &lt;- f3\n  yield List(r1, r2, r3)\n\n  combined.foreach { results =&gt;\n    val elapsed = System.currentTimeMillis() - start\n    println(s\"\u7d50\u679c: $results (${elapsed}ms)\")\n\n}\n\n  // \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\n  println(\"\\n=== \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0 ===\")\n\n  def riskyOperation(n: Int): Future[Int] = Future {\n    if (n &lt; 0) { throw new IllegalArgumentException(\"\u8ca0\u306e\u6570\u306f\u4e0d\u53ef\")\n    n * 2\n\n}\n\n  val futures = List(\n    riskyOperation(10),\n    riskyOperation(-5),\n    riskyOperation(20)\n  )\n\n  futures.foreach { f =&gt;\n    f.recover {\n      case _: IllegalArgumentException =&gt; -1\n    }.foreach(r =&gt; println(s\"\u7d50\u679c: $r\"))\n\n}\n\n  Thread.sleep(2000)  // \u7d50\u679c\u3092\u5f85\u3064\n</code></pre>"},{"location":"part8/chapter33/#_3","title":"\u540c\u671f\u3068\u30ed\u30c3\u30af","text":""},{"location":"part8/chapter33/#_4","title":"\u5171\u6709\u72b6\u614b\u306e\u554f\u984c","text":"<pre><code>// SharedStateProblems.scala\n@main def sharedStateProblems(): Unit = {\n  import scala.concurrent.ExecutionContext.Implicits.global\n  import java.util.concurrent.atomic.AtomicInteger\n\n  // \u554f\u984c\u306e\u3042\u308b\u30b3\u30fc\u30c9\uff08\u7af6\u5408\u72b6\u614b\uff09\n  println(\"=== \u7af6\u5408\u72b6\u614b\u306e\u4f8b ===\")\n\n  var unsafeCounter = 0\n\n  val futures1 = (1 to 10000).map { _ =&gt;\n    Future {\n      unsafeCounter += 1  // \u5b89\u5168\u3067\u306a\u3044\uff01\n\n}\n\n}\n\n  Future.sequence(futures1).foreach { _ =&gt;\n    println(s\"\u5b89\u5168\u3067\u306a\u3044\u30ab\u30a6\u30f3\u30bf\u30fc: $unsafeCounter \uff0810000\u306b\u306a\u308b\u306f\u305a\uff09\")\n\n}\n\n  Thread.sleep(1000)\n\n  // \u89e3\u6c7a\u7b561\uff1asynchronized\n  println(\"\\n=== synchronized\u306b\u3088\u308b\u89e3\u6c7a ===\")\n\n  var syncCounter = 0\n  val lock = new Object\n\n  val futures2 = (1 to 10000).map { _ =&gt;\n    Future {\n      lock.synchronized {\n        syncCounter += 1\n\n}\n\n}\n\n}\n\n  Future.sequence(futures2).foreach { _ =&gt;\n    println(s\"\u540c\u671f\u30ab\u30a6\u30f3\u30bf\u30fc: $syncCounter\")\n\n}\n\n  Thread.sleep(1000)\n\n  // \u89e3\u6c7a\u7b562\uff1aAtomic\n  println(\"\\n=== Atomic\u306b\u3088\u308b\u89e3\u6c7a ===\")\n\n  val atomicCounter = new AtomicInteger(0)\n\n  val futures3 = (1 to 10000).map { _ =&gt;\n    Future {\n      atomicCounter.incrementAndGet()\n\n}\n\n}\n\n  Future.sequence(futures3).foreach { _ =&gt;\n    println(s\"Atomic\u30ab\u30a6\u30f3\u30bf\u30fc: ${atomicCounter.get}\")\n\n}\n\n  Thread.sleep(1000)\n\n  // \u89e3\u6c7a\u7b563\uff1a\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb + \u30e1\u30c3\u30bb\u30fc\u30b8\u30d1\u30c3\u30b7\u30f3\u30b0\n  println(\"\\n=== \u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u89e3\u6c7a ===\")\n\n  case class CounterState(value: Int)\n\n  def updateCounter(states: List[Future[CounterState]]): Future[CounterState] =\n    Future.sequence(states).map { list =&gt;\n      CounterState(list.map(_.value).sum)\n\n}\n\n  val initialStates = (1 to 100).map(_ =&gt; Future(CounterState(1))).toList\n\n  updateCounter(initialStates).foreach { finalState =&gt;\n    println(s\"\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u30ab\u30a6\u30f3\u30bf\u30fc: ${finalState.value}\")\n\n}\n\n  Thread.sleep(1000)\n</code></pre>"},{"location":"part8/chapter33/#_5","title":"\u30c7\u30c3\u30c9\u30ed\u30c3\u30af\u306e\u56de\u907f","text":"<pre><code>// DeadlockAvoidance.scala\n@main def deadlockAvoidance(): Unit = {\n  import scala.concurrent.ExecutionContext.Implicits.global\n\n  // \u30c7\u30c3\u30c9\u30ed\u30c3\u30af\u304c\u8d77\u304d\u308b\u4f8b\uff08\u5b9f\u884c\u3057\u306a\u3044\u3053\u3068\uff01\uff09\n  println(\"=== \u30c7\u30c3\u30c9\u30ed\u30c3\u30af\u306e\u5371\u967a\u6027 ===\")\n\n  class BankAccount(var balance: Double):\n    def transfer(to: BankAccount, amount: Double): Unit =\n      this.synchronized {\n        Thread.sleep(10)  // \u51e6\u7406\u6642\u9593\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\n        to.synchronized {\n          if (this.balance &gt;= amount) {\n            this.balance -= amount\n            to.balance += amount\n\n}\n\n}\n\n  // \u30c7\u30c3\u30c9\u30ed\u30c3\u30af\u3092\u907f\u3051\u308b\u65b9\u6cd5\n  println(\"\\n=== \u30c7\u30c3\u30c9\u30ed\u30c3\u30af\u56de\u907f ===\")\n\n  class SafeBankAccount(val id: Int, var balance: Double):\n    def transfer(to: SafeBankAccount, amount: Double): Unit =\n      // \u5e38\u306b\u540c\u3058\u9806\u5e8f\u3067\u30ed\u30c3\u30af\n      val (first, second) = if (this.id &lt; to.id) { (this, to) else (to, this)\n\n      first.synchronized {\n        second.synchronized {\n          if (this.balance &gt;= amount) {\n            this.balance -= amount\n            to.balance += amount\n            println(s\"\u9001\u91d1\u6210\u529f: ${this.id} -&gt; ${to.id}, $amount \u5186\")\n          } else {\n            println(s\"\u9001\u91d1\u5931\u6557: \u6b8b\u9ad8\u4e0d\u8db3\")\n\n}\n\n}\n\n  val account1 = new SafeBankAccount(1, 1000)\n  val account2 = new SafeBankAccount(2, 1000)\n\n  val transfer1 = Future {\n    for (i &lt;- 1 to 5) {\n      account1.transfer(account2, 100)\n      Thread.sleep(50)\n\n}\n\n  val transfer2 = Future {\n    for (i &lt;- 1 to 5) {\n      account2.transfer(account1, 150)\n      Thread.sleep(50)\n\n}\n\n  Future.sequence(List(transfer1, transfer2)).foreach { _ =&gt;\n    println(s\"\\n\u6700\u7d42\u6b8b\u9ad8:\")\n    println(s\"  \u30a2\u30ab\u30a6\u30f3\u30c81: ${account1.balance}\")\n    println(s\"  \u30a2\u30ab\u30a6\u30f3\u30c82: ${account2.balance}\")\n\n}\n\n  Thread.sleep(1000)\n</code></pre>"},{"location":"part8/chapter33/#_6","title":"\u30a2\u30af\u30bf\u30fc\u30e2\u30c7\u30eb","text":""},{"location":"part8/chapter33/#_7","title":"\u7c21\u5358\u306a\u30a2\u30af\u30bf\u30fc\u5b9f\u88c5","text":"<pre><code>// SimpleActor.scala\n@main def simpleActor(): Unit = {\n  import scala.concurrent.ExecutionContext.Implicits.global\n  import java.util.concurrent.{LinkedBlockingQueue, TimeUnit\n}\n\n  // \u30b7\u30f3\u30d7\u30eb\u306a\u30a2\u30af\u30bf\u30fc\u306e\u5b9f\u88c5\n  trait Message\n  case class Deposit(amount: Double) extends Message\n  case class Withdraw(amount: Double) extends Message\n  case class GetBalance(replyTo: SimpleActor[BalanceReply]) extends Message\n  case class BalanceReply(balance: Double) extends Message\n  case object Stop extends Message\n\n  class SimpleActor[T]:\n    private val mailbox = new LinkedBlockingQueue[T]()\n    @volatile private var running = true\n\n    def send(message: T): Unit = mailbox.offer(message)\n\n    def receive(handler: T =&gt; Unit): Unit =\n      val thread = new Thread(() =&gt; {\n        while running do\n          Option(mailbox.poll(100, TimeUnit.MILLISECONDS)).foreach(handler)\n      })\n      thread.start()\n\n    def stop(): Unit = running = false\n\n  // \u9280\u884c\u53e3\u5ea7\u30a2\u30af\u30bf\u30fc\n  class BankAccountActor(initialBalance: Double):\n    private var balance = initialBalance\n    private val actor = new SimpleActor[Message]\n\n    actor.receive {\n      case Deposit(amount) =&gt;\n        balance += amount\n        println(s\"\u5165\u91d1: $amount \u5186, \u6b8b\u9ad8: $balance \u5186\")\n\n      case Withdraw(amount) =&gt;\n        if (balance &gt;= amount) {\n          balance -= amount\n          println(s\"\u51fa\u91d1: $amount \u5186, \u6b8b\u9ad8: $balance \u5186\")\n        } else {\n          println(s\"\u51fa\u91d1\u5931\u6557: \u6b8b\u9ad8\u4e0d\u8db3\")\n\n      case GetBalance(replyTo) =&gt;\n        replyTo.send(BalanceReply(balance))\n\n      case Stop =&gt;\n        println(\"\u30a2\u30af\u30bf\u30fc\u505c\u6b62\")\n        actor.stop()\n\n}\n\n    def deposit(amount: Double): Unit = actor.send(Deposit(amount))\n    def withdraw(amount: Double): Unit = actor.send(Withdraw(amount))\n    def getBalance(replyTo: SimpleActor[BalanceReply]): Unit = \n      actor.send(GetBalance(replyTo))\n    def stop(): Unit = actor.send(Stop)\n\n  // \u4f7f\u7528\u4f8b\n  println(\"=== \u30a2\u30af\u30bf\u30fc\u30e2\u30c7\u30eb ===\")\n\n  val account = new BankAccountActor(1000)\n\n  // \u4e26\u884c\u3057\u3066\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u4fe1\n  Future { \n    for (i &lt;- 1 to 5) {\n      account.deposit(100)\n      Thread.sleep(100)\n\n}\n\n  Future {\n    for (i &lt;- 1 to 3) {\n      account.withdraw(200)\n      Thread.sleep(150)\n\n}\n\n  Thread.sleep(1000)\n\n  // \u6b8b\u9ad8\u78ba\u8a8d\n  val replyActor = new SimpleActor[BalanceReply]\n  replyActor.receive {\n    case BalanceReply(balance) =&gt;\n      println(s\"\\n\u6700\u7d42\u6b8b\u9ad8: $balance \u5186\")\n      replyActor.stop()\n\n}\n\n  account.getBalance(replyActor)\n  Thread.sleep(500)\n\n  account.stop()\n</code></pre>"},{"location":"part8/chapter33/#web","title":"\u5b9f\u8df5\u4f8b\uff1a\u4e26\u884cWeb\u30af\u30ed\u30fc\u30e9\u30fc","text":"<pre><code>// ConcurrentWebCrawler.scala\n@main def concurrentWebCrawler(): Unit = {\n  import scala.concurrent.{Future, Promise\n}\n  import scala.concurrent.ExecutionContext.Implicits.global\n  import scala.collection.concurrent.TrieMap\n  import java.util.concurrent.{Semaphore, ConcurrentLinkedQueue\n}\n  import scala.util.{Success, Failure, Random\n}\n\n  // \u4eee\u60f3\u7684\u306aWeb\u30da\u30fc\u30b8\n  case class WebPage(url: String, content: String, links: Set[String])\n\n  // Web\u30da\u30fc\u30b8\u3092\u53d6\u5f97\u3059\u308b\uff08\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\uff09\n  def fetchPage(url: String): Future[WebPage] = Future {\n    Thread.sleep(Random.nextInt(500) + 100)  // \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u9045\u5ef6\n\n    // \u30c0\u30df\u30fc\u30c7\u30fc\u30bf\u751f\u6210\n    val links = (1 to Random.nextInt(5) + 1).map { i =&gt;\n      s\"$url/link$i\"\n    }.toSet\n\n    WebPage(url, s\"Content of $url\", links)\n\n}\n\n  // \u4e26\u884c\u30af\u30ed\u30fc\u30e9\u30fc\n  class ConcurrentCrawler(maxConcurrency: Int, maxDepth: Int):\n    private val visited = TrieMap[String, WebPage]()\n    private val semaphore = new Semaphore(maxConcurrency)\n    private val queue = new ConcurrentLinkedQueue[(String, Int)]()\n\n    def crawl(startUrl: String): Future[Map[String, WebPage]] =\n      val promise = Promise[Map[String, WebPage]]()\n\n      queue.offer((startUrl, 0))\n      processQueue(promise)\n\n      promise.future\n\n    private def processQueue(promise: Promise[Map[String, WebPage]]): Unit =\n      Future {\n        while !queue.isEmpty || semaphore.availablePermits() &lt; maxConcurrency do\n          Option(queue.poll()) match {\n            case Some((url, depth)) if !visited.contains(url) &amp;&amp; depth &lt;= maxDepth =&gt;\n              semaphore.acquire()\n\n              fetchPage(url).onComplete {\n                case Success(page) =&gt;\n                  visited.put(url, page)\n                  println(s\"\u53d6\u5f97: $url (\u6df1\u3055: $depth)\")\n\n                  // \u65b0\u3057\u3044\u30ea\u30f3\u30af\u3092\u30ad\u30e5\u30fc\u306b\u8ffd\u52a0\n                  page.links.foreach { link =&gt;\n                    queue.offer((link, depth + 1))\n\n}\n\n                  semaphore.release()\n\n                case Failure(error) =&gt;\n                  println(s\"\u30a8\u30e9\u30fc: $url - $error\")\n                  semaphore.release()\n\n}\n\n            case Some(_) =&gt; // \u65e2\u306b\u8a2a\u554f\u6e08\u307f\u304b\u6df1\u3055\u5236\u9650\n            case None =&gt; Thread.sleep(10)  // \u30ad\u30e5\u30fc\u304c\u7a7a\n\n        promise.success(visited.toMap)\n\n}\n\n  // \u30af\u30ed\u30fc\u30e9\u30fc\u306e\u5b9f\u884c\n  println(\"=== \u4e26\u884cWeb\u30af\u30ed\u30fc\u30e9\u30fc ===\")\n\n  val crawler = new ConcurrentCrawler(maxConcurrency = 3, maxDepth = 2)\n  val startTime = System.currentTimeMillis()\n\n  crawler.crawl(\"http://example.com\").foreach { results =&gt;\n    val elapsed = System.currentTimeMillis() - startTime\n\n    println(s\"\\n=== \u30af\u30ed\u30fc\u30eb\u5b8c\u4e86 ===\")\n    println(s\"\u30da\u30fc\u30b8\u6570: ${results.size}\")\n    println(s\"\u6240\u8981\u6642\u9593: ${elapsed}ms\")\n\n    println(\"\\n\u53d6\u5f97\u3057\u305f\u30da\u30fc\u30b8:\")\n    results.keys.toList.sorted.foreach { url =&gt;\n      val page = results(url)\n      println(s\"  $url (\u30ea\u30f3\u30af\u6570: ${page.links.size})\")\n\n}\n\n}\n\n  Thread.sleep(5000)  // \u5b8c\u4e86\u3092\u5f85\u3064\n\n  // \u30d7\u30ed\u30c7\u30e5\u30fc\u30b5\u30fc\u30fb\u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u30d1\u30bf\u30fc\u30f3\n  println(\"\\n\\n=== \u30d7\u30ed\u30c7\u30e5\u30fc\u30b5\u30fc\u30fb\u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc ===\")\n\n  class Pipeline[T](bufferSize: Int):\n    private val buffer = new LinkedBlockingQueue[T](bufferSize)\n    @volatile private var producing = true\n\n    def produce(item: T): Boolean = \n      if (producing) { buffer.offer(item, 100, TimeUnit.MILLISECONDS)\n      else false\n\n    def consume(): Option[T] = \n      Option(buffer.poll(100, TimeUnit.MILLISECONDS))\n\n    def stopProducing(): Unit = producing = false\n\n    def isDone: Boolean = !producing &amp;&amp; buffer.isEmpty\n\n  // \u30c7\u30fc\u30bf\u51e6\u7406\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\n  val pipeline = new Pipeline[String](10)\n\n  // \u30d7\u30ed\u30c7\u30e5\u30fc\u30b5\u30fc\n  val producer = Future {\n    for (i &lt;- 1 to 20) {\n      val data = s\"Data-$i\"\n      if pipeline.produce(data) then\n        println(s\"\u751f\u6210: $data\")\n      Thread.sleep(100)\n    pipeline.stopProducing()\n\n}\n\n  // \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\uff08\u8907\u6570\uff09\n  def consumer(id: Int) = Future {\n    while !pipeline.isDone do\n      pipeline.consume().foreach { data =&gt;\n        println(s\"  \u6d88\u8cbb[$id]: $data \u3092\u51e6\u7406\u4e2d...\")\n        Thread.sleep(Random.nextInt(300) + 100)\n        println(s\"  \u6d88\u8cbb[$id]: $data \u5b8c\u4e86\")\n\n}\n\n}\n\n  val consumers = (1 to 3).map(consumer)\n\n  Future.sequence(producer :: consumers.toList).foreach { _ =&gt;\n    println(\"\\n\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406\u5b8c\u4e86\")\n\n}\n\n  Thread.sleep(5000)\n</code></pre>"},{"location":"part8/chapter33/#_8","title":"\u5b9f\u8df5\u4f8b\uff1a\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u30b7\u30b9\u30c6\u30e0","text":"<pre><code>// ReactiveSystem.scala\n@main def reactiveSystem(): Unit = {\n  import scala.concurrent.{Future, Promise\n}\n  import scala.concurrent.ExecutionContext.Implicits.global\n  import scala.collection.mutable\n  import java.util.concurrent.ConcurrentLinkedQueue\n\n  // \u30a4\u30d9\u30f3\u30c8\u99c6\u52d5\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\n  trait Event\n  case class TemperatureReading(sensorId: String, celsius: Double) extends Event\n  case class Alert(message: String, severity: String) extends Event\n  case class Command(action: String) extends Event\n\n  // \u30a4\u30d9\u30f3\u30c8\u30d0\u30b9\n  class EventBus:\n    private val subscribers = mutable.Map[Class[_], mutable.Set[Event =&gt; Unit]]()\n\n    def subscribe[T &lt;: Event](eventType: Class[T])(handler: T =&gt; Unit): Unit =\n      subscribers.synchronized {\n        val handlers = subscribers.getOrElseUpdate(eventType, mutable.Set.empty)\n        handlers += handler.asInstanceOf[Event =&gt; Unit]\n\n}\n\n    def publish(event: Event): Unit =\n      Future {\n        subscribers.synchronized {\n          subscribers.get(event.getClass).foreach { handlers =&gt;\n            handlers.foreach(_(event))\n\n}\n\n}\n\n}\n\n  // \u30bb\u30f3\u30b5\u30fc\u30b7\u30df\u30e5\u30ec\u30fc\u30bf\u30fc\n  class TemperatureSensor(id: String, bus: EventBus):\n    @volatile private var running = true\n\n    def start(): Unit = Future {\n      while running do\n        val temp = 20 + scala.util.Random.nextGaussian() * 5\n        bus.publish(TemperatureReading(id, temp))\n        Thread.sleep(1000)\n\n}\n\n    def stop(): Unit = running = false\n\n  // \u6e29\u5ea6\u30e2\u30cb\u30bf\u30fc\n  class TemperatureMonitor(bus: EventBus):\n    private val readings = mutable.Map[String, Double]()\n\n    bus.subscribe(classOf[TemperatureReading]) { reading =&gt;\n      readings.synchronized {\n        readings(reading.sensorId) = reading.celsius\n\n        if (reading.celsius &gt; 30) {\n          bus.publish(Alert(\n            s\"\u9ad8\u6e29\u8b66\u544a: ${reading.sensorId} = ${reading.celsius}\u00b0C\",\n            \"WARNING\"\n          ))\n        else if (reading.celsius &lt; 10) {\n          bus.publish(Alert(\n            s\"\u4f4e\u6e29\u8b66\u544a: ${reading.sensorId} = ${reading.celsius}\u00b0C\",\n            \"WARNING\"\n          ))\n\n}\n\n      println(f\"\u6e29\u5ea6: ${reading.sensorId} = ${reading.celsius}%.1f\u00b0C\")\n\n}\n\n    def getAverageTemperature: Option[Double] =\n      readings.synchronized {\n        if (readings.nonEmpty) {\n          Some(readings.values.sum / readings.size)\n        else None\n\n}\n\n  // \u30a2\u30e9\u30fc\u30c8\u30cf\u30f3\u30c9\u30e9\u30fc\n  class AlertHandler(bus: EventBus):\n    bus.subscribe(classOf[Alert]) { alert =&gt;\n      println(s\"\u26a0\ufe0f  ${alert.severity}: ${alert.message}\")\n\n      // \u81ea\u52d5\u5bfe\u5fdc\n      if alert.message.contains(\"\u9ad8\u6e29\") then\n        bus.publish(Command(\"COOLING_ON\"))\n      else if alert.message.contains(\"\u4f4e\u6e29\") then\n        bus.publish(Command(\"HEATING_ON\"))\n\n}\n\n  // \u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u5668\n  class CommandExecutor(bus: EventBus):\n    bus.subscribe(classOf[Command]) { command =&gt;\n      println(s\"\ud83d\udd27 \u30b3\u30de\u30f3\u30c9\u5b9f\u884c: ${command.action}\")\n\n}\n\n  // \u30b7\u30b9\u30c6\u30e0\u306e\u8d77\u52d5\n  println(\"=== \u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u6e29\u5ea6\u76e3\u8996\u30b7\u30b9\u30c6\u30e0 ===\")\n\n  val eventBus = new EventBus\n  val monitor = new TemperatureMonitor(eventBus)\n  val alertHandler = new AlertHandler(eventBus)\n  val executor = new CommandExecutor(eventBus)\n\n  // \u8907\u6570\u306e\u30bb\u30f3\u30b5\u30fc\u3092\u8d77\u52d5\n  val sensors = List(\n    new TemperatureSensor(\"Sensor-A\", eventBus),\n    new TemperatureSensor(\"Sensor-B\", eventBus),\n    new TemperatureSensor(\"Sensor-C\", eventBus)\n  )\n\n  sensors.foreach(_.start())\n\n  // 10\u79d2\u9593\u5b9f\u884c\n  Thread.sleep(10000)\n\n  // \u7d71\u8a08\u60c5\u5831\n  println(\"\\n=== \u7d71\u8a08\u60c5\u5831 ===\")\n  monitor.getAverageTemperature.foreach { avg =&gt;\n    println(f\"\u5e73\u5747\u6e29\u5ea6: $avg%.1f\u00b0C\")\n\n}\n\n  // \u30bb\u30f3\u30b5\u30fc\u505c\u6b62\n  sensors.foreach(_.stop())\n  println(\"\\n\u30b7\u30b9\u30c6\u30e0\u505c\u6b62\")\n</code></pre>"},{"location":"part8/chapter33/#_9","title":"\u7df4\u7fd2\u3057\u3066\u307f\u3088\u3046\uff01","text":""},{"location":"part8/chapter33/#1","title":"\u7df4\u7fd21\uff1a\u4e26\u884c\u30c0\u30a6\u30f3\u30ed\u30fc\u30c0\u30fc","text":"<p>\u8907\u6570\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4e26\u884c\u3057\u3066\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\uff1a - \u540c\u6642\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u6570\u306e\u5236\u9650 - \u9032\u6357\u8868\u793a - \u30a8\u30e9\u30fc\u30ea\u30c8\u30e9\u30a4</p>"},{"location":"part8/chapter33/#2","title":"\u7df4\u7fd22\uff1a\u30c1\u30e3\u30c3\u30c8\u30b7\u30b9\u30c6\u30e0","text":"<p>\u8907\u6570\u30e6\u30fc\u30b6\u30fc\u306e\u30c1\u30e3\u30c3\u30c8\u30b7\u30b9\u30c6\u30e0\u3092\u5b9f\u88c5\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - \u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u914d\u4fe1 - \u30e6\u30fc\u30b6\u30fc\u306e\u5165\u9000\u5ba4 - \u30e1\u30c3\u30bb\u30fc\u30b8\u5c65\u6b74</p>"},{"location":"part8/chapter33/#3","title":"\u7df4\u7fd23\uff1a\u30bf\u30b9\u30af\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u30fc","text":"<p>\u5b9a\u671f\u7684\u306a\u30bf\u30b9\u30af\u3092\u5b9f\u884c\u3059\u308b\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u30fc\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\uff1a - cron\u5f0f\u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb - \u4e26\u884c\u5b9f\u884c\u5236\u5fa1 - \u5b9f\u884c\u7d50\u679c\u306e\u8a18\u9332</p>"},{"location":"part8/chapter33/#_10","title":"\u3053\u306e\u7ae0\u306e\u307e\u3068\u3081","text":"<p>\u4e26\u884c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u57fa\u790e\u3092\u7fd2\u5f97\u3057\u307e\u3057\u305f\uff01</p>"},{"location":"part8/chapter33/#_11","title":"\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3053\u3068","text":"<p>\u2705 \u57fa\u672c\u6982\u5ff5\u306e\u7406\u89e3 - \u30b9\u30ec\u30c3\u30c9\u3068Future - \u975e\u540c\u671f\u51e6\u7406 - \u4e26\u884c\u3068\u4e26\u5217\u306e\u9055\u3044</p> <p>\u2705 \u540c\u671f\u306e\u91cd\u8981\u6027 - \u7af6\u5408\u72b6\u614b\u306e\u56de\u907f - \u30c7\u30c3\u30c9\u30ed\u30c3\u30af\u306e\u9632\u6b62 - \u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u306a\u8a2d\u8a08</p> <p>\u2705 \u8a2d\u8a08\u30d1\u30bf\u30fc\u30f3 - \u30a2\u30af\u30bf\u30fc\u30e2\u30c7\u30eb - \u30d7\u30ed\u30c7\u30e5\u30fc\u30b5\u30fc\u30fb\u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc - \u30a4\u30d9\u30f3\u30c8\u99c6\u52d5</p> <p>\u2705 \u5b9f\u8df5\u7684\u306a\u5fdc\u7528 - Web\u30af\u30ed\u30fc\u30e9\u30fc - \u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u30b7\u30b9\u30c6\u30e0 - \u975e\u540c\u671f\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3</p>"},{"location":"part8/chapter33/#_12","title":"\u4e26\u884c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u30b3\u30c4","text":"<ol> <li> <p>\u30b7\u30f3\u30d7\u30eb\u306b\u4fdd\u3064</p> <ul> <li>\u5171\u6709\u72b6\u614b\u3092\u6700\u5c0f\u9650\u306b</li> <li>\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u3092\u6d3b\u7528</li> <li>\u660e\u78ba\u306a\u8cac\u4efb\u5206\u96e2</li> </ul> </li> <li> <p>\u9069\u5207\u306a\u62bd\u8c61\u5316</p> <ul> <li>Future \u3067\u975e\u540c\u671f</li> <li>\u30a2\u30af\u30bf\u30fc\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u30f3\u30b0</li> <li>\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u6d41\u308c</li> </ul> </li> <li> <p>\u30c6\u30b9\u30c8\u3068\u30c7\u30d0\u30c3\u30b0</p> <ul> <li>\u4e26\u884c\u6027\u306e\u30c6\u30b9\u30c8</li> <li>\u30ed\u30b0\u3067\u72b6\u614b\u8ffd\u8de1</li> <li>\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306e\u8a2d\u5b9a</li> </ul> </li> </ol>"},{"location":"part8/chapter33/#_13","title":"\u6b21\u306e\u90e8\u3067\u306f...","text":"<p>\u7b2cIX\u90e8\u3067\u306f\u3001\u5b9f\u7528\u7684\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u6280\u8853\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3059\u3002\u5b9f\u969b\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u958b\u767a\u3067\u5fc5\u8981\u306a\u77e5\u8b58\u3092\u8eab\u306b\u3064\u3051\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part8/chapter33/#_14","title":"\u6700\u5f8c\u306b","text":"<p>\u4e26\u884c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306f\u300c\u8907\u6570\u306e\u6599\u7406\u3092\u540c\u6642\u306b\u4f5c\u308b\u6280\u8853\u300d\u3067\u3059\u3002\u4e00\u3064\u306e\u934b\u3067\u9806\u756a\u306b\u4f5c\u308b\u3088\u308a\u3001\u8907\u6570\u306e\u30b3\u30f3\u30ed\u3067\u540c\u6642\u306b\u4f5c\u3063\u305f\u65b9\u304c\u901f\u3044\u3002\u3067\u3082\u3001\u8abf\u7406\u306e\u9806\u5e8f\u3084\u9053\u5177\u306e\u5171\u6709\u306b\u306f\u6ce8\u610f\u304c\u5fc5\u8981\u3002\u3053\u306e\u300c\u540c\u6642\u9032\u884c\u306e\u6280\u8853\u300d\u3092\u30de\u30b9\u30bf\u30fc\u3059\u308c\u3070\u3001\u3069\u3093\u306a\u5927\u898f\u6a21\u306a\u30b7\u30b9\u30c6\u30e0\u3082\u52b9\u7387\u7684\u306b\u52d5\u304b\u305b\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u30de\u30eb\u30c1\u30b3\u30a2\u306e\u6642\u4ee3\u306b\u5fc5\u9808\u306e\u6280\u8853\u3092\u3001\u3042\u306a\u305f\u306f\u624b\u306b\u5165\u308c\u307e\u3057\u305f\uff01</p>"},{"location":"part9/chapter34/","title":"\u7b2c34\u7ae0 \u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u3092\u610f\u8b58\u3059\u308b","text":""},{"location":"part9/chapter34/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u904a\u5712\u5730\u306e\u4eba\u6c17\u30a2\u30c8\u30e9\u30af\u30b7\u30e7\u30f3\u3092\u60f3\u50cf\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u4e00\u5ea6\u306b\u4e00\u4eba\u3057\u304b\u4e57\u308c\u306a\u3044\u306a\u3089\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u8907\u6570\u306e\u4eba\u304c\u540c\u6642\u306b\u4e57\u308d\u3046\u3068\u3057\u305f\u3089\u3069\u3046\u306a\u308b\u3067\u3057\u3087\u3046\uff1f\u5b89\u5168\u30d9\u30eb\u30c8\u306e\u53d6\u308a\u5408\u3044\u3001\u5ea7\u5e2d\u306e\u596a\u3044\u5408\u3044\u3001\u5927\u6df7\u4e71\u3067\u3059\u3002</p> <p>\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3082\u540c\u3058\u3067\u3059\u3002\u8907\u6570\u306e\u30b9\u30ec\u30c3\u30c9\u304c\u540c\u3058\u30c7\u30fc\u30bf\u306b\u540c\u6642\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\u3001\u4e88\u671f\u3057\u306a\u3044\u554f\u984c\u304c\u8d77\u304d\u307e\u3059\u3002\u3053\u306e\u7ae0\u3067\u306f\u3001\u305d\u3093\u306a\u554f\u984c\u3092\u9632\u3050\u300c\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u300d\u306a\u8a2d\u8a08\u3092\u5b66\u3073\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part9/chapter34/#_2","title":"\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u3068\u306f\uff1f","text":""},{"location":"part9/chapter34/#_3","title":"\u975e\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u306e\u5371\u967a\u6027","text":"<pre><code>// ThreadUnsafeExample.scala\n@main def threadUnsafeExample(): Unit = {\n  import scala.concurrent.ExecutionContext.Implicits.global\n  import scala.concurrent.Future\n  import scala.collection.mutable\n\n  // \u5371\u967a\u306a\u4f8b1\uff1a\u53ef\u5909\u72b6\u614b\u306e\u5171\u6709\n  println(\"=== \u975e\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u306e\u554f\u984c ===\")\n\n  class UnsafeCounter {\n    private var count = 0\n\n    def increment(): Unit = {\n      val current = count  // \u8aad\u307f\u8fbc\u307f\n      Thread.sleep(1)      // \u4ed6\u306e\u51e6\u7406\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\n      count = current + 1  // \u66f8\u304d\u8fbc\u307f\n    }\n\n    def getCount: Int = count\n  }\n\n  val counter = new UnsafeCounter\n\n  // 100\u500b\u306e\u30b9\u30ec\u30c3\u30c9\u304c\u540c\u6642\u306b\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\n  val futures = (1 to 100).map { _ =&gt;\n    Future {\n      counter.increment()\n    }\n  }\n\n  Future.sequence(futures).foreach { _ =&gt;\n    println(s\"\u6700\u7d42\u30ab\u30a6\u30f3\u30c8: ${counter.getCount} (100\u306b\u306a\u308b\u306f\u305a\uff01)\")\n  }\n\n  Thread.sleep(2000)\n\n  // \u5371\u967a\u306a\u4f8b2\uff1a\u53ef\u5909\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\n  println(\"\\n=== \u53ef\u5909\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u554f\u984c ===\")\n\n  val unsafeList = mutable.ListBuffer[Int]()\n\n  val addFutures = (1 to 1000).map { i =&gt;\n    Future {\n      unsafeList += i  // \u540c\u6642\u8ffd\u52a0\u3067\u554f\u984c\u767a\u751f\n    }\n  }\n\n  Future.sequence(addFutures).foreach { _ =&gt;\n    println(s\"\u30ea\u30b9\u30c8\u30b5\u30a4\u30ba: ${unsafeList.size} (1000\u306b\u306a\u308b\u306f\u305a\uff01)\")\n    val missing = (1 to 1000).toSet -- unsafeList.toSet\n    println(s\"\u6b20\u843d\u3057\u305f\u8981\u7d20\u6570: ${missing.size}\")\n  }\n\n  Thread.sleep(1000)\n</code></pre>"},{"location":"part9/chapter34/#_4","title":"\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u306a\u5b9f\u88c5","text":"<pre><code>// ThreadSafeExample.scala\n@main def threadSafeExample(): Unit = {\n  import scala.concurrent.ExecutionContext.Implicits.global\n  import scala.concurrent.Future\n  import java.util.concurrent.atomic.{AtomicInteger, AtomicReference}\n  import java.util.concurrent.ConcurrentHashMap\n\n  // \u89e3\u6c7a\u7b561\uff1asynchronized\u30d6\u30ed\u30c3\u30af\n  println(\"=== synchronized\u306b\u3088\u308b\u89e3\u6c7a ===\")\n\n  class SynchronizedCounter {\n    private var count = 0\n\n    def increment(): Unit = this.synchronized {\n      val current = count\n      Thread.sleep(1)  // \u4ed6\u306e\u51e6\u7406\n      count = current + 1\n    }\n\n    def getCount: Int = this.synchronized { count }\n  }\n\n  val syncCounter = new SynchronizedCounter\n  val syncFutures = (1 to 100).map { _ =&gt;\n    Future { syncCounter.increment() }\n  }\n\n  Future.sequence(syncFutures).foreach { _ =&gt;\n    println(s\"\u540c\u671f\u30ab\u30a6\u30f3\u30c8: ${syncCounter.getCount}\")\n  }\n\n  Thread.sleep(2000)\n\n  // \u89e3\u6c7a\u7b562\uff1aAtomic\u5909\u6570\n  println(\"\\n=== Atomic\u5909\u6570\u306b\u3088\u308b\u89e3\u6c7a ===\")\n\n  class AtomicCounter {\n    private val count = new AtomicInteger(0)\n\n    def increment(): Unit = count.incrementAndGet()\n    def getCount: Int = count.get()\n\n    // \u3088\u308a\u8907\u96d1\u306a\u64cd\u4f5c\n    def incrementIfLessThan(limit: Int): Boolean = {\n      count.updateAndGet { current =&gt;\n        if (current &lt; limit) { current + 1 } else { current }\n      } &lt;= limit\n    }\n  }\n\n  val atomicCounter = new AtomicCounter\n  val atomicFutures = (1 to 150).map { _ =&gt;\n    Future {\n      if (atomicCounter.incrementIfLessThan(100)) {\n        \"\u6210\u529f\"\n      } else {\n        \"\u5236\u9650\u5230\u9054\"\n      }\n  }\n\n  Future.sequence(atomicFutures).foreach { results =&gt;\n    val successCount = results.count(_ == \"\u6210\u529f\")\n    println(s\"Atomic\u30ab\u30a6\u30f3\u30c8: ${atomicCounter.getCount}\")\n    println(s\"\u6210\u529f: $successCount, \u5236\u9650\u5230\u9054: ${150 - successCount}\")\n  }\n\n  Thread.sleep(1000)\n\n  // \u89e3\u6c7a\u7b563\uff1a\u4e26\u884c\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\n  println(\"\\n=== \u4e26\u884c\u30b3\u30ec\u30af\u30b7\u30e7\u30f3 ===\")\n\n  import scala.jdk.CollectionConverters._\n\n  val concurrentMap = new ConcurrentHashMap[String, Int]().asScala\n\n  val mapFutures = (1 to 100).flatMap { i =&gt;\n    List(\n      Future { concurrentMap.put(s\"key$i\", i) },\n      Future { concurrentMap.get(s\"key$i\") },\n      Future { concurrentMap.getOrElseUpdate(s\"new$i\", i * 10) }\n    )\n  }\n\n  Future.sequence(mapFutures).foreach { _ =&gt;\n    println(s\"\u30de\u30c3\u30d7\u30b5\u30a4\u30ba: ${concurrentMap.size}\")\n    println(s\"\u30b5\u30f3\u30d7\u30eb\u5024: ${concurrentMap.take(5).toMap}\")\n  }\n\n  Thread.sleep(1000)\n</code></pre>"},{"location":"part9/chapter34/#_5","title":"\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306b\u3088\u308b\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5","text":""},{"location":"part9/chapter34/#_6","title":"\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u30c7\u30fc\u30bf\u69cb\u9020","text":"<pre><code>// ImmutableThreadSafety.scala\n@main def immutableThreadSafety(): Unit = {\n  import scala.concurrent.ExecutionContext.Implicits.global\n  import scala.concurrent.Future\n  import java.util.concurrent.atomic.AtomicReference\n\n  // \u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u72b6\u614b\u7ba1\u7406\n  case class GameState(\n    score: Int,\n    level: Int,\n    players: Set[String],\n    items: Map[String, Int]\n  ):\n    def addScore(points: Int): GameState = {\n      copy(score = score + points)\n    }\n\n    def levelUp: GameState = {\n      copy(level = level + 1)\n    }\n\n    def addPlayer(name: String): GameState = {\n      copy(players = players + name)\n    }\n\n    def addItem(item: String, quantity: Int): GameState = {\n      copy(items = items + (item -&gt; (items.getOrElse(item, 0) + quantity)))\n    }\n\n  // \u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u306a\u72b6\u614b\u7ba1\u7406\n  class ThreadSafeGameManager {\n    private val state = new AtomicReference(GameState(0, 1, Set.empty, Map.empty))\n\n    def updateState(f: GameState =&gt; GameState): GameState = {\n      var oldState: GameState = null\n      var newState: GameState = null\n\n      do {\n        oldState = state.get()\n        newState = f(oldState)\n      } while (!state.compareAndSet(oldState, newState))\n\n      newState\n    }\n\n    def getState: GameState = state.get()\n  }\n\n  val gameManager = new ThreadSafeGameManager\n\n  // \u4e26\u884c\u66f4\u65b0\n  println(\"=== \u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306b\u3088\u308b\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5 ===\")\n\n  val updateFutures = List(\n    // \u30b9\u30b3\u30a2\u66f4\u65b0\n    Future.sequence((1 to 50).map { _ =&gt;\n      Future { gameManager.updateState(_.addScore(10)) }\n    }),\n\n    // \u30d7\u30ec\u30a4\u30e4\u30fc\u8ffd\u52a0\n    Future.sequence((1 to 20).map { i =&gt;\n      Future { gameManager.updateState(_.addPlayer(s\"Player$i\")) }\n    }),\n\n    // \u30a2\u30a4\u30c6\u30e0\u8ffd\u52a0\n    Future.sequence((1 to 30).map { _ =&gt;\n      Future {\n        gameManager.updateState(_.addItem(\"coin\", 1))\n        gameManager.updateState(_.addItem(\"potion\", 1))\n      }\n    })\n  )\n\n  Future.sequence(updateFutures).foreach { _ =&gt;\n    val finalState = gameManager.getState\n    println(s\"\u6700\u7d42\u30b9\u30b3\u30a2: ${finalState.score}\")\n    println(s\"\u30d7\u30ec\u30a4\u30e4\u30fc\u6570: ${finalState.players.size}\")\n    println(s\"\u30a2\u30a4\u30c6\u30e0: ${finalState.items}\")\n  }\n\n  Thread.sleep(1000)\n\n  // \u30e1\u30c3\u30bb\u30fc\u30b8\u30d1\u30c3\u30b7\u30f3\u30b0\n  println(\"\\n=== \u30e1\u30c3\u30bb\u30fc\u30b8\u30d1\u30c3\u30b7\u30f3\u30b0 ===\")\n\n  import java.util.concurrent.LinkedBlockingQueue\n\n  sealed trait GameMessage\n  case class AddScore(points: Int) extends GameMessage\n  case class AddPlayer(name: String) extends GameMessage\n  case class GetState(replyTo: GameState =&gt; Unit) extends GameMessage\n\n  class MessageBasedGame {\n    private val queue = new LinkedBlockingQueue[GameMessage]()\n    @volatile private var running = true\n\n    private var state = GameState(0, 1, Set.empty, Map.empty)\n\n    private val processor = new Thread(() =&gt; {\n      while (running) {\n        Option(queue.poll(100, java.util.concurrent.TimeUnit.MILLISECONDS)).foreach {\n          case AddScore(points) =&gt;\n            state = state.addScore(points)\n\n          case AddPlayer(name) =&gt;\n            state = state.addPlayer(name)\n\n\n          case GetState(replyTo) =&gt;\n            replyTo(state)\n        }\n      }\n    })\n\n    processor.start()\n\n    def sendMessage(msg: GameMessage): Unit = queue.offer(msg)\n\n    def stop(): Unit = {\n      running = false\n      processor.join()\n    }\n  }\n\n  val messageGame = new MessageBasedGame\n\n  // \u4e26\u884c\u30e1\u30c3\u30bb\u30fc\u30b8\u9001\u4fe1\n  val messageFutures = (1 to 100).map { i =&gt;\n    Future {\n      messageGame.sendMessage(AddScore(5))\n      if (i % 10 == 0) {\n        messageGame.sendMessage(AddPlayer(s\"Player$i\"))\n      }\n    }\n  }\n\n  Future.sequence(messageFutures).foreach { _ =&gt;\n    Thread.sleep(500)  // \u51e6\u7406\u5b8c\u4e86\u3092\u5f85\u3064\n\n    val promise = scala.concurrent.Promise[GameState]()\n    messageGame.sendMessage(GetState(state =&gt; promise.success(state)))\n\n    promise.future.foreach { state =&gt;\n      println(s\"\u30e1\u30c3\u30bb\u30fc\u30b8\u30d9\u30fc\u30b9 - \u30b9\u30b3\u30a2: ${state.score}\")\n      println(s\"\u30e1\u30c3\u30bb\u30fc\u30b8\u30d9\u30fc\u30b9 - \u30d7\u30ec\u30a4\u30e4\u30fc: ${state.players.size}\")\n    }\n  }\n\n  Thread.sleep(1000)\n  messageGame.stop()\n</code></pre>"},{"location":"part9/chapter34/#_7","title":"\u30ed\u30c3\u30af\u30d5\u30ea\u30fc\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0","text":""},{"location":"part9/chapter34/#cascompare-and-swap","title":"CAS\uff08Compare-And-Swap\uff09\u64cd\u4f5c","text":"<pre><code>// LockFreeAlgorithms.scala\n@main def lockFreeAlgorithms(): Unit = {\n  import scala.concurrent.ExecutionContext.Implicits.global\n  import scala.concurrent.Future\n  import java.util.concurrent.atomic.{AtomicReference, AtomicInteger}\n  import scala.annotation.tailrec\n\n  // \u30ed\u30c3\u30af\u30d5\u30ea\u30fc\u30b9\u30bf\u30c3\u30af\n  println(\"=== \u30ed\u30c3\u30af\u30d5\u30ea\u30fc\u30b9\u30bf\u30c3\u30af ===\")\n\n  class LockFreeStack[T] {\n    private class Node[T](val value: T, val next: AtomicReference[Node[T]])\n\n    private val top = new AtomicReference[Node[T]](null)\n\n    @tailrec\n    final def push(value: T): Unit = {\n      val newNode = new Node(value, new AtomicReference(top.get()))\n      if (!top.compareAndSet(newNode.next.get(), newNode)) {\n        newNode.next.set(top.get())\n        push(value)  // \u30ea\u30c8\u30e9\u30a4\n      }\n    }\n\n    @tailrec\n    final def pop(): Option[T] = {\n      val currentTop = top.get()\n      if (currentTop == null) {\n        None\n      } else if (top.compareAndSet(currentTop, currentTop.next.get())) {\n        Some(currentTop.value)\n      } else {\n        pop()  // \u30ea\u30c8\u30e9\u30a4\n      }\n    }\n\n    def isEmpty: Boolean = top.get() == null\n  }\n\n  val stack = new LockFreeStack[Int]\n\n  // \u4e26\u884c\u30d7\u30c3\u30b7\u30e5\n  val pushFutures = (1 to 100).map { i =&gt;\n    Future { stack.push(i) }\n  }\n\n  Future.sequence(pushFutures).foreach { _ =&gt;\n    println(\"\u30d7\u30c3\u30b7\u30e5\u5b8c\u4e86\")\n\n    // \u4e26\u884c\u30dd\u30c3\u30d7\n    val popFutures = (1 to 50).map { _ =&gt;\n      Future { stack.pop() }\n    }\n\n    Future.sequence(popFutures).foreach { results =&gt;\n      val popped = results.flatten\n      println(s\"\u30dd\u30c3\u30d7\u3057\u305f\u8981\u7d20\u6570: ${popped.size}\")\n      println(s\"\u6b8b\u308a\u306e\u8981\u7d20: ${!stack.isEmpty}\")\n    }\n  }\n\n  Thread.sleep(1000)\n\n  // \u30ed\u30c3\u30af\u30d5\u30ea\u30fc\u30ab\u30a6\u30f3\u30bf\u30fc\uff08ABA\u554f\u984c\u5bfe\u7b56\uff09\n  println(\"\\n=== \u30ed\u30c3\u30af\u30d5\u30ea\u30fc\u30ab\u30a6\u30f3\u30bf\u30fc ===\")\n\n  class StampedReference[T](initialRef: T, initialStamp: Int) {\n    private val pair = new AtomicReference((initialRef, initialStamp))\n\n    def get: (T, Int) = pair.get()\n\n    def compareAndSet(\n      expectedRef: T,\n      newRef: T,\n      expectedStamp: Int,\n      newStamp: Int\n    ): Boolean = {\n      val current = pair.get()\n      current._1 == expectedRef &amp;&amp; \n      current._2 == expectedStamp &amp;&amp;\n      pair.compareAndSet(current, (newRef, newStamp))\n    }\n  }\n\n  // \u4f7f\u7528\u4f8b\uff1a\u30ed\u30c3\u30af\u30d5\u30ea\u30fc\u306a\u6b8b\u9ad8\u7ba1\u7406\n  class LockFreeAccount(initialBalance: Double) {\n    private val balance = new StampedReference(initialBalance, 0)\n\n    @tailrec\n    final def withdraw(amount: Double): Boolean = {\n      val (currentBalance, stamp) = balance.get\n      if (currentBalance &gt;= amount) {\n        if (balance.compareAndSet(\n          currentBalance,\n          currentBalance - amount,\n          stamp,\n          stamp + 1\n        )) {\n          true\n        } else {\n          withdraw(amount)  // \u30ea\u30c8\u30e9\u30a4\n        }\n      } else {\n        false\n      }\n    }\n\n    def getBalance: Double = balance.get._1\n  }\n\n  val account = new LockFreeAccount(1000.0)\n\n  val withdrawFutures = (1 to 20).map { _ =&gt;\n    Future {\n      val amount = 50.0\n      if (account.withdraw(amount)) {\n        s\"\u51fa\u91d1\u6210\u529f: $amount\"\n      } else {\n        s\"\u51fa\u91d1\u5931\u6557: \u6b8b\u9ad8\u4e0d\u8db3\"\n      }\n  }\n\n  Future.sequence(withdrawFutures).foreach { results =&gt;\n    val successes = results.count(_.contains(\"\u6210\u529f\"))\n    println(s\"\u51fa\u91d1\u7d50\u679c: \u6210\u529f $successes \u4ef6\")\n    println(s\"\u6700\u7d42\u6b8b\u9ad8: ${account.getBalance}\")\n  }\n\n  Thread.sleep(1000)\n</code></pre>"},{"location":"part9/chapter34/#_8","title":"\u5b9f\u8df5\u7684\u306a\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u8a2d\u8a08","text":""},{"location":"part9/chapter34/#_9","title":"\u30d7\u30ed\u30c7\u30e5\u30fc\u30b5\u30fc\u30fb\u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u30d1\u30bf\u30fc\u30f3","text":"<pre><code>// ProducerConsumerPattern.scala\n@main def producerConsumerPattern(): Unit = {\n  import scala.concurrent.ExecutionContext.Implicits.global\n  import scala.concurrent.Future\n  import java.util.concurrent.{LinkedBlockingQueue, ArrayBlockingQueue}\n  import java.util.concurrent.atomic.AtomicBoolean\n\n  // \u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u306a\u30ad\u30e5\u30fc\n  println(\"=== \u30d7\u30ed\u30c7\u30e5\u30fc\u30b5\u30fc\u30fb\u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc ===\")\n\n  class WorkQueue[T](capacity: Int) {\n    private val queue = new ArrayBlockingQueue[T](capacity)\n    private val isShutdown = new AtomicBoolean(false)\n\n    def produce(item: T): Boolean = {\n      if (!isShutdown.get()) {\n        queue.offer(item, 100, java.util.concurrent.TimeUnit.MILLISECONDS)\n      } else {\n        false\n      }\n    }\n\n    def consume(): Option[T] = {\n      if (!isShutdown.get() || !queue.isEmpty) {\n        Option(queue.poll(100, java.util.concurrent.TimeUnit.MILLISECONDS))\n      } else {\n        None\n      }\n    }\n\n    def shutdown(): Unit = isShutdown.set(true)\n\n    def awaitTermination(): Unit =\n      while !queue.isEmpty do Thread.sleep(10)\n\n  // \u30c7\u30fc\u30bf\u51e6\u7406\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\n  case class Task(id: Int, data: String)\n  case class Result(taskId: Int, result: String)\n\n  val taskQueue = new WorkQueue[Task](10)\n  val resultQueue = new WorkQueue[Result](10)\n\n  // \u30d7\u30ed\u30c7\u30e5\u30fc\u30b5\u30fc\n  val producers = (1 to 3).map { producerId =&gt;\n    Future {\n      for i &lt;- 1 to 10 do\n        val task = Task(producerId * 100 + i, s\"Data-$producerId-$i\")\n        if taskQueue.produce(task) then\n          println(s\"\u751f\u7523[$producerId]: $task\")\n        Thread.sleep(50)\n      println(s\"\u30d7\u30ed\u30c7\u30e5\u30fc\u30b5\u30fc$producerId \u5b8c\u4e86\")\n    }\n  }\n\n  // \u30ef\u30fc\u30ab\u30fc\uff08\u5909\u63db\u51e6\u7406\uff09\n  val workers = (1 to 2).map { workerId =&gt;\n    Future {\n      var processed = 0\n      var continue = true\n\n      while continue do\n        taskQueue.consume() match {\n          case Some(task) =&gt;\n            println(s\"  \u51e6\u7406[$workerId]: ${task.id}\")\n            Thread.sleep(100)  // \u51e6\u7406\u6642\u9593\n            val result = Result(task.id, task.data.toUpperCase)\n            resultQueue.produce(result)\n            processed += 1\n\n          case None =&gt;\n            if producers.forall(_.isCompleted) then\n              continue = false\n\n      println(s\"\u30ef\u30fc\u30ab\u30fc$workerId \u5b8c\u4e86: $processed \u4ef6\u51e6\u7406\")\n    }\n  }\n\n  // \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\n  val consumer = Future {\n    var consumed = 0\n    var continue = true\n\n    while continue do\n      resultQueue.consume() match {\n        case Some(result) =&gt;\n          println(s\"    \u6d88\u8cbb: ${result.taskId} -&gt; ${result.result}\")\n          consumed += 1\n\n        case None =&gt;\n          if workers.forall(_.isCompleted) then\n            continue = false\n\n    println(s\"\u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\u5b8c\u4e86: $consumed \u4ef6\u6d88\u8cbb\")\n    consumed\n  }\n\n  // \u5b8c\u4e86\u3092\u5f85\u3064\n  for\n    _ &lt;- Future.sequence(producers)\n    _ = taskQueue.shutdown()\n    _ &lt;- Future.sequence(workers)\n    _ = resultQueue.shutdown()\n    totalConsumed &lt;- consumer\n  yield\n    println(s\"\\n=== \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u5b8c\u4e86 ===\")\n    println(s\"\u5408\u8a08\u51e6\u7406\u6570: $totalConsumed\")\n\n  Thread.sleep(5000)\n</code></pre>"},{"location":"part9/chapter34/#_10","title":"\u30ea\u30fc\u30c9\u30e9\u30a4\u30c8\u30ed\u30c3\u30af","text":"<pre><code>// ReadWriteLock.scala\n@main def readWriteLock(): Unit = {\n  import scala.concurrent.ExecutionContext.Implicits.global\n  import scala.concurrent.Future\n  import java.util.concurrent.locks.ReentrantReadWriteLock\n\n  // \u8aad\u307f\u66f8\u304d\u304c\u504f\u308b\u30c7\u30fc\u30bf\u69cb\u9020\n  class ThreadSafeCache[K, V]:\n    private val cache = scala.collection.mutable.Map[K, V]()\n    private val lock = new ReentrantReadWriteLock()\n    private val readLock = lock.readLock()\n    private val writeLock = lock.writeLock()\n\n    def get(key: K): Option[V] =\n      readLock.lock()\n      try\n        cache.get(key)\n      finally\n        readLock.unlock()\n\n    def put(key: K, value: V): Unit =\n      writeLock.lock()\n      try\n        cache.put(key, value)\n      finally\n        writeLock.unlock()\n\n    def getOrCompute(key: K)(compute: =&gt; V): V =\n      // \u307e\u305a\u8aad\u307f\u53d6\u308a\u8a66\u884c\n      readLock.lock()\n      try\n        cache.get(key) match {\n          case Some(value) =&gt; return value\n          case None =&gt; // \u7d9a\u884c\n      finally\n        readLock.unlock()\n\n      // \u66f8\u304d\u8fbc\u307f\u30ed\u30c3\u30af\u3067\u518d\u30c1\u30a7\u30c3\u30af\n      writeLock.lock()\n      try\n        cache.getOrElseUpdate(key, compute)\n      finally\n        writeLock.unlock()\n\n    def size: Int =\n      readLock.lock()\n      try\n        cache.size\n      finally\n        readLock.unlock()\n\n  println(\"=== \u30ea\u30fc\u30c9\u30e9\u30a4\u30c8\u30ed\u30c3\u30af ===\")\n\n  val cache = new ThreadSafeCache[String, String]\n\n  // \u591a\u6570\u306e\u8aad\u307f\u53d6\u308a\u3068\u5c11\u6570\u306e\u66f8\u304d\u8fbc\u307f\n  val operations = List(\n    // 90% \u8aad\u307f\u53d6\u308a\n    List.fill(90)(Future {\n      val key = s\"key${scala.util.Random.nextInt(20)}\"\n      cache.get(key) match {\n        case Some(value) =&gt; s\"Hit: $key -&gt; $value\"\n        case None =&gt; s\"Miss: $key\"\n    }),\n\n    // 10% \u66f8\u304d\u8fbc\u307f\n    List.fill(10)(Future {\n      val key = s\"key${scala.util.Random.nextInt(20)}\"\n      val value = s\"value${scala.util.Random.nextInt(100)}\"\n      cache.put(key, value)\n      s\"Put: $key -&gt; $value\"\n    })\n  ).flatten\n\n  Future.sequence(scala.util.Random.shuffle(operations)).foreach { results =&gt;\n    val hits = results.count(_.startsWith(\"Hit\"))\n    val misses = results.count(_.startsWith(\"Miss\"))\n    val puts = results.count(_.startsWith(\"Put\"))\n\n    println(s\"\u30d2\u30c3\u30c8: $hits, \u30df\u30b9: $misses, \u66f8\u304d\u8fbc\u307f: $puts\")\n    println(s\"\u30ad\u30e3\u30c3\u30b7\u30e5\u30b5\u30a4\u30ba: ${cache.size}\")\n  }\n\n  Thread.sleep(1000)\n\n  // \u8a08\u7b97\u306e\u91cd\u8907\u3092\u907f\u3051\u308b\n  println(\"\\n=== \u8a08\u7b97\u306e\u91cd\u8907\u56de\u907f ===\")\n\n  def expensiveComputation(key: String): String =\n    println(s\"\u9ad8\u30b3\u30b9\u30c8\u8a08\u7b97: $key\")\n    Thread.sleep(1000)\n    s\"Result-$key\"\n\n  val computeFutures = (1 to 10).map { i =&gt;\n    Future {\n      val key = s\"compute${i % 3}\"  // 3\u7a2e\u985e\u306e\u30ad\u30fc\u306e\u307f\n      cache.getOrCompute(key)(expensiveComputation(key))\n    }\n  }\n\n  Future.sequence(computeFutures).foreach { results =&gt;\n    println(s\"\u8a08\u7b97\u7d50\u679c: ${results.distinct}\")\n    println(\"\uff08\u9ad8\u30b3\u30b9\u30c8\u8a08\u7b97\u306f3\u56de\u306e\u307f\u5b9f\u884c\u3055\u308c\u308b\u306f\u305a\uff09\")\n  }\n\n  Thread.sleep(2000)\n</code></pre>"},{"location":"part9/chapter34/#_11","title":"\u5b9f\u8df5\u4f8b\uff1a\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u306a\u30e1\u30c8\u30ea\u30af\u30b9\u53ce\u96c6","text":"<pre><code>// ThreadSafeMetrics.scala\n@main def threadSafeMetrics(): Unit = {\n  import scala.concurrent.ExecutionContext.Implicits.global\n  import scala.concurrent.Future\n  import java.util.concurrent.ConcurrentHashMap\n  import java.util.concurrent.atomic.{AtomicLong, LongAdder}\n  import scala.jdk.CollectionConverters._\n\n  // \u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u306a\u30e1\u30c8\u30ea\u30af\u30b9\u53ce\u96c6\u30b7\u30b9\u30c6\u30e0\n  class MetricsCollector:\n    // \u30ab\u30a6\u30f3\u30bf\u30fc\n    private val counters = new ConcurrentHashMap[String, LongAdder]()\n\n    // \u30b2\u30fc\u30b8\uff08\u6700\u65b0\u5024\uff09\n    private val gauges = new ConcurrentHashMap[String, AtomicLong]()\n\n    // \u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\uff08\u7c21\u6613\u7248\uff09\n    private val histograms = new ConcurrentHashMap[String, Histogram]()\n\n    def incrementCounter(name: String, delta: Long = 1): Unit =\n      counters.computeIfAbsent(name, _ =&gt; new LongAdder()).add(delta)\n\n    def setGauge(name: String, value: Long): Unit =\n      gauges.computeIfAbsent(name, _ =&gt; new AtomicLong()).set(value)\n\n    def recordValue(name: String, value: Long): Unit =\n      histograms.computeIfAbsent(name, _ =&gt; new Histogram()).record(value)\n\n    def getSnapshot: MetricsSnapshot =\n      MetricsSnapshot(\n        counters = counters.asScala.map { case (k, v) =&gt; k -&gt; v.sum() }.toMap,\n        gauges = gauges.asScala.map { case (k, v) =&gt; k -&gt; v.get() }.toMap,\n        histograms = histograms.asScala.map { case (k, v) =&gt; k -&gt; v.getStats }.toMap\n      )\n\n  case class MetricsSnapshot(\n    counters: Map[String, Long],\n    gauges: Map[String, Long],\n    histograms: Map[String, HistogramStats]\n  )\n\n  case class HistogramStats(\n    count: Long,\n    sum: Long,\n    min: Long,\n    max: Long,\n    mean: Double\n  )\n\n  // \u7c21\u6613\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u5b9f\u88c5\n  class Histogram:\n    private val count = new LongAdder()\n    private val sum = new LongAdder()\n    private val min = new AtomicLong(Long.MaxValue)\n    private val max = new AtomicLong(Long.MinValue)\n\n    def record(value: Long): Unit =\n      count.increment()\n      sum.add(value)\n\n      // \u6700\u5c0f\u5024\u66f4\u65b0\n      var currentMin = min.get()\n      while value &lt; currentMin &amp;&amp; !min.compareAndSet(currentMin, value) do\n        currentMin = min.get()\n\n      // \u6700\u5927\u5024\u66f4\u65b0\n      var currentMax = max.get()\n      while value &gt; currentMax &amp;&amp; !max.compareAndSet(currentMax, value) do\n        currentMax = max.get()\n\n    def getStats: HistogramStats =\n      val c = count.sum()\n      val s = sum.sum()\n      HistogramStats(\n        count = c,\n        sum = s,\n        min = if (c &gt; 0) { min.get() else 0,\n        max = if (c &gt; 0) { max.get() else 0,\n        mean = if (c &gt; 0) { s.toDouble / c else 0.0\n      )\n\n  // \u4f7f\u7528\u4f8b\uff1aWeb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30e1\u30c8\u30ea\u30af\u30b9\n  println(\"=== \u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u30e1\u30c8\u30ea\u30af\u30b9 ===\")\n\n  val metrics = new MetricsCollector\n\n  // \u8907\u6570\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u30cf\u30f3\u30c9\u30e9\u30fc\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\n  def handleRequest(requestId: Int): Future[Unit] = Future {\n    val startTime = System.currentTimeMillis()\n\n    // \u30ea\u30af\u30a8\u30b9\u30c8\u30ab\u30a6\u30f3\u30bf\u30fc\n    metrics.incrementCounter(\"requests.total\")\n\n    // \u51e6\u7406\u6642\u9593\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\n    val processingTime = scala.util.Random.nextInt(100) + 50\n    Thread.sleep(processingTime)\n\n    // \u30ec\u30b9\u30dd\u30f3\u30b9\u30bf\u30a4\u30e0\u8a18\u9332\n    val responseTime = System.currentTimeMillis() - startTime\n    metrics.recordValue(\"response.time.ms\", responseTime)\n\n    // \u30b9\u30c6\u30fc\u30bf\u30b9\u30b3\u30fc\u30c9\n    val statusCode = if scala.util.Random.nextDouble() &gt; 0.1 then 200 else 500\n    metrics.incrementCounter(s\"response.status.$statusCode\")\n\n    // \u30a2\u30af\u30c6\u30a3\u30d6\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\uff08\u30b2\u30fc\u30b8\uff09\n    val activeConnections = scala.util.Random.nextInt(100)\n    metrics.setGauge(\"connections.active\", activeConnections)\n\n    if (requestId % 100 == 0) {\n      println(s\"\u30ea\u30af\u30a8\u30b9\u30c8 $requestId \u51e6\u7406\u5b8c\u4e86\")\n  }\n\n  // 1000\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u4e26\u884c\u51e6\u7406\n  val requests = Future.sequence((1 to 1000).map(handleRequest))\n\n  requests.foreach { _ =&gt;\n    val snapshot = metrics.getSnapshot\n\n    println(\"\\n=== \u30e1\u30c8\u30ea\u30af\u30b9\u30b5\u30de\u30ea\u30fc ===\")\n\n    println(\"\\n\u30ab\u30a6\u30f3\u30bf\u30fc:\")\n    snapshot.counters.foreach { case (name, value) =&gt;\n      println(f\"  $name%-30s: $value%,d\")\n    }\n\n    println(\"\\n\u30b2\u30fc\u30b8:\")\n    snapshot.gauges.foreach { case (name, value) =&gt;\n      println(f\"  $name%-30s: $value%,d\")\n    }\n\n    println(\"\\n\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0:\")\n    snapshot.histograms.foreach { case (name, stats) =&gt;\n      println(f\"  $name%-30s:\")\n      println(f\"    \u4ef6\u6570: ${stats.count}%,d\")\n      println(f\"    \u5e73\u5747: ${stats.mean}%.2f ms\")\n      println(f\"    \u6700\u5c0f: ${stats.min} ms\")\n      println(f\"    \u6700\u5927: ${stats.max} ms\")\n    }\n\n    // \u30a8\u30e9\u30fc\u7387\u8a08\u7b97\n    val total = snapshot.counters.getOrElse(\"requests.total\", 0L)\n    val errors = snapshot.counters.getOrElse(\"response.status.500\", 0L)\n    val errorRate = if (total &gt; 0) { errors.toDouble / total * 100 else 0.0\n    println(f\"\\n\u30a8\u30e9\u30fc\u7387: $errorRate%.1f%%\")\n  }\n\n  Thread.sleep(3000)\n</code></pre>"},{"location":"part9/chapter34/#_12","title":"\u7df4\u7fd2\u3057\u3066\u307f\u3088\u3046\uff01","text":""},{"location":"part9/chapter34/#1lru","title":"\u7df4\u7fd21\uff1a\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u306aLRU\u30ad\u30e3\u30c3\u30b7\u30e5","text":"<p>\u6700\u8fd1\u4f7f\u308f\u308c\u305f\u3082\u306e\u3092\u6b8b\u3059LRU\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u5b9f\u88c5\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - \u6700\u5927\u30b5\u30a4\u30ba\u306e\u5236\u9650 - \u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u306a\u64cd\u4f5c - \u9ad8\u901f\u306a\u30a2\u30af\u30bb\u30b9</p>"},{"location":"part9/chapter34/#2","title":"\u7df4\u7fd22\uff1a\u4e26\u884c\u30a2\u30af\u30bb\u30b9\u30ab\u30a6\u30f3\u30bf\u30fc","text":"<p>Web\u30b5\u30a4\u30c8\u306e\u30a2\u30af\u30bb\u30b9\u30ab\u30a6\u30f3\u30bf\u30fc\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\uff1a - \u30da\u30fc\u30b8\u5225\u306e\u30ab\u30a6\u30f3\u30c8 - \u30e6\u30cb\u30fc\u30af\u30e6\u30fc\u30b6\u30fc\u6570 - \u6642\u9593\u5e2f\u5225\u306e\u7d71\u8a08</p>"},{"location":"part9/chapter34/#3","title":"\u7df4\u7fd23\uff1a\u30b9\u30ec\u30c3\u30c9\u30d7\u30fc\u30eb","text":"<p>\u30ab\u30b9\u30bf\u30e0\u30b9\u30ec\u30c3\u30c9\u30d7\u30fc\u30eb\u3092\u5b9f\u88c5\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - \u30bf\u30b9\u30af\u30ad\u30e5\u30fc - \u30ef\u30fc\u30ab\u30fc\u30b9\u30ec\u30c3\u30c9\u7ba1\u7406 - \u512a\u96c5\u306a\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3</p>"},{"location":"part9/chapter34/#_13","title":"\u3053\u306e\u7ae0\u306e\u307e\u3068\u3081","text":"<p>\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u306a\u8a2d\u8a08\u306e\u91cd\u8981\u6027\u3092\u5b66\u3073\u307e\u3057\u305f\uff01</p>"},{"location":"part9/chapter34/#_14","title":"\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3053\u3068","text":"<p>\u2705 \u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u306e\u6982\u5ff5 - \u7af6\u5408\u72b6\u614b\u306e\u7406\u89e3 - \u30c7\u30fc\u30bf\u7af6\u5408\u306e\u56de\u907f - \u4e26\u884c\u30a2\u30af\u30bb\u30b9\u306e\u5236\u5fa1</p> <p>\u2705 \u540c\u671f\u30e1\u30ab\u30cb\u30ba\u30e0 - synchronized - Atomic\u5909\u6570 - \u30ed\u30c3\u30af\u30d5\u30ea\u30fc\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0</p> <p>\u2705 \u8a2d\u8a08\u30d1\u30bf\u30fc\u30f3 - \u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u8a2d\u8a08 - \u30e1\u30c3\u30bb\u30fc\u30b8\u30d1\u30c3\u30b7\u30f3\u30b0 - \u30d7\u30ed\u30c7\u30e5\u30fc\u30b5\u30fc\u30fb\u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc</p> <p>\u2705 \u5b9f\u8df5\u7684\u306a\u5b9f\u88c5 - \u4e26\u884c\u30b3\u30ec\u30af\u30b7\u30e7\u30f3 - \u30e1\u30c8\u30ea\u30af\u30b9\u53ce\u96c6 - \u30ad\u30e3\u30c3\u30b7\u30e5\u5b9f\u88c5</p>"},{"location":"part9/chapter34/#_15","title":"\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u8a2d\u8a08\u306e\u30b3\u30c4","text":"<ol> <li> <p>\u30b7\u30f3\u30d7\u30eb\u306b\u4fdd\u3064</p> <ul> <li>\u5171\u6709\u72b6\u614b\u3092\u6700\u5c0f\u9650\u306b</li> <li>\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u512a\u5148</li> <li>\u660e\u78ba\u306a\u8cac\u4efb\u5206\u96e2</li> </ul> </li> <li> <p>\u9069\u5207\u306a\u30c4\u30fc\u30eb\u3092\u9078\u3076</p> <ul> <li>\u7528\u9014\u306b\u5fdc\u3058\u305f\u540c\u671f\u65b9\u6cd5</li> <li>\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u8003\u616e</li> <li>\u53ef\u8aad\u6027\u3068\u306e\u30d0\u30e9\u30f3\u30b9</li> </ul> </li> <li> <p>\u30c6\u30b9\u30c8\u3092\u5fd8\u308c\u305a\u306b</p> <ul> <li>\u4e26\u884c\u6027\u306e\u30c6\u30b9\u30c8</li> <li>\u30b9\u30c8\u30ec\u30b9\u30c6\u30b9\u30c8</li> <li>\u30c7\u30c3\u30c9\u30ed\u30c3\u30af\u306e\u691c\u51fa</li> </ul> </li> </ol>"},{"location":"part9/chapter34/#_16","title":"\u6b21\u306e\u7ae0\u3067\u306f...","text":"<p>\u30a2\u30af\u30bf\u30fc\u30e2\u30c7\u30eb\u5165\u9580\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u5b66\u3073\u307e\u3059\u3002\u30e1\u30c3\u30bb\u30fc\u30b8\u30d9\u30fc\u30b9\u306e\u4e26\u884c\u51e6\u7406\u3067\u3001\u3088\u308a\u5b89\u5168\u306a\u8a2d\u8a08\u3092\u5b9f\u73fe\u3057\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part9/chapter34/#_17","title":"\u6700\u5f8c\u306b","text":"<p>\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u306f\u300c\u307f\u3093\u306a\u3067\u4f7f\u3046\u65bd\u8a2d\u306e\u5b89\u5168\u7ba1\u7406\u300d\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002\u56f3\u66f8\u9928\u306e\u672c\u3092\u540c\u6642\u306b\u501f\u308a\u3088\u3046\u3068\u3057\u305f\u308a\u3001\u540c\u3058\u5e2d\u306b\u5ea7\u308d\u3046\u3068\u3057\u305f\u308a\u3059\u308b\u3068\u6df7\u4e71\u304c\u8d77\u304d\u308b\u3002\u3067\u3082\u3001\u9069\u5207\u306a\u30eb\u30fc\u30eb\uff08\u8cb8\u51fa\u30b7\u30b9\u30c6\u30e0\u3084\u5ea7\u5e2d\u4e88\u7d04\uff09\u304c\u3042\u308c\u3070\u3001\u307f\u3093\u306a\u304c\u5feb\u9069\u306b\u5229\u7528\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u300c\u5171\u6709\u8cc7\u6e90\u306e\u5b89\u5168\u306a\u7ba1\u7406\u300d\u3053\u305d\u304c\u3001\u5805\u7262\u306a\u4e26\u884c\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u57fa\u790e\u306a\u306e\u3067\u3059\uff01</p>"},{"location":"part9/chapter35/","title":"\u7b2c35\u7ae0 \u30a2\u30af\u30bf\u30fc\u30e2\u30c7\u30eb\u5165\u9580","text":""},{"location":"part9/chapter35/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u5287\u5834\u3092\u60f3\u50cf\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u821e\u53f0\u4e0a\u306e\u4ff3\u512a\uff08\u30a2\u30af\u30bf\u30fc\uff09\u305f\u3061\u306f\u3001\u305d\u308c\u305e\u308c\u81ea\u5206\u306e\u5f79\u5272\u3092\u6301\u3061\u3001\u53f0\u672c\uff08\u30e1\u30c3\u30bb\u30fc\u30b8\uff09\u306b\u5f93\u3063\u3066\u6f14\u6280\u3057\u307e\u3059\u3002\u4ed6\u306e\u4ff3\u512a\u3068\u76f4\u63a5\u8a71\u3059\u306e\u3067\u306f\u306a\u304f\u3001\u6c7a\u3081\u3089\u308c\u305f\u30bb\u30ea\u30d5\u306e\u3084\u308a\u53d6\u308a\u3067\u7269\u8a9e\u3092\u9032\u3081\u3066\u3044\u304d\u307e\u3059\u3002</p> <p>\u30a2\u30af\u30bf\u30fc\u30e2\u30c7\u30eb\u3082\u540c\u3058\u3067\u3059\u3002\u305d\u308c\u305e\u308c\u306e\u30a2\u30af\u30bf\u30fc\u304c\u72ec\u7acb\u3057\u3066\u52d5\u304d\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u3084\u308a\u53d6\u308a\u3060\u3051\u3067\u5354\u8abf\u52d5\u4f5c\u3057\u307e\u3059\u3002\u3053\u306e\u7f8e\u3057\u3044\u30e2\u30c7\u30eb\u3067\u3001\u8907\u96d1\u306a\u4e26\u884c\u51e6\u7406\u3082\u7c21\u5358\u306b\u5b9f\u73fe\u3067\u304d\u308b\u3093\u3067\u3059\uff01</p>"},{"location":"part9/chapter35/#_2","title":"\u30a2\u30af\u30bf\u30fc\u30e2\u30c7\u30eb\u3068\u306f\uff1f","text":""},{"location":"part9/chapter35/#_3","title":"\u57fa\u672c\u6982\u5ff5","text":"<pre><code>// ActorModelBasics.scala\n@main def actorModelBasics(): Unit = {\n  import scala.concurrent.{Future, Promise}\n  import scala.concurrent.ExecutionContext.Implicits.global\n  import java.util.concurrent.{ConcurrentLinkedQueue, CountDownLatch}\n  import java.util.concurrent.atomic.AtomicBoolean\n\n  // \u30b7\u30f3\u30d7\u30eb\u306a\u30a2\u30af\u30bf\u30fc\u306e\u5b9f\u88c5\n  abstract class Actor[T] {\n    private val mailbox = new ConcurrentLinkedQueue[T]()\n    private val running = new AtomicBoolean(true)\n\n    // \u30e1\u30c3\u30bb\u30fc\u30b8\u53d7\u4fe1\u6642\u306e\u51e6\u7406\uff08\u30b5\u30d6\u30af\u30e9\u30b9\u3067\u5b9f\u88c5\uff09\n    def receive(message: T): Unit\n\n    // \u30e1\u30c3\u30bb\u30fc\u30b8\u9001\u4fe1\n    def !(message: T): Unit = {\n      if (running.get()) {\n        mailbox.offer(message)\n      }\n    }\n\n    // \u30a2\u30af\u30bf\u30fc\u958b\u59cb\n    def start(): Unit = {\n      Future {\n        while (running.get() || !mailbox.isEmpty) {\n          Option(mailbox.poll()) match {\n            case Some(msg) =&gt; \n              try { receive(msg) }\n              catch { case e: Exception =&gt;\n                println(s\"\u30a8\u30e9\u30fc: ${e.getMessage}\")\n              }\n            case None =&gt; \n              Thread.sleep(10)\n          }\n        }\n      }\n    }\n\n    // \u30a2\u30af\u30bf\u30fc\u505c\u6b62\n    def stop(): Unit = {\n      running.set(false)\n    }\n  }\n\n  // \u6328\u62f6\u30a2\u30af\u30bf\u30fc\n  class GreeterActor extends Actor[String] {\n    override def receive(message: String): Unit = message match {\n      case \"hello\" =&gt; println(\"\u3053\u3093\u306b\u3061\u306f\uff01\")\n      case \"goodbye\" =&gt; println(\"\u3055\u3088\u3046\u306a\u3089\uff01\")\n      case name =&gt; println(s\"\u306f\u3058\u3081\u307e\u3057\u3066\u3001$name \u3055\u3093\uff01\")\n    }\n  }\n\n  println(\"=== \u57fa\u672c\u7684\u306a\u30a2\u30af\u30bf\u30fc ===\")\n\n  val greeter = new GreeterActor\n  greeter.start()\n\n  greeter ! \"hello\"\n  greeter ! \"\u592a\u90ce\"\n  greeter ! \"goodbye\"\n\n  Thread.sleep(100)\n  greeter.stop()\n\n  // \u30ab\u30a6\u30f3\u30bf\u30fc\u30a2\u30af\u30bf\u30fc\uff08\u72b6\u614b\u3092\u6301\u3064\uff09\n  sealed trait CounterMessage\n  case object Increment extends CounterMessage\n  case object Decrement extends CounterMessage\n  case class GetCount(replyTo: Int =&gt; Unit) extends CounterMessage\n\n  class CounterActor extends Actor[CounterMessage] {\n    private var count = 0\n\n    override def receive(message: CounterMessage): Unit = message match {\n      case Increment =&gt;\n        count += 1\n        println(s\"\u30ab\u30a6\u30f3\u30c8\u5897\u52a0: $count\")\n\n      case Decrement =&gt;\n        count -= 1\n        println(s\"\u30ab\u30a6\u30f3\u30c8\u6e1b\u5c11: $count\")\n\n      case GetCount(replyTo) =&gt;\n        replyTo(count)\n    }\n  }\n\n  println(\"\\n=== \u72b6\u614b\u3092\u6301\u3064\u30a2\u30af\u30bf\u30fc ===\")\n\n  val counter = new CounterActor\n  counter.start()\n\n  counter ! Increment\n  counter ! Increment\n  counter ! Decrement\n\n  Thread.sleep(100)\n\n  val promise = Promise[Int]()\n  counter ! GetCount(count =&gt; promise.success(count))\n\n  promise.future.foreach { count =&gt;\n    println(s\"\u6700\u7d42\u30ab\u30a6\u30f3\u30c8: $count\")\n  }\n\n  Thread.sleep(100)\n  counter.stop()\n</code></pre>"},{"location":"part9/chapter35/#_4","title":"\u30a2\u30af\u30bf\u30fc\u9593\u306e\u901a\u4fe1","text":"<pre><code>// ActorCommunication.scala\n@main def actorCommunication(): Unit = {\n  import scala.concurrent.ExecutionContext.Implicits.global\n  import java.util.concurrent.ConcurrentLinkedQueue\n  import java.util.concurrent.atomic.AtomicBoolean\n\n  // \u6539\u826f\u7248\u30a2\u30af\u30bf\u30fc\u30d9\u30fc\u30b9\u30af\u30e9\u30b9\n  abstract class ImprovedActor[T] {\n    self =&gt;\n\n    private val mailbox = new ConcurrentLinkedQueue[T]()\n    private val running = new AtomicBoolean(false)\n    private var thread: Option[Thread] = None\n\n    def receive: PartialFunction[T, Unit]\n\n    final def !(message: T): Unit = {\n      mailbox.offer(message)\n    }\n\n    def start(): ImprovedActor[T] = {\n      if (running.compareAndSet(false, true)) {\n        thread = Some(new Thread(() =&gt; {\n          while (running.get() || !mailbox.isEmpty) {\n            Option(mailbox.poll()) match {\n              case Some(msg) if receive.isDefinedAt(msg) =&gt;\n                try { receive(msg) }\n                catch { case e: Exception =&gt;\n                  println(s\"\u30a8\u30e9\u30fc\u51e6\u7406: $e\")\n                }\n              case _ =&gt;\n                Thread.sleep(10)\n            }\n          }\n        }))\n        thread.foreach(_.start())\n      }\n      this\n    }\n\n    def stop(): Unit = {\n      running.set(false)\n      thread.foreach(_.join(1000))\n    }\n  }\n\n  // Ping-Pong\u30a2\u30af\u30bf\u30fc\n  case class Ping(replyTo: ImprovedActor[Pong])\n  case class Pong(replyTo: ImprovedActor[Ping])\n  case object Start\n  case object Stop\n\n  class PingActor extends ImprovedActor[Ping | Start | Stop] {\n    private var pongActor: Option[ImprovedActor[Pong]] = None\n    private var count = 0\n\n    def receive: PartialFunction[Ping | Start | Stop, Unit] = {\n      case Start =&gt;\n        println(\"Ping: \u30b2\u30fc\u30e0\u958b\u59cb\uff01\")\n        pongActor.foreach(_ ! Pong(this))\n\n      case Ping(replyTo) =&gt;\n        count += 1\n        println(s\"Ping: \u30d4\u30f3\uff01 (${count}\u56de\u76ee)\")\n        if (count &lt; 5) {\n          Thread.sleep(500)\n          replyTo ! Pong(this)\n        } else {\n          println(\"Ping: \u30b2\u30fc\u30e0\u7d42\u4e86\uff01\")\n          replyTo ! Stop\n          self.stop()\n        }\n\n      case Stop =&gt;\n        self.stop()\n    }\n\n    def setPongActor(pong: ImprovedActor[Pong]): Unit = {\n      pongActor = Some(pong)\n    }\n  }\n\n  class PongActor extends ImprovedActor[Pong | Stop] {\n    def receive: PartialFunction[Pong | Stop, Unit] = {\n      case Pong(replyTo) =&gt;\n        println(\"Pong: \u30dd\u30f3\uff01\")\n        Thread.sleep(500)\n        replyTo ! Ping(this)\n\n      case Stop =&gt;\n        println(\"Pong: \u304a\u75b2\u308c\u69d8\uff01\")\n        self.stop()\n    }\n  }\n\n  println(\"=== Ping-Pong \u30a2\u30af\u30bf\u30fc ===\")\n\n  val ping = new PingActor().start()\n  val pong = new PongActor().start()\n\n  ping.setPongActor(pong)\n  ping ! Start\n\n  Thread.sleep(6000)\n</code></pre>"},{"location":"part9/chapter35/#_5","title":"\u30a2\u30af\u30bf\u30fc\u306b\u3088\u308b\u4e26\u884c\u51e6\u7406","text":""},{"location":"part9/chapter35/#_6","title":"\u30ef\u30fc\u30ab\u30fc\u30d7\u30fc\u30eb","text":"<pre><code>// ActorWorkerPool.scala\n@main def actorWorkerPool(): Unit = {\n  import scala.concurrent.Promise\n  import java.util.concurrent.atomic.AtomicInteger\n  import scala.collection.concurrent.TrieMap\n\n  // \u30b8\u30e7\u30d6\u3068\u305d\u306e\u7d50\u679c\n  case class Job(id: Int, data: String)\n  case class JobResult(jobId: Int, result: String)\n\n  // \u30e1\u30c3\u30bb\u30fc\u30b8\u5b9a\u7fa9\n  sealed trait WorkerMessage\n  case class ProcessJob(job: Job) extends WorkerMessage\n  case object Shutdown extends WorkerMessage\n\n  sealed trait MasterMessage\n  case class SubmitJob(job: Job) extends MasterMessage\n  case class JobCompleted(result: JobResult) extends MasterMessage\n  case class GetResults(replyTo: Map[Int, String] =&gt; Unit) extends MasterMessage\n\n  // \u30ef\u30fc\u30ab\u30fc\u30a2\u30af\u30bf\u30fc\n  class WorkerActor(id: Int, master: ImprovedActor[MasterMessage]) \n    extends ImprovedActor[WorkerMessage] {\n\n    def receive: PartialFunction[WorkerMessage, Unit] = {\n      case ProcessJob(job) =&gt;\n        println(s\"Worker-$id: \u30b8\u30e7\u30d6 ${job.id} \u3092\u51e6\u7406\u4e2d...\")\n        Thread.sleep(1000) // \u51e6\u7406\u6642\u9593\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\n\n        val result = job.data.toUpperCase + s\" (by Worker-$id)\"\n        master ! JobCompleted(JobResult(job.id, result))\n\n      case Shutdown =&gt;\n        println(s\"Worker-$id: \u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\")\n        stop()\n    }\n  }\n\n  // \u30de\u30b9\u30bf\u30fc\u30a2\u30af\u30bf\u30fc\uff08\u30ef\u30fc\u30ab\u30fc\u30d7\u30fc\u30eb\u7ba1\u7406\uff09\n  class MasterActor(workerCount: Int) extends ImprovedActor[MasterMessage] {\n    private val workers = (1 to workerCount).map { i =&gt;\n      new WorkerActor(i, this).start()\n    }.toVector\n\n    private val pendingJobs = scala.collection.mutable.Queue[Job]()\n    private val busyWorkers = scala.collection.mutable.Set[Int]()\n    private val results = TrieMap[Int, String]()\n    private var nextWorker = 0\n\n    def receive: PartialFunction[MasterMessage, Unit] = {\n      case SubmitJob(job) =&gt;\n        println(s\"Master: \u30b8\u30e7\u30d6 ${job.id} \u3092\u53d7\u4ed8\")\n\n        // \u7a7a\u3044\u3066\u3044\u308b\u30ef\u30fc\u30ab\u30fc\u3092\u63a2\u3059\n        val availableWorker = findAvailableWorker()\n        if (availableWorker &gt;= 0) {\n          workers(availableWorker) ! ProcessJob(job)\n          busyWorkers += availableWorker\n        } else {\n          pendingJobs.enqueue(job)\n        }\n\n      case JobCompleted(result) =&gt;\n        results.put(result.jobId, result.result)\n        println(s\"Master: \u30b8\u30e7\u30d6 ${result.jobId} \u5b8c\u4e86\")\n\n        // \u30ef\u30fc\u30ab\u30fc\u3092\u89e3\u653e\n        val workerId = result.result.split(\"Worker-\")(1).split(\"\\\\)\")(0).toInt - 1\n        busyWorkers -= workerId\n\n        // \u5f85\u6a5f\u4e2d\u306e\u30b8\u30e7\u30d6\u304c\u3042\u308c\u3070\u5272\u308a\u5f53\u3066\n        if (pendingJobs.nonEmpty) {\n          val nextJob = pendingJobs.dequeue()\n          workers(workerId) ! ProcessJob(nextJob)\n          busyWorkers += workerId\n        }\n\n      case GetResults(replyTo) =&gt;\n        replyTo(results.toMap)\n    }\n\n    private def findAvailableWorker(): Int = {\n      (0 until workerCount).find(!busyWorkers.contains(_)).getOrElse(-1)\n    }\n\n    def shutdown(): Unit = {\n      workers.foreach(_ ! Shutdown)\n      Thread.sleep(100)\n      stop()\n    }\n  }\n\n  println(\"=== \u30ef\u30fc\u30ab\u30fc\u30d7\u30fc\u30eb ===\")\n\n  val master = new MasterActor(3).start()\n\n  // \u30b8\u30e7\u30d6\u3092\u6295\u5165\n  val jobs = (1 to 10).map { i =&gt;\n    Job(i, s\"\u30c7\u30fc\u30bf-$i\")\n  }\n\n  jobs.foreach { job =&gt;\n    master ! SubmitJob(job)\n    Thread.sleep(200) // \u6295\u5165\u9593\u9694\n  }\n\n  // \u7d50\u679c\u3092\u5f85\u3064\n  Thread.sleep(5000)\n\n  val promise = Promise[Map[Int, String]]()\n  master ! GetResults(results =&gt; promise.success(results))\n\n  promise.future.foreach { results =&gt;\n    println(\"\\n=== \u51e6\u7406\u7d50\u679c ===\")\n    results.toList.sortBy(_._1).foreach { case (id, result) =&gt;\n      println(s\"\u30b8\u30e7\u30d6 $id: $result\")\n    }\n  }\n\n  Thread.sleep(1000)\n  master.shutdown()\n</code></pre>"},{"location":"part9/chapter35/#_7","title":"\u76e3\u7763\u30a2\u30af\u30bf\u30fc","text":""},{"location":"part9/chapter35/#_8","title":"\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3068\u518d\u8d77\u52d5","text":"<pre><code>// SupervisorActor.scala\n@main def supervisorActor(): Unit = {\n  import scala.util.{Try, Success, Failure}\n  import java.util.concurrent.atomic.AtomicInteger\n\n  // \u76e3\u7763\u6226\u7565\n  sealed trait SupervisorStrategy\n  case object Restart extends SupervisorStrategy\n  case object Stop extends SupervisorStrategy\n  case object Escalate extends SupervisorStrategy\n\n  // \u76e3\u7763\u30a2\u30af\u30bf\u30fc\n  abstract class SupervisedActor[T] extends ImprovedActor[T] {\n    private val restartCount = new AtomicInteger(0)\n\n    def preRestart(reason: Throwable): Unit = ()\n    def postRestart(): Unit = ()\n\n    override def start(): SupervisedActor[T] = {\n      super.start()\n      this\n    }\n  }\n\n  class Supervisor[T](\n    childProps: () =&gt; SupervisedActor[T],\n    strategy: Throwable =&gt; SupervisorStrategy\n  ) extends ImprovedActor[SupervisorMessage[T]] {\n\n    private var child: Option[SupervisedActor[T]] = None\n    private val childRestarts = new AtomicInteger(0)\n\n    override def start(): Supervisor[T] = {\n      super.start()\n      createChild()\n      this\n    }\n\n    def receive: PartialFunction[SupervisorMessage[T], Unit] = {\n      case Forward(msg) =&gt;\n        child.foreach(_ ! msg)\n\n      case ChildFailed(error) =&gt;\n        println(s\"Supervisor: \u5b50\u30a2\u30af\u30bf\u30fc\u3067\u30a8\u30e9\u30fc\u767a\u751f - ${error.getMessage}\")\n\n        strategy(error) match {\n          case Restart =&gt;\n            if (childRestarts.incrementAndGet() &lt;= 3) {\n              println(\"Supervisor: \u5b50\u30a2\u30af\u30bf\u30fc\u3092\u518d\u8d77\u52d5\u3057\u307e\u3059\")\n              restartChild()\n            } else {\n              println(\"Supervisor: \u518d\u8d77\u52d5\u56de\u6570\u304c\u4e0a\u9650\u306b\u9054\u3057\u307e\u3057\u305f\u3002\u505c\u6b62\u3057\u307e\u3059\u3002\")\n              stopChild()\n            }\n\n          case Stop =&gt;\n            println(\"Supervisor: \u5b50\u30a2\u30af\u30bf\u30fc\u3092\u505c\u6b62\u3057\u307e\u3059\")\n            stopChild()\n\n          case Escalate =&gt;\n            println(\"Supervisor: \u30a8\u30e9\u30fc\u3092\u4e0a\u4f4d\u306b\u30a8\u30b9\u30ab\u30ec\u30fc\u30c8\u3057\u307e\u3059\")\n            throw error\n        }\n    }\n\n    private def createChild(): Unit = {\n      child = Some(childProps().start())\n      child.foreach(watchChild)\n    }\n\n    private def restartChild(): Unit = {\n      stopChild()\n      createChild()\n    }\n\n    private def stopChild(): Unit = {\n      child.foreach(_.stop())\n      child = None\n    }\n\n    private def watchChild(actor: SupervisedActor[T]): Unit = {\n      // \u5b9f\u969b\u306e\u5b9f\u88c5\u3067\u306f\u3001\u5b50\u30a2\u30af\u30bf\u30fc\u306e\u76e3\u8996\u30e1\u30ab\u30cb\u30ba\u30e0\u304c\u5fc5\u8981\n      ()\n    }\n  }\n\n  // \u30e1\u30c3\u30bb\u30fc\u30b8\u5b9a\u7fa9\n  sealed trait SupervisorMessage[T]\n  case class Forward[T](message: T) extends SupervisorMessage[T]\n  case class ChildFailed[T](error: Throwable) extends SupervisorMessage[T]\n\n  // \u4e0d\u5b89\u5b9a\u306a\u30ef\u30fc\u30ab\u30fc\u30a2\u30af\u30bf\u30fc\n  sealed trait WorkerMessage\n  case class Calculate(expression: String) extends WorkerMessage\n  case class Result(value: Double) extends WorkerMessage\n\n  class UnstableWorker extends SupervisedActor[WorkerMessage] {\n    private var processedCount = 0\n\n    def receive: PartialFunction[WorkerMessage, Unit] = {\n      case Calculate(expr) =&gt;\n        processedCount += 1\n        println(s\"Worker: \u8a08\u7b97\u5b9f\u884c #$processedCount - $expr\")\n\n        // \u6642\u3005\u30a8\u30e9\u30fc\u3092\u8d77\u3053\u3059\n        if (processedCount % 3 == 0) {\n          throw new RuntimeException(\"\u8a08\u7b97\u30a8\u30e9\u30fc\uff01\")\n        }\n\n        Try(eval(expr)) match {\n          case Success(result) =&gt;\n            println(s\"Worker: \u7d50\u679c = $result\")\n          case Failure(e) =&gt;\n            println(s\"Worker: \u8a08\u7b97\u5931\u6557 - ${e.getMessage}\")\n        }\n    }\n\n    private def eval(expr: String): Double = {\n      // \u7c21\u5358\u306a\u8a08\u7b97\u5f0f\u306e\u8a55\u4fa1\uff08\u5b9f\u969b\u306f\u9069\u5207\u306a\u30d1\u30fc\u30b5\u30fc\u3092\u4f7f\u7528\uff09\n      expr match {\n        case \"1+1\" =&gt; 2.0\n        case \"10/2\" =&gt; 5.0\n        case \"2*3\" =&gt; 6.0\n        case _ =&gt; throw new IllegalArgumentException(\"\u4e0d\u660e\u306a\u5f0f\")\n      }\n    }\n\n    override def preRestart(reason: Throwable): Unit = {\n      println(s\"Worker: \u518d\u8d77\u52d5\u524d\u51e6\u7406 - ${reason.getMessage}\")\n      processedCount = 0\n    }\n\n    override def postRestart(): Unit = {\n      println(\"Worker: \u518d\u8d77\u52d5\u5b8c\u4e86\")\n    }\n  }\n\n  println(\"=== \u76e3\u7763\u30a2\u30af\u30bf\u30fc ===\")\n\n  // \u518d\u8d77\u52d5\u6226\u7565\n  val supervisor = new Supervisor[WorkerMessage](\n    () =&gt; new UnstableWorker,\n    {\n      case _: RuntimeException =&gt; Restart\n      case _: IllegalArgumentException =&gt; Stop\n      case _ =&gt; Escalate\n    }\n  ).start()\n\n  // \u8a08\u7b97\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u4fe1\n  val calculations = List(\"1+1\", \"10/2\", \"2*3\", \"1+1\", \"10/2\", \"unknown\")\n\n  calculations.foreach { calc =&gt;\n    supervisor ! Forward(Calculate(calc))\n    Thread.sleep(1000)\n  }\n\n  Thread.sleep(2000)\n  supervisor.stop()\n</code></pre>"},{"location":"part9/chapter35/#_9","title":"\u5b9f\u8df5\u4f8b\uff1a\u30c1\u30e3\u30c3\u30c8\u30eb\u30fc\u30e0","text":"<pre><code>// ChatRoomActor.scala\n@main def chatRoomActor(): Unit = {\n  import scala.collection.mutable\n  import java.time.LocalDateTime\n  import java.time.format.DateTimeFormatter\n\n  // \u30e1\u30c3\u30bb\u30fc\u30b8\u5b9a\u7fa9\n  sealed trait ChatMessage\n  case class Join(userId: String, userActor: ImprovedActor[UserMessage]) extends ChatMessage\n  case class Leave(userId: String) extends ChatMessage\n  case class Broadcast(from: String, message: String) extends ChatMessage\n  case class PrivateMessage(from: String, to: String, message: String) extends ChatMessage\n  case class GetHistory(replyTo: List[String] =&gt; Unit) extends ChatMessage\n\n  sealed trait UserMessage\n  case class ReceiveMessage(from: String, message: String, timestamp: String) extends UserMessage\n  case class SystemMessage(message: String) extends UserMessage\n  case class PrivateReceived(from: String, message: String) extends UserMessage\n\n  // \u30c1\u30e3\u30c3\u30c8\u30eb\u30fc\u30e0\u30a2\u30af\u30bf\u30fc\n  class ChatRoomActor(roomName: String) extends ImprovedActor[ChatMessage] {\n    private val users = mutable.Map[String, ImprovedActor[UserMessage]]()\n    private val history = mutable.ListBuffer[String]()\n    private val formatter = DateTimeFormatter.ofPattern(\"HH:mm:ss\")\n\n    def receive: PartialFunction[ChatMessage, Unit] =\n      case Join(userId, userActor) =&gt;\n        users.put(userId, userActor)\n        val message = s\"$userId \u3055\u3093\u304c\u5165\u5ba4\u3057\u307e\u3057\u305f\"\n        addToHistory(message)\n\n        // \u65e2\u5b58\u30e6\u30fc\u30b6\u30fc\u306b\u901a\u77e5\n        users.foreach { case (id, actor) =&gt;\n          if (id != userId) {\n            actor ! SystemMessage(message)\n        }\n\n        // \u65b0\u898f\u30e6\u30fc\u30b6\u30fc\u306b\u30a6\u30a7\u30eb\u30ab\u30e0\u30e1\u30c3\u30bb\u30fc\u30b8\n        userActor ! SystemMessage(s\"$roomName \u3078\u3088\u3046\u3053\u305d\uff01\")\n        userActor ! SystemMessage(s\"\u73fe\u5728\u306e\u30e6\u30fc\u30b6\u30fc: ${users.keys.mkString(\", \")}\")\n\n      case Leave(userId) =&gt;\n        users.remove(userId)\n        val message = s\"$userId \u3055\u3093\u304c\u9000\u5ba4\u3057\u307e\u3057\u305f\"\n        addToHistory(message)\n\n        // \u6b8b\u308a\u306e\u30e6\u30fc\u30b6\u30fc\u306b\u901a\u77e5\n        users.foreach { case (_, actor) =&gt;\n          actor ! SystemMessage(message)\n        }\n\n      case Broadcast(from, message) =&gt;\n        val timestamp = LocalDateTime.now().format(formatter)\n        val fullMessage = s\"[$timestamp] $from: $message\"\n        addToHistory(fullMessage)\n\n        // \u5168\u30e6\u30fc\u30b6\u30fc\u306b\u914d\u4fe1\n        users.foreach { case (id, actor) =&gt;\n          if (id != from) {\n            actor ! ReceiveMessage(from, message, timestamp)\n        }\n\n      case PrivateMessage(from, to, message) =&gt;\n        users.get(to) match {\n          case Some(actor) =&gt;\n            actor ! PrivateReceived(from, message)\n          case None =&gt;\n            users.get(from).foreach { actor =&gt;\n              actor ! SystemMessage(s\"$to \u3055\u3093\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\")\n            }\n\n      case GetHistory(replyTo) =&gt;\n        replyTo(history.toList)\n\n    private def addToHistory(message: String): Unit =\n      history += s\"[${LocalDateTime.now().format(formatter)}] $message\"\n      if (history.size &gt; 100) { history.remove(0) // \u5c65\u6b74\u306e\u4e0a\u9650\n\n  // \u30e6\u30fc\u30b6\u30fc\u30a2\u30af\u30bf\u30fc\n  class UserActor(userId: String) extends ImprovedActor[UserMessage]:\n    def receive: PartialFunction[UserMessage, Unit] =\n      case ReceiveMessage(from, message, timestamp) =&gt;\n        println(s\"[$userId] $from: $message ($timestamp)\")\n\n      case SystemMessage(message) =&gt;\n        println(s\"[$userId] [\u30b7\u30b9\u30c6\u30e0] $message\")\n\n      case PrivateReceived(from, message) =&gt;\n        println(s\"[$userId] [\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8] $from: $message\")\n\n  // \u7c21\u5358\u306a\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\n  class ChatClient(userId: String, room: ImprovedActor[ChatMessage]) {\n    private val userActor = new UserActor(userId).start()\n\n    def join(): Unit = {\n      room ! Join(userId, userActor)\n    }\n\n    def sendMessage(message: String): Unit = {\n      room ! Broadcast(userId, message)\n    }\n\n    def sendPrivate(to: String, message: String): Unit = {\n      room ! PrivateMessage(userId, to, message)\n    }\n\n    def leave(): Unit = {\n      room ! Leave(userId)\n      userActor.stop()\n    }\n  }\n\n  println(\"=== \u30c1\u30e3\u30c3\u30c8\u30eb\u30fc\u30e0 ===\")\n\n  val chatRoom = new ChatRoomActor(\"Scala\u52c9\u5f37\u4f1a\").start()\n\n  // \u30e6\u30fc\u30b6\u30fc\u304c\u53c2\u52a0\n  val alice = new ChatClient(\"Alice\", chatRoom)\n  val bob = new ChatClient(\"Bob\", chatRoom)\n  val charlie = new ChatClient(\"Charlie\", chatRoom)\n\n  alice.join()\n  Thread.sleep(500)\n\n  bob.join()\n  Thread.sleep(500)\n\n  charlie.join()\n  Thread.sleep(500)\n\n  // \u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u3084\u308a\u53d6\u308a\n  alice.sendMessage(\"\u3053\u3093\u306b\u3061\u306f\u3001\u307f\u306a\u3055\u3093\uff01\")\n  Thread.sleep(500)\n\n  bob.sendMessage(\"\u3053\u3093\u306b\u3061\u306f\u3001Alice\uff01\")\n  Thread.sleep(500)\n\n  charlie.sendMessage(\"\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\")\n  Thread.sleep(500)\n\n  // \u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u30e1\u30c3\u30bb\u30fc\u30b8\n  alice.sendPrivate(\"Bob\", \"\u5f8c\u3067\u500b\u5225\u306b\u76f8\u8ac7\u304c\u3042\u308a\u307e\u3059\")\n  Thread.sleep(500)\n\n  // \u8ab0\u304b\u304c\u9000\u5ba4\n  bob.leave()\n  Thread.sleep(500)\n\n  alice.sendMessage(\"Bob \u3055\u3093\u3001\u304a\u75b2\u308c\u69d8\u3067\u3057\u305f\")\n  Thread.sleep(500)\n\n  // \u5c65\u6b74\u3092\u53d6\u5f97\n  val promise = Promise[List[String]]()\n  chatRoom ! GetHistory(history =&gt; promise.success(history))\n\n  promise.future.foreach { history =&gt;\n    println(\"\\n=== \u30c1\u30e3\u30c3\u30c8\u5c65\u6b74 ===\")\n    history.foreach(println)\n  }\n\n  Thread.sleep(1000)\n\n  // \u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\n  alice.leave()\n  charlie.leave()\n  chatRoom.stop()\n</code></pre>"},{"location":"part9/chapter35/#_10","title":"\u5b9f\u8df5\u4f8b\uff1a\u5206\u6563\u30bf\u30b9\u30af\u51e6\u7406","text":"<pre><code>// DistributedTaskProcessing.scala\n@main def distributedTaskProcessing(): Unit = {\n  import scala.concurrent.duration._\n  import scala.util.Random\n  import java.util.UUID\n\n  // \u30bf\u30b9\u30af\u3068\u305d\u306e\u72b6\u614b\n  case class Task(\n    id: String,\n    payload: String,\n    priority: Int,\n    createdAt: Long = System.currentTimeMillis()\n  )\n\n  sealed trait TaskStatus\n  case object Pending extends TaskStatus\n  case object Running extends TaskStatus\n  case object Completed extends TaskStatus\n  case object Failed extends TaskStatus\n\n  case class TaskResult(taskId: String, result: String, completedAt: Long)\n\n  // \u30e1\u30c3\u30bb\u30fc\u30b8\u5b9a\u7fa9\n  sealed trait CoordinatorMessage\n  case class SubmitTask(task: Task) extends CoordinatorMessage\n  case class WorkerAvailable(workerId: String) extends CoordinatorMessage\n  case class TaskCompleted(workerId: String, result: TaskResult) extends CoordinatorMessage\n  case class TaskFailed(workerId: String, taskId: String, error: String) extends CoordinatorMessage\n  case class GetStatus(replyTo: Map[String, TaskStatus] =&gt; Unit) extends CoordinatorMessage\n\n  sealed trait WorkerMessage\n  case class ProcessTask(task: Task) extends WorkerMessage\n  case object Stop extends WorkerMessage\n\n  // \u30bf\u30b9\u30af\u30b3\u30fc\u30c7\u30a3\u30cd\u30fc\u30bf\u30fc\n  class TaskCoordinator extends ImprovedActor[CoordinatorMessage]:\n    private val pendingTasks = mutable.PriorityQueue[Task]()(\n      Ordering.by(t =&gt; (t.priority, -t.createdAt))\n    )\n    private val runningTasks = mutable.Map[String, (Task, String)]() // taskId -&gt; (task, workerId)\n    private val taskStatus = mutable.Map[String, TaskStatus]()\n    private val taskResults = mutable.Map[String, TaskResult]()\n    private val availableWorkers = mutable.Queue[String]()\n    private val workers = mutable.Map[String, ImprovedActor[WorkerMessage]]()\n\n    def receive: PartialFunction[CoordinatorMessage, Unit] =\n      case SubmitTask(task) =&gt;\n        println(s\"Coordinator: \u30bf\u30b9\u30af ${task.id} \u3092\u53d7\u4ed8 (\u512a\u5148\u5ea6: ${task.priority})\")\n        pendingTasks.enqueue(task)\n        taskStatus(task.id) = Pending\n        assignTasks()\n\n      case WorkerAvailable(workerId) =&gt;\n        availableWorkers.enqueue(workerId)\n        assignTasks()\n\n      case TaskCompleted(workerId, result) =&gt;\n        runningTasks.remove(result.taskId)\n        taskStatus(result.taskId) = Completed\n        taskResults(result.taskId) = result\n        println(s\"Coordinator: \u30bf\u30b9\u30af ${result.taskId} \u5b8c\u4e86\")\n\n        availableWorkers.enqueue(workerId)\n        assignTasks()\n\n      case TaskFailed(workerId, taskId, error) =&gt;\n        runningTasks.get(taskId).foreach { case (task, _) =&gt;\n          println(s\"Coordinator: \u30bf\u30b9\u30af $taskId \u5931\u6557 - $error\")\n          taskStatus(taskId) = Failed\n\n          // \u30ea\u30c8\u30e9\u30a4\uff08\u512a\u5148\u5ea6\u3092\u4e0b\u3052\u3066\uff09\n          if (task.priority &gt; 1) {\n            val retryTask = task.copy(priority = task.priority - 1)\n            pendingTasks.enqueue(retryTask)\n            println(s\"Coordinator: \u30bf\u30b9\u30af $taskId \u3092\u30ea\u30c8\u30e9\u30a4\u30ad\u30e5\u30fc\u306b\u8ffd\u52a0\")\n        }\n\n        availableWorkers.enqueue(workerId)\n        assignTasks()\n\n      case GetStatus(replyTo) =&gt;\n        replyTo(taskStatus.toMap)\n\n    private def assignTasks(): Unit =\n      while availableWorkers.nonEmpty &amp;&amp; pendingTasks.nonEmpty do\n        val workerId = availableWorkers.dequeue()\n        val task = pendingTasks.dequeue()\n\n        workers.get(workerId).foreach { worker =&gt;\n          worker ! ProcessTask(task)\n          runningTasks(task.id) = (task, workerId)\n          taskStatus(task.id) = Running\n          println(s\"Coordinator: \u30bf\u30b9\u30af ${task.id} \u3092 Worker-$workerId \u306b\u5272\u5f53\")\n        }\n\n    def registerWorker(workerId: String, worker: ImprovedActor[WorkerMessage]): Unit =\n      workers(workerId) = worker\n      availableWorkers.enqueue(workerId)\n\n  // \u30ef\u30fc\u30ab\u30fc\n  class TaskWorker(\n    workerId: String,\n    coordinator: ImprovedActor[CoordinatorMessage]\n  ) extends ImprovedActor[WorkerMessage] {\n\n    def receive: PartialFunction[WorkerMessage, Unit] = {\n      case ProcessTask(task) =&gt;\n        println(s\"Worker-$workerId: \u30bf\u30b9\u30af ${task.id} \u306e\u51e6\u7406\u958b\u59cb\")\n\n        try {\n          // \u51e6\u7406\u6642\u9593\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\n          val processingTime = Random.nextInt(2000) + 1000\n          Thread.sleep(processingTime)\n\n          // \u6642\u3005\u5931\u6557\u3059\u308b\n          if (Random.nextDouble() &lt; 0.2) {\n            throw new RuntimeException(\"\u51e6\u7406\u30a8\u30e9\u30fc\")\n          }\n\n          val result = TaskResult(\n            task.id,\n            s\"${task.payload.toUpperCase} (processed by $workerId)\",\n            System.currentTimeMillis()\n          )\n\n          coordinator ! TaskCompleted(workerId, result)\n\n        } catch {\n          case e: Exception =&gt;\n            coordinator ! TaskFailed(workerId, task.id, e.getMessage)\n        }\n\n      case Stop =&gt;\n        println(s\"Worker-$workerId: \u505c\u6b62\")\n        stop()\n    }\n  }\n\n  println(\"=== \u5206\u6563\u30bf\u30b9\u30af\u51e6\u7406 ===\")\n\n  val coordinator = new TaskCoordinator().start()\n\n  // \u30ef\u30fc\u30ab\u30fc\u3092\u8d77\u52d5\n  val workerCount = 3\n  val workers = (1 to workerCount).map { i =&gt;\n    val workerId = s\"W$i\"\n    val worker = new TaskWorker(workerId, coordinator).start()\n    coordinator.registerWorker(workerId, worker)\n    (workerId, worker)\n  }\n\n  // \u30bf\u30b9\u30af\u3092\u6295\u5165\n  val tasks = (1 to 15).map { i =&gt;\n    Task(\n      id = UUID.randomUUID().toString.take(8),\n      payload = s\"\u30c7\u30fc\u30bf-$i\",\n      priority = Random.nextInt(5) + 1\n    )\n  }\n\n  println(\"\\n=== \u30bf\u30b9\u30af\u6295\u5165 ===\")\n  tasks.foreach { task =&gt;\n    coordinator ! SubmitTask(task)\n    Thread.sleep(200)\n  }\n\n  // \u51e6\u7406\u5b8c\u4e86\u3092\u5f85\u3064\n  Thread.sleep(10000)\n\n  // \u30b9\u30c6\u30fc\u30bf\u30b9\u78ba\u8a8d\n  val statusPromise = Promise[Map[String, TaskStatus]]()\n  coordinator ! GetStatus(status =&gt; statusPromise.success(status))\n\n  statusPromise.future.foreach { status =&gt;\n    println(\"\\n=== \u6700\u7d42\u30b9\u30c6\u30fc\u30bf\u30b9 ===\")\n    val grouped = status.groupBy(_._2).mapValues(_.size)\n    grouped.foreach { case (status, count) =&gt;\n      println(s\"$status: $count \u4ef6\")\n    }\n  }\n\n  Thread.sleep(1000)\n\n  // \u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\n  workers.foreach { case (_, worker) =&gt; worker ! Stop }\n  coordinator.stop()\n</code></pre>"},{"location":"part9/chapter35/#_11","title":"\u7df4\u7fd2\u3057\u3066\u307f\u3088\u3046\uff01","text":""},{"location":"part9/chapter35/#1","title":"\u7df4\u7fd21\uff1a\u9280\u884c\u30b7\u30b9\u30c6\u30e0","text":"<p>\u30a2\u30af\u30bf\u30fc\u30e2\u30c7\u30eb\u3067\u9280\u884c\u30b7\u30b9\u30c6\u30e0\u3092\u5b9f\u88c5\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - \u53e3\u5ea7\u30a2\u30af\u30bf\u30fc\uff08\u6b8b\u9ad8\u7ba1\u7406\uff09 - \u9001\u91d1\u51e6\u7406 - \u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u30ed\u30b0</p>"},{"location":"part9/chapter35/#2","title":"\u7df4\u7fd22\uff1a\u5728\u5eab\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0","text":"<p>\u5546\u54c1\u5728\u5eab\u3092\u7ba1\u7406\u3059\u308b\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\uff1a - \u5728\u5eab\u306e\u5897\u6e1b - \u8907\u6570\u5009\u5eab\u306e\u7ba1\u7406 - \u5728\u5eab\u4e0d\u8db3\u306e\u901a\u77e5</p>"},{"location":"part9/chapter35/#3","title":"\u7df4\u7fd23\uff1a\u30b2\u30fc\u30e0\u30b5\u30fc\u30d0\u30fc","text":"<p>\u30de\u30eb\u30c1\u30d7\u30ec\u30a4\u30e4\u30fc\u30b2\u30fc\u30e0\u306e\u30b5\u30fc\u30d0\u30fc\u3092\u5b9f\u88c5\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - \u30d7\u30ec\u30a4\u30e4\u30fc\u30a2\u30af\u30bf\u30fc - \u30b2\u30fc\u30e0\u30eb\u30fc\u30e0\u30a2\u30af\u30bf\u30fc - \u30de\u30c3\u30c1\u30e1\u30a4\u30ad\u30f3\u30b0</p>"},{"location":"part9/chapter35/#_12","title":"\u3053\u306e\u7ae0\u306e\u307e\u3068\u3081","text":"<p>\u30a2\u30af\u30bf\u30fc\u30e2\u30c7\u30eb\u306e\u7d20\u6674\u3089\u3057\u3055\u3092\u4f53\u9a13\u3067\u304d\u307e\u3057\u305f\uff01</p>"},{"location":"part9/chapter35/#_13","title":"\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3053\u3068","text":"<p>\u2705 \u30a2\u30af\u30bf\u30fc\u306e\u57fa\u672c - \u30e1\u30c3\u30bb\u30fc\u30b8\u30d1\u30c3\u30b7\u30f3\u30b0 - \u72b6\u614b\u306e\u30ab\u30d7\u30bb\u30eb\u5316 - \u975e\u540c\u671f\u901a\u4fe1</p> <p>\u2705 \u30a2\u30af\u30bf\u30fc\u30d1\u30bf\u30fc\u30f3 - \u30ef\u30fc\u30ab\u30fc\u30d7\u30fc\u30eb - \u30b9\u30fc\u30d1\u30fc\u30d0\u30a4\u30b6\u30fc - \u30d1\u30d6\u30ea\u30c3\u30b7\u30e5\u30fb\u30b5\u30d6\u30b9\u30af\u30e9\u30a4\u30d6</p> <p>\u2705 \u5b9f\u8df5\u7684\u306a\u5fdc\u7528 - \u30c1\u30e3\u30c3\u30c8\u30b7\u30b9\u30c6\u30e0 - \u30bf\u30b9\u30af\u5206\u6563\u51e6\u7406 - \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0</p> <p>\u2705 \u8a2d\u8a08\u306e\u539f\u5247 - \u5358\u4e00\u8cac\u4efb - \u4f4d\u7f6e\u900f\u904e\u6027 - \u8010\u969c\u5bb3\u6027</p>"},{"location":"part9/chapter35/#_14","title":"\u30a2\u30af\u30bf\u30fc\u30e2\u30c7\u30eb\u3092\u4f7f\u3046\u30b3\u30c4","text":"<ol> <li> <p>\u30e1\u30c3\u30bb\u30fc\u30b8\u8a2d\u8a08</p> <ul> <li>\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306b</li> <li>\u660e\u78ba\u306a\u610f\u56f3</li> <li>\u9069\u5207\u306a\u7c92\u5ea6</li> </ul> </li> <li> <p>\u30a8\u30e9\u30fc\u51e6\u7406</p> <ul> <li>Let it crash</li> <li>\u76e3\u7763\u968e\u5c64</li> <li>\u9069\u5207\u306a\u518d\u8d77\u52d5\u6226\u7565</li> </ul> </li> <li> <p>\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9</p> <ul> <li>\u30e1\u30fc\u30eb\u30dc\u30c3\u30af\u30b9\u30b5\u30a4\u30ba</li> <li>\u80cc\u5727\u5236\u5fa1</li> <li>\u9069\u5207\u306a\u4e26\u884c\u5ea6</li> </ul> </li> </ol>"},{"location":"part9/chapter35/#_15","title":"\u6b21\u306e\u7ae0\u3067\u306f...","text":"<p>\u30c6\u30b9\u30c8\u3092\u66f8\u304f\u65b9\u6cd5\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3059\u3002\u54c1\u8cea\u306e\u9ad8\u3044\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u305f\u3081\u306e\u5fc5\u9808\u30b9\u30ad\u30eb\u3092\u8eab\u306b\u3064\u3051\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part9/chapter35/#_16","title":"\u6700\u5f8c\u306b","text":"<p>\u30a2\u30af\u30bf\u30fc\u30e2\u30c7\u30eb\u306f\u300c\u72ec\u7acb\u3057\u305f\u8077\u4eba\u305f\u3061\u306e\u5354\u50cd\u300d\u3067\u3059\u3002\u305d\u308c\u305e\u308c\u304c\u81ea\u5206\u306e\u4ed5\u4e8b\u306b\u96c6\u4e2d\u3057\u3001\u5fc5\u8981\u306a\u6642\u3060\u3051\u30e1\u30c3\u30bb\u30fc\u30b8\u3067\u9023\u7d61\u3092\u53d6\u308a\u5408\u3046\u3002\u3053\u306e\u7f8e\u3057\u3044\u30e2\u30c7\u30eb\u306f\u3001\u8907\u96d1\u306a\u4e26\u884c\u51e6\u7406\u3092\u9a5a\u304f\u307b\u3069\u30b7\u30f3\u30d7\u30eb\u306b\u8868\u73fe\u3067\u304d\u307e\u3059\u3002\u821e\u53f0\u4e0a\u306e\u4ff3\u512a\u306e\u3088\u3046\u306b\u3001\u305d\u308c\u305e\u308c\u306e\u30a2\u30af\u30bf\u30fc\u304c\u8f1d\u304f\u3001\u305d\u3093\u306a\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\uff01</p>"},{"location":"part9/chapter36/","title":"\u7b2c36\u7ae0 \u30c6\u30b9\u30c8\u3092\u66f8\u3053\u3046","text":""},{"location":"part9/chapter36/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u65b0\u3057\u3044\u6599\u7406\u3092\u4f5c\u308b\u3068\u304d\u3001\u5473\u898b\u3092\u3057\u306a\u304c\u3089\u8abf\u6574\u3057\u307e\u3059\u3088\u306d\u3002\u5869\u52a0\u6e1b\u306f\u5927\u4e08\u592b\uff1f\u706b\u306e\u901a\u308a\u306f\uff1f\u6700\u5f8c\u306b\u5168\u4f53\u306e\u5473\u306e\u30d0\u30e9\u30f3\u30b9\u306f\uff1f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u3082\u540c\u3058\u3067\u3059\u3002\u30b3\u30fc\u30c9\u304c\u6b63\u3057\u304f\u52d5\u304f\u304b\u3001\u4e00\u3064\u4e00\u3064\u78ba\u8a8d\u3057\u306a\u304c\u3089\u4f5c\u3063\u3066\u3044\u304f\u3002</p> <p>\u305d\u308c\u304c\u300c\u30c6\u30b9\u30c8\u300d\u3067\u3059\u3002\u3053\u306e\u7ae0\u3067\u306f\u3001\u54c1\u8cea\u306e\u9ad8\u3044\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u305f\u3081\u306e\u3001\u30c6\u30b9\u30c8\u306e\u66f8\u304d\u65b9\u3092\u5b66\u3073\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part9/chapter36/#_2","title":"\u30c6\u30b9\u30c8\u306e\u57fa\u672c","text":""},{"location":"part9/chapter36/#_3","title":"\u6700\u521d\u306e\u30c6\u30b9\u30c8","text":"<pre><code>// FirstTest.scala\n// src/test/scala/FirstTest.scala\u306b\u914d\u7f6e\n\nimport org.scalatest.funsuite.AnyFunSuite\nimport org.scalatest.matchers.should.Matchers\n\nclass FirstTest extends AnyFunSuite with Matchers {\n\n  // \u57fa\u672c\u7684\u306a\u30c6\u30b9\u30c8\n  test(\"1 + 1 \u306f 2 \u306b\u306a\u308b\") {\n    val result = 1 + 1\n    result shouldBe 2\n  }\n\n  test(\"\u6587\u5b57\u5217\u306e\u9023\u7d50\") {\n    val hello = \"Hello\"\n    val world = \"World\"\n    val result = s\"$hello $world\"\n\n    result shouldBe \"Hello World\"\n    result should include(\"Hello\")\n    result should include(\"World\")\n    result should have length 11\n  }\n\n  test(\"\u30ea\u30b9\u30c8\u306e\u64cd\u4f5c\") {\n    val numbers = List(1, 2, 3, 4, 5)\n\n    numbers should have size 5\n    numbers should contain(3)\n    numbers shouldNot contain(10)\n    numbers.head shouldBe 1\n    numbers.last shouldBe 5\n  }\n\n  // \u4f8b\u5916\u306e\u30c6\u30b9\u30c8\n  test(\"\u30bc\u30ed\u9664\u7b97\u306f\u4f8b\u5916\u3092\u6295\u3052\u308b\") {\n    def divide(a: Int, b: Int): Int = a / b\n\n    an [ArithmeticException] should be thrownBy divide(10, 0)\n  }\n\n  // \u3088\u308a\u8a73\u7d30\u306a\u691c\u8a3c\n  test(\"Person\u30af\u30e9\u30b9\u306e\u52d5\u4f5c\") {\n    case class Person(name: String, age: Int) {\n      def isAdult: Boolean = age &gt;= 18\n      def greet: String = s\"Hello, I'm $name\"\n    }\n\n    val person = Person(\"\u592a\u90ce\", 25)\n\n    person.name shouldBe \"\u592a\u90ce\"\n    person.age shouldBe 25\n    person.isAdult shouldBe true\n    person.greet should startWith(\"Hello\")\n    person.greet should endWith(\"\u592a\u90ce\")\n  }\n</code></pre>"},{"location":"part9/chapter36/#_4","title":"\u30c6\u30b9\u30c8\u306e\u69cb\u9020\u3068\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3","text":"<pre><code>// TestStructure.scala\nimport org.scalatest.funsuite.AnyFunSuite\nimport org.scalatest.matchers.should.Matchers\nimport org.scalatest.BeforeAndAfter\n\nclass TestStructure extends AnyFunSuite with Matchers with BeforeAndAfter {\n\n  // \u30c6\u30b9\u30c8\u306e\u524d\u5f8c\u3067\u5b9f\u884c\u3055\u308c\u308b\u51e6\u7406\n  var testData: List[Int] = Nil\n\n  before {\n    println(\"\u30c6\u30b9\u30c8\u306e\u6e96\u5099\")\n    testData = List(1, 2, 3, 4, 5)\n  }\n\n  after {\n    println(\"\u30c6\u30b9\u30c8\u306e\u5f8c\u7247\u4ed8\u3051\")\n    testData = Nil\n  }\n\n  // Arrange-Act-Assert \u30d1\u30bf\u30fc\u30f3\n  test(\"\u30ea\u30b9\u30c8\u306e\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\") {\n    // Arrange\uff08\u6e96\u5099\uff09\n    val numbers = testData\n    val threshold = 3\n\n    // Act\uff08\u5b9f\u884c\uff09\n    val result = numbers.filter(_ &gt; threshold)\n\n    // Assert\uff08\u691c\u8a3c\uff09\n    result shouldBe List(4, 5)\n    result should have size 2\n    all(result) should be &gt; threshold\n  }\n\n  // \u8907\u6570\u306e\u691c\u8a3c\u3092\u30b0\u30eb\u30fc\u30d7\u5316\n  test(\"\u7d71\u8a08\u60c5\u5831\u306e\u8a08\u7b97\") {\n    case class Stats(min: Int, max: Int, sum: Int, avg: Double)\n\n    def calculateStats(numbers: List[Int]): Stats = {\n      Stats(\n        min = numbers.min,\n        max = numbers.max,\n        sum = numbers.sum,\n        avg = numbers.sum.toDouble / numbers.size\n      )\n    }\n\n    val stats = calculateStats(testData)\n\n    // \u500b\u5225\u306e\u691c\u8a3c\n    stats.min shouldBe 1\n    stats.max shouldBe 5\n    stats.sum shouldBe 15\n    stats.avg shouldBe 3.0\n\n    // \u307e\u3068\u3081\u3066\u691c\u8a3c\n    stats should have(\n      Symbol(\"min\") (1),\n      Symbol(\"max\") (5),\n      Symbol(\"sum\") (15)\n    )\n  }\n\n  // \u30c6\u30fc\u30d6\u30eb\u99c6\u52d5\u30c6\u30b9\u30c8\n  test(\"\u8907\u6570\u306e\u5165\u529b\u3067\u306e\u30c6\u30b9\u30c8\") {\n    def isPrime(n: Int): Boolean = {\n      if (n &lt;= 1) { false }\n      else if (n &lt;= 3) { true }\n      else { (2 to math.sqrt(n).toInt).forall(n % _ != 0) }\n    }\n\n    val testCases = Table(\n      (\"input\", \"expected\"),\n      (1, false),\n      (2, true),\n      (3, true),\n      (4, false),\n      (5, true),\n      (10, false),\n      (11, true)\n    )\n\n    forAll(testCases) { (input, expected) =&gt;\n      isPrime(input) shouldBe expected\n    }\n  }\n</code></pre>"},{"location":"part9/chapter36/#_5","title":"\u30e2\u30c3\u30af\u3068\u30b9\u30bf\u30d6","text":""},{"location":"part9/chapter36/#_6","title":"\u4f9d\u5b58\u6027\u306e\u30c6\u30b9\u30c8","text":"<pre><code>// MockingTest.scala\nimport org.scalatest.funsuite.AnyFunSuite\nimport org.scalatest.matchers.should.Matchers\nimport org.scalatestplus.mockito.MockitoSugar\nimport org.mockito.Mockito._\nimport org.mockito.ArgumentMatchers._\n\n// \u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30b3\u30fc\u30c9\ntrait EmailService:\n  def send(to: String, subject: String, body: String): Boolean\n\ntrait UserRepository:\n  def findById(id: String): Option[User]\n  def save(user: User): Unit\n\ncase class User(id: String, name: String, email: String)\n\nclass UserService(\n  emailService: EmailService,\n  userRepository: UserRepository\n):\n  def registerUser(name: String, email: String): Either[String, User] =\n    val userId = java.util.UUID.randomUUID().toString\n    val user = User(userId, name, email)\n\n    try\n      userRepository.save(user)\n\n      val emailSent = emailService.send(\n        email,\n        \"\u767b\u9332\u5b8c\u4e86\",\n        s\"$name \u69d8\u3001\u3054\u767b\u9332\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff01\"\n      )\n\n      if (emailSent) { Right(user)\n      else Left(\"\u30e1\u30fc\u30eb\u9001\u4fe1\u306b\u5931\u6557\u3057\u307e\u3057\u305f\")\n\n    catch\n      case e: Exception =&gt; Left(s\"\u767b\u9332\u30a8\u30e9\u30fc: ${e.getMessage}\")\n\n  def getUser(id: String): Option[User] =\n    userRepository.findById(id)\n\n// \u30c6\u30b9\u30c8\u30af\u30e9\u30b9\nclass MockingTest extends AnyFunSuite with Matchers with MockitoSugar:\n\n  test(\"\u30e6\u30fc\u30b6\u30fc\u767b\u9332 - \u6210\u529f\u30b1\u30fc\u30b9\") {\n    // \u30e2\u30c3\u30af\u306e\u4f5c\u6210\n    val mockEmailService = mock[EmailService]\n    val mockUserRepository = mock[UserRepository]\n\n    // \u30e2\u30c3\u30af\u306e\u632f\u308b\u821e\u3044\u3092\u5b9a\u7fa9\n    when(mockEmailService.send(any[String], any[String], any[String]))\n      .thenReturn(true)\n\n    // \u30c6\u30b9\u30c8\u5b9f\u884c\n    val userService = new UserService(mockEmailService, mockUserRepository)\n    val result = userService.registerUser(\"\u592a\u90ce\", \"taro@example.com\")\n\n    // \u691c\u8a3c\n    result should be a Symbol(\"right\")\n    result.map(_.name) shouldBe Right(\"\u592a\u90ce\")\n    result.map(_.email) shouldBe Right(\"taro@example.com\")\n\n    // \u30e2\u30c3\u30af\u304c\u6b63\u3057\u304f\u547c\u3070\u308c\u305f\u304b\u78ba\u8a8d\n    verify(mockUserRepository, times(1)).save(any[User])\n    verify(mockEmailService, times(1)).send(\n      \"taro@example.com\",\n      \"\u767b\u9332\u5b8c\u4e86\",\n      \"\u592a\u90ce \u69d8\u3001\u3054\u767b\u9332\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff01\"\n    )\n  }\n\n  test(\"\u30e6\u30fc\u30b6\u30fc\u767b\u9332 - \u30e1\u30fc\u30eb\u9001\u4fe1\u5931\u6557\") {\n    val mockEmailService = mock[EmailService]\n    val mockUserRepository = mock[UserRepository]\n\n    // \u30e1\u30fc\u30eb\u9001\u4fe1\u304c\u5931\u6557\u3059\u308b\u8a2d\u5b9a\n    when(mockEmailService.send(any[String], any[String], any[String]))\n      .thenReturn(false)\n\n    val userService = new UserService(mockEmailService, mockUserRepository)\n    val result = userService.registerUser(\"\u82b1\u5b50\", \"hanako@example.com\")\n\n    result shouldBe Left(\"\u30e1\u30fc\u30eb\u9001\u4fe1\u306b\u5931\u6557\u3057\u307e\u3057\u305f\")\n\n    // \u30e6\u30fc\u30b6\u30fc\u306f\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u306f\u305a\n    verify(mockUserRepository, times(1)).save(any[User])\n  }\n\n  test(\"\u30e6\u30fc\u30b6\u30fc\u691c\u7d22\") {\n    val mockEmailService = mock[EmailService]\n    val mockUserRepository = mock[UserRepository]\n\n    val testUser = User(\"123\", \"\u6b21\u90ce\", \"jiro@example.com\")\n\n    // \u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u632f\u308b\u821e\u3044\u3092\u5b9a\u7fa9\n    when(mockUserRepository.findById(\"123\")).thenReturn(Some(testUser))\n    when(mockUserRepository.findById(\"999\")).thenReturn(None)\n\n    val userService = new UserService(mockEmailService, mockUserRepository)\n\n    // \u5b58\u5728\u3059\u308b\u30e6\u30fc\u30b6\u30fc\n    userService.getUser(\"123\") shouldBe Some(testUser)\n\n    // \u5b58\u5728\u3057\u306a\u3044\u30e6\u30fc\u30b6\u30fc\n    userService.getUser(\"999\") shouldBe None\n\n    // \u30e1\u30fc\u30eb\u30b5\u30fc\u30d3\u30b9\u306f\u547c\u3070\u308c\u306a\u3044\u306f\u305a\n    verify(mockEmailService, never()).send(any[String], any[String], any[String])\n  }\n</code></pre>"},{"location":"part9/chapter36/#_7","title":"\u975e\u540c\u671f\u51e6\u7406\u306e\u30c6\u30b9\u30c8","text":""},{"location":"part9/chapter36/#future","title":"Future\u306e\u30c6\u30b9\u30c8","text":"<pre><code>// AsyncTest.scala\nimport org.scalatest.funsuite.AsyncFunSuite\nimport org.scalatest.matchers.should.Matchers\nimport scala.concurrent.Future\nimport scala.concurrent.duration._\n\nclass AsyncTest extends AsyncFunSuite with Matchers:\n\n  // \u975e\u540c\u671fAPI\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\n  def fetchUserAsync(id: String): Future[String] = Future {\n    Thread.sleep(100)\n    s\"User-$id\"\n  }\n\n  def fetchScoreAsync(userId: String): Future[Int] = Future {\n    Thread.sleep(100)\n    userId.length * 10\n  }\n\n  test(\"\u5358\u4e00\u306eFuture\u306e\u30c6\u30b9\u30c8\") {\n    val future = fetchUserAsync(\"123\")\n\n    future.map { result =&gt;\n      result shouldBe \"User-123\"\n    }\n  }\n\n  test(\"\u8907\u6570\u306eFuture\u306e\u7d44\u307f\u5408\u308f\u305b\") {\n    val combinedFuture = for\n      user &lt;- fetchUserAsync(\"456\")\n      score &lt;- fetchScoreAsync(user)\n    yield (user, score)\n\n    combinedFuture.map { case (user, score) =&gt;\n      user shouldBe \"User-456\"\n      score shouldBe 80\n    }\n  }\n\n  test(\"\u30a8\u30e9\u30fc\u30b1\u30fc\u30b9\u306e\u30c6\u30b9\u30c8\") {\n    def riskyOperation(n: Int): Future[Int] = Future {\n      if (n &lt; 0) { throw new IllegalArgumentException(\"\u8ca0\u306e\u6570\u306f\u4e0d\u53ef\")\n      n * 2\n    }\n\n    // \u6210\u529f\u30b1\u30fc\u30b9\n    riskyOperation(5).map { result =&gt;\n      result shouldBe 10\n    }\n\n    // \u5931\u6557\u30b1\u30fc\u30b9\n    recoverToSucceededIf[IllegalArgumentException] {\n      riskyOperation(-5)\n    }\n  }\n\n  test(\"\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306e\u30c6\u30b9\u30c8\") {\n    def slowOperation(): Future[String] = Future {\n      Thread.sleep(5000)\n      \"\u5b8c\u4e86\"\n    }\n\n    // ScalaTest\u306e\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u6a5f\u80fd\n    assertThrows[org.scalatest.concurrent.TimeoutField] {\n      failAfter(1.second) {\n        slowOperation()\n      }\n    }\n  }\n</code></pre>"},{"location":"part9/chapter36/#_8","title":"\u30d7\u30ed\u30d1\u30c6\u30a3\u30d9\u30fc\u30b9\u30c6\u30b9\u30c8","text":""},{"location":"part9/chapter36/#scalacheck","title":"ScalaCheck\u3092\u4f7f\u3063\u305f\u30c6\u30b9\u30c8","text":"<pre><code>// PropertyBasedTest.scala\nimport org.scalatest.funsuite.AnyFunSuite\nimport org.scalatest.matchers.should.Matchers\nimport org.scalatestplus.scalacheck.ScalaCheckPropertyChecks\nimport org.scalacheck.Gen\nimport org.scalacheck.Prop.forAll\n\nclass PropertyBasedTest extends AnyFunSuite \n  with Matchers \n  with ScalaCheckPropertyChecks:\n\n  // \u30ea\u30b9\u30c8\u306e\u9006\u9806\u306e\u6027\u8cea\n  test(\"\u30ea\u30b9\u30c8\u30922\u56de\u9006\u9806\u306b\u3059\u308b\u3068\u5143\u306b\u623b\u308b\") {\n    forAll { (list: List[Int]) =&gt;\n      list.reverse.reverse shouldBe list\n    }\n  }\n\n  // \u30bd\u30fc\u30c8\u306e\u6027\u8cea\n  test(\"\u30bd\u30fc\u30c8\u6e08\u307f\u30ea\u30b9\u30c8\u306e\u6027\u8cea\") {\n    forAll { (list: List[Int]) =&gt;\n      val sorted = list.sorted\n\n      // \u6027\u8cea1\uff1a\u30b5\u30a4\u30ba\u306f\u5909\u308f\u3089\u306a\u3044\n      sorted.size shouldBe list.size\n\n      // \u6027\u8cea2\uff1a\u3059\u3079\u3066\u306e\u8981\u7d20\u304c\u542b\u307e\u308c\u308b\n      sorted.toSet shouldBe list.toSet\n\n      // \u6027\u8cea3\uff1a\u96a3\u63a5\u3059\u308b\u8981\u7d20\u306f\u9806\u5e8f\u304c\u6b63\u3057\u3044\n      sorted.sliding(2).foreach {\n        case List(a, b) =&gt; a should be &lt;= b\n        case _ =&gt; // \u5358\u4e00\u8981\u7d20\u306e\u5834\u5408\u306f\u30b9\u30ad\u30c3\u30d7\n      }\n    }\n  }\n\n  // \u30ab\u30b9\u30bf\u30e0\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n  test(\"\u30e6\u30fc\u30b6\u30fc\u767b\u9332\u306e\u691c\u8a3c\") {\n    case class User(name: String, age: Int, email: String)\n\n    // \u30e6\u30fc\u30b6\u30fc\u7528\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n    val userGen: Gen[User] = for\n      name &lt;- Gen.alphaStr.suchThat(_.nonEmpty)\n      age &lt;- Gen.choose(0, 120)\n      domain &lt;- Gen.oneOf(\"gmail.com\", \"yahoo.com\", \"example.com\")\n      email = s\"$name@$domain\"\n    yield User(name, age, email)\n\n    forAll(userGen) { user =&gt;\n      user.name should not be empty\n      user.age should be &gt;= 0\n      user.age should be &lt;= 120\n      user.email should include(\"@\")\n      user.email should endWith(\".com\")\n    }\n  }\n\n  // \u95a2\u6570\u306e\u6027\u8cea\u30c6\u30b9\u30c8\n  test(\"\u6587\u5b57\u5217\u51e6\u7406\u95a2\u6570\u306e\u6027\u8cea\") {\n    def sanitize(input: String): String =\n      input.trim.toLowerCase.replaceAll(\"[^a-z0-9]\", \"\")\n\n    forAll { (s: String) =&gt;\n      val result = sanitize(s)\n\n      // \u6027\u8cea1\uff1a\u7d50\u679c\u306f\u5c0f\u6587\u5b57\u306e\u307f\n      result shouldBe result.toLowerCase\n\n      // \u6027\u8cea2\uff1a\u7a7a\u767d\u306a\u3057\n      result should not include \" \"\n\n      // \u6027\u8cea3\uff1a\u51aa\u7b49\u6027\uff082\u56de\u9069\u7528\u3057\u3066\u3082\u540c\u3058\uff09\n      sanitize(result) shouldBe result\n    }\n  }\n\n  // \u5883\u754c\u5024\u306e\u30c6\u30b9\u30c8\n  test(\"\u9664\u7b97\u95a2\u6570\u306e\u5883\u754c\u5024\") {\n    def safeDivide(a: Double, b: Double): Option[Double] =\n      if (b == 0) { None else Some(a / b)\n\n    val edgeCases = Table(\n      (\"a\", \"b\", \"expected\"),\n      (10.0, 2.0, Some(5.0)),\n      (0.0, 5.0, Some(0.0)),\n      (10.0, 0.0, None),\n      (Double.MaxValue, 1.0, Some(Double.MaxValue)),\n      (1.0, Double.MinValue, Some(1.0 / Double.MinValue))\n    )\n\n    forAll(edgeCases) { (a, b, expected) =&gt;\n      safeDivide(a, b) shouldBe expected\n    }\n  }\n</code></pre>"},{"location":"part9/chapter36/#_9","title":"\u7d71\u5408\u30c6\u30b9\u30c8","text":""},{"location":"part9/chapter36/#_10","title":"\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u542b\u3080\u30c6\u30b9\u30c8","text":"<pre><code>// IntegrationTest.scala\nimport org.scalatest.funsuite.AnyFunSuite\nimport org.scalatest.matchers.should.Matchers\nimport org.scalatest.BeforeAndAfterAll\nimport org.scalatest.BeforeAndAfterEach\n\n// \u4eee\u60f3\u7684\u306a\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u63a5\u7d9a\ntrait Database {\n  def connect(): Unit\n  def disconnect(): Unit\n  def execute(sql: String): Unit\n  def query[T](sql: String): List[T]\n}\n\n// \u30ea\u30dd\u30b8\u30c8\u30ea\u5b9f\u88c5\nclass UserRepositoryImpl(db: Database) extends UserRepository {\n  def findById(id: String): Option[User] = {\n    db.query[User](s\"SELECT * FROM users WHERE id = '$id'\").headOption\n  }\n\n  def save(user: User): Unit = {\n    db.execute(\n      s\"INSERT INTO users (id, name, email) VALUES ('${user.id}', '${user.name}', '${user.email}')\"\n    )\n  }\n}\n\nclass IntegrationTest extends AnyFunSuite \n  with Matchers \n  with BeforeAndAfterAll\n  with BeforeAndAfterEach {\n\n  // \u30c6\u30b9\u30c8\u7528\u306e\u30a4\u30f3\u30e1\u30e2\u30ea\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\n  class InMemoryDatabase extends Database {\n    private var users: List[User] = List.empty\n    private var connected = false\n\n    def connect(): Unit = connected = true\n    def disconnect(): Unit = connected = false\n\n    def execute(sql: String): Unit = {\n      if (sql.startsWith(\"INSERT INTO users\")) {\n        // \u7c21\u6613\u7684\u306a\u30d1\u30fc\u30b9\uff08\u5b9f\u969b\u306f\u3082\u3063\u3068\u9069\u5207\u306b\uff09\n        val pattern = \"\"\"VALUES \\('([^']+)', '([^']+)', '([^']+)'\\)\"\"\".r\n        sql match {\n          case pattern(id, name, email) =&gt;\n            users = users :+ User(id, name, email)\n          case _ =&gt;\n            throw new Exception(\"Invalid SQL\")\n        }\n      }\n    }\n\n    def query[T](sql: String): List[T] = {\n      if (sql.contains(\"WHERE id =\")) {\n        val idPattern = \"\"\"WHERE id = '([^']+)'\"\"\".r\n        sql match {\n          case idPattern(id) =&gt;\n            users.filter(_.id == id).asInstanceOf[List[T]]\n          case _ =&gt; List.empty\n        }\n      } else {\n        users.asInstanceOf[List[T]]\n      }\n    }\n\n    def clearData(): Unit = users = List.empty\n  }\n\n  var database: InMemoryDatabase = _\n  var repository: UserRepository = _\n\n  override def beforeAll(): Unit =\n    database = new InMemoryDatabase\n    database.connect()\n\n  override def afterAll(): Unit =\n    database.disconnect()\n\n  override def beforeEach(): Unit =\n    database.clearData()\n    repository = new UserRepositoryImpl(database)\n\n  test(\"\u30e6\u30fc\u30b6\u30fc\u306e\u4fdd\u5b58\u3068\u53d6\u5f97\") {\n    // Given\n    val user = User(\"123\", \"\u592a\u90ce\", \"taro@example.com\")\n\n    // When\n    repository.save(user)\n    val retrieved = repository.findById(\"123\")\n\n    // Then\n    retrieved shouldBe Some(user)\n  }\n\n  test(\"\u5b58\u5728\u3057\u306a\u3044\u30e6\u30fc\u30b6\u30fc\u306e\u691c\u7d22\") {\n    // When\n    val result = repository.findById(\"999\")\n\n    // Then\n    result shouldBe None\n  }\n\n  test(\"\u8907\u6570\u30e6\u30fc\u30b6\u30fc\u306e\u7ba1\u7406\") {\n    // Given\n    val users = List(\n      User(\"1\", \"\u592a\u90ce\", \"taro@example.com\"),\n      User(\"2\", \"\u82b1\u5b50\", \"hanako@example.com\"),\n      User(\"3\", \"\u6b21\u90ce\", \"jiro@example.com\")\n    )\n\n    // When\n    users.foreach(repository.save)\n\n    // Then\n    repository.findById(\"1\") shouldBe Some(users(0))\n    repository.findById(\"2\") shouldBe Some(users(1))\n    repository.findById(\"3\") shouldBe Some(users(2))\n  }\n</code></pre>"},{"location":"part9/chapter36/#tdd","title":"\u30c6\u30b9\u30c8\u99c6\u52d5\u958b\u767a\uff08TDD\uff09","text":""},{"location":"part9/chapter36/#tdd_1","title":"TDD\u306e\u5b9f\u8df5\u4f8b","text":"<pre><code>// TDDExample.scala\nimport org.scalatest.funsuite.AnyFunSuite\nimport org.scalatest.matchers.should.Matchers\n\n// \u30b9\u30c6\u30c3\u30d71\uff1a\u5931\u6557\u3059\u308b\u30c6\u30b9\u30c8\u3092\u66f8\u304f\nclass ShoppingCartTest extends AnyFunSuite with Matchers {\n\n  test(\"\u7a7a\u306e\u30ab\u30fc\u30c8\u306e\u5408\u8a08\u306f0\") {\n    val cart = new ShoppingCart\n    cart.total shouldBe 0.0\n  }\n\n  test(\"\u5546\u54c1\u3092\u8ffd\u52a0\u3067\u304d\u308b\") {\n    val cart = new ShoppingCart\n    cart.addItem(\"\u30ea\u30f3\u30b4\", 100.0, 2)\n\n    cart.itemCount shouldBe 1\n    cart.total shouldBe 200.0\n  }\n\n  test(\"\u540c\u3058\u5546\u54c1\u3092\u8ffd\u52a0\u3059\u308b\u3068\u6570\u91cf\u304c\u5897\u3048\u308b\") {\n    val cart = new ShoppingCart\n    cart.addItem(\"\u30ea\u30f3\u30b4\", 100.0, 2)\n    cart.addItem(\"\u30ea\u30f3\u30b4\", 100.0, 3)\n\n    cart.itemCount shouldBe 1\n    cart.getQuantity(\"\u30ea\u30f3\u30b4\") shouldBe 5\n    cart.total shouldBe 500.0\n  }\n\n  test(\"\u5546\u54c1\u3092\u524a\u9664\u3067\u304d\u308b\") {\n    val cart = new ShoppingCart\n    cart.addItem(\"\u30ea\u30f3\u30b4\", 100.0, 2)\n    cart.addItem(\"\u30d0\u30ca\u30ca\", 80.0, 3)\n\n    cart.removeItem(\"\u30ea\u30f3\u30b4\")\n\n    cart.itemCount shouldBe 1\n    cart.total shouldBe 240.0\n  }\n\n  test(\"\u5272\u5f15\u3092\u9069\u7528\u3067\u304d\u308b\") {\n    val cart = new ShoppingCart\n    cart.addItem(\"\u30ea\u30f3\u30b4\", 100.0, 5)\n    cart.applyDiscount(0.1) // 10%\u5272\u5f15\n\n    cart.total shouldBe 450.0\n  }\n\n  test(\"\u30af\u30fc\u30dd\u30f3\u30b3\u30fc\u30c9\u3092\u9069\u7528\u3067\u304d\u308b\") {\n    val cart = new ShoppingCart\n    cart.addItem(\"\u30ea\u30f3\u30b4\", 100.0, 3)\n\n    cart.applyCoupon(\"SAVE50\") shouldBe true\n    cart.total shouldBe 250.0\n\n    cart.applyCoupon(\"INVALID\") shouldBe false\n  }\n\n// \u30b9\u30c6\u30c3\u30d72\uff1a\u30c6\u30b9\u30c8\u3092\u901a\u3059\u305f\u3081\u306e\u5b9f\u88c5\ncase class CartItem(name: String, price: Double, quantity: Int)\n\nclass ShoppingCart {\n  private var items = Map[String, CartItem]()\n  private var discountRate = 0.0\n  private var couponDiscount = 0.0\n\n  private val validCoupons = Map(\n    \"SAVE50\" -&gt; 50.0,\n    \"SAVE100\" -&gt; 100.0\n  )\n\n  def addItem(name: String, price: Double, quantity: Int): Unit = {\n    items.get(name) match {\n      case Some(existing) =&gt;\n        items = items.updated(\n          name, \n          existing.copy(quantity = existing.quantity + quantity)\n        )\n      case None =&gt;\n        items = items + (name -&gt; CartItem(name, price, quantity))\n    }\n  }\n\n  def removeItem(name: String): Unit = {\n    items = items - name\n  }\n\n  def getQuantity(name: String): Int = {\n    items.get(name).map(_.quantity).getOrElse(0)\n  }\n\n  def itemCount: Int = items.size\n\n  def applyDiscount(rate: Double): Unit = {\n    discountRate = rate\n  }\n\n  def applyCoupon(code: String): Boolean = {\n    validCoupons.get(code) match {\n      case Some(discount) =&gt;\n        couponDiscount = discount\n        true\n      case None =&gt;\n        false\n    }\n  }\n\n  def total: Double = {\n    val subtotal = items.values.map(item =&gt; item.price * item.quantity).sum\n    val afterDiscount = subtotal * (1 - discountRate)\n    math.max(0, afterDiscount - couponDiscount)\n  }\n}\n\n// \u30b9\u30c6\u30c3\u30d73\uff1a\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\uff08\u3088\u308a\u826f\u3044\u8a2d\u8a08\u306b\uff09\nclass ImprovedShoppingCart:\n  import scala.collection.immutable.Map\n\n  private case class State(\n    items: Map[String, CartItem] = Map.empty,\n    discountRate: Double = 0.0,\n    couponDiscount: Double = 0.0\n  )\n\n  private var state = State()\n\n  // \u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u64cd\u4f5c\n  def addItem(name: String, price: Double, quantity: Int): ImprovedShoppingCart =\n    val newItems = state.items.get(name) match {\n      case Some(existing) =&gt;\n        state.items.updated(name, existing.copy(quantity = existing.quantity + quantity))\n      case None =&gt;\n        state.items + (name -&gt; CartItem(name, price, quantity))\n\n    state = state.copy(items = newItems)\n    this\n\n  // \u4ed6\u306e\u30e1\u30bd\u30c3\u30c9\u3082\u540c\u69d8\u306b\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0...\n</code></pre>"},{"location":"part9/chapter36/#e2e","title":"\u5b9f\u8df5\u4f8b\uff1aE2E\u30c6\u30b9\u30c8","text":"<pre><code>// E2ETest.scala\nimport org.scalatest.funsuite.AnyFunSuite\nimport org.scalatest.matchers.should.Matchers\nimport org.scalatest.BeforeAndAfterAll\n\n// Web\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\nclass WebApp {\n  private var users = Map[String, User]()\n  private var sessions = Map[String, String]() // sessionId -&gt; userId\n\n  def register(name: String, email: String, password: String): Either[String, String] = {\n    if (users.values.exists(_.email == email)) {\n      Left(\"\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u306f\u65e2\u306b\u4f7f\u7528\u3055\u308c\u3066\u3044\u307e\u3059\")\n    } else {\n      val userId = java.util.UUID.randomUUID().toString\n      users = users + (userId -&gt; User(userId, name, email))\n      Right(userId)\n    }\n  }\n\n  def login(email: String, password: String): Either[String, String] = {\n    users.values.find(_.email == email) match {\n      case Some(user) =&gt;\n        val sessionId = java.util.UUID.randomUUID().toString\n        sessions = sessions + (sessionId -&gt; user.id)\n        Right(sessionId)\n      case None =&gt;\n        Left(\"\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u307e\u305f\u306f\u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u6b63\u3057\u304f\u3042\u308a\u307e\u305b\u3093\")\n    }\n  }\n\n  def getProfile(sessionId: String): Either[String, User] = {\n    sessions.get(sessionId).flatMap(users.get) match {\n      case Some(user) =&gt; Right(user)\n      case None =&gt; Left(\"\u30ed\u30b0\u30a4\u30f3\u304c\u5fc5\u8981\u3067\u3059\")\n    }\n  }\n\n  def logout(sessionId: String): Unit = {\n    sessions = sessions - sessionId\n  }\n}\n\nclass E2ETest extends AnyFunSuite with Matchers with BeforeAndAfterAll {\n\n  var app: WebApp = _\n\n  override def beforeAll(): Unit = {\n    app = new WebApp\n  }\n\n  test(\"\u30e6\u30fc\u30b6\u30fc\u767b\u9332\u304b\u3089\u30ed\u30b0\u30a2\u30a6\u30c8\u307e\u3067\u306e\u4e00\u9023\u306e\u6d41\u308c\") {\n    // 1. \u30e6\u30fc\u30b6\u30fc\u767b\u9332\n    val registerResult = app.register(\"\u592a\u90ce\", \"taro@example.com\", \"password123\")\n    registerResult should be a Symbol(\"right\")\n\n    // 2. \u30ed\u30b0\u30a4\u30f3\n    val loginResult = app.login(\"taro@example.com\", \"password123\")\n    loginResult should be a Symbol(\"right\")\n\n    val sessionId = loginResult.getOrElse(\"\")\n\n    // 3. \u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u53d6\u5f97\n    val profileResult = app.getProfile(sessionId)\n    profileResult should be a Symbol(\"right\")\n\n    profileResult.map { user =&gt;\n      user.name shouldBe \"\u592a\u90ce\"\n      user.email shouldBe \"taro@example.com\"\n    }\n\n    // 4. \u30ed\u30b0\u30a2\u30a6\u30c8\n    app.logout(sessionId)\n\n    // 5. \u30ed\u30b0\u30a2\u30a6\u30c8\u5f8c\u306f\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u3044\n    val afterLogout = app.getProfile(sessionId)\n    afterLogout shouldBe Left(\"\u30ed\u30b0\u30a4\u30f3\u304c\u5fc5\u8981\u3067\u3059\")\n  }\n\n  test(\"\u91cd\u8907\u767b\u9332\u306e\u9632\u6b62\") {\n    // \u6700\u521d\u306e\u767b\u9332\n    app.register(\"\u82b1\u5b50\", \"hanako@example.com\", \"pass1\")\n\n    // \u540c\u3058\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3067\u518d\u767b\u9332\n    val duplicate = app.register(\"\u82b1\u5b502\", \"hanako@example.com\", \"pass2\")\n    duplicate shouldBe Left(\"\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u306f\u65e2\u306b\u4f7f\u7528\u3055\u308c\u3066\u3044\u307e\u3059\")\n  }\n\n  test(\"\u7121\u52b9\u306a\u30ed\u30b0\u30a4\u30f3\") {\n    val result = app.login(\"unknown@example.com\", \"wrongpass\")\n    result shouldBe Left(\"\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u307e\u305f\u306f\u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u6b63\u3057\u304f\u3042\u308a\u307e\u305b\u3093\")\n  }\n\n  test(\"\u8907\u6570\u30e6\u30fc\u30b6\u30fc\u306e\u4e26\u884c\u30bb\u30c3\u30b7\u30e7\u30f3\") {\n    // \u30e6\u30fc\u30b6\u30fc1\n    app.register(\"User1\", \"user1@example.com\", \"pass1\")\n    val session1 = app.login(\"user1@example.com\", \"pass1\").getOrElse(\"\")\n\n    // \u30e6\u30fc\u30b6\u30fc2\n    app.register(\"User2\", \"user2@example.com\", \"pass2\")\n    val session2 = app.login(\"user2@example.com\", \"pass2\").getOrElse(\"\")\n\n    // \u305d\u308c\u305e\u308c\u6b63\u3057\u3044\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u304c\u53d6\u5f97\u3067\u304d\u308b\n    app.getProfile(session1).map(_.name) shouldBe Right(\"User1\")\n    app.getProfile(session2).map(_.name) shouldBe Right(\"User2\")\n  }\n</code></pre>"},{"location":"part9/chapter36/#_11","title":"\u7df4\u7fd2\u3057\u3066\u307f\u3088\u3046\uff01","text":""},{"location":"part9/chapter36/#1","title":"\u7df4\u7fd21\uff1a\u96fb\u5353\u306e\u30c6\u30b9\u30c8","text":"<p>\u56db\u5247\u6f14\u7b97\u304c\u3067\u304d\u308b\u96fb\u5353\u30af\u30e9\u30b9\u306e\u30c6\u30b9\u30c8\u3092\u66f8\u3044\u3066\u304f\u3060\u3055\u3044\uff1a - \u57fa\u672c\u7684\u306a\u8a08\u7b97 - \u30a8\u30e9\u30fc\u30b1\u30fc\u30b9\uff08\u30bc\u30ed\u9664\u7b97\u306a\u3069\uff09 - \u9023\u7d9a\u8a08\u7b97</p>"},{"location":"part9/chapter36/#2todo","title":"\u7df4\u7fd22\uff1aTODO\u30ea\u30b9\u30c8\u306e\u30c6\u30b9\u30c8","text":"<p>TODO\u30ea\u30b9\u30c8\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0\u306e\u30c6\u30b9\u30c8\u3092\u66f8\u3044\u3066\u304f\u3060\u3055\u3044\uff1a - \u30bf\u30b9\u30af\u306e\u8ffd\u52a0\u30fb\u524a\u9664 - \u5b8c\u4e86\u72b6\u614b\u306e\u7ba1\u7406 - \u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u6a5f\u80fd</p>"},{"location":"part9/chapter36/#3api","title":"\u7df4\u7fd23\uff1aAPI\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u30c6\u30b9\u30c8","text":"<p>\u5916\u90e8API\u3092\u547c\u3073\u51fa\u3059\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u30c6\u30b9\u30c8\u3092\u66f8\u3044\u3066\u304f\u3060\u3055\u3044\uff1a - \u6210\u529f\u30ec\u30b9\u30dd\u30f3\u30b9 - \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0 - \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u51e6\u7406</p>"},{"location":"part9/chapter36/#_12","title":"\u3053\u306e\u7ae0\u306e\u307e\u3068\u3081","text":"<p>\u30c6\u30b9\u30c8\u306e\u91cd\u8981\u6027\u3068\u66f8\u304d\u65b9\u3092\u5b66\u3073\u307e\u3057\u305f\uff01</p>"},{"location":"part9/chapter36/#_13","title":"\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3053\u3068","text":"<p>\u2705 \u30c6\u30b9\u30c8\u306e\u57fa\u672c - \u30c6\u30b9\u30c8\u306e\u69cb\u9020 - \u30a2\u30b5\u30fc\u30b7\u30e7\u30f3 - \u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3068\u30c6\u30a3\u30a2\u30c0\u30a6\u30f3</p> <p>\u2705 \u30c6\u30b9\u30c8\u6280\u6cd5 - \u30e2\u30c3\u30af\u3068\u30b9\u30bf\u30d6 - \u975e\u540c\u671f\u30c6\u30b9\u30c8 - \u30d7\u30ed\u30d1\u30c6\u30a3\u30d9\u30fc\u30b9\u30c6\u30b9\u30c8</p> <p>\u2705 \u30c6\u30b9\u30c8\u6226\u7565 - \u5358\u4f53\u30c6\u30b9\u30c8 - \u7d71\u5408\u30c6\u30b9\u30c8 - E2E\u30c6\u30b9\u30c8</p> <p>\u2705 TDD - Red-Green-Refactor - \u30c6\u30b9\u30c8\u30d5\u30a1\u30fc\u30b9\u30c8 - \u7d99\u7d9a\u7684\u306a\u6539\u5584</p>"},{"location":"part9/chapter36/#_14","title":"\u30c6\u30b9\u30c8\u3092\u66f8\u304f\u30b3\u30c4","text":"<ol> <li> <p>\u5206\u304b\u308a\u3084\u3059\u304f\u66f8\u304f</p> <ul> <li>\u660e\u78ba\u306a\u30c6\u30b9\u30c8\u540d</li> <li>AAA \u30d1\u30bf\u30fc\u30f3</li> <li>1\u30c6\u30b9\u30c81\u691c\u8a3c</li> </ul> </li> <li> <p>\u7db2\u7f85\u7684\u306b\u66f8\u304f</p> <ul> <li>\u6b63\u5e38\u30b1\u30fc\u30b9</li> <li>\u7570\u5e38\u30b1\u30fc\u30b9</li> <li>\u5883\u754c\u5024</li> </ul> </li> <li> <p>\u4fdd\u5b88\u3057\u3084\u3059\u304f\u66f8\u304f</p> <ul> <li>DRY\u306e\u539f\u5247</li> <li>\u30c6\u30b9\u30c8\u306e\u72ec\u7acb\u6027</li> <li>\u9069\u5207\u306a\u7c92\u5ea6</li> </ul> </li> </ol>"},{"location":"part9/chapter36/#_15","title":"\u6b21\u306e\u7ae0\u3067\u306f...","text":"<p>\u30d3\u30eb\u30c9\u30c4\u30fc\u30eb\u3068\u4f9d\u5b58\u6027\u7ba1\u7406\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3059\u3002\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u69cb\u7bc9\u3068\u7ba1\u7406\u306e\u65b9\u6cd5\u3092\u7fd2\u5f97\u3057\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part9/chapter36/#_16","title":"\u6700\u5f8c\u306b","text":"<p>\u30c6\u30b9\u30c8\u306f\u300c\u54c1\u8cea\u306e\u756a\u4eba\u300d\u3067\u3059\u3002\u6599\u7406\u4eba\u304c\u5473\u898b\u3092\u3059\u308b\u3088\u3046\u306b\u3001\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u306f\u30c6\u30b9\u30c8\u3067\u30b3\u30fc\u30c9\u306e\u52d5\u4f5c\u3092\u78ba\u8a8d\u3059\u308b\u3002\u826f\u3044\u30c6\u30b9\u30c8\u306f\u3001\u30d0\u30b0\u3092\u65e9\u671f\u306b\u767a\u898b\u3057\u3001\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3092\u5b89\u5168\u306b\u3057\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u5f79\u5272\u3082\u679c\u305f\u3057\u307e\u3059\u3002\u30c6\u30b9\u30c8\u3092\u66f8\u304f\u7fd2\u6163\u306f\u3001\u30d7\u30ed\u306e\u30d7\u30ed\u30b0\u30e9\u30de\u30fc\u3078\u306e\u7b2c\u4e00\u6b69\u3067\u3059\uff01</p>"},{"location":"part9/chapter37/","title":"\u7b2c37\u7ae0 \u30d3\u30eb\u30c9\u30c4\u30fc\u30eb\u3068\u4f9d\u5b58\u6027\u7ba1\u7406","text":""},{"location":"part9/chapter37/#_1","title":"\u306f\u3058\u3081\u306b","text":"<p>\u5bb6\u3092\u5efa\u3066\u308b\u3068\u304d\u3001\u8a2d\u8a08\u56f3\u304c\u3042\u308a\u3001\u5fc5\u8981\u306a\u6750\u6599\u306e\u30ea\u30b9\u30c8\u304c\u3042\u308a\u3001\u7d44\u307f\u7acb\u3066\u65b9\u306e\u624b\u9806\u304c\u3042\u308a\u307e\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3082\u540c\u3058\u3067\u3059\u3002\u3069\u3093\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u5fc5\u8981\u304b\u3001\u3069\u3046\u3084\u3063\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u304b\u3001\u3069\u3046\u3084\u3063\u3066\u914d\u5e03\u3059\u308b\u304b\u3002</p> <p>\u3053\u306e\u7ae0\u3067\u306f\u3001Scala\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u300c\u5efa\u7bc9\u7ba1\u7406\u300d\u3092\u62c5\u3046\u30d3\u30eb\u30c9\u30c4\u30fc\u30eb\u3068\u4f9d\u5b58\u6027\u7ba1\u7406\u306b\u3064\u3044\u3066\u5b66\u3073\u307e\u3057\u3087\u3046\uff01</p>"},{"location":"part9/chapter37/#sbt","title":"sbt\u306e\u57fa\u790e","text":""},{"location":"part9/chapter37/#_2","title":"\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u69cb\u9020","text":"<pre><code>// \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\nmy-scala-project/\n\u251c\u2500\u2500 build.sbt              # \u30d3\u30eb\u30c9\u5b9a\u7fa9\n\u251c\u2500\u2500 project/\n\u2502   \u251c\u2500\u2500 build.properties   # sbt\u30d0\u30fc\u30b8\u30e7\u30f3\n\u2502   \u2514\u2500\u2500 plugins.sbt        # \u30d7\u30e9\u30b0\u30a4\u30f3\u8a2d\u5b9a\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main/\n\u2502   \u2502   \u251c\u2500\u2500 scala/        # \u30e1\u30a4\u30f3\u306eScala\u30b3\u30fc\u30c9\n\u2502   \u2502   \u2514\u2500\u2500 resources/    # \u30ea\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\n\u2502   \u2514\u2500\u2500 test/\n\u2502       \u251c\u2500\u2500 scala/        # \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\n\u2502       \u2514\u2500\u2500 resources/    # \u30c6\u30b9\u30c8\u30ea\u30bd\u30fc\u30b9\n\u251c\u2500\u2500 target/               # \u30d3\u30eb\u30c9\u6210\u679c\u7269\uff08\u81ea\u52d5\u751f\u6210\uff09\n\u2514\u2500\u2500 .gitignore           # Git\u9664\u5916\u8a2d\u5b9a\n\n// build.sbt \u306e\u57fa\u672c\nThisBuild / scalaVersion := \"3.3.1\"\nThisBuild / version      := \"0.1.0\"\nThisBuild / organization := \"com.example\"\n\nlazy val root = (project in file(\".\"))\n  .settings(\n    name := \"my-scala-project\",\n\n    // \u4f9d\u5b58\u30e9\u30a4\u30d6\u30e9\u30ea\n    libraryDependencies ++= Seq(\n      \"org.typelevel\" %% \"cats-core\" % \"2.10.0\",\n      \"com.typesafe.play\" %% \"play-json\" % \"2.10.1\",\n      \"org.scalatest\" %% \"scalatest\" % \"3.2.17\" % Test\n    ),\n\n    // \u30b3\u30f3\u30d1\u30a4\u30e9\u30aa\u30d7\u30b7\u30e7\u30f3\n    scalacOptions ++= Seq(\n      \"-deprecation\",\n      \"-feature\",\n      \"-unchecked\",\n      \"-Xfatal-warnings\"\n    )\n  )\n\n// project/build.properties\nsbt.version=1.9.7\n\n// project/plugins.sbt\naddSbtPlugin(\"com.github.sbt\" % \"sbt-native-packager\" % \"1.9.16\")\naddSbtPlugin(\"org.scalameta\" % \"sbt-scalafmt\" % \"2.5.2\")\n</code></pre>"},{"location":"part9/chapter37/#_3","title":"\u57fa\u672c\u7684\u306a\u30bf\u30b9\u30af","text":"<pre><code>// BasicSbtTasks.scala\n// sbt\u30b3\u30f3\u30bd\u30fc\u30eb\u3067\u306e\u64cd\u4f5c\n\n// \u30b3\u30f3\u30d1\u30a4\u30eb\n&gt; compile\n\n// \u30c6\u30b9\u30c8\u5b9f\u884c\n&gt; test\n\n// \u7279\u5b9a\u306e\u30c6\u30b9\u30c8\u306e\u307f\u5b9f\u884c\n&gt; testOnly com.example.MyClassTest\n\n// \u7d99\u7d9a\u7684\u306a\u30b3\u30f3\u30d1\u30a4\u30eb\uff08\u30d5\u30a1\u30a4\u30eb\u5909\u66f4\u3092\u76e3\u8996\uff09\n&gt; ~compile\n\n// REPL\u8d77\u52d5\n&gt; console\nscala&gt; import com.example._\nscala&gt; val result = MyClass.doSomething()\n\n// \u5b9f\u884c\n&gt; run\n&gt; run arg1 arg2  // \u5f15\u6570\u4ed8\u304d\n\n// \u30af\u30ea\u30fc\u30f3\n&gt; clean\n\n// \u30d1\u30c3\u30b1\u30fc\u30b8\u30f3\u30b0\n&gt; package       // JAR\u30d5\u30a1\u30a4\u30eb\u4f5c\u6210\n&gt; packageBin    // \u30d0\u30a4\u30ca\u30eaJAR\n&gt; packageDoc    // JavadocJAR\n&gt; packageSrc    // \u30bd\u30fc\u30b9JAR\n\n// \u4f9d\u5b58\u95a2\u4fc2\u306e\u78ba\u8a8d\n&gt; dependencyTree\n&gt; evicted       // \u7af6\u5408\u3057\u3066\u9664\u5916\u3055\u308c\u305f\u4f9d\u5b58\u95a2\u4fc2\n\n// \u30bf\u30b9\u30af\u306e\u8aac\u660e\u3092\u898b\u308b\n&gt; help compile\n&gt; tasks         // \u5229\u7528\u53ef\u80fd\u306a\u30bf\u30b9\u30af\u4e00\u89a7\n</code></pre>"},{"location":"part9/chapter37/#_4","title":"\u4f9d\u5b58\u6027\u7ba1\u7406","text":""},{"location":"part9/chapter37/#_5","title":"\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8ffd\u52a0\u3068\u7ba1\u7406","text":"<pre><code>// DependencyManagement.scala\n// build.sbt\n\nlazy val versions = new {\n  val scala = \"3.3.1\"\n  val akka = \"2.8.5\"\n  val akkaHttp = \"10.5.3\"\n  val circe = \"0.14.6\"\n  val scalaTest = \"3.2.17\"\n  val logback = \"1.4.11\"\n}\n\nlazy val dependencies = new {\n  // Akka\n  val akkaActor = \"com.typesafe.akka\" %% \"akka-actor-typed\" % versions.akka\n  val akkaStream = \"com.typesafe.akka\" %% \"akka-stream\" % versions.akka\n  val akkaHttp = \"com.typesafe.akka\" %% \"akka-http\" % versions.akkaHttp\n\n  // JSON\u51e6\u7406\n  val circeCore = \"io.circe\" %% \"circe-core\" % versions.circe\n  val circeGeneric = \"io.circe\" %% \"circe-generic\" % versions.circe\n  val circeParser = \"io.circe\" %% \"circe-parser\" % versions.circe\n\n  // \u30ed\u30ae\u30f3\u30b0\n  val slf4j = \"org.slf4j\" % \"slf4j-api\" % \"2.0.9\"\n  val logback = \"ch.qos.logback\" % \"logback-classic\" % versions.logback\n\n  // \u30c6\u30b9\u30c8\n  val scalaTest = \"org.scalatest\" %% \"scalatest\" % versions.scalaTest % Test\n  val akkaTestkit = \"com.typesafe.akka\" %% \"akka-actor-testkit-typed\" % versions.akka % Test\n}\n\nlazy val commonSettings = Seq(\n  scalaVersion := versions.scala,\n\n  // \u30ea\u30be\u30eb\u30d0\u30fc\uff08\u30ab\u30b9\u30bf\u30e0\u30ea\u30dd\u30b8\u30c8\u30ea\uff09\n  resolvers ++= Seq(\n    \"Sonatype OSS Snapshots\" at \"https://oss.sonatype.org/content/repositories/snapshots\",\n    \"Typesafe Repository\" at \"https://repo.typesafe.com/typesafe/releases/\"\n  ),\n\n  // \u9664\u5916\u8a2d\u5b9a\n  excludeDependencies ++= Seq(\n    ExclusionRule(\"org.slf4j\", \"slf4j-log4j12\"),\n    ExclusionRule(\"log4j\", \"log4j\")\n  )\n)\n\n// \u30de\u30eb\u30c1\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u69cb\u6210\nlazy val root = (project in file(\".\"))\n  .aggregate(core, web, cli)\n  .settings(\n    name := \"my-app\",\n    publish / skip := true\n  )\n\nlazy val core = (project in file(\"core\"))\n  .settings(commonSettings)\n  .settings(\n    name := \"my-app-core\",\n    libraryDependencies ++= Seq(\n      dependencies.circeCore,\n      dependencies.circeGeneric,\n      dependencies.slf4j,\n      dependencies.scalaTest\n    )\n  )\n\nlazy val web = (project in file(\"web\"))\n  .dependsOn(core)\n  .settings(commonSettings)\n  .settings(\n    name := \"my-app-web\",\n    libraryDependencies ++= Seq(\n      dependencies.akkaHttp,\n      dependencies.akkaStream,\n      dependencies.circeParser,\n      dependencies.logback\n    )\n  )\n\nlazy val cli = (project in file(\"cli\"))\n  .dependsOn(core)\n  .settings(commonSettings)\n  .settings(\n    name := \"my-app-cli\",\n    libraryDependencies ++= Seq(\n      \"com.github.scopt\" %% \"scopt\" % \"4.1.0\",\n      dependencies.logback\n    )\n  )\n</code></pre>"},{"location":"part9/chapter37/#_6","title":"\u4f9d\u5b58\u6027\u306e\u7af6\u5408\u89e3\u6c7a","text":"<pre><code>// ConflictResolution.scala\n// build.sbt\n\n// \u4f9d\u5b58\u6027\u306e\u7af6\u5408\u3092\u89e3\u6c7a\u3059\u308b\u65b9\u6cd5\n\n// 1. \u660e\u793a\u7684\u306a\u30d0\u30fc\u30b8\u30e7\u30f3\u6307\u5b9a\nlibraryDependencies ++= Seq(\n  \"com.fasterxml.jackson.core\" % \"jackson-databind\" % \"2.15.3\",\n  // \u4ed6\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u53e4\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u8981\u6c42\u3057\u3066\u3082\u3001\u3053\u308c\u3092\u4f7f\u3046\n)\n\n// 2. force \u3092\u4f7f\u3063\u305f\u5f37\u5236\nlibraryDependencies ++= Seq(\n  \"org.scala-lang.modules\" %% \"scala-xml\" % \"2.2.0\" force()\n)\n\n// 3. dependencyOverrides \u3092\u4f7f\u3063\u305f\u4e0a\u66f8\u304d\ndependencyOverrides ++= Seq(\n  \"org.scala-lang.modules\" %% \"scala-xml\" % \"2.2.0\",\n  \"com.google.guava\" % \"guava\" % \"32.1.3-jre\"\n)\n\n// 4. \u9664\u5916\u30eb\u30fc\u30eb\nlibraryDependencies ++= Seq(\n  (\"com.example\" %% \"some-library\" % \"1.0.0\")\n    .exclude(\"org.slf4j\", \"slf4j-log4j12\")\n    .exclude(\"commons-logging\", \"commons-logging\")\n)\n\n// 5. \u7af6\u5408\u6226\u7565\u306e\u8a2d\u5b9a\nThisBuild / conflictManager := ConflictManager.latestRevision\n\n// 6. \u30ab\u30b9\u30bf\u30e0\u7af6\u5408\u89e3\u6c7a\nconflictManager := {\n  case (\"com.google.guava\", \"guava\") =&gt; ConflictManager.latestRevision\n  case (\"org.scala-lang.modules\", _) =&gt; ConflictManager.latestRevision\n  case _ =&gt; ConflictManager.default\n}\n</code></pre>"},{"location":"part9/chapter37/#_7","title":"\u30ab\u30b9\u30bf\u30e0\u30bf\u30b9\u30af\u3068\u30d7\u30e9\u30b0\u30a4\u30f3","text":""},{"location":"part9/chapter37/#_8","title":"\u30ab\u30b9\u30bf\u30e0\u30bf\u30b9\u30af\u306e\u4f5c\u6210","text":"<pre><code>// CustomTasks.scala\n// build.sbt\n\nimport sbt._\nimport sbt.Keys._\n\n// \u30b7\u30f3\u30d7\u30eb\u306a\u30bf\u30b9\u30af\nlazy val hello = taskKey[Unit](\"Prints 'Hello, World!'\")\n\nhello := {\n  println(\"Hello, World!\")\n}\n\n// \u4ed6\u306e\u30bf\u30b9\u30af\u306b\u4f9d\u5b58\u3059\u308b\u30bf\u30b9\u30af\nlazy val packageAndRun = taskKey[Unit](\"Package and run the application\")\n\npackageAndRun := {\n  val _ = (Compile / packageBin).value\n  (Compile / run).toTask(\"\").value\n}\n\n// \u5165\u529b\u3092\u53d7\u3051\u53d6\u308b\u30bf\u30b9\u30af\nlazy val greet = inputKey[Unit](\"Greet someone\")\n\ngreet := {\n  import complete.DefaultParsers._\n  val name = spaceDelimited(\"&lt;name&gt;\").parsed.headOption.getOrElse(\"World\")\n  println(s\"Hello, $name!\")\n}\n\n// \u30d5\u30a1\u30a4\u30eb\u751f\u6210\u30bf\u30b9\u30af\nlazy val generateVersion = taskKey[File](\"Generate version file\")\n\ngenerateVersion := {\n  val file = (Compile / sourceManaged).value / \"Version.scala\"\n  val content = \n    s\"\"\"package com.example\n       |\n       |object Version {\n       |  val version = \"${version.value}\"\n       |  val buildTime = \"${java.time.Instant.now()}\"\n       |  val gitCommit = \"${git.gitHeadCommit.value.getOrElse(\"unknown\")}\"\n       |}\n       |\"\"\".stripMargin\n\n  IO.write(file, content)\n  file\n}\n\n// \u30bd\u30fc\u30b9\u751f\u6210\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u306b\u8ffd\u52a0\nCompile / sourceGenerators += generateVersion.taskValue\n\n// \u74b0\u5883\u3054\u3068\u306e\u8a2d\u5b9a\nlazy val deployEnvironment = settingKey[String](\"Deployment environment\")\n\ndeployEnvironment := sys.env.getOrElse(\"DEPLOY_ENV\", \"development\")\n\nlazy val deploy = taskKey[Unit](\"Deploy the application\")\n\ndeploy := {\n  val env = deployEnvironment.value\n  val jar = (Compile / packageBin).value\n\n  println(s\"Deploying to $env environment...\")\n  env match {\n    case \"production\" =&gt;\n      // \u672c\u756a\u74b0\u5883\u3078\u306e\u30c7\u30d7\u30ed\u30a4\n      println(s\"Uploading ${jar.getName} to production server...\")\n    case \"staging\" =&gt;\n      // \u30b9\u30c6\u30fc\u30b8\u30f3\u30b0\u74b0\u5883\u3078\u306e\u30c7\u30d7\u30ed\u30a4\n      println(s\"Uploading ${jar.getName} to staging server...\")\n    case _ =&gt;\n      // \u958b\u767a\u74b0\u5883\n      println(s\"Copying ${jar.getName} to local directory...\")\n  }\n}\n</code></pre>"},{"location":"part9/chapter37/#_9","title":"\u4fbf\u5229\u306a\u30d7\u30e9\u30b0\u30a4\u30f3","text":"<pre><code>// UsefulPlugins.scala\n// project/plugins.sbt\n\n// \u30b3\u30fc\u30c9\u30d5\u30a9\u30fc\u30de\u30c3\u30bf\u30fc\naddSbtPlugin(\"org.scalameta\" % \"sbt-scalafmt\" % \"2.5.2\")\n\n// \u30cd\u30a4\u30c6\u30a3\u30d6\u30d1\u30c3\u30b1\u30fc\u30b8\u30e3\u30fc\naddSbtPlugin(\"com.github.sbt\" % \"sbt-native-packager\" % \"1.9.16\")\n\n// \u30ea\u30ea\u30fc\u30b9\u7ba1\u7406\naddSbtPlugin(\"com.github.sbt\" % \"sbt-release\" % \"1.1.0\")\n\n// \u4f9d\u5b58\u95a2\u4fc2\u306e\u66f4\u65b0\u30c1\u30a7\u30c3\u30af\naddSbtPlugin(\"com.timushev.sbt\" % \"sbt-updates\" % \"0.6.4\")\n\n// \u30ab\u30d0\u30ec\u30c3\u30b8\u6e2c\u5b9a\naddSbtPlugin(\"org.scoverage\" % \"sbt-scoverage\" % \"2.0.9\")\n\n// Assembly\uff08fat JAR\u4f5c\u6210\uff09\naddSbtPlugin(\"com.eed3si9n\" % \"sbt-assembly\" % \"2.1.5\")\n\n// build.sbt \u3067\u306e\u30d7\u30e9\u30b0\u30a4\u30f3\u8a2d\u5b9a\n\n// Scalafmt\nscalafmtOnCompile := true\n\n// Native Packager\nenablePlugins(JavaAppPackaging)\n\npackageName := \"my-app\"\nmaintainer := \"your-email@example.com\"\npackageDescription := \"My Scala Application\"\n\n// Docker\u8a2d\u5b9a\nenablePlugins(DockerPlugin)\nDocker / packageName := \"my-app\"\nDocker / version := version.value\ndockerBaseImage := \"openjdk:11-jre-slim\"\ndockerExposedPorts := Seq(8080)\n\n// Assembly\u8a2d\u5b9a\nassembly / assemblyMergeStrategy := {\n  case PathList(\"META-INF\", xs @ _*) =&gt; MergeStrategy.discard\n  case \"reference.conf\" =&gt; MergeStrategy.concat\n  case x =&gt; MergeStrategy.first\n}\n\nassembly / assemblyJarName := s\"${name.value}-${version.value}.jar\"\n\n// Coverage\u8a2d\u5b9a\ncoverageEnabled := true\ncoverageMinimumStmtTotal := 80\ncoverageFailOnMinimum := true\n\n// \u4f9d\u5b58\u95a2\u4fc2\u306e\u66f4\u65b0\u30c1\u30a7\u30c3\u30af\n// &gt; dependencyUpdates\n</code></pre>"},{"location":"part9/chapter37/#_10","title":"\u5b9f\u8df5\u7684\u306a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u8a2d\u5b9a","text":""},{"location":"part9/chapter37/#web","title":"Web\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d7\u30ed\u30b8\u30a7\u30af\u30c8","text":"<pre><code>// WebAppProject.scala\n// build.sbt\n\nimport com.typesafe.sbt.packager.docker._\n\nThisBuild / scalaVersion := \"3.3.1\"\nThisBuild / organization := \"com.example\"\n\nlazy val commonSettings = Seq(\n  scalacOptions ++= Seq(\n    \"-deprecation\",\n    \"-feature\",\n    \"-unchecked\",\n    \"-Ymacro-annotations\",\n    \"-Xfatal-warnings\"\n  ),\n\n  Test / fork := true,\n  Test / parallelExecution := false\n)\n\nlazy val root = (project in file(\".\"))\n  .aggregate(api, domain, infra)\n  .settings(\n    name := \"web-app\",\n    publish / skip := true\n  )\n\nlazy val domain = (project in file(\"modules/domain\"))\n  .settings(commonSettings)\n  .settings(\n    name := \"web-app-domain\",\n    libraryDependencies ++= Seq(\n      \"org.typelevel\" %% \"cats-core\" % \"2.10.0\",\n      \"org.typelevel\" %% \"cats-effect\" % \"3.5.2\",\n      \"org.scalatest\" %% \"scalatest\" % \"3.2.17\" % Test\n    )\n  )\n\nlazy val infra = (project in file(\"modules/infra\"))\n  .dependsOn(domain)\n  .settings(commonSettings)\n  .settings(\n    name := \"web-app-infra\",\n    libraryDependencies ++= Seq(\n      \"com.typesafe.slick\" %% \"slick\" % \"3.5.0-M4\",\n      \"org.postgresql\" % \"postgresql\" % \"42.6.0\",\n      \"com.zaxxer\" % \"HikariCP\" % \"5.1.0\",\n      \"org.flywaydb\" % \"flyway-core\" % \"9.22.3\"\n    )\n  )\n\nlazy val api = (project in file(\"modules/api\"))\n  .enablePlugins(JavaAppPackaging, DockerPlugin)\n  .dependsOn(domain, infra)\n  .settings(commonSettings)\n  .settings(\n    name := \"web-app-api\",\n\n    libraryDependencies ++= Seq(\n      \"com.typesafe.akka\" %% \"akka-http\" % \"10.5.3\",\n      \"de.heikoseeberger\" %% \"akka-http-circe\" % \"1.39.2\",\n      \"com.typesafe.akka\" %% \"akka-actor-typed\" % \"2.8.5\",\n      \"com.typesafe.akka\" %% \"akka-stream\" % \"2.8.5\",\n      \"ch.qos.logback\" % \"logback-classic\" % \"1.4.11\",\n      \"com.typesafe\" % \"config\" % \"1.4.3\",\n      \"com.typesafe.akka\" %% \"akka-http-testkit\" % \"10.5.3\" % Test\n    ),\n\n    // \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u8a2d\u5b9a\n    Compile / mainClass := Some(\"com.example.api.Main\"),\n\n    // Docker\u8a2d\u5b9a\n    Docker / packageName := \"web-app-api\",\n    Docker / version := version.value,\n    dockerBaseImage := \"eclipse-temurin:11-jre\",\n    dockerExposedPorts := Seq(8080),\n    dockerExposedVolumes := Seq(\"/opt/app/logs\"),\n\n    dockerCommands := dockerCommands.value.flatMap {\n      case cmd@Cmd(\"FROM\", _) =&gt; List(\n        cmd,\n        Cmd(\"RUN\", \"apt-get update &amp;&amp; apt-get install -y curl &amp;&amp; rm -rf /var/lib/apt/lists/*\"),\n        Cmd(\"HEALTHCHECK\", \"--interval=30s\", \"--timeout=3s\", \"--start-period=40s\", \"--retries=3\",\n          \"CMD\", \"curl -f http://localhost:8080/health || exit 1\")\n      )\n      case other =&gt; List(other)\n    },\n\n    // \u74b0\u5883\u5909\u6570\n    Universal / javaOptions ++= Seq(\n      \"-Dconfig.file=/opt/app/conf/application.conf\",\n      \"-Dlogback.configurationFile=/opt/app/conf/logback.xml\"\n    )\n  )\n\n// \u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u5225\u306e\u8a2d\u5b9a\nlazy val dev = (project in file(\"dev\"))\n  .dependsOn(api)\n  .settings(\n    libraryDependencies += \"org.testcontainers\" % \"postgresql\" % \"1.19.3\",\n    run / fork := true,\n    run / javaOptions ++= Seq(\n      \"-Dconfig.resource=application-dev.conf\",\n      \"-Xmx1g\"\n    )\n  )\n</code></pre>"},{"location":"part9/chapter37/#cicd","title":"CI/CD\u7d71\u5408","text":"<pre><code>// CICDIntegration.scala\n// build.sbt\n\n// GitHub Actions\u7528\u306e\u8a2d\u5b9a\nlazy val githubWorkflowGenerate = taskKey[Unit](\"Generate GitHub Actions workflow\")\n\ngithubWorkflowGenerate := {\n  val file = file(\".github/workflows/ci.yml\")\n  val content = \"\"\"name: CI\n    |\n    |on:\n    |  push:\n    |    branches: [ main, develop ]\n    |  pull_request:\n    |    branches: [ main ]\n    |\n    |jobs:\n    |  test:\n    |    runs-on: ubuntu-latest\n    |    steps:\n    |    - uses: actions/checkout@v3\n    |    - uses: actions/setup-java@v3\n    |      with:\n    |        distribution: 'temurin'\n    |        java-version: '11'\n    |    \n    |    - name: Cache SBT\n    |      uses: actions/cache@v3\n    |      with:\n    |        path: |\n    |          ~/.ivy2/cache\n    |          ~/.sbt\n    |        key: ${{ runner.os }}-sbt-${{ hashFiles('**/build.sbt') }}\n    |    \n    |    - name: Run tests\n    |      run: sbt clean coverage test coverageReport\n    |    \n    |    - name: Upload coverage\n    |      uses: codecov/codecov-action@v3\n    |      with:\n    |        file: ./target/scala-3.3.1/scoverage-report/scoverage.xml\n    |    \n    |    - name: Build Docker image\n    |      if: github.ref == 'refs/heads/main'\n    |      run: sbt docker:publishLocal\n    |\"\"\".stripMargin\n\n  IO.write(file, content)\n  println(s\"Generated $file\")\n}\n\n// \u30ea\u30ea\u30fc\u30b9\u30d7\u30ed\u30bb\u30b9\nimport sbtrelease.ReleaseStateTransformations._\n\nreleaseProcess := Seq[ReleaseStep](\n  checkSnapshotDependencies,\n  inquireVersions,\n  runClean,\n  runTest,\n  setReleaseVersion,\n  commitReleaseVersion,\n  tagRelease,\n  publishArtifacts,\n  setNextVersion,\n  commitNextVersion,\n  pushChanges\n)\n\n// \u516c\u958b\u8a2d\u5b9a\npublishTo := {\n  val nexus = \"https://oss.sonatype.org/\"\n  if (isSnapshot.value)\n    Some(\"snapshots\" at nexus + \"content/repositories/snapshots\")\n  } else {\n    Some(\"releases\" at nexus + \"service/local/staging/deploy/maven2\")\n}\n\npublishMavenStyle := true\nTest / publishArtifact := false\npomIncludeRepository := { _ =&gt; false }\n\npomExtra := (\n  &lt;url&gt;https://github.com/yourname/your-project&lt;/url&gt;\n  &lt;licenses&gt;\n    &lt;license&gt;\n      &lt;name&gt;Apache 2.0&lt;/name&gt;\n      &lt;url&gt;http://www.apache.org/licenses/LICENSE-2.0&lt;/url&gt;\n    &lt;/license&gt;\n  &lt;/licenses&gt;\n  &lt;scm&gt;\n    &lt;url&gt;git@github.com:yourname/your-project.git&lt;/url&gt;\n    &lt;connection&gt;scm:git:git@github.com:yourname/your-project.git&lt;/connection&gt;\n  &lt;/scm&gt;\n  &lt;developers&gt;\n    &lt;developer&gt;\n      &lt;id&gt;yourname&lt;/id&gt;\n      &lt;name&gt;Your Name&lt;/name&gt;\n      &lt;url&gt;https://github.com/yourname&lt;/url&gt;\n    &lt;/developer&gt;\n  &lt;/developers&gt;\n)\n</code></pre>"},{"location":"part9/chapter37/#_11","title":"\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8","text":"<pre><code>// ProjectTemplate.scala\n// src/main/g8/build.sbt (Giter8\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8)\n\n// \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5909\u6570\n// $name$ - \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u540d\n// $organization$ - \u7d44\u7e54\u540d\n// $scala_version$ - Scala\u30d0\u30fc\u30b8\u30e7\u30f3\n\nThisBuild / scalaVersion := \"$scala_version$\"\nThisBuild / version := \"0.1.0-SNAPSHOT\"\nThisBuild / organization := \"$organization$\"\n\nlazy val root = (project in file(\".\"))\n  .settings(\n    name := \"$name$\",\n\n    libraryDependencies ++= Seq(\n      // \u30ed\u30ae\u30f3\u30b0\n      \"ch.qos.logback\" % \"logback-classic\" % \"1.4.11\",\n      \"com.typesafe.scala-logging\" %% \"scala-logging\" % \"3.9.5\",\n\n      // \u8a2d\u5b9a\n      \"com.typesafe\" % \"config\" % \"1.4.3\",\n      \"com.github.pureconfig\" %% \"pureconfig-core\" % \"0.17.4\",\n\n      // \u30c6\u30b9\u30c8\n      \"org.scalatest\" %% \"scalatest\" % \"3.2.17\" % Test,\n      \"org.scalamock\" %% \"scalamock\" % \"5.2.0\" % Test\n    ),\n\n    // \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u8a2d\u5b9a\n    Compile / mainClass := Some(\"$organization$.$name;format=\"norm\"$.Main\"),\n\n    // \u30c6\u30b9\u30c8\u8a2d\u5b9a\n    Test / testOptions += Tests.Argument(TestFrameworks.ScalaTest, \"-oDF\"),\n\n    // \u30b3\u30f3\u30d1\u30a4\u30e9\u8a2d\u5b9a\n    scalacOptions ++= Seq(\n      \"-deprecation\",\n      \"-feature\",\n      \"-unchecked\",\n      \"-Xfatal-warnings\",\n      \"-language:higherKinds\",\n      \"-language:implicitConversions\"\n    )\n  )\n\n// \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u69cb\u9020\u3092\u751f\u6210\u3059\u308b\u30bf\u30b9\u30af\nlazy val initProject = taskKey[Unit](\"Initialize project structure\")\n\ninitProject := {\n  val dirs = Seq(\n    \"src/main/scala/$organization;format=\"packaged\"$/$name;format=\"norm\"$\",\n    \"src/main/resources\",\n    \"src/test/scala/$organization;format=\"packaged\"$/$name;format=\"norm\"$\",\n    \"src/test/resources\"\n  )\n\n  dirs.foreach { dir =&gt;\n    val path = file(dir)\n    if (!path.exists()) {\n      IO.createDirectory(path)\n      println(s\"Created: $dir\")\n    }\n  }\n\n  // Main.scala\u306e\u751f\u6210\n  val mainFile = file(\"src/main/scala/$organization;format=\"packaged\"$/$name;format=\"norm\"$/Main.scala\")\n  if (!mainFile.exists()) {\n    val mainContent = \"\"\"package $organization$.$name;format=\"norm\"$\n      |\n      |object Main extends App {\n      |  println(\"Hello, $name$!\")\n      |}\n      |\"\"\".stripMargin\n\n    IO.write(mainFile, mainContent)\n    println(s\"Created: ${mainFile.getPath}\")\n  }\n}\n</code></pre>"},{"location":"part9/chapter37/#_12","title":"\u7df4\u7fd2\u3057\u3066\u307f\u3088\u3046\uff01","text":""},{"location":"part9/chapter37/#1","title":"\u7df4\u7fd21\uff1a\u30de\u30eb\u30c1\u30e2\u30b8\u30e5\u30fc\u30eb\u30d7\u30ed\u30b8\u30a7\u30af\u30c8","text":"<p>\u4ee5\u4e0b\u306e\u69cb\u6210\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - core: \u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af - web: REST API - batch: \u30d0\u30c3\u30c1\u51e6\u7406</p>"},{"location":"part9/chapter37/#2","title":"\u7df4\u7fd22\uff1a\u30ab\u30b9\u30bf\u30e0\u30bf\u30b9\u30af","text":"<p>\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u7d71\u8a08\u60c5\u5831\u3092\u8868\u793a\u3059\u308b\u30bf\u30b9\u30af\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u884c\u6570 - \u30c6\u30b9\u30c8\u30ab\u30d0\u30ec\u30c3\u30b8 - \u4f9d\u5b58\u30e9\u30a4\u30d6\u30e9\u30ea\u6570</p>"},{"location":"part9/chapter37/#3cicd","title":"\u7df4\u7fd23\uff1aCI/CD\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3","text":"<p>GitHub Actions\u3067\u306eCI/CD\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u8a2d\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\uff1a - \u30c6\u30b9\u30c8\u5b9f\u884c - \u30ab\u30d0\u30ec\u30c3\u30b8\u30ec\u30dd\u30fc\u30c8 - Docker\u30a4\u30e1\u30fc\u30b8\u306e\u30d3\u30eb\u30c9</p>"},{"location":"part9/chapter37/#_13","title":"\u3053\u306e\u7ae0\u306e\u307e\u3068\u3081","text":"<p>\u30d3\u30eb\u30c9\u30c4\u30fc\u30eb\u3068\u4f9d\u5b58\u6027\u7ba1\u7406\u306e\u5b9f\u8df5\u7684\u306a\u77e5\u8b58\u3092\u7fd2\u5f97\u3057\u307e\u3057\u305f\uff01</p>"},{"location":"part9/chapter37/#_14","title":"\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3053\u3068","text":"<p>\u2705 sbt\u306e\u57fa\u672c - \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u69cb\u9020 - \u57fa\u672c\u7684\u306a\u30bf\u30b9\u30af - \u8a2d\u5b9a\u306e\u66f8\u304d\u65b9</p> <p>\u2705 \u4f9d\u5b58\u6027\u7ba1\u7406 - \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u8ffd\u52a0 - \u30d0\u30fc\u30b8\u30e7\u30f3\u7ba1\u7406 - \u7af6\u5408\u306e\u89e3\u6c7a</p> <p>\u2705 \u30ab\u30b9\u30bf\u30de\u30a4\u30ba - \u30ab\u30b9\u30bf\u30e0\u30bf\u30b9\u30af - \u30d7\u30e9\u30b0\u30a4\u30f3\u306e\u6d3b\u7528 - \u74b0\u5883\u5225\u8a2d\u5b9a</p> <p>\u2705 \u5b9f\u8df5\u7684\u306a\u8a2d\u5b9a - \u30de\u30eb\u30c1\u30d7\u30ed\u30b8\u30a7\u30af\u30c8 - Docker\u7d71\u5408 - CI/CD\u9023\u643a</p>"},{"location":"part9/chapter37/#_15","title":"\u30d3\u30eb\u30c9\u7ba1\u7406\u306e\u30b3\u30c4","text":"<ol> <li> <p>\u6574\u7406\u3055\u308c\u305f\u69cb\u9020</p> <ul> <li>\u660e\u78ba\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u5206\u5272</li> <li>\u5171\u901a\u8a2d\u5b9a\u306e\u62bd\u51fa</li> <li>\u9069\u5207\u306a\u547d\u540d</li> </ul> </li> <li> <p>\u518d\u73fe\u53ef\u80fd\u6027</p> <ul> <li>\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u56fa\u5b9a</li> <li>\u74b0\u5883\u306e\u660e\u793a</li> <li>\u30d3\u30eb\u30c9\u306e\u81ea\u52d5\u5316</li> </ul> </li> <li> <p>\u52b9\u7387\u7684\u306a\u958b\u767a</p> <ul> <li>\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30bf\u30eb\u30d3\u30eb\u30c9</li> <li>\u4e26\u5217\u5b9f\u884c</li> <li>\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u6d3b\u7528</li> </ul> </li> </ol>"},{"location":"part9/chapter37/#_16","title":"\u6700\u5f8c\u306b","text":"<p>\u30d3\u30eb\u30c9\u30c4\u30fc\u30eb\u306f\u300c\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u6307\u63ee\u8005\u300d\u3067\u3059\u3002\u305f\u304f\u3055\u3093\u306e\u697d\u5668\uff08\u30e9\u30a4\u30d6\u30e9\u30ea\uff09\u3092\u675f\u306d\u3001\u6b63\u3057\u3044\u9806\u5e8f\u3067\u6f14\u594f\u3055\u305b\u3001\u7f8e\u3057\u3044\u30cf\u30fc\u30e2\u30cb\u30fc\uff08\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\uff09\u3092\u4f5c\u308a\u51fa\u3059\u3002\u3053\u306e\u6307\u63ee\u8005\u306e\u4f7f\u3044\u65b9\u3092\u30de\u30b9\u30bf\u30fc\u3059\u308c\u3070\u3001\u3069\u3093\u306a\u5927\u898f\u6a21\u306a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3082\u52b9\u7387\u7684\u306b\u7ba1\u7406\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002</p> <p>\u3053\u308c\u3067\u3001\u521d\u5fc3\u8005\u5411\u3051Scala 3\u5165\u9580\u66f8\u306e\u516837\u7ae0\u304c\u5b8c\u6210\u3057\u307e\u3057\u305f\uff01\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u4e16\u754c\u3078\u306e\u7b2c\u4e00\u6b69\u304b\u3089\u3001\u5b9f\u8df5\u7684\u306a\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u7ba1\u7406\u307e\u3067\u3001\u5e45\u5e83\u304f\u5b66\u3093\u3067\u304d\u307e\u3057\u305f\u3002\u3053\u306e\u77e5\u8b58\u3092\u6d3b\u304b\u3057\u3066\u3001\u7d20\u6674\u3089\u3057\u3044Scala\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u3063\u3066\u304f\u3060\u3055\u3044\uff01</p>"}]}